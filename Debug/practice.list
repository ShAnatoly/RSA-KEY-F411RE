
practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a314  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  0800a4b8  0800a4b8  0000b4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae54  0800ae54  0000c2c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae54  0800ae54  0000be54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae5c  0800ae5c  0000c2c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae5c  0800ae5c  0000be5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae60  0800ae60  0000be60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0800ae64  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002480  200002c0  0800b124  0000c2c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002740  0800b124  0000c740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c2c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3aa  00000000  00000000  0000c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005018  00000000  00000000  0002969a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0002e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014fe  00000000  00000000  0002f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a456  00000000  00000000  00030b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1c2  00000000  00000000  0004afb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c03c  00000000  00000000  0006a176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f61b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e10  00000000  00000000  000f61f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000d08c  00000000  00000000  000fa008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00107094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a49c 	.word	0x0800a49c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	0800a49c 	.word	0x0800a49c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eac:	2400      	movs	r4, #0
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <MX_DMA_Init+0x44>)
 8000eb0:	9401      	str	r4, [sp, #4]
 8000eb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000eb4:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8000eb8:	6319      	str	r1, [r3, #48]	@ 0x30
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ec6:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000eca:	f000 fbe3 	bl	8001694 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ece:	2010      	movs	r0, #16
 8000ed0:	f000 fc1c 	bl	800170c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ed4:	4622      	mov	r2, r4
 8000ed6:	4621      	mov	r1, r4
 8000ed8:	2011      	movs	r0, #17
 8000eda:	f000 fbdb 	bl	8001694 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ede:	2011      	movs	r0, #17

}
 8000ee0:	b002      	add	sp, #8
 8000ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ee6:	f000 bc11 	b.w	800170c <HAL_NVIC_EnableIRQ>
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	2400      	movs	r4, #0
{
 8000ef4:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000efa:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f00:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f06:	4d29      	ldr	r5, [pc, #164]	@ (8000fac <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f08:	f042 0204 	orr.w	r2, r2, #4
 8000f0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f10:	f002 0204 	and.w	r2, r2, #4
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f18:	9401      	str	r4, [sp, #4]
 8000f1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f20:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f24:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000f28:	9201      	str	r2, [sp, #4]
 8000f2a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	9402      	str	r4, [sp, #8]
 8000f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f38:	f002 0201 	and.w	r2, r2, #1
 8000f3c:	9202      	str	r2, [sp, #8]
 8000f3e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	9403      	str	r4, [sp, #12]
 8000f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f44:	f042 0202 	orr.w	r2, r2, #2
 8000f48:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f52:	4622      	mov	r2, r4
 8000f54:	4628      	mov	r0, r5
 8000f56:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f5a:	f000 fef9 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f66:	a904      	add	r1, sp, #16
 8000f68:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8000f6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f000 fdf8 	bl	8001b64 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f74:	a904      	add	r1, sp, #16
 8000f76:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2220      	movs	r2, #32
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f000 fdee 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f88:	f44f 7040 	mov.w	r0, #768	@ 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	e9cd 0304 	strd	r0, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2203      	movs	r2, #3
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f94:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f98:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	e9cd 4206 	strd	r4, r2, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f000 fde0 	bl	8001b64 <HAL_GPIO_Init>

}
 8000fa4:	b00b      	add	sp, #44	@ 0x2c
 8000fa6:	bd30      	pop	{r4, r5, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <usart_printf>:
#include <stdio.h>

#define USART_TxBufSize 255
static char USART_TxBuffer[USART_TxBufSize];

HAL_StatusTypeDef usart_printf(const char *format, ...) {
 8000fb8:	b40f      	push	{r0, r1, r2, r3}
 8000fba:	b510      	push	{r4, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	ab04      	add	r3, sp, #16
    va_list args;
    uint32_t length = 0;

    va_start(args, format);

    length = vsnprintf((char *)USART_TxBuffer, USART_TxBufSize, (char *)format, args);
 8000fc0:	4c08      	ldr	r4, [pc, #32]	@ (8000fe4 <usart_printf+0x2c>)
HAL_StatusTypeDef usart_printf(const char *format, ...) {
 8000fc2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8000fc6:	9301      	str	r3, [sp, #4]
    length = vsnprintf((char *)USART_TxBuffer, USART_TxBufSize, (char *)format, args);
 8000fc8:	21ff      	movs	r1, #255	@ 0xff
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f006 fce4 	bl	8007998 <vsniprintf>
    va_end(args);
    return HAL_UART_Transmit_DMA(&huart2, USART_TxBuffer, length);
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	b282      	uxth	r2, r0
 8000fd4:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <usart_printf+0x30>)
 8000fd6:	f002 fa3f 	bl	8003458 <HAL_UART_Transmit_DMA>
}
 8000fda:	b002      	add	sp, #8
 8000fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe0:	b004      	add	sp, #16
 8000fe2:	4770      	bx	lr
 8000fe4:	200002dc 	.word	0x200002dc
 8000fe8:	200009a0 	.word	0x200009a0

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	2300      	movs	r3, #0
{
 8000ff0:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000ff6:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffa:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000ffe:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4920      	ldr	r1, [pc, #128]	@ (8001084 <SystemClock_Config+0x98>)
 8001004:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001006:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100a:	4a1f      	ldr	r2, [pc, #124]	@ (8001088 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001010:	6408      	str	r0, [r1, #64]	@ 0x40
 8001012:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001014:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001018:	9101      	str	r1, [sp, #4]
 800101a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001028:	2001      	movs	r0, #1
 800102a:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001032:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001036:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001038:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103e:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001042:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001044:	2104      	movs	r1, #4
 8001046:	2002      	movs	r0, #2
 8001048:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800104c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 96;
 800104e:	2360      	movs	r3, #96	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001052:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001054:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f001 fe93 	bl	8002d80 <HAL_RCC_OscConfig>
 800105a:	b108      	cbz	r0, 8001060 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800105e:	e7fe      	b.n	800105e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001060:	210f      	movs	r1, #15
 8001062:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001064:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001068:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800106c:	a803      	add	r0, sp, #12
 800106e:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001070:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001076:	f002 f899 	bl	80031ac <HAL_RCC_ClockConfig>
 800107a:	b108      	cbz	r0, 8001080 <SystemClock_Config+0x94>
 800107c:	b672      	cpsid	i
	while (1) {
 800107e:	e7fe      	b.n	800107e <SystemClock_Config+0x92>
}
 8001080:	b014      	add	sp, #80	@ 0x50
 8001082:	bd10      	pop	{r4, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <main>:
{
 800108c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001090:	f2ad 4dac 	subw	sp, sp, #1196	@ 0x4ac
  HAL_Init();
 8001094:	f000 faae 	bl	80015f4 <HAL_Init>
  SystemClock_Config();
 8001098:	f7ff ffa8 	bl	8000fec <SystemClock_Config>
  MX_GPIO_Init();
 800109c:	f7ff ff28 	bl	8000ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010a0:	f7ff ff02 	bl	8000ea8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010a4:	f000 f9bc 	bl	8001420 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80010a8:	f005 fc04 	bl	80068b4 <MX_USB_DEVICE_Init>
  import_pub_key(&pub_key, pub_data);
 80010ac:	497b      	ldr	r1, [pc, #492]	@ (800129c <main+0x210>)
 80010ae:	487c      	ldr	r0, [pc, #496]	@ (80012a0 <main+0x214>)
 80010b0:	f004 fb24 	bl	80056fc <import_pub_key>
  import_pvt_key(&pvt_key, pvt_data);
 80010b4:	497b      	ldr	r1, [pc, #492]	@ (80012a4 <main+0x218>)
 80010b6:	487c      	ldr	r0, [pc, #496]	@ (80012a8 <main+0x21c>)
  const char test_msg[BN_MSG_LEN + 1] = "";
 80010b8:	2400      	movs	r4, #0
  import_pvt_key(&pvt_key, pvt_data);
 80010ba:	f004 fb9b 	bl	80057f4 <import_pvt_key>
  montg_init(&montg_domain, &pub_key.mod);
 80010be:	4978      	ldr	r1, [pc, #480]	@ (80012a0 <main+0x214>)
 80010c0:	a8c6      	add	r0, sp, #792	@ 0x318
 80010c2:	f004 f9fd 	bl	80054c0 <montg_init>
  const char test_msg[BN_MSG_LEN + 1] = "";
 80010c6:	4621      	mov	r1, r4
 80010c8:	223d      	movs	r2, #61	@ 0x3d
 80010ca:	a812      	add	r0, sp, #72	@ 0x48
 80010cc:	9411      	str	r4, [sp, #68]	@ 0x44
 80010ce:	f006 fc8b 	bl	80079e8 <memset>
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 80010d2:	4621      	mov	r1, r4
 80010d4:	22fd      	movs	r2, #253	@ 0xfd
 80010d6:	a845      	add	r0, sp, #276	@ 0x114
 80010d8:	9444      	str	r4, [sp, #272]	@ 0x110
 80010da:	f006 fc85 	bl	80079e8 <memset>
 80010de:	4621      	mov	r1, r4
 80010e0:	223d      	movs	r2, #61	@ 0x3d
 80010e2:	a823      	add	r0, sp, #140	@ 0x8c
 80010e4:	9422      	str	r4, [sp, #136]	@ 0x88
 80010e6:	f006 fc7f 	bl	80079e8 <memset>
  char out_sign[BN_BYTE_SIZE * 2 + 1] = "", out_verify[BN_MSG_LEN + 1] = "";
 80010ea:	4621      	mov	r1, r4
 80010ec:	22fd      	movs	r2, #253	@ 0xfd
 80010ee:	a886      	add	r0, sp, #536	@ 0x218
 80010f0:	9485      	str	r4, [sp, #532]	@ 0x214
 80010f2:	f006 fc79 	bl	80079e8 <memset>
 80010f6:	4621      	mov	r1, r4
 80010f8:	223d      	movs	r2, #61	@ 0x3d
 80010fa:	a834      	add	r0, sp, #208	@ 0xd0
 80010fc:	9433      	str	r4, [sp, #204]	@ 0xcc
 80010fe:	f006 fc73 	bl	80079e8 <memset>
  usart_printf("test packet: ");
 8001102:	486a      	ldr	r0, [pc, #424]	@ (80012ac <main+0x220>)
 8001104:	f7ff ff58 	bl	8000fb8 <usart_printf>
  HAL_Delay(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800110c:	f000 fa9e 	bl	800164c <HAL_Delay>
  usart_printf("%u) %02u.%02u.%02u %02u:%02u:%02u\r\n", packet.plc_number, packet.date.year, packet.date.month, packet.date.day, packet.time.hours, packet.time.minutes, packet.time.seconds);
 8001110:	f04f 083b 	mov.w	r8, #59	@ 0x3b
 8001114:	2316      	movs	r3, #22
 8001116:	e9cd 3802 	strd	r3, r8, [sp, #8]
 800111a:	220b      	movs	r2, #11
 800111c:	231c      	movs	r3, #28
 800111e:	e9cd 3200 	strd	r3, r2, [sp]
 8001122:	2115      	movs	r1, #21
 8001124:	2303      	movs	r3, #3
 8001126:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 800112a:	4861      	ldr	r0, [pc, #388]	@ (80012b0 <main+0x224>)
 800112c:	f7ff ff44 	bl	8000fb8 <usart_printf>
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 8001130:	4b60      	ldr	r3, [pc, #384]	@ (80012b4 <main+0x228>)
 8001132:	930d      	str	r3, [sp, #52]	@ 0x34
 8001134:	2315      	movs	r3, #21
 8001136:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001138:	f241 630b 	movw	r3, #5643	@ 0x160b
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 800113c:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 8001140:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  encrypt_buf(&pub_key, &montg_domain, test_msg, sizeof(test_msg), out_enc, sizeof(out_enc));
 8001144:	f240 1301 	movw	r3, #257	@ 0x101
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 8001148:	ac0b      	add	r4, sp, #44	@ 0x2c
  encrypt_buf(&pub_key, &montg_domain, test_msg, sizeof(test_msg), out_enc, sizeof(out_enc));
 800114a:	f8cd b000 	str.w	fp, [sp]
 800114e:	9301      	str	r3, [sp, #4]
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 8001150:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8001154:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  const char test_msg[BN_MSG_LEN + 1] = "";
 8001158:	ae11      	add	r6, sp, #68	@ 0x44
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 800115a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  encrypt_buf(&pub_key, &montg_domain, test_msg, sizeof(test_msg), out_enc, sizeof(out_enc));
 800115e:	2341      	movs	r3, #65	@ 0x41
 8001160:	4632      	mov	r2, r6
 8001162:	a9c6      	add	r1, sp, #792	@ 0x318
 8001164:	484e      	ldr	r0, [pc, #312]	@ (80012a0 <main+0x214>)
  decrypt_buf(&pvt_key, &montg_domain, out_enc, strlen(out_enc), out_dec, sizeof(out_dec));
 8001166:	4699      	mov	r9, r3
  encrypt_buf(&pub_key, &montg_domain, test_msg, sizeof(test_msg), out_enc, sizeof(out_enc));
 8001168:	f004 fbe2 	bl	8005930 <encrypt_buf>
  decrypt_buf(&pvt_key, &montg_domain, out_enc, strlen(out_enc), out_dec, sizeof(out_dec));
 800116c:	4658      	mov	r0, fp
 800116e:	f7ff f887 	bl	8000280 <strlen>
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 8001172:	ad22      	add	r5, sp, #136	@ 0x88
  decrypt_buf(&pvt_key, &montg_domain, out_enc, strlen(out_enc), out_dec, sizeof(out_dec));
 8001174:	e9cd 5900 	strd	r5, r9, [sp]
 8001178:	4603      	mov	r3, r0
 800117a:	465a      	mov	r2, fp
 800117c:	484a      	ldr	r0, [pc, #296]	@ (80012a8 <main+0x21c>)
 800117e:	a9c6      	add	r1, sp, #792	@ 0x318
 8001180:	f004 fc04 	bl	800598c <decrypt_buf>
  memmove(&test_dec_packet, out_dec, sizeof(packet_t));
 8001184:	f89d 108d 	ldrb.w	r1, [sp, #141]	@ 0x8d
 8001188:	f89d 008e 	ldrb.w	r0, [sp, #142]	@ 0x8e
 800118c:	f89d 2093 	ldrb.w	r2, [sp, #147]	@ 0x93
 8001190:	9106      	str	r1, [sp, #24]
 8001192:	9007      	str	r0, [sp, #28]
 8001194:	9209      	str	r2, [sp, #36]	@ 0x24
 8001196:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800119a:	f89d 3092 	ldrb.w	r3, [sp, #146]	@ 0x92
 800119e:	9308      	str	r3, [sp, #32]
 80011a0:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80011a4:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80011a8:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 80011ac:	f8bd b090 	ldrh.w	fp, [sp, #144]	@ 0x90
 80011b0:	9305      	str	r3, [sp, #20]
 80011b2:	4605      	mov	r5, r0
  usart_printf("decrypt packet: ");
 80011b4:	4840      	ldr	r0, [pc, #256]	@ (80012b8 <main+0x22c>)
 80011b6:	f7ff feff 	bl	8000fb8 <usart_printf>
  HAL_Delay(1000);
 80011ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011be:	f000 fa45 	bl	800164c <HAL_Delay>
  usart_printf("%u) %02u.%02u.%02u %02u:%02u:%02u\r\n", packet.plc_number, packet.date.year, packet.date.month, packet.date.day, packet.time.hours, packet.time.minutes, packet.time.seconds);
 80011c2:	9807      	ldr	r0, [sp, #28]
 80011c4:	9906      	ldr	r1, [sp, #24]
 80011c6:	9b05      	ldr	r3, [sp, #20]
 80011c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80011ca:	9003      	str	r0, [sp, #12]
 80011cc:	9102      	str	r1, [sp, #8]
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	4629      	mov	r1, r5
 80011d2:	9b08      	ldr	r3, [sp, #32]
 80011d4:	9200      	str	r2, [sp, #0]
 80011d6:	4836      	ldr	r0, [pc, #216]	@ (80012b0 <main+0x224>)
 80011d8:	465a      	mov	r2, fp
 80011da:	f7ff feed 	bl	8000fb8 <usart_printf>
  HAL_Delay(1000);
 80011de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011e2:	f000 fa33 	bl	800164c <HAL_Delay>
  test_enc_packet = test_dec_packet;
 80011e6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80011ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  memset((char*)test_msg, ' ', sizeof(test_msg));
 80011ee:	464a      	mov	r2, r9
 80011f0:	2120      	movs	r1, #32
 80011f2:	4630      	mov	r0, r6
 80011f4:	f006 fbf8 	bl	80079e8 <memset>
  usart_printf("sign packet: ");
 80011f8:	4830      	ldr	r0, [pc, #192]	@ (80012bc <main+0x230>)
 80011fa:	f7ff fedd 	bl	8000fb8 <usart_printf>
  HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001202:	f000 fa23 	bl	800164c <HAL_Delay>
  usart_printf("%u) %02u.%02u.%02u %02u:%02u:%02u\r\n", packet.plc_number, packet.date.year, packet.date.month, packet.date.day, packet.time.hours, packet.time.minutes, packet.time.seconds);
 8001206:	9a05      	ldr	r2, [sp, #20]
 8001208:	9807      	ldr	r0, [sp, #28]
 800120a:	9906      	ldr	r1, [sp, #24]
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001210:	9b08      	ldr	r3, [sp, #32]
 8001212:	9003      	str	r0, [sp, #12]
 8001214:	9102      	str	r1, [sp, #8]
 8001216:	9200      	str	r2, [sp, #0]
 8001218:	4629      	mov	r1, r5
 800121a:	465a      	mov	r2, fp
 800121c:	4824      	ldr	r0, [pc, #144]	@ (80012b0 <main+0x224>)
 800121e:	f7ff fecb 	bl	8000fb8 <usart_printf>
  char out_sign[BN_BYTE_SIZE * 2 + 1] = "", out_verify[BN_MSG_LEN + 1] = "";
 8001222:	f50d 7a05 	add.w	sl, sp, #532	@ 0x214
  sign_buf(&pvt_key, &montg_domain, test_msg, sizeof(test_msg), out_sign, sizeof(out_sign));
 8001226:	f240 1301 	movw	r3, #257	@ 0x101
 800122a:	e9cd a300 	strd	sl, r3, [sp]
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 800122e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  sign_buf(&pvt_key, &montg_domain, test_msg, sizeof(test_msg), out_sign, sizeof(out_sign));
 8001232:	464b      	mov	r3, r9
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 8001234:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  sign_buf(&pvt_key, &montg_domain, test_msg, sizeof(test_msg), out_sign, sizeof(out_sign));
 8001238:	4632      	mov	r2, r6
 800123a:	a9c6      	add	r1, sp, #792	@ 0x318
 800123c:	481a      	ldr	r0, [pc, #104]	@ (80012a8 <main+0x21c>)
 800123e:	f004 fbd3 	bl	80059e8 <sign_buf>
  verify_buf(&pub_key, &montg_domain, out_sign, strlen(out_sign), out_verify, sizeof(out_verify));
 8001242:	4650      	mov	r0, sl
 8001244:	f7ff f81c 	bl	8000280 <strlen>
  char out_sign[BN_BYTE_SIZE * 2 + 1] = "", out_verify[BN_MSG_LEN + 1] = "";
 8001248:	af33      	add	r7, sp, #204	@ 0xcc
  verify_buf(&pub_key, &montg_domain, out_sign, strlen(out_sign), out_verify, sizeof(out_verify));
 800124a:	4603      	mov	r3, r0
 800124c:	4652      	mov	r2, sl
 800124e:	a9c6      	add	r1, sp, #792	@ 0x318
 8001250:	4813      	ldr	r0, [pc, #76]	@ (80012a0 <main+0x214>)
 8001252:	f8cd 9004 	str.w	r9, [sp, #4]
 8001256:	9700      	str	r7, [sp, #0]
 8001258:	f004 fbf4 	bl	8005a44 <verify_buf>
  memmove(&test_dec_packet, out_verify, sizeof(packet_t));
 800125c:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 800125e:	f89d 90d1 	ldrb.w	r9, [sp, #209]	@ 0xd1
 8001262:	f89d a0d2 	ldrb.w	sl, [sp, #210]	@ 0xd2
 8001266:	f8bd 50d4 	ldrh.w	r5, [sp, #212]	@ 0xd4
 800126a:	f89d 60d6 	ldrb.w	r6, [sp, #214]	@ 0xd6
  usart_printf("verify packet: ");
 800126e:	4814      	ldr	r0, [pc, #80]	@ (80012c0 <main+0x234>)
  memmove(&test_dec_packet, out_verify, sizeof(packet_t));
 8001270:	f89d 80d0 	ldrb.w	r8, [sp, #208]	@ 0xd0
 8001274:	f89d 70d7 	ldrb.w	r7, [sp, #215]	@ 0xd7
  usart_printf("verify packet: ");
 8001278:	f7ff fe9e 	bl	8000fb8 <usart_printf>
  HAL_Delay(1000);
 800127c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001280:	f000 f9e4 	bl	800164c <HAL_Delay>
  usart_printf("%u) %02u.%02u.%02u %02u:%02u:%02u\r\n", packet.plc_number, packet.date.year, packet.date.month, packet.date.day, packet.time.hours, packet.time.minutes, packet.time.seconds);
 8001284:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8001288:	4809      	ldr	r0, [pc, #36]	@ (80012b0 <main+0x224>)
 800128a:	f8cd 8004 	str.w	r8, [sp, #4]
 800128e:	9700      	str	r7, [sp, #0]
 8001290:	4633      	mov	r3, r6
 8001292:	462a      	mov	r2, r5
 8001294:	4621      	mov	r1, r4
 8001296:	f7ff fe8f 	bl	8000fb8 <usart_printf>
  while (1) {
 800129a:	e7fe      	b.n	800129a <main+0x20e>
 800129c:	0800a730 	.word	0x0800a730
 80012a0:	200007dc 	.word	0x200007dc
 80012a4:	0800a52c 	.word	0x0800a52c
 80012a8:	200003dc 	.word	0x200003dc
 80012ac:	0800a4e8 	.word	0x0800a4e8
 80012b0:	0800a4c4 	.word	0x0800a4c4
 80012b4:	1c0307e8 	.word	0x1c0307e8
 80012b8:	0800a4f8 	.word	0x0800a4f8
 80012bc:	0800a50c 	.word	0x0800a50c
 80012c0:	0800a51c 	.word	0x0800a51c

080012c4 <Error_Handler>:
 80012c4:	b672      	cpsid	i
	while (1) {
 80012c6:	e7fe      	b.n	80012c6 <Error_Handler+0x2>

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <HAL_MspInit+0x34>)
 80012cc:	2100      	movs	r1, #0
 80012ce:	9100      	str	r1, [sp, #0]
 80012d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80012d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012da:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80012de:	9200      	str	r2, [sp, #0]
 80012e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	9101      	str	r1, [sp, #4]
 80012e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	b002      	add	sp, #8
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler>
 8001302:	bf00      	nop

08001304 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <HardFault_Handler>
 8001306:	bf00      	nop

08001308 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler>
 800130a:	bf00      	nop

0800130c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <BusFault_Handler>
 800130e:	bf00      	nop

08001310 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler>
 8001312:	bf00      	nop

08001314 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001320:	f000 b982 	b.w	8001628 <HAL_IncTick>

08001324 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001324:	4801      	ldr	r0, [pc, #4]	@ (800132c <DMA1_Stream5_IRQHandler+0x8>)
 8001326:	f000 bb47 	b.w	80019b8 <HAL_DMA_IRQHandler>
 800132a:	bf00      	nop
 800132c:	20000940 	.word	0x20000940

08001330 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001330:	4801      	ldr	r0, [pc, #4]	@ (8001338 <DMA1_Stream6_IRQHandler+0x8>)
 8001332:	f000 bb41 	b.w	80019b8 <HAL_DMA_IRQHandler>
 8001336:	bf00      	nop
 8001338:	200008e0 	.word	0x200008e0

0800133c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800133c:	4801      	ldr	r0, [pc, #4]	@ (8001344 <USART2_IRQHandler+0x8>)
 800133e:	f002 b9c9 	b.w	80036d4 <HAL_UART_IRQHandler>
 8001342:	bf00      	nop
 8001344:	200009a0 	.word	0x200009a0

08001348 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001348:	4801      	ldr	r0, [pc, #4]	@ (8001350 <OTG_FS_IRQHandler+0x8>)
 800134a:	f000 bdad 	b.w	8001ea8 <HAL_PCD_IRQHandler>
 800134e:	bf00      	nop
 8001350:	200020e8 	.word	0x200020e8

08001354 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001354:	2001      	movs	r0, #1
 8001356:	4770      	bx	lr

08001358 <_kill>:

int _kill(int pid, int sig)
{
 8001358:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800135a:	f006 fbc9 	bl	8007af0 <__errno>
 800135e:	2316      	movs	r3, #22
 8001360:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001362:	f04f 30ff 	mov.w	r0, #4294967295
 8001366:	bd08      	pop	{r3, pc}

08001368 <_exit>:

void _exit (int status)
{
 8001368:	b508      	push	{r3, lr}
  errno = EINVAL;
 800136a:	f006 fbc1 	bl	8007af0 <__errno>
 800136e:	2316      	movs	r3, #22
 8001370:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001372:	e7fe      	b.n	8001372 <_exit+0xa>

08001374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001374:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	1e16      	subs	r6, r2, #0
 8001378:	dd07      	ble.n	800138a <_read+0x16>
 800137a:	460c      	mov	r4, r1
 800137c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800137e:	f3af 8000 	nop.w
 8001382:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	42a5      	cmp	r5, r4
 8001388:	d1f9      	bne.n	800137e <_read+0xa>
  }

  return len;
}
 800138a:	4630      	mov	r0, r6
 800138c:	bd70      	pop	{r4, r5, r6, pc}
 800138e:	bf00      	nop

08001390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001390:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	1e16      	subs	r6, r2, #0
 8001394:	dd07      	ble.n	80013a6 <_write+0x16>
 8001396:	460c      	mov	r4, r1
 8001398:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800139a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800139e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	42ac      	cmp	r4, r5
 80013a4:	d1f9      	bne.n	800139a <_write+0xa>
  }
  return len;
}
 80013a6:	4630      	mov	r0, r6
 80013a8:	bd70      	pop	{r4, r5, r6, pc}
 80013aa:	bf00      	nop

080013ac <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop

080013b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80013b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80013ba:	2000      	movs	r0, #0
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80013c0:	2001      	movs	r0, #1
 80013c2:	4770      	bx	lr

080013c4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80013c4:	2000      	movs	r0, #0
 80013c6:	4770      	bx	lr

080013c8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	490c      	ldr	r1, [pc, #48]	@ (80013fc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80013cc:	680b      	ldr	r3, [r1, #0]
{
 80013ce:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4c0c      	ldr	r4, [pc, #48]	@ (8001404 <_sbrk+0x3c>)
 80013d2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80013d4:	b12b      	cbz	r3, 80013e2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4418      	add	r0, r3
 80013d8:	4290      	cmp	r0, r2
 80013da:	d807      	bhi.n	80013ec <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80013dc:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <_sbrk+0x40>)
 80013e4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4418      	add	r0, r3
 80013e8:	4290      	cmp	r0, r2
 80013ea:	d9f7      	bls.n	80013dc <_sbrk+0x14>
    errno = ENOMEM;
 80013ec:	f006 fb80 	bl	8007af0 <__errno>
 80013f0:	230c      	movs	r3, #12
 80013f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	bd10      	pop	{r4, pc}
 80013fc:	200008dc 	.word	0x200008dc
 8001400:	20020000 	.word	0x20020000
 8001404:	00000400 	.word	0x00000400
 8001408:	20002740 	.word	0x20002740

0800140c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800140c:	4a03      	ldr	r2, [pc, #12]	@ (800141c <SystemInit+0x10>)
 800140e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001416:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001420:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001422:	480b      	ldr	r0, [pc, #44]	@ (8001450 <MX_USART2_UART_Init+0x30>)
 8001424:	4c0b      	ldr	r4, [pc, #44]	@ (8001454 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001428:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 800142e:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001432:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001436:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	f001 ff79 	bl	8003334 <HAL_UART_Init>
 8001442:	b900      	cbnz	r0, 8001446 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001444:	bd10      	pop	{r4, pc}
 8001446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800144a:	f7ff bf3b 	b.w	80012c4 <Error_Handler>
 800144e:	bf00      	nop
 8001450:	200009a0 	.word	0x200009a0
 8001454:	40004400 	.word	0x40004400

08001458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001458:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 800145a:	4b39      	ldr	r3, [pc, #228]	@ (8001540 <HAL_UART_MspInit+0xe8>)
 800145c:	6802      	ldr	r2, [r0, #0]
{
 800145e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 8001462:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001468:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800146c:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 800146e:	d001      	beq.n	8001474 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001470:	b008      	add	sp, #32
 8001472:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001474:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8001478:	9400      	str	r4, [sp, #0]
 800147a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800147c:	4e31      	ldr	r6, [pc, #196]	@ (8001544 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800147e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001482:	641a      	str	r2, [r3, #64]	@ 0x40
 8001484:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001486:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800148a:	9200      	str	r2, [sp, #0]
 800148c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	9401      	str	r4, [sp, #4]
 8001490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	631a      	str	r2, [r3, #48]	@ 0x30
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014a0:	220c      	movs	r2, #12
 80014a2:	2302      	movs	r3, #2
 80014a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	4825      	ldr	r0, [pc, #148]	@ (8001548 <HAL_UART_MspInit+0xf0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f000 fb54 	bl	8001b64 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014bc:	4a23      	ldr	r2, [pc, #140]	@ (800154c <HAL_UART_MspInit+0xf4>)
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014be:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80014c4:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014c8:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014ce:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d2:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d6:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014da:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014de:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014e0:	f000 f93c 	bl	800175c <HAL_DMA_Init>
 80014e4:	bb28      	cbnz	r0, 8001532 <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80014e6:	4c1a      	ldr	r4, [pc, #104]	@ (8001550 <HAL_UART_MspInit+0xf8>)
 80014e8:	491a      	ldr	r1, [pc, #104]	@ (8001554 <HAL_UART_MspInit+0xfc>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80014ea:	63ae      	str	r6, [r5, #56]	@ 0x38
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80014ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014f0:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f8:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014fa:	2140      	movs	r1, #64	@ 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	6122      	str	r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014fe:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001500:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001504:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001508:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800150c:	e9c4 3207 	strd	r3, r2, [r4, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001510:	63b5      	str	r5, [r6, #56]	@ 0x38
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001512:	6263      	str	r3, [r4, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001514:	f000 f922 	bl	800175c <HAL_DMA_Init>
 8001518:	b970      	cbnz	r0, 8001538 <HAL_UART_MspInit+0xe0>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800151c:	636c      	str	r4, [r5, #52]	@ 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800151e:	4611      	mov	r1, r2
 8001520:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001522:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001524:	f000 f8b6 	bl	8001694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001528:	2026      	movs	r0, #38	@ 0x26
 800152a:	f000 f8ef 	bl	800170c <HAL_NVIC_EnableIRQ>
}
 800152e:	b008      	add	sp, #32
 8001530:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001532:	f7ff fec7 	bl	80012c4 <Error_Handler>
 8001536:	e7d6      	b.n	80014e6 <HAL_UART_MspInit+0x8e>
      Error_Handler();
 8001538:	f7ff fec4 	bl	80012c4 <Error_Handler>
 800153c:	e7ed      	b.n	800151a <HAL_UART_MspInit+0xc2>
 800153e:	bf00      	nop
 8001540:	40004400 	.word	0x40004400
 8001544:	20000940 	.word	0x20000940
 8001548:	40020000 	.word	0x40020000
 800154c:	40026088 	.word	0x40026088
 8001550:	200008e0 	.word	0x200008e0
 8001554:	400260a0 	.word	0x400260a0

08001558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001558:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001590 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800155c:	480d      	ldr	r0, [pc, #52]	@ (8001594 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155e:	490e      	ldr	r1, [pc, #56]	@ (8001598 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001560:	4a0e      	ldr	r2, [pc, #56]	@ (800159c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001574:	4c0b      	ldr	r4, [pc, #44]	@ (80015a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001582:	f7ff ff43 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001586:	f006 fab9 	bl	8007afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158a:	f7ff fd7f 	bl	800108c <main>
  bx  lr    
 800158e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001598:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 800159c:	0800ae64 	.word	0x0800ae64
  ldr r2, =_sbss
 80015a0:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80015a4:	20002740 	.word	0x20002740

080015a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC_IRQHandler>
	...

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ae:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <HAL_InitTick+0x3c>)
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_InitTick+0x40>)
 80015b2:	7812      	ldrb	r2, [r2, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
{
 80015b6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015bc:	fbb0 f0f2 	udiv	r0, r0, r2
 80015c0:	fbb3 f0f0 	udiv	r0, r3, r0
 80015c4:	f000 f8b0 	bl	8001728 <HAL_SYSTICK_Config>
 80015c8:	b908      	cbnz	r0, 80015ce <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	2d0f      	cmp	r5, #15
 80015cc:	d901      	bls.n	80015d2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80015ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80015d0:	bd38      	pop	{r3, r4, r5, pc}
 80015d2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	4602      	mov	r2, r0
 80015d6:	4629      	mov	r1, r5
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f000 f85a 	bl	8001694 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_InitTick+0x44>)
 80015e2:	4620      	mov	r0, r4
 80015e4:	601d      	str	r5, [r3, #0]
}
 80015e6:	bd38      	pop	{r3, r4, r5, pc}
 80015e8:	20000004 	.word	0x20000004
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008

080015f4 <HAL_Init>:
{
 80015f4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <HAL_Init+0x30>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015fe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001606:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800160e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001610:	2003      	movs	r0, #3
 8001612:	f000 f82d 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001616:	200f      	movs	r0, #15
 8001618:	f7ff ffc8 	bl	80015ac <HAL_InitTick>
  HAL_MspInit();
 800161c:	f7ff fe54 	bl	80012c8 <HAL_MspInit>
}
 8001620:	2000      	movs	r0, #0
 8001622:	bd08      	pop	{r3, pc}
 8001624:	40023c00 	.word	0x40023c00

08001628 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001628:	4a03      	ldr	r2, [pc, #12]	@ (8001638 <HAL_IncTick+0x10>)
 800162a:	4b04      	ldr	r3, [pc, #16]	@ (800163c <HAL_IncTick+0x14>)
 800162c:	6811      	ldr	r1, [r2, #0]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	440b      	add	r3, r1
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	200009e4 	.word	0x200009e4
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001640:	4b01      	ldr	r3, [pc, #4]	@ (8001648 <HAL_GetTick+0x8>)
 8001642:	6818      	ldr	r0, [r3, #0]
}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200009e4 	.word	0x200009e4

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b538      	push	{r3, r4, r5, lr}
 800164e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff fff6 	bl	8001640 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001654:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001656:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001658:	d002      	beq.n	8001660 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <HAL_Delay+0x20>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	1b40      	subs	r0, r0, r5
 8001666:	42a0      	cmp	r0, r4
 8001668:	d3fa      	bcc.n	8001660 <HAL_Delay+0x14>
  {
  }
}
 800166a:	bd38      	pop	{r3, r4, r5, pc}
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4907      	ldr	r1, [pc, #28]	@ (8001690 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001672:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001682:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800168a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <HAL_NVIC_SetPriority+0x70>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169e:	f1c3 0e07 	rsb	lr, r3, #7
 80016a2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016aa:	bf28      	it	cs
 80016ac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b0:	f1bc 0f06 	cmp.w	ip, #6
 80016b4:	d91c      	bls.n	80016f0 <HAL_NVIC_SetPriority+0x5c>
 80016b6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	fa03 f30c 	lsl.w	r3, r3, ip
 80016c2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	fa03 f30e 	lsl.w	r3, r3, lr
 80016ce:	ea21 0303 	bic.w	r3, r1, r3
 80016d2:	fa03 f30c 	lsl.w	r3, r3, ip
 80016d6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80016da:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80016de:	db0a      	blt.n	80016f6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80016e4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80016e8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80016f0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	4694      	mov	ip, r2
 80016f4:	e7e7      	b.n	80016c6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <HAL_NVIC_SetPriority+0x74>)
 80016f8:	f000 000f 	and.w	r0, r0, #15
 80016fc:	4402      	add	r2, r0
 80016fe:	7613      	strb	r3, [r2, #24]
 8001700:	f85d fb04 	ldr.w	pc, [sp], #4
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	e000ecfc 	.word	0xe000ecfc

0800170c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800170c:	2800      	cmp	r0, #0
 800170e:	db07      	blt.n	8001720 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001710:	0941      	lsrs	r1, r0, #5
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <HAL_NVIC_EnableIRQ+0x18>)
 8001714:	f000 001f 	and.w	r0, r0, #31
 8001718:	2301      	movs	r3, #1
 800171a:	4083      	lsls	r3, r0
 800171c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	3801      	subs	r0, #1
 800172a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800172e:	d301      	bcc.n	8001734 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001730:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001732:	4770      	bx	lr
{
 8001734:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	4c07      	ldr	r4, [pc, #28]	@ (8001758 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001742:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001746:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001748:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	619a      	str	r2, [r3, #24]
}
 800174e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	6119      	str	r1, [r3, #16]
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ff6e 	bl	8001640 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001764:	2c00      	cmp	r4, #0
 8001766:	d06f      	beq.n	8001848 <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001768:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800176a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800176c:	2102      	movs	r1, #2
 800176e:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001772:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	4605      	mov	r5, r0
 800177e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001780:	e005      	b.n	800178e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001782:	f7ff ff5d 	bl	8001640 <HAL_GetTick>
 8001786:	1b43      	subs	r3, r0, r5
 8001788:	2b05      	cmp	r3, #5
 800178a:	d839      	bhi.n	8001800 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	07d1      	lsls	r1, r2, #31
 8001792:	d4f6      	bmi.n	8001782 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001794:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001798:	68e1      	ldr	r1, [r4, #12]
 800179a:	4302      	orrs	r2, r0
 800179c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179e:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a4:	432a      	orrs	r2, r5
 80017a6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80017aa:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ac:	4302      	orrs	r2, r0
 80017ae:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017b0:	4932      	ldr	r1, [pc, #200]	@ (800187c <HAL_DMA_Init+0x120>)
 80017b2:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	6a25      	ldr	r5, [r4, #32]
 80017b6:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b8:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80017bc:	2904      	cmp	r1, #4
 80017be:	d026      	beq.n	800180e <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017c2:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017c4:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017c8:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017ca:	b2d8      	uxtb	r0, r3
 80017cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001880 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 80017ce:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017d0:	3810      	subs	r0, #16
 80017d2:	fba2 5200 	umull	r5, r2, r2, r0
 80017d6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017d8:	492a      	ldr	r1, [pc, #168]	@ (8001884 <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017de:	5c89      	ldrb	r1, [r1, r2]
 80017e0:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017e2:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80017e6:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017e8:	bf88      	it	hi
 80017ea:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ec:	223f      	movs	r2, #63	@ 0x3f
 80017ee:	408a      	lsls	r2, r1
 80017f0:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f2:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f4:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80017f6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80017fa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 80017fe:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001800:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001802:	2220      	movs	r2, #32
 8001804:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001806:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 800180a:	4618      	mov	r0, r3
}
 800180c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800180e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8001812:	4329      	orrs	r1, r5
 8001814:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8001816:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001818:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800181a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800181c:	f021 0107 	bic.w	r1, r1, #7
 8001820:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001822:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001826:	2d00      	cmp	r5, #0
 8001828:	d0cf      	beq.n	80017ca <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800182a:	b178      	cbz	r0, 800184c <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800182c:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001830:	d016      	beq.n	8001860 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001832:	2a02      	cmp	r2, #2
 8001834:	d903      	bls.n	800183e <HAL_DMA_Init+0xe2>
 8001836:	2a03      	cmp	r2, #3
 8001838:	d1c7      	bne.n	80017ca <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800183a:	01ea      	lsls	r2, r5, #7
 800183c:	d5c5      	bpl.n	80017ca <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800183e:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001840:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001842:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001844:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001848:	2001      	movs	r0, #1
}
 800184a:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800184c:	2a01      	cmp	r2, #1
 800184e:	d003      	beq.n	8001858 <HAL_DMA_Init+0xfc>
 8001850:	f032 0202 	bics.w	r2, r2, #2
 8001854:	d1b9      	bne.n	80017ca <HAL_DMA_Init+0x6e>
 8001856:	e7f0      	b.n	800183a <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001858:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 800185c:	d1b5      	bne.n	80017ca <HAL_DMA_Init+0x6e>
 800185e:	e7ee      	b.n	800183e <HAL_DMA_Init+0xe2>
    switch (tmp)
 8001860:	2a03      	cmp	r2, #3
 8001862:	d8b2      	bhi.n	80017ca <HAL_DMA_Init+0x6e>
 8001864:	a001      	add	r0, pc, #4	@ (adr r0, 800186c <HAL_DMA_Init+0x110>)
 8001866:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800183f 	.word	0x0800183f
 8001870:	0800183b 	.word	0x0800183b
 8001874:	0800183f 	.word	0x0800183f
 8001878:	08001859 	.word	0x08001859
 800187c:	f010803f 	.word	0xf010803f
 8001880:	aaaaaaab 	.word	0xaaaaaaab
 8001884:	0800a7fc 	.word	0x0800a7fc

08001888 <HAL_DMA_Start_IT>:
{
 8001888:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 800188a:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800188e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001890:	2c01      	cmp	r4, #1
 8001892:	d00a      	beq.n	80018aa <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001894:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
  __HAL_LOCK(hdma);
 8001898:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800189c:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 800189e:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80018a2:	d005      	beq.n	80018b0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80018a4:	2300      	movs	r3, #0
 80018a6:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 80018aa:	2002      	movs	r0, #2
}
 80018ac:	bc70      	pop	{r4, r5, r6}
 80018ae:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b0:	2602      	movs	r6, #2
 80018b2:	f880 6035 	strb.w	r6, [r0, #53]	@ 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018b6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b8:	2600      	movs	r6, #0
 80018ba:	6546      	str	r6, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018bc:	6826      	ldr	r6, [r4, #0]
 80018be:	f426 2680 	bic.w	r6, r6, #262144	@ 0x40000
 80018c2:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80018c4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018c6:	6883      	ldr	r3, [r0, #8]
 80018c8:	2b40      	cmp	r3, #64	@ 0x40
    hdma->Instance->PAR = DstAddress;
 80018ca:	bf0e      	itee	eq
 80018cc:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80018ce:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80018d0:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018d2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80018d4:	bf08      	it	eq
 80018d6:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018d8:	233f      	movs	r3, #63	@ 0x3f
 80018da:	4093      	lsls	r3, r2
 80018dc:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018de:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80018e0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018e2:	f043 0316 	orr.w	r3, r3, #22
 80018e6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80018e8:	b11a      	cbz	r2, 80018f2 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80018f8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80018fa:	6023      	str	r3, [r4, #0]
}
 80018fc:	bc70      	pop	{r4, r5, r6}
 80018fe:	4770      	bx	lr

08001900 <HAL_DMA_Abort>:
{
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001904:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001906:	f7ff fe9b 	bl	8001640 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190a:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800190e:	2b02      	cmp	r3, #2
 8001910:	d006      	beq.n	8001920 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001916:	2300      	movs	r3, #0
 8001918:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
}
 800191e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	f022 0216 	bic.w	r2, r2, #22
 8001928:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001930:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001932:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001934:	4605      	mov	r5, r0
 8001936:	b342      	cbz	r2, 800198a <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	f022 0208 	bic.w	r2, r2, #8
 800193e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001948:	e005      	b.n	8001956 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194a:	f7ff fe79 	bl	8001640 <HAL_GetTick>
 800194e:	1b43      	subs	r3, r0, r5
 8001950:	2b05      	cmp	r3, #5
 8001952:	d810      	bhi.n	8001976 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f013 0301 	ands.w	r3, r3, #1
 800195c:	d1f5      	bne.n	800194a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001960:	223f      	movs	r2, #63	@ 0x3f
 8001962:	408a      	lsls	r2, r1
  return HAL_OK;
 8001964:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001966:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001968:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800196a:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800196c:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001970:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001974:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001976:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001978:	2220      	movs	r2, #32
 800197a:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 800197c:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001982:	2300      	movs	r3, #0
 8001984:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001988:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800198a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800198c:	2a00      	cmp	r2, #0
 800198e:	d1d3      	bne.n	8001938 <HAL_DMA_Abort+0x38>
 8001990:	e7d6      	b.n	8001940 <HAL_DMA_Abort+0x40>
 8001992:	bf00      	nop

08001994 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001994:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001998:	2b02      	cmp	r3, #2
 800199a:	d003      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80019a0:	2001      	movs	r0, #1
 80019a2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80019a4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80019a6:	2305      	movs	r3, #5
 80019a8:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80019ac:	6813      	ldr	r3, [r2, #0]
 80019ae:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 80019b2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80019b4:	6013      	str	r3, [r2, #0]
}
 80019b6:	4770      	bx	lr

080019b8 <HAL_DMA_IRQHandler>:
{
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 80019bc:	4a67      	ldr	r2, [pc, #412]	@ (8001b5c <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019be:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80019c0:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 80019c8:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ca:	2208      	movs	r2, #8
 80019cc:	409a      	lsls	r2, r3
 80019ce:	422a      	tst	r2, r5
{
 80019d0:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d2:	d003      	beq.n	80019dc <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019d4:	6801      	ldr	r1, [r0, #0]
 80019d6:	6808      	ldr	r0, [r1, #0]
 80019d8:	0740      	lsls	r0, r0, #29
 80019da:	d478      	bmi.n	8001ace <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019dc:	2201      	movs	r2, #1
 80019de:	409a      	lsls	r2, r3
 80019e0:	422a      	tst	r2, r5
 80019e2:	d003      	beq.n	80019ec <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019e4:	6821      	ldr	r1, [r4, #0]
 80019e6:	6949      	ldr	r1, [r1, #20]
 80019e8:	0608      	lsls	r0, r1, #24
 80019ea:	d46a      	bmi.n	8001ac2 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ec:	2204      	movs	r2, #4
 80019ee:	409a      	lsls	r2, r3
 80019f0:	422a      	tst	r2, r5
 80019f2:	d003      	beq.n	80019fc <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019f4:	6821      	ldr	r1, [r4, #0]
 80019f6:	6809      	ldr	r1, [r1, #0]
 80019f8:	0789      	lsls	r1, r1, #30
 80019fa:	d45c      	bmi.n	8001ab6 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019fc:	2210      	movs	r2, #16
 80019fe:	409a      	lsls	r2, r3
 8001a00:	422a      	tst	r2, r5
 8001a02:	d003      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a04:	6821      	ldr	r1, [r4, #0]
 8001a06:	6808      	ldr	r0, [r1, #0]
 8001a08:	0700      	lsls	r0, r0, #28
 8001a0a:	d441      	bmi.n	8001a90 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	422a      	tst	r2, r5
 8001a12:	d014      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a14:	6821      	ldr	r1, [r4, #0]
 8001a16:	6808      	ldr	r0, [r1, #0]
 8001a18:	06c0      	lsls	r0, r0, #27
 8001a1a:	d510      	bpl.n	8001a3e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a1c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a1e:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8001a22:	2a05      	cmp	r2, #5
 8001a24:	d063      	beq.n	8001aee <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a26:	680b      	ldr	r3, [r1, #0]
 8001a28:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a2c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a2e:	d07e      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a30:	0319      	lsls	r1, r3, #12
 8001a32:	f140 8089 	bpl.w	8001b48 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001a36:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001a38:	b10b      	cbz	r3, 8001a3e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a40:	b323      	cbz	r3, 8001a8c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a42:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a44:	07da      	lsls	r2, r3, #31
 8001a46:	d51a      	bpl.n	8001a7e <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8001a48:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a4a:	4945      	ldr	r1, [pc, #276]	@ (8001b60 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a4c:	2305      	movs	r3, #5
 8001a4e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a52:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a54:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8001a58:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a5c:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e002      	b.n	8001a68 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a62:	6813      	ldr	r3, [r2, #0]
 8001a64:	07db      	lsls	r3, r3, #31
 8001a66:	d504      	bpl.n	8001a72 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001a68:	9b01      	ldr	r3, [sp, #4]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	42b3      	cmp	r3, r6
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	d9f7      	bls.n	8001a62 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8001a72:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001a74:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001a76:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001a7a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001a7e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001a80:	b123      	cbz	r3, 8001a8c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001a82:	4620      	mov	r0, r4
}
 8001a84:	b003      	add	sp, #12
 8001a86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001a8a:	4718      	bx	r3
}
 8001a8c:	b003      	add	sp, #12
 8001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a90:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a92:	680a      	ldr	r2, [r1, #0]
 8001a94:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a98:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a9a:	d122      	bne.n	8001ae2 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a9c:	05d2      	lsls	r2, r2, #23
 8001a9e:	d403      	bmi.n	8001aa8 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa0:	680a      	ldr	r2, [r1, #0]
 8001aa2:	f022 0208 	bic.w	r2, r2, #8
 8001aa6:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001aa8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001aaa:	2a00      	cmp	r2, #0
 8001aac:	d0ae      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001ab4:	e7aa      	b.n	8001a0c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ab6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ab8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001aba:	f042 0204 	orr.w	r2, r2, #4
 8001abe:	6562      	str	r2, [r4, #84]	@ 0x54
 8001ac0:	e79c      	b.n	80019fc <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ac2:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ac6:	f042 0202 	orr.w	r2, r2, #2
 8001aca:	6562      	str	r2, [r4, #84]	@ 0x54
 8001acc:	e78e      	b.n	80019ec <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ace:	6808      	ldr	r0, [r1, #0]
 8001ad0:	f020 0004 	bic.w	r0, r0, #4
 8001ad4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ad6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ad8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	6562      	str	r2, [r4, #84]	@ 0x54
 8001ae0:	e77c      	b.n	80019dc <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ae2:	0311      	lsls	r1, r2, #12
 8001ae4:	d5e0      	bpl.n	8001aa8 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d1e0      	bne.n	8001aae <HAL_DMA_IRQHandler+0xf6>
 8001aec:	e78e      	b.n	8001a0c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aee:	680a      	ldr	r2, [r1, #0]
 8001af0:	f022 0216 	bic.w	r2, r2, #22
 8001af4:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001af6:	694a      	ldr	r2, [r1, #20]
 8001af8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001afc:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001afe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001b00:	b33a      	cbz	r2, 8001b52 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b02:	680a      	ldr	r2, [r1, #0]
 8001b04:	f022 0208 	bic.w	r2, r2, #8
 8001b08:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b0a:	223f      	movs	r2, #63	@ 0x3f
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8001b10:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b12:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001b14:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001b16:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001b18:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001b1c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001b20:	2900      	cmp	r1, #0
 8001b22:	d0b3      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001b24:	4620      	mov	r0, r4
}
 8001b26:	b003      	add	sp, #12
 8001b28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8001b2c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b2e:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8001b32:	d180      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b34:	680a      	ldr	r2, [r1, #0]
 8001b36:	f022 0210 	bic.w	r2, r2, #16
 8001b3a:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001b42:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8001b46:	e776      	b.n	8001a36 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001b48:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f47f af75 	bne.w	8001a3a <HAL_DMA_IRQHandler+0x82>
 8001b50:	e775      	b.n	8001a3e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b52:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001b54:	2a00      	cmp	r2, #0
 8001b56:	d1d4      	bne.n	8001b02 <HAL_DMA_IRQHandler+0x14a>
 8001b58:	e7d7      	b.n	8001b0a <HAL_DMA_IRQHandler+0x152>
 8001b5a:	bf00      	nop
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	1b4e81b5 	.word	0x1b4e81b5

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b68:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6c:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8001d44 <HAL_GPIO_Init+0x1e0>
{
 8001b70:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8001b72:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b76:	4689      	mov	r9, r1
 8001b78:	e003      	b.n	8001b82 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	f000 8082 	beq.w	8001c86 <HAL_GPIO_Init+0x122>
    ioposition = 0x01U << position;
 8001b82:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8001b8a:	43a2      	bics	r2, r4
 8001b8c:	d1f5      	bne.n	8001b7a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001b92:	f001 0203 	and.w	r2, r1, #3
 8001b96:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9e:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba4:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba8:	d970      	bls.n	8001c8c <HAL_GPIO_Init+0x128>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001baa:	2a03      	cmp	r2, #3
 8001bac:	f040 80a7 	bne.w	8001cfe <HAL_GPIO_Init+0x19a>
      temp = GPIOx->MODER;
 8001bb0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb2:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb8:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bba:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001bbe:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc0:	d0db      	beq.n	8001b7a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	9203      	str	r2, [sp, #12]
 8001bc6:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bce:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001bd2:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001bd6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001bda:	9203      	str	r2, [sp, #12]
 8001bdc:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be6:	f003 0703 	and.w	r7, r3, #3
 8001bea:	260f      	movs	r6, #15
 8001bec:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8001bf0:	00bf      	lsls	r7, r7, #2
 8001bf2:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf6:	4e50      	ldr	r6, [pc, #320]	@ (8001d38 <HAL_GPIO_Init+0x1d4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf8:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfa:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bfc:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c00:	d018      	beq.n	8001c34 <HAL_GPIO_Init+0xd0>
 8001c02:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001c06:	42b0      	cmp	r0, r6
 8001c08:	f000 8084 	beq.w	8001d14 <HAL_GPIO_Init+0x1b0>
 8001c0c:	4e4b      	ldr	r6, [pc, #300]	@ (8001d3c <HAL_GPIO_Init+0x1d8>)
 8001c0e:	42b0      	cmp	r0, r6
 8001c10:	f000 8086 	beq.w	8001d20 <HAL_GPIO_Init+0x1bc>
 8001c14:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8001d48 <HAL_GPIO_Init+0x1e4>
 8001c18:	4560      	cmp	r0, ip
 8001c1a:	f000 8087 	beq.w	8001d2c <HAL_GPIO_Init+0x1c8>
 8001c1e:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8001d4c <HAL_GPIO_Init+0x1e8>
 8001c22:	4560      	cmp	r0, ip
 8001c24:	bf0c      	ite	eq
 8001c26:	f04f 0c04 	moveq.w	ip, #4
 8001c2a:	f04f 0c07 	movne.w	ip, #7
 8001c2e:	fa0c f707 	lsl.w	r7, ip, r7
 8001c32:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c34:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4a42      	ldr	r2, [pc, #264]	@ (8001d40 <HAL_GPIO_Init+0x1dc>)
 8001c38:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3a:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001c40:	4e3f      	ldr	r6, [pc, #252]	@ (8001d40 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001c42:	bf54      	ite	pl
 8001c44:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001c46:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8001c4a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001c4c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001c4e:	4e3c      	ldr	r6, [pc, #240]	@ (8001d40 <HAL_GPIO_Init+0x1dc>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c50:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8001c52:	bf54      	ite	pl
 8001c54:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001c56:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8001c5a:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001c5c:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001c60:	4e37      	ldr	r6, [pc, #220]	@ (8001d40 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001c62:	bf54      	ite	pl
 8001c64:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001c66:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8001c6a:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6c:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c6e:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c70:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001c74:	4932      	ldr	r1, [pc, #200]	@ (8001d40 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001c76:	bf54      	ite	pl
 8001c78:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001c7a:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8001c80:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	f47f af7e 	bne.w	8001b82 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001c86:	b005      	add	sp, #20
 8001c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001c8c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c8e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8001c96:	fa07 f70c 	lsl.w	r7, r7, ip
 8001c9a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001c9e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ca0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca2:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca6:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8001caa:	409f      	lsls	r7, r3
 8001cac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001cb0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001cb2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb4:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb8:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001cbc:	fa07 f70c 	lsl.w	r7, r7, ip
 8001cc0:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc4:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001cc6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc8:	f47f af72 	bne.w	8001bb0 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8001ccc:	08df      	lsrs	r7, r3, #3
 8001cce:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001cd2:	9701      	str	r7, [sp, #4]
 8001cd4:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd6:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8001cda:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cdc:	f003 0e07 	and.w	lr, r3, #7
 8001ce0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ce4:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce6:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cea:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001cee:	9e00      	ldr	r6, [sp, #0]
 8001cf0:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001cf4:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001cfa:	6237      	str	r7, [r6, #32]
 8001cfc:	e758      	b.n	8001bb0 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8001cfe:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d00:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001d08:	fa07 f70c 	lsl.w	r7, r7, ip
 8001d0c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001d10:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	e74d      	b.n	8001bb0 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d14:	f04f 0c01 	mov.w	ip, #1
 8001d18:	fa0c f707 	lsl.w	r7, ip, r7
 8001d1c:	433d      	orrs	r5, r7
 8001d1e:	e789      	b.n	8001c34 <HAL_GPIO_Init+0xd0>
 8001d20:	f04f 0c02 	mov.w	ip, #2
 8001d24:	fa0c f707 	lsl.w	r7, ip, r7
 8001d28:	433d      	orrs	r5, r7
 8001d2a:	e783      	b.n	8001c34 <HAL_GPIO_Init+0xd0>
 8001d2c:	f04f 0c03 	mov.w	ip, #3
 8001d30:	fa0c f707 	lsl.w	r7, ip, r7
 8001d34:	433d      	orrs	r5, r7
 8001d36:	e77d      	b.n	8001c34 <HAL_GPIO_Init+0xd0>
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40013c00 	.word	0x40013c00
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	b902      	cbnz	r2, 8001d54 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d52:	0409      	lsls	r1, r1, #16
 8001d54:	6181      	str	r1, [r0, #24]
  }
}
 8001d56:	4770      	bx	lr

08001d58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5a:	b08b      	sub	sp, #44	@ 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d5c:	b360      	cbz	r0, 8001db8 <HAL_PCD_Init+0x60>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d5e:	f890 34bd 	ldrb.w	r3, [r0, #1213]	@ 0x4bd
  USBx = hpcd->Instance;
 8001d62:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d64:	4605      	mov	r5, r0
 8001d66:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d076      	beq.n	8001e5c <HAL_PCD_Init+0x104>
 8001d6e:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d70:	2303      	movs	r3, #3
 8001d72:	f885 34bd 	strb.w	r3, [r5, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d76:	6be3      	ldr	r3, [r4, #60]	@ 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d78:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d7a:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
    hpcd->Init.dma_enable = 0U;
 8001d7e:	bf08      	it	eq
 8001d80:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001d82:	f001 ff53 	bl	8003c2c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d86:	f856 eb10 	ldr.w	lr, [r6], #16
 8001d8a:	46b4      	mov	ip, r6
 8001d8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001d90:	466c      	mov	r4, sp
 8001d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d9a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001d9e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001da2:	1d2f      	adds	r7, r5, #4
 8001da4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001da8:	4670      	mov	r0, lr
 8001daa:	f001 fe3b 	bl	8003a24 <USB_CoreInit>
 8001dae:	4604      	mov	r4, r0
 8001db0:	b130      	cbz	r0, 8001dc0 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001db2:	2302      	movs	r3, #2
 8001db4:	f885 34bd 	strb.w	r3, [r5, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001db8:	2401      	movs	r4, #1
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001dba:	4620      	mov	r0, r4
 8001dbc:	b00b      	add	sp, #44	@ 0x2c
 8001dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dc0:	4601      	mov	r1, r0
 8001dc2:	6828      	ldr	r0, [r5, #0]
 8001dc4:	f001 ff3a 	bl	8003c3c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc8:	6868      	ldr	r0, [r5, #4]
 8001dca:	b358      	cbz	r0, 8001e24 <HAL_PCD_Init+0xcc>
 8001dcc:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001dce:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dd2:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001dd4:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001dd8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ddc:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001de4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de8:	fa5f f28c 	uxtb.w	r2, ip
 8001dec:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dee:	e9c3 1112 	strd	r1, r1, [r3, #72]	@ 0x48
    hpcd->IN_ep[i].is_in = 1U;
 8001df2:	f883 e03d 	strb.w	lr, [r3, #61]	@ 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001df6:	f883 1040 	strb.w	r1, [r3, #64]	@ 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dfa:	6559      	str	r1, [r3, #84]	@ 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfc:	d3ea      	bcc.n	8001dd4 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001dfe:	2200      	movs	r2, #0
 8001e00:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e08:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8001e0a:	f883 427c 	strb.w	r4, [r3, #636]	@ 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0e:	b2cc      	uxtb	r4, r1
 8001e10:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e12:	e9c3 22a2 	strd	r2, r2, [r3, #648]	@ 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8001e16:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e1a:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e22:	d3ed      	bcc.n	8001e00 <HAL_PCD_Init+0xa8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e26:	466c      	mov	r4, sp
 8001e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001e32:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e36:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e3a:	6828      	ldr	r0, [r5, #0]
 8001e3c:	f001 ff36 	bl	8003cac <USB_DevInit>
 8001e40:	4604      	mov	r4, r0
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d1b5      	bne.n	8001db2 <HAL_PCD_Init+0x5a>
  hpcd->State = HAL_PCD_STATE_READY;
 8001e46:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001e48:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e4c:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e4e:	f885 34bd 	strb.w	r3, [r5, #1213]	@ 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e52:	f002 fbbf 	bl	80045d4 <USB_DevDisconnect>
}
 8001e56:	4620      	mov	r0, r4
 8001e58:	b00b      	add	sp, #44	@ 0x2c
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001e5c:	f880 24bc 	strb.w	r2, [r0, #1212]	@ 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001e60:	f004 fe76 	bl	8006b50 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8001e64:	6828      	ldr	r0, [r5, #0]
 8001e66:	e783      	b.n	8001d70 <HAL_PCD_Init+0x18>

08001e68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e68:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8001e6a:	f890 34bc 	ldrb.w	r3, [r0, #1212]	@ 0x4bc
 8001e6e:	2b01      	cmp	r3, #1
{
 8001e70:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e72:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001e74:	d016      	beq.n	8001ea4 <HAL_PCD_Start+0x3c>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  __HAL_LOCK(hpcd);
 8001e78:	2201      	movs	r2, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e7a:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8001e7c:	f884 24bc 	strb.w	r2, [r4, #1212]	@ 0x4bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e80:	d008      	beq.n	8001e94 <HAL_PCD_Start+0x2c>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e82:	f001 fecb 	bl	8003c1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e86:	6820      	ldr	r0, [r4, #0]
 8001e88:	f002 fb94 	bl	80045b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc

  return HAL_OK;
}
 8001e92:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e94:	69a3      	ldr	r3, [r4, #24]
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d0f3      	beq.n	8001e82 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e9a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6383      	str	r3, [r0, #56]	@ 0x38
 8001ea2:	e7ee      	b.n	8001e82 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8001ea4:	2002      	movs	r0, #2
}
 8001ea6:	bd10      	pop	{r4, pc}

08001ea8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eac:	6806      	ldr	r6, [r0, #0]
{
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	f002 fbcc 	bl	8004650 <USB_GetMode>
 8001eb8:	b110      	cbz	r0, 8001ec0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 8001eba:	b009      	add	sp, #36	@ 0x24
 8001ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	6820      	ldr	r0, [r4, #0]
 8001ec4:	f002 fb96 	bl	80045f4 <USB_ReadInterrupts>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d0f6      	beq.n	8001eba <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ecc:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ed0:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ed2:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001ed6:	f8c4 34fc 	str.w	r3, [r4, #1276]	@ 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001eda:	f002 fb8b 	bl	80045f4 <USB_ReadInterrupts>
 8001ede:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ee2:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ee4:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 8001ee8:	9303      	str	r3, [sp, #12]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001eea:	bf1e      	ittt	ne
 8001eec:	6943      	ldrne	r3, [r0, #20]
 8001eee:	f003 0302 	andne.w	r3, r3, #2
 8001ef2:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ef4:	f002 fb7e 	bl	80045f4 <USB_ReadInterrupts>
 8001ef8:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001efc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001efe:	d012      	beq.n	8001f26 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f00:	6983      	ldr	r3, [r0, #24]
 8001f02:	f023 0310 	bic.w	r3, r3, #16
 8001f06:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8001f08:	6a37      	ldr	r7, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f0a:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8001f0e:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f10:	f007 080f 	and.w	r8, r7, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f14:	f000 83bb 	beq.w	800268e <HAL_PCD_IRQHandler+0x7e6>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	f000 835b 	beq.w	80025d4 <HAL_PCD_IRQHandler+0x72c>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f1e:	6983      	ldr	r3, [r0, #24]
 8001f20:	f043 0310 	orr.w	r3, r3, #16
 8001f24:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f26:	f002 fb65 	bl	80045f4 <USB_ReadInterrupts>
 8001f2a:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f2e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f30:	f040 82b6 	bne.w	80024a0 <HAL_PCD_IRQHandler+0x5f8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f34:	f002 fb5e 	bl	80045f4 <USB_ReadInterrupts>
 8001f38:	0347      	lsls	r7, r0, #13
 8001f3a:	f100 8210 	bmi.w	800235e <HAL_PCD_IRQHandler+0x4b6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f3e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f40:	f002 fb58 	bl	80045f4 <USB_ReadInterrupts>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	f2c0 8182 	blt.w	800224e <HAL_PCD_IRQHandler+0x3a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f4a:	6820      	ldr	r0, [r4, #0]
 8001f4c:	f002 fb52 	bl	80045f4 <USB_ReadInterrupts>
 8001f50:	0503      	lsls	r3, r0, #20
 8001f52:	f100 813d 	bmi.w	80021d0 <HAL_PCD_IRQHandler+0x328>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f56:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f58:	f002 fb4c 	bl	80045f4 <USB_ReadInterrupts>
 8001f5c:	04c0      	lsls	r0, r0, #19
 8001f5e:	f100 81a0 	bmi.w	80022a2 <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f62:	6820      	ldr	r0, [r4, #0]
 8001f64:	f002 fb46 	bl	80045f4 <USB_ReadInterrupts>
 8001f68:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f6c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f6e:	f040 8181 	bne.w	8002274 <HAL_PCD_IRQHandler+0x3cc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f72:	f002 fb3f 	bl	80045f4 <USB_ReadInterrupts>
 8001f76:	0701      	lsls	r1, r0, #28
 8001f78:	f100 81e8 	bmi.w	800234c <HAL_PCD_IRQHandler+0x4a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f7c:	6820      	ldr	r0, [r4, #0]
 8001f7e:	f002 fb39 	bl	80045f4 <USB_ReadInterrupts>
 8001f82:	0602      	lsls	r2, r0, #24
 8001f84:	d571      	bpl.n	800206a <HAL_PCD_IRQHandler+0x1c2>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f86:	69b2      	ldr	r2, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f88:	6863      	ldr	r3, [r4, #4]
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f8e:	2b01      	cmp	r3, #1
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f90:	61b2      	str	r2, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f92:	d96a      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f94:	f894 22a3 	ldrb.w	r2, [r4, #675]	@ 0x2a3
 8001f98:	2a01      	cmp	r2, #1
 8001f9a:	f000 83e6 	beq.w	800276a <HAL_PCD_IRQHandler+0x8c2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d963      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fa2:	f894 22c7 	ldrb.w	r2, [r4, #711]	@ 0x2c7
 8001fa6:	2a01      	cmp	r2, #1
 8001fa8:	f000 83fa 	beq.w	80027a0 <HAL_PCD_IRQHandler+0x8f8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d95c      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fb0:	f894 22eb 	ldrb.w	r2, [r4, #747]	@ 0x2eb
 8001fb4:	2a01      	cmp	r2, #1
 8001fb6:	f000 8306 	beq.w	80025c6 <HAL_PCD_IRQHandler+0x71e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d955      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fbe:	f894 230f 	ldrb.w	r2, [r4, #783]	@ 0x30f
 8001fc2:	2a01      	cmp	r2, #1
 8001fc4:	f000 8319 	beq.w	80025fa <HAL_PCD_IRQHandler+0x752>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d94e      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fcc:	f894 2333 	ldrb.w	r2, [r4, #819]	@ 0x333
 8001fd0:	2a01      	cmp	r2, #1
 8001fd2:	f000 8421 	beq.w	8002818 <HAL_PCD_IRQHandler+0x970>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d947      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fda:	f894 2357 	ldrb.w	r2, [r4, #855]	@ 0x357
 8001fde:	2a01      	cmp	r2, #1
 8001fe0:	f000 842e 	beq.w	8002840 <HAL_PCD_IRQHandler+0x998>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fe4:	2b07      	cmp	r3, #7
 8001fe6:	d940      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fe8:	f894 237b 	ldrb.w	r2, [r4, #891]	@ 0x37b
 8001fec:	2a01      	cmp	r2, #1
 8001fee:	f000 8440 	beq.w	8002872 <HAL_PCD_IRQHandler+0x9ca>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d939      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ff6:	f894 239f 	ldrb.w	r2, [r4, #927]	@ 0x39f
 8001ffa:	2a01      	cmp	r2, #1
 8001ffc:	f000 844d 	beq.w	800289a <HAL_PCD_IRQHandler+0x9f2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002000:	2b09      	cmp	r3, #9
 8002002:	d932      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002004:	f894 23c3 	ldrb.w	r2, [r4, #963]	@ 0x3c3
 8002008:	2a01      	cmp	r2, #1
 800200a:	f000 845a 	beq.w	80028c2 <HAL_PCD_IRQHandler+0xa1a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800200e:	2b0a      	cmp	r3, #10
 8002010:	d92b      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002012:	f894 23e7 	ldrb.w	r2, [r4, #999]	@ 0x3e7
 8002016:	2a01      	cmp	r2, #1
 8002018:	f000 8467 	beq.w	80028ea <HAL_PCD_IRQHandler+0xa42>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800201c:	2b0b      	cmp	r3, #11
 800201e:	d924      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002020:	f894 240b 	ldrb.w	r2, [r4, #1035]	@ 0x40b
 8002024:	2a01      	cmp	r2, #1
 8002026:	f000 8474 	beq.w	8002912 <HAL_PCD_IRQHandler+0xa6a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d91d      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800202e:	f894 242f 	ldrb.w	r2, [r4, #1071]	@ 0x42f
 8002032:	2a01      	cmp	r2, #1
 8002034:	f000 847a 	beq.w	800292c <HAL_PCD_IRQHandler+0xa84>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002038:	2b0d      	cmp	r3, #13
 800203a:	d916      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800203c:	f894 2453 	ldrb.w	r2, [r4, #1107]	@ 0x453
 8002040:	2a01      	cmp	r2, #1
 8002042:	f000 849a 	beq.w	800297a <HAL_PCD_IRQHandler+0xad2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002046:	2b0e      	cmp	r3, #14
 8002048:	d90f      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800204a:	f894 2477 	ldrb.w	r2, [r4, #1143]	@ 0x477
 800204e:	2a01      	cmp	r2, #1
 8002050:	f000 84a1 	beq.w	8002996 <HAL_PCD_IRQHandler+0xaee>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d908      	bls.n	800206a <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002058:	f894 349b 	ldrb.w	r3, [r4, #1179]	@ 0x49b
 800205c:	2b01      	cmp	r3, #1
 800205e:	d104      	bne.n	800206a <HAL_PCD_IRQHandler+0x1c2>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002060:	6820      	ldr	r0, [r4, #0]
 8002062:	f504 6193 	add.w	r1, r4, #1176	@ 0x498
 8002066:	f002 f9b5 	bl	80043d4 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800206a:	6820      	ldr	r0, [r4, #0]
 800206c:	f002 fac2 	bl	80045f4 <USB_ReadInterrupts>
 8002070:	02c3      	lsls	r3, r0, #11
 8002072:	f140 80ab 	bpl.w	80021cc <HAL_PCD_IRQHandler+0x324>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002076:	6863      	ldr	r3, [r4, #4]
 8002078:	2b01      	cmp	r3, #1
 800207a:	f240 8089 	bls.w	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800207e:	f894 2064 	ldrb.w	r2, [r4, #100]	@ 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002082:	f8d6 1920 	ldr.w	r1, [r6, #2336]	@ 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002086:	2a01      	cmp	r2, #1
 8002088:	f000 8266 	beq.w	8002558 <HAL_PCD_IRQHandler+0x6b0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800208c:	2b02      	cmp	r3, #2
 800208e:	d97f      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002090:	f894 2088 	ldrb.w	r2, [r4, #136]	@ 0x88
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002094:	f8d6 1940 	ldr.w	r1, [r6, #2368]	@ 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002098:	2a01      	cmp	r2, #1
 800209a:	f000 8270 	beq.w	800257e <HAL_PCD_IRQHandler+0x6d6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d976      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020a2:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020a6:	f8d6 1960 	ldr.w	r1, [r6, #2400]	@ 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020aa:	2a01      	cmp	r2, #1
 80020ac:	f000 8273 	beq.w	8002596 <HAL_PCD_IRQHandler+0x6ee>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d96d      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020b4:	f894 20d0 	ldrb.w	r2, [r4, #208]	@ 0xd0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020b8:	f8d6 1980 	ldr.w	r1, [r6, #2432]	@ 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020bc:	2a01      	cmp	r2, #1
 80020be:	f000 8276 	beq.w	80025ae <HAL_PCD_IRQHandler+0x706>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d964      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020c6:	f894 20f4 	ldrb.w	r2, [r4, #244]	@ 0xf4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020ca:	f8d6 19a0 	ldr.w	r1, [r6, #2464]	@ 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020ce:	2a01      	cmp	r2, #1
 80020d0:	f000 833f 	beq.w	8002752 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d95b      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020d8:	f894 2118 	ldrb.w	r2, [r4, #280]	@ 0x118
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020dc:	f8d6 19c0 	ldr.w	r1, [r6, #2496]	@ 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020e0:	2a01      	cmp	r2, #1
 80020e2:	f000 8351 	beq.w	8002788 <HAL_PCD_IRQHandler+0x8e0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020e6:	2b07      	cmp	r3, #7
 80020e8:	d952      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020ea:	f894 213c 	ldrb.w	r2, [r4, #316]	@ 0x13c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020ee:	f8d6 19e0 	ldr.w	r1, [r6, #2528]	@ 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020f2:	2a01      	cmp	r2, #1
 80020f4:	f000 835c 	beq.w	80027b0 <HAL_PCD_IRQHandler+0x908>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d949      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020fc:	f894 2160 	ldrb.w	r2, [r4, #352]	@ 0x160
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002100:	f8d6 1a00 	ldr.w	r1, [r6, #2560]	@ 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002104:	2a01      	cmp	r2, #1
 8002106:	f000 835f 	beq.w	80027c8 <HAL_PCD_IRQHandler+0x920>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800210a:	2b09      	cmp	r3, #9
 800210c:	d940      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800210e:	f894 2184 	ldrb.w	r2, [r4, #388]	@ 0x184
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002112:	f8d6 1a20 	ldr.w	r1, [r6, #2592]	@ 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002116:	2a01      	cmp	r2, #1
 8002118:	f000 8372 	beq.w	8002800 <HAL_PCD_IRQHandler+0x958>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800211c:	2b0a      	cmp	r3, #10
 800211e:	d937      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002120:	f894 21a8 	ldrb.w	r2, [r4, #424]	@ 0x1a8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002124:	f8d6 1a40 	ldr.w	r1, [r6, #2624]	@ 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002128:	2a01      	cmp	r2, #1
 800212a:	f000 837d 	beq.w	8002828 <HAL_PCD_IRQHandler+0x980>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800212e:	2b0b      	cmp	r3, #11
 8002130:	d92e      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002132:	f894 21cc 	ldrb.w	r2, [r4, #460]	@ 0x1cc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002136:	f8d6 1a60 	ldr.w	r1, [r6, #2656]	@ 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800213a:	2a01      	cmp	r2, #1
 800213c:	f000 838d 	beq.w	800285a <HAL_PCD_IRQHandler+0x9b2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d925      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002144:	f894 21f0 	ldrb.w	r2, [r4, #496]	@ 0x1f0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002148:	f8d6 1a80 	ldr.w	r1, [r6, #2688]	@ 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800214c:	2a01      	cmp	r2, #1
 800214e:	f000 8398 	beq.w	8002882 <HAL_PCD_IRQHandler+0x9da>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002152:	2b0d      	cmp	r3, #13
 8002154:	d91c      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002156:	f894 2214 	ldrb.w	r2, [r4, #532]	@ 0x214
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800215a:	f8d6 1aa0 	ldr.w	r1, [r6, #2720]	@ 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800215e:	2a01      	cmp	r2, #1
 8002160:	f000 83a3 	beq.w	80028aa <HAL_PCD_IRQHandler+0xa02>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002164:	2b0e      	cmp	r3, #14
 8002166:	d913      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002168:	f894 2238 	ldrb.w	r2, [r4, #568]	@ 0x238
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800216c:	f8d6 1ac0 	ldr.w	r1, [r6, #2752]	@ 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002170:	2a01      	cmp	r2, #1
 8002172:	f000 83ae 	beq.w	80028d2 <HAL_PCD_IRQHandler+0xa2a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002176:	2b0f      	cmp	r3, #15
 8002178:	d90a      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800217a:	f894 225c 	ldrb.w	r2, [r4, #604]	@ 0x25c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800217e:	f8d6 1ae0 	ldr.w	r1, [r6, #2784]	@ 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002182:	2a01      	cmp	r2, #1
 8002184:	f000 83b9 	beq.w	80028fa <HAL_PCD_IRQHandler+0xa52>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002188:	2b10      	cmp	r3, #16
 800218a:	d901      	bls.n	8002190 <HAL_PCD_IRQHandler+0x2e8>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800218c:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	@ 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002190:	6820      	ldr	r0, [r4, #0]
 8002192:	6943      	ldr	r3, [r0, #20]
 8002194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002198:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800219a:	f002 fa2b 	bl	80045f4 <USB_ReadInterrupts>
 800219e:	0287      	lsls	r7, r0, #10
 80021a0:	d421      	bmi.n	80021e6 <HAL_PCD_IRQHandler+0x33e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	f002 fa26 	bl	80045f4 <USB_ReadInterrupts>
 80021a8:	0040      	lsls	r0, r0, #1
 80021aa:	f100 80c6 	bmi.w	800233a <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021ae:	6820      	ldr	r0, [r4, #0]
 80021b0:	f002 fa20 	bl	80045f4 <USB_ReadInterrupts>
 80021b4:	0741      	lsls	r1, r0, #29
 80021b6:	f57f ae80 	bpl.w	8001eba <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021be:	076a      	lsls	r2, r5, #29
 80021c0:	f100 8286 	bmi.w	80026d0 <HAL_PCD_IRQHandler+0x828>
      hpcd->Instance->GOTGINT |= RegVal;
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	432a      	orrs	r2, r5
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	e676      	b.n	8001eba <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021cc:	6820      	ldr	r0, [r4, #0]
 80021ce:	e7e4      	b.n	800219a <HAL_PCD_IRQHandler+0x2f2>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021d0:	9b03      	ldr	r3, [sp, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	07df      	lsls	r7, r3, #31
 80021d6:	f100 8277 	bmi.w	80026c8 <HAL_PCD_IRQHandler+0x820>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021da:	6820      	ldr	r0, [r4, #0]
 80021dc:	6943      	ldr	r3, [r0, #20]
 80021de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021e2:	6143      	str	r3, [r0, #20]
 80021e4:	e6b8      	b.n	8001f58 <HAL_PCD_IRQHandler+0xb0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021e6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80021ea:	f1bc 0f01 	cmp.w	ip, #1
 80021ee:	d928      	bls.n	8002242 <HAL_PCD_IRQHandler+0x39a>
 80021f0:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 80021f4:	4623      	mov	r3, r4
 80021f6:	2101      	movs	r1, #1
 80021f8:	e006      	b.n	8002208 <HAL_PCD_IRQHandler+0x360>
 80021fa:	3101      	adds	r1, #1
 80021fc:	4561      	cmp	r1, ip
 80021fe:	f102 0220 	add.w	r2, r2, #32
 8002202:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002206:	d01c      	beq.n	8002242 <HAL_PCD_IRQHandler+0x39a>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002208:	f893 02a4 	ldrb.w	r0, [r3, #676]	@ 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800220c:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800220e:	2801      	cmp	r0, #1
 8002210:	d1f3      	bne.n	80021fa <HAL_PCD_IRQHandler+0x352>
 8002212:	2d00      	cmp	r5, #0
 8002214:	daf1      	bge.n	80021fa <HAL_PCD_IRQHandler+0x352>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002216:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	@ 0x4fc
 800221a:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 800221e:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002222:	42bd      	cmp	r5, r7
 8002224:	d1e9      	bne.n	80021fa <HAL_PCD_IRQHandler+0x352>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002226:	f883 02a3 	strb.w	r0, [r3, #675]	@ 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800222a:	69b0      	ldr	r0, [r6, #24]
 800222c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8002230:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002232:	6970      	ldr	r0, [r6, #20]
 8002234:	0605      	lsls	r5, r0, #24
 8002236:	d4e0      	bmi.n	80021fa <HAL_PCD_IRQHandler+0x352>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002238:	9a03      	ldr	r2, [sp, #12]
 800223a:	6853      	ldr	r3, [r2, #4]
 800223c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002240:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002242:	6820      	ldr	r0, [r4, #0]
 8002244:	6943      	ldr	r3, [r0, #20]
 8002246:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224a:	6143      	str	r3, [r0, #20]
 800224c:	e7aa      	b.n	80021a4 <HAL_PCD_IRQHandler+0x2fc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800224e:	9a03      	ldr	r2, [sp, #12]
 8002250:	6853      	ldr	r3, [r2, #4]
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8002258:	f894 34f4 	ldrb.w	r3, [r4, #1268]	@ 0x4f4
 800225c:	2b01      	cmp	r3, #1
 800225e:	f000 8187 	beq.w	8002570 <HAL_PCD_IRQHandler+0x6c8>
        HAL_PCD_ResumeCallback(hpcd);
 8002262:	4620      	mov	r0, r4
 8002264:	f004 fcfe 	bl	8006c64 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002268:	6820      	ldr	r0, [r4, #0]
 800226a:	6943      	ldr	r3, [r0, #20]
 800226c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002270:	6143      	str	r3, [r0, #20]
 8002272:	e66b      	b.n	8001f4c <HAL_PCD_IRQHandler+0xa4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002274:	f002 f9f0 	bl	8004658 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002278:	6820      	ldr	r0, [r4, #0]
 800227a:	f001 fe61 	bl	8003f40 <USB_GetDevSpeed>
 800227e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002280:	6825      	ldr	r5, [r4, #0]
 8002282:	f001 f831 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8002286:	7b22      	ldrb	r2, [r4, #12]
 8002288:	4601      	mov	r1, r0
 800228a:	4628      	mov	r0, r5
 800228c:	f001 fc4c 	bl	8003b28 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002290:	4620      	mov	r0, r4
 8002292:	f004 fcbd 	bl	8006c10 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002296:	6820      	ldr	r0, [r4, #0]
 8002298:	6943      	ldr	r3, [r0, #20]
 800229a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229e:	6143      	str	r3, [r0, #20]
 80022a0:	e667      	b.n	8001f72 <HAL_PCD_IRQHandler+0xca>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022a2:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022a4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022a6:	6853      	ldr	r3, [r2, #4]
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022ae:	2110      	movs	r1, #16
 80022b0:	f001 fe1c 	bl	8003eec <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	6860      	ldr	r0, [r4, #4]
 80022b6:	b1d8      	cbz	r0, 80022f0 <HAL_PCD_IRQHandler+0x448>
 80022b8:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022bc:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 80022c0:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80022c8:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022ca:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80022d2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80022d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022da:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022de:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022e0:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e4:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ea:	f103 0320 	add.w	r3, r3, #32
 80022ee:	d1e7      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x418>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022f0:	9903      	ldr	r1, [sp, #12]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022f2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022f4:	69cb      	ldr	r3, [r1, #28]
 80022f6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80022fa:	61cb      	str	r3, [r1, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022fc:	2a00      	cmp	r2, #0
 80022fe:	f040 8120 	bne.w	8002542 <HAL_PCD_IRQHandler+0x69a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002302:	694b      	ldr	r3, [r1, #20]
 8002304:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002308:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800230c:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800230e:	690b      	ldr	r3, [r1, #16]
 8002310:	f043 030b 	orr.w	r3, r3, #11
 8002314:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002316:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800231a:	7c21      	ldrb	r1, [r4, #16]
 800231c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800231e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002322:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002326:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 800232a:	f002 f9a7 	bl	800467c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800232e:	6820      	ldr	r0, [r4, #0]
 8002330:	6943      	ldr	r3, [r0, #20]
 8002332:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002336:	6143      	str	r3, [r0, #20]
 8002338:	e614      	b.n	8001f64 <HAL_PCD_IRQHandler+0xbc>
      HAL_PCD_ConnectCallback(hpcd);
 800233a:	4620      	mov	r0, r4
 800233c:	f004 fc9e 	bl	8006c7c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002340:	6820      	ldr	r0, [r4, #0]
 8002342:	6943      	ldr	r3, [r0, #20]
 8002344:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002348:	6143      	str	r3, [r0, #20]
 800234a:	e731      	b.n	80021b0 <HAL_PCD_IRQHandler+0x308>
      HAL_PCD_SOFCallback(hpcd);
 800234c:	4620      	mov	r0, r4
 800234e:	f004 fc5b 	bl	8006c08 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002352:	6820      	ldr	r0, [r4, #0]
 8002354:	6943      	ldr	r3, [r0, #20]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	6143      	str	r3, [r0, #20]
 800235c:	e60f      	b.n	8001f7e <HAL_PCD_IRQHandler+0xd6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800235e:	6820      	ldr	r0, [r4, #0]
 8002360:	f002 f954 	bl	800460c <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8002364:	4681      	mov	r9, r0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002366:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8002368:	f1b9 0f00 	cmp.w	r9, #0
 800236c:	f43f ade8 	beq.w	8001f40 <HAL_PCD_IRQHandler+0x98>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002370:	e9cd 6504 	strd	r6, r5, [sp, #16]
 8002374:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
 8002378:	46a0      	mov	r8, r4
      epnum = 0U;
 800237a:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800237e:	4606      	mov	r6, r0
 8002380:	e009      	b.n	8002396 <HAL_PCD_IRQHandler+0x4ee>
      while (ep_intr != 0U)
 8002382:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8002386:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800238a:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 800238e:	f107 0720 	add.w	r7, r7, #32
 8002392:	f000 813c 	beq.w	800260e <HAL_PCD_IRQHandler+0x766>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002396:	f019 0f01 	tst.w	r9, #1
 800239a:	d0f2      	beq.n	8002382 <HAL_PCD_IRQHandler+0x4da>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800239c:	fa5f fb8a 	uxtb.w	fp, sl
 80023a0:	4630      	mov	r0, r6
 80023a2:	4659      	mov	r1, fp
 80023a4:	f002 f944 	bl	8004630 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023a8:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023aa:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023ac:	d512      	bpl.n	80023d4 <HAL_PCD_IRQHandler+0x52c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023ae:	9803      	ldr	r0, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023b0:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023b2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023b4:	f00a 020f 	and.w	r2, sl, #15
 80023b8:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023bc:	ea23 0302 	bic.w	r3, r3, r2
 80023c0:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023c2:	60b9      	str	r1, [r7, #8]
            if (hpcd->Init.dma_enable == 1U)
 80023c4:	6921      	ldr	r1, [r4, #16]
 80023c6:	2901      	cmp	r1, #1
 80023c8:	f000 8187 	beq.w	80026da <HAL_PCD_IRQHandler+0x832>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023cc:	4659      	mov	r1, fp
 80023ce:	4620      	mov	r0, r4
 80023d0:	f004 fc10 	bl	8006bf4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023d4:	072b      	lsls	r3, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023d6:	bf44      	itt	mi
 80023d8:	2308      	movmi	r3, #8
 80023da:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023dc:	06ee      	lsls	r6, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023de:	bf44      	itt	mi
 80023e0:	2310      	movmi	r3, #16
 80023e2:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023e4:	0668      	lsls	r0, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023e6:	bf44      	itt	mi
 80023e8:	2340      	movmi	r3, #64	@ 0x40
 80023ea:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023ec:	07a9      	lsls	r1, r5, #30
 80023ee:	f100 8142 	bmi.w	8002676 <HAL_PCD_IRQHandler+0x7ce>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023f2:	062a      	lsls	r2, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f4:	6826      	ldr	r6, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023f6:	d5c4      	bpl.n	8002382 <HAL_PCD_IRQHandler+0x4da>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80023f8:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
 80023fc:	f8d8 5054 	ldr.w	r5, [r8, #84]	@ 0x54
 8002400:	42ab      	cmp	r3, r5
 8002402:	d8be      	bhi.n	8002382 <HAL_PCD_IRQHandler+0x4da>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002404:	f506 6110 	add.w	r1, r6, #2304	@ 0x900
  len32b = (len + 3U) / 4U;
 8002408:	f8d8 0048 	ldr.w	r0, [r8, #72]	@ 0x48
  uint32_t USBx_BASE = (uint32_t)USBx;
 800240c:	9607      	str	r6, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800240e:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 8002412:	eba5 0c03 	sub.w	ip, r5, r3
  len32b = (len + 3U) / 4U;
 8002416:	4584      	cmp	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002418:	698a      	ldr	r2, [r1, #24]
  len32b = (len + 3U) / 4U;
 800241a:	bf28      	it	cs
 800241c:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800241e:	fa1f fe82 	uxth.w	lr, r2
  len32b = (len + 3U) / 4U;
 8002422:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002426:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 800242a:	f0c0 818e 	bcc.w	800274a <HAL_PCD_IRQHandler+0x8a2>
 800242e:	f8cd a018 	str.w	sl, [sp, #24]
 8002432:	468a      	mov	sl, r1
 8002434:	e022      	b.n	800247c <HAL_PCD_IRQHandler+0x5d4>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002436:	1aed      	subs	r5, r5, r3
 8002438:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800243c:	f8d8 104c 	ldr.w	r1, [r8, #76]	@ 0x4c
 8002440:	429d      	cmp	r5, r3
 8002442:	bf28      	it	cs
 8002444:	461d      	movcs	r5, r3
 8002446:	7c23      	ldrb	r3, [r4, #16]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	465a      	mov	r2, fp
 800244c:	b2ab      	uxth	r3, r5
 800244e:	4630      	mov	r0, r6
 8002450:	f002 f80a 	bl	8004468 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002454:	f8d8 304c 	ldr.w	r3, [r8, #76]	@ 0x4c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002458:	f8da 2018 	ldr.w	r2, [sl, #24]
    ep->xfer_buff  += len;
 800245c:	442b      	add	r3, r5
 800245e:	f8c8 304c 	str.w	r3, [r8, #76]	@ 0x4c
    ep->xfer_count += len;
 8002462:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002466:	b292      	uxth	r2, r2
    ep->xfer_count += len;
 8002468:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800246a:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800246c:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_count += len;
 8002470:	f8c8 305c 	str.w	r3, [r8, #92]	@ 0x5c
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002474:	f0c0 8164 	bcc.w	8002740 <HAL_PCD_IRQHandler+0x898>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002478:	f8d8 5054 	ldr.w	r5, [r8, #84]	@ 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800247c:	429d      	cmp	r5, r3
 800247e:	d8da      	bhi.n	8002436 <HAL_PCD_IRQHandler+0x58e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002480:	f8dd a018 	ldr.w	sl, [sp, #24]
 8002484:	6826      	ldr	r6, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002486:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002488:	f00a 050f 	and.w	r5, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800248c:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002490:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002492:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002496:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002498:	ea23 0302 	bic.w	r3, r3, r2
 800249c:	634b      	str	r3, [r1, #52]	@ 0x34
 800249e:	e770      	b.n	8002382 <HAL_PCD_IRQHandler+0x4da>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024a0:	f002 f8ac 	bl	80045fc <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80024a4:	4607      	mov	r7, r0
 80024a6:	6820      	ldr	r0, [r4, #0]
 80024a8:	2f00      	cmp	r7, #0
 80024aa:	f43f ad43 	beq.w	8001f34 <HAL_PCD_IRQHandler+0x8c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024ae:	9504      	str	r5, [sp, #16]
 80024b0:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 80024b4:	46a3      	mov	fp, r4
      epnum = 0U;
 80024b6:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024ba:	4625      	mov	r5, r4
 80024bc:	e008      	b.n	80024d0 <HAL_PCD_IRQHandler+0x628>
      while (ep_intr != 0U)
 80024be:	087f      	lsrs	r7, r7, #1
        epnum++;
 80024c0:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 80024c4:	f108 0820 	add.w	r8, r8, #32
 80024c8:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 80024cc:	f000 809c 	beq.w	8002608 <HAL_PCD_IRQHandler+0x760>
        if ((ep_intr & 0x1U) != 0U)
 80024d0:	07fc      	lsls	r4, r7, #31
 80024d2:	d5f4      	bpl.n	80024be <HAL_PCD_IRQHandler+0x616>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024d4:	fa5f f48a 	uxtb.w	r4, sl
 80024d8:	4621      	mov	r1, r4
 80024da:	f002 f89f 	bl	800461c <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024de:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024e2:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024e4:	f040 80a8 	bne.w	8002638 <HAL_PCD_IRQHandler+0x790>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024e8:	f019 0f08 	tst.w	r9, #8
 80024ec:	f040 8093 	bne.w	8002616 <HAL_PCD_IRQHandler+0x76e>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024f0:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024f4:	bf1c      	itt	ne
 80024f6:	2210      	movne	r2, #16
 80024f8:	f8c8 2008 	strne.w	r2, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024fc:	f019 0f02 	tst.w	r9, #2
 8002500:	d00f      	beq.n	8002522 <HAL_PCD_IRQHandler+0x67a>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002502:	6972      	ldr	r2, [r6, #20]
 8002504:	0611      	lsls	r1, r2, #24
 8002506:	d504      	bpl.n	8002512 <HAL_PCD_IRQHandler+0x66a>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002508:	9b03      	ldr	r3, [sp, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002510:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8002512:	f89b 227f 	ldrb.w	r2, [fp, #639]	@ 0x27f
 8002516:	2a01      	cmp	r2, #1
 8002518:	f000 812e 	beq.w	8002778 <HAL_PCD_IRQHandler+0x8d0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800251c:	2302      	movs	r3, #2
 800251e:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002522:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002526:	bf1c      	itt	ne
 8002528:	2320      	movne	r3, #32
 800252a:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800252e:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002532:	bf18      	it	ne
 8002534:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 8002538:	6828      	ldr	r0, [r5, #0]
 800253a:	bf18      	it	ne
 800253c:	f8c8 3008 	strne.w	r3, [r8, #8]
 8002540:	e7bd      	b.n	80024be <HAL_PCD_IRQHandler+0x616>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002542:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
 8002546:	f043 030b 	orr.w	r3, r3, #11
 800254a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800254e:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8002550:	f043 030b 	orr.w	r3, r3, #11
 8002554:	644b      	str	r3, [r1, #68]	@ 0x44
 8002556:	e6de      	b.n	8002316 <HAL_PCD_IRQHandler+0x46e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002558:	2900      	cmp	r1, #0
 800255a:	f6bf ad97 	bge.w	800208c <HAL_PCD_IRQHandler+0x1e4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800255e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002560:	f884 2063 	strb.w	r2, [r4, #99]	@ 0x63
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002564:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 8002568:	f001 ff34 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800256c:	6863      	ldr	r3, [r4, #4]
 800256e:	e58d      	b.n	800208c <HAL_PCD_IRQHandler+0x1e4>
        hpcd->LPM_State = LPM_L0;
 8002570:	2100      	movs	r1, #0
 8002572:	f884 14f4 	strb.w	r1, [r4, #1268]	@ 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002576:	4620      	mov	r0, r4
 8002578:	f000 fc00 	bl	8002d7c <HAL_PCDEx_LPM_Callback>
 800257c:	e674      	b.n	8002268 <HAL_PCD_IRQHandler+0x3c0>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800257e:	2900      	cmp	r1, #0
 8002580:	f6bf ad8d 	bge.w	800209e <HAL_PCD_IRQHandler+0x1f6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002584:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002586:	f884 2087 	strb.w	r2, [r4, #135]	@ 0x87
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800258a:	f104 0184 	add.w	r1, r4, #132	@ 0x84
 800258e:	f001 ff21 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002592:	6863      	ldr	r3, [r4, #4]
 8002594:	e583      	b.n	800209e <HAL_PCD_IRQHandler+0x1f6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002596:	2900      	cmp	r1, #0
 8002598:	f6bf ad8a 	bge.w	80020b0 <HAL_PCD_IRQHandler+0x208>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800259c:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800259e:	f884 20ab 	strb.w	r2, [r4, #171]	@ 0xab
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025a2:	f104 01a8 	add.w	r1, r4, #168	@ 0xa8
 80025a6:	f001 ff15 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025aa:	6863      	ldr	r3, [r4, #4]
 80025ac:	e580      	b.n	80020b0 <HAL_PCD_IRQHandler+0x208>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025ae:	2900      	cmp	r1, #0
 80025b0:	f6bf ad87 	bge.w	80020c2 <HAL_PCD_IRQHandler+0x21a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025b4:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025b6:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025ba:	f104 01cc 	add.w	r1, r4, #204	@ 0xcc
 80025be:	f001 ff09 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c2:	6863      	ldr	r3, [r4, #4]
 80025c4:	e57d      	b.n	80020c2 <HAL_PCD_IRQHandler+0x21a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025c6:	6820      	ldr	r0, [r4, #0]
 80025c8:	f504 713a 	add.w	r1, r4, #744	@ 0x2e8
 80025cc:	f001 ff02 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d0:	6863      	ldr	r3, [r4, #4]
 80025d2:	e4f2      	b.n	8001fba <HAL_PCD_IRQHandler+0x112>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025d4:	2208      	movs	r2, #8
 80025d6:	f204 41c4 	addw	r1, r4, #1220	@ 0x4c4
 80025da:	4630      	mov	r0, r6
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025dc:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025e0:	f001 ff58 	bl	8004494 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e4:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 80025e8:	f3c7 130a 	ubfx	r3, r7, #4, #11
 80025ec:	f8d2 129c 	ldr.w	r1, [r2, #668]	@ 0x29c
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025f0:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f2:	440b      	add	r3, r1
 80025f4:	f8c2 329c 	str.w	r3, [r2, #668]	@ 0x29c
 80025f8:	e491      	b.n	8001f1e <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025fa:	6820      	ldr	r0, [r4, #0]
 80025fc:	f504 7143 	add.w	r1, r4, #780	@ 0x30c
 8002600:	f001 fee8 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002604:	6863      	ldr	r3, [r4, #4]
 8002606:	e4df      	b.n	8001fc8 <HAL_PCD_IRQHandler+0x120>
 8002608:	462c      	mov	r4, r5
 800260a:	9d04      	ldr	r5, [sp, #16]
 800260c:	e492      	b.n	8001f34 <HAL_PCD_IRQHandler+0x8c>
 800260e:	4630      	mov	r0, r6
 8002610:	9d05      	ldr	r5, [sp, #20]
 8002612:	9e04      	ldr	r6, [sp, #16]
 8002614:	e494      	b.n	8001f40 <HAL_PCD_IRQHandler+0x98>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002616:	6829      	ldr	r1, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002618:	2208      	movs	r2, #8
 800261a:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800261e:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002620:	f501 6230 	add.w	r2, r1, #2816	@ 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002624:	49bf      	ldr	r1, [pc, #764]	@ (8002924 <HAL_PCD_IRQHandler+0xa7c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002626:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800262a:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800262c:	6893      	ldr	r3, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800262e:	d867      	bhi.n	8002700 <HAL_PCD_IRQHandler+0x858>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002630:	4628      	mov	r0, r5
 8002632:	f004 facf 	bl	8006bd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002636:	e75b      	b.n	80024f0 <HAL_PCD_IRQHandler+0x648>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002638:	6828      	ldr	r0, [r5, #0]
  if (hpcd->Init.dma_enable == 1U)
 800263a:	6929      	ldr	r1, [r5, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800263c:	2201      	movs	r2, #1
 800263e:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002642:	f500 6230 	add.w	r2, r0, #2816	@ 0xb00
 8002646:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 800264a:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800264c:	f8d0 e040 	ldr.w	lr, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002650:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002652:	d067      	beq.n	8002724 <HAL_PCD_IRQHandler+0x87c>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002654:	49b4      	ldr	r1, [pc, #720]	@ (8002928 <HAL_PCD_IRQHandler+0xa80>)
 8002656:	458e      	cmp	lr, r1
 8002658:	f000 80c2 	beq.w	80027e0 <HAL_PCD_IRQHandler+0x938>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800265c:	f1ba 0f00 	cmp.w	sl, #0
 8002660:	d104      	bne.n	800266c <HAL_PCD_IRQHandler+0x7c4>
 8002662:	f8d5 2294 	ldr.w	r2, [r5, #660]	@ 0x294
 8002666:	2a00      	cmp	r2, #0
 8002668:	f000 818f 	beq.w	800298a <HAL_PCD_IRQHandler+0xae2>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800266c:	4621      	mov	r1, r4
 800266e:	4628      	mov	r0, r5
 8002670:	f004 fab6 	bl	8006be0 <HAL_PCD_DataOutStageCallback>
 8002674:	e738      	b.n	80024e8 <HAL_PCD_IRQHandler+0x640>
            (void)USB_FlushTxFifo(USBx, epnum);
 8002676:	9804      	ldr	r0, [sp, #16]
 8002678:	4651      	mov	r1, sl
 800267a:	f001 fc37 	bl	8003eec <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 800267e:	f898 303f 	ldrb.w	r3, [r8, #63]	@ 0x3f
 8002682:	2b01      	cmp	r3, #1
 8002684:	f000 80b4 	beq.w	80027f0 <HAL_PCD_IRQHandler+0x948>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002688:	2302      	movs	r3, #2
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	e6b1      	b.n	80023f2 <HAL_PCD_IRQHandler+0x54a>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800268e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002692:	421f      	tst	r7, r3
 8002694:	f43f ac43 	beq.w	8001f1e <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002698:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 800269c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80026a0:	f3c7 120a 	ubfx	r2, r7, #4, #11
 80026a4:	f8d8 128c 	ldr.w	r1, [r8, #652]	@ 0x28c
 80026a8:	4630      	mov	r0, r6
 80026aa:	4617      	mov	r7, r2
 80026ac:	f001 fef2 	bl	8004494 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026b0:	f8d8 328c 	ldr.w	r3, [r8, #652]	@ 0x28c
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026b4:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026b6:	443b      	add	r3, r7
 80026b8:	f8c8 328c 	str.w	r3, [r8, #652]	@ 0x28c
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026bc:	f8d8 329c 	ldr.w	r3, [r8, #668]	@ 0x29c
 80026c0:	443b      	add	r3, r7
 80026c2:	f8c8 329c 	str.w	r3, [r8, #668]	@ 0x29c
 80026c6:	e42a      	b.n	8001f1e <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 80026c8:	4620      	mov	r0, r4
 80026ca:	f004 fab3 	bl	8006c34 <HAL_PCD_SuspendCallback>
 80026ce:	e584      	b.n	80021da <HAL_PCD_IRQHandler+0x332>
        HAL_PCD_DisconnectCallback(hpcd);
 80026d0:	4620      	mov	r0, r4
 80026d2:	f004 fad7 	bl	8006c84 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	e574      	b.n	80021c4 <HAL_PCD_IRQHandler+0x31c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026da:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	@ 0x48
 80026de:	4413      	add	r3, r2
 80026e0:	f8c8 304c 	str.w	r3, [r8, #76]	@ 0x4c
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026e4:	f1ba 0f00 	cmp.w	sl, #0
 80026e8:	f47f ae70 	bne.w	80023cc <HAL_PCD_IRQHandler+0x524>
 80026ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f47f ae6c 	bne.w	80023cc <HAL_PCD_IRQHandler+0x524>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026f4:	6820      	ldr	r0, [r4, #0]
 80026f6:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 80026fa:	f001 ffbf 	bl	800467c <USB_EP0_OutStart>
 80026fe:	e665      	b.n	80023cc <HAL_PCD_IRQHandler+0x524>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002700:	0418      	lsls	r0, r3, #16
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002702:	bf44      	itt	mi
 8002704:	f44f 4100 	movmi.w	r1, #32768	@ 0x8000
 8002708:	6091      	strmi	r1, [r2, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 800270a:	4628      	mov	r0, r5
 800270c:	f004 fa62 	bl	8006bd4 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002710:	6929      	ldr	r1, [r5, #16]
 8002712:	2901      	cmp	r1, #1
 8002714:	f47f aeec 	bne.w	80024f0 <HAL_PCD_IRQHandler+0x648>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002718:	6828      	ldr	r0, [r5, #0]
 800271a:	f205 42c4 	addw	r2, r5, #1220	@ 0x4c4
 800271e:	f001 ffad 	bl	800467c <USB_EP0_OutStart>
 8002722:	e6e5      	b.n	80024f0 <HAL_PCD_IRQHandler+0x648>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002724:	0719      	lsls	r1, r3, #28
 8002726:	f140 8093 	bpl.w	8002850 <HAL_PCD_IRQHandler+0x9a8>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800272a:	497e      	ldr	r1, [pc, #504]	@ (8002924 <HAL_PCD_IRQHandler+0xa7c>)
 800272c:	458e      	cmp	lr, r1
 800272e:	f67f aedb 	bls.w	80024e8 <HAL_PCD_IRQHandler+0x640>
 8002732:	0418      	lsls	r0, r3, #16
 8002734:	f57f aed8 	bpl.w	80024e8 <HAL_PCD_IRQHandler+0x640>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002738:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800273c:	6091      	str	r1, [r2, #8]
 800273e:	e6d3      	b.n	80024e8 <HAL_PCD_IRQHandler+0x640>
  if (ep->xfer_len <= ep->xfer_count)
 8002740:	f8dd a018 	ldr.w	sl, [sp, #24]
 8002744:	f8d8 5054 	ldr.w	r5, [r8, #84]	@ 0x54
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002748:	6826      	ldr	r6, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 800274a:	42ab      	cmp	r3, r5
 800274c:	f4ff ae19 	bcc.w	8002382 <HAL_PCD_IRQHandler+0x4da>
 8002750:	e699      	b.n	8002486 <HAL_PCD_IRQHandler+0x5de>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002752:	2900      	cmp	r1, #0
 8002754:	f6bf acbe 	bge.w	80020d4 <HAL_PCD_IRQHandler+0x22c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002758:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800275a:	f884 20f3 	strb.w	r2, [r4, #243]	@ 0xf3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800275e:	f104 01f0 	add.w	r1, r4, #240	@ 0xf0
 8002762:	f001 fe37 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002766:	6863      	ldr	r3, [r4, #4]
 8002768:	e4b4      	b.n	80020d4 <HAL_PCD_IRQHandler+0x22c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800276a:	6820      	ldr	r0, [r4, #0]
 800276c:	f504 7128 	add.w	r1, r4, #672	@ 0x2a0
 8002770:	f001 fe30 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002774:	6863      	ldr	r3, [r4, #4]
 8002776:	e412      	b.n	8001f9e <HAL_PCD_IRQHandler+0xf6>
              ep->is_iso_incomplete = 0U;
 8002778:	2200      	movs	r2, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800277a:	4621      	mov	r1, r4
              ep->is_iso_incomplete = 0U;
 800277c:	f88b 227f 	strb.w	r2, [fp, #639]	@ 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002780:	4628      	mov	r0, r5
 8002782:	f004 fa73 	bl	8006c6c <HAL_PCD_ISOOUTIncompleteCallback>
 8002786:	e6c9      	b.n	800251c <HAL_PCD_IRQHandler+0x674>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002788:	2900      	cmp	r1, #0
 800278a:	f6bf acac 	bge.w	80020e6 <HAL_PCD_IRQHandler+0x23e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800278e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002790:	f884 2117 	strb.w	r2, [r4, #279]	@ 0x117
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002794:	f504 718a 	add.w	r1, r4, #276	@ 0x114
 8002798:	f001 fe1c 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800279c:	6863      	ldr	r3, [r4, #4]
 800279e:	e4a2      	b.n	80020e6 <HAL_PCD_IRQHandler+0x23e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	f504 7131 	add.w	r1, r4, #708	@ 0x2c4
 80027a6:	f001 fe15 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027aa:	6863      	ldr	r3, [r4, #4]
 80027ac:	f7ff bbfe 	b.w	8001fac <HAL_PCD_IRQHandler+0x104>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027b0:	2900      	cmp	r1, #0
 80027b2:	f6bf aca1 	bge.w	80020f8 <HAL_PCD_IRQHandler+0x250>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027b6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027b8:	f884 213b 	strb.w	r2, [r4, #315]	@ 0x13b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027bc:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 80027c0:	f001 fe08 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027c4:	6863      	ldr	r3, [r4, #4]
 80027c6:	e497      	b.n	80020f8 <HAL_PCD_IRQHandler+0x250>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027c8:	2900      	cmp	r1, #0
 80027ca:	f6bf ac9e 	bge.w	800210a <HAL_PCD_IRQHandler+0x262>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027ce:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027d0:	f884 215f 	strb.w	r2, [r4, #351]	@ 0x15f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027d4:	f504 71ae 	add.w	r1, r4, #348	@ 0x15c
 80027d8:	f001 fdfc 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027dc:	6863      	ldr	r3, [r4, #4]
 80027de:	e494      	b.n	800210a <HAL_PCD_IRQHandler+0x262>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027e0:	0419      	lsls	r1, r3, #16
 80027e2:	d4a9      	bmi.n	8002738 <HAL_PCD_IRQHandler+0x890>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027e4:	069b      	lsls	r3, r3, #26
 80027e6:	f57f af41 	bpl.w	800266c <HAL_PCD_IRQHandler+0x7c4>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027ea:	2120      	movs	r1, #32
 80027ec:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027ee:	e73d      	b.n	800266c <HAL_PCD_IRQHandler+0x7c4>
              ep->is_iso_incomplete = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f888 303f 	strb.w	r3, [r8, #63]	@ 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027f6:	4659      	mov	r1, fp
 80027f8:	4620      	mov	r0, r4
 80027fa:	f004 fa3b 	bl	8006c74 <HAL_PCD_ISOINIncompleteCallback>
 80027fe:	e743      	b.n	8002688 <HAL_PCD_IRQHandler+0x7e0>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002800:	2900      	cmp	r1, #0
 8002802:	f6bf ac8b 	bge.w	800211c <HAL_PCD_IRQHandler+0x274>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002806:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002808:	f884 2183 	strb.w	r2, [r4, #387]	@ 0x183
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800280c:	f504 71c0 	add.w	r1, r4, #384	@ 0x180
 8002810:	f001 fde0 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002814:	6863      	ldr	r3, [r4, #4]
 8002816:	e481      	b.n	800211c <HAL_PCD_IRQHandler+0x274>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	f504 714c 	add.w	r1, r4, #816	@ 0x330
 800281e:	f001 fdd9 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002822:	6863      	ldr	r3, [r4, #4]
 8002824:	f7ff bbd7 	b.w	8001fd6 <HAL_PCD_IRQHandler+0x12e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002828:	2900      	cmp	r1, #0
 800282a:	f6bf ac80 	bge.w	800212e <HAL_PCD_IRQHandler+0x286>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800282e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002830:	f884 21a7 	strb.w	r2, [r4, #423]	@ 0x1a7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002834:	f504 71d2 	add.w	r1, r4, #420	@ 0x1a4
 8002838:	f001 fdcc 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800283c:	6863      	ldr	r3, [r4, #4]
 800283e:	e476      	b.n	800212e <HAL_PCD_IRQHandler+0x286>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002840:	6820      	ldr	r0, [r4, #0]
 8002842:	f504 7155 	add.w	r1, r4, #852	@ 0x354
 8002846:	f001 fdc5 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800284a:	6863      	ldr	r3, [r4, #4]
 800284c:	f7ff bbca 	b.w	8001fe4 <HAL_PCD_IRQHandler+0x13c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002850:	0699      	lsls	r1, r3, #26
 8002852:	d573      	bpl.n	800293c <HAL_PCD_IRQHandler+0xa94>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002854:	2120      	movs	r1, #32
 8002856:	6091      	str	r1, [r2, #8]
 8002858:	e646      	b.n	80024e8 <HAL_PCD_IRQHandler+0x640>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800285a:	2900      	cmp	r1, #0
 800285c:	f6bf ac70 	bge.w	8002140 <HAL_PCD_IRQHandler+0x298>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002860:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002862:	f884 21cb 	strb.w	r2, [r4, #459]	@ 0x1cb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002866:	f504 71e4 	add.w	r1, r4, #456	@ 0x1c8
 800286a:	f001 fdb3 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800286e:	6863      	ldr	r3, [r4, #4]
 8002870:	e466      	b.n	8002140 <HAL_PCD_IRQHandler+0x298>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002872:	6820      	ldr	r0, [r4, #0]
 8002874:	f504 715e 	add.w	r1, r4, #888	@ 0x378
 8002878:	f001 fdac 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800287c:	6863      	ldr	r3, [r4, #4]
 800287e:	f7ff bbb8 	b.w	8001ff2 <HAL_PCD_IRQHandler+0x14a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002882:	2900      	cmp	r1, #0
 8002884:	f6bf ac65 	bge.w	8002152 <HAL_PCD_IRQHandler+0x2aa>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002888:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800288a:	f884 21ef 	strb.w	r2, [r4, #495]	@ 0x1ef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800288e:	f504 71f6 	add.w	r1, r4, #492	@ 0x1ec
 8002892:	f001 fd9f 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002896:	6863      	ldr	r3, [r4, #4]
 8002898:	e45b      	b.n	8002152 <HAL_PCD_IRQHandler+0x2aa>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800289a:	6820      	ldr	r0, [r4, #0]
 800289c:	f504 7167 	add.w	r1, r4, #924	@ 0x39c
 80028a0:	f001 fd98 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a4:	6863      	ldr	r3, [r4, #4]
 80028a6:	f7ff bbab 	b.w	8002000 <HAL_PCD_IRQHandler+0x158>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028aa:	2900      	cmp	r1, #0
 80028ac:	f6bf ac5a 	bge.w	8002164 <HAL_PCD_IRQHandler+0x2bc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028b0:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028b2:	f884 2213 	strb.w	r2, [r4, #531]	@ 0x213
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028b6:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 80028ba:	f001 fd8b 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028be:	6863      	ldr	r3, [r4, #4]
 80028c0:	e450      	b.n	8002164 <HAL_PCD_IRQHandler+0x2bc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028c2:	6820      	ldr	r0, [r4, #0]
 80028c4:	f504 7170 	add.w	r1, r4, #960	@ 0x3c0
 80028c8:	f001 fd84 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028cc:	6863      	ldr	r3, [r4, #4]
 80028ce:	f7ff bb9e 	b.w	800200e <HAL_PCD_IRQHandler+0x166>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028d2:	2900      	cmp	r1, #0
 80028d4:	f6bf ac4f 	bge.w	8002176 <HAL_PCD_IRQHandler+0x2ce>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028d8:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028da:	f884 2237 	strb.w	r2, [r4, #567]	@ 0x237
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028de:	f504 710d 	add.w	r1, r4, #564	@ 0x234
 80028e2:	f001 fd77 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e6:	6863      	ldr	r3, [r4, #4]
 80028e8:	e445      	b.n	8002176 <HAL_PCD_IRQHandler+0x2ce>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028ea:	6820      	ldr	r0, [r4, #0]
 80028ec:	f504 7179 	add.w	r1, r4, #996	@ 0x3e4
 80028f0:	f001 fd70 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f4:	6863      	ldr	r3, [r4, #4]
 80028f6:	f7ff bb91 	b.w	800201c <HAL_PCD_IRQHandler+0x174>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028fa:	2900      	cmp	r1, #0
 80028fc:	f6bf ac44 	bge.w	8002188 <HAL_PCD_IRQHandler+0x2e0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002900:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002902:	f884 225b 	strb.w	r2, [r4, #603]	@ 0x25b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002906:	f504 7116 	add.w	r1, r4, #600	@ 0x258
 800290a:	f001 fd63 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800290e:	6863      	ldr	r3, [r4, #4]
 8002910:	e43a      	b.n	8002188 <HAL_PCD_IRQHandler+0x2e0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002912:	6820      	ldr	r0, [r4, #0]
 8002914:	f504 6181 	add.w	r1, r4, #1032	@ 0x408
 8002918:	f001 fd5c 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800291c:	6863      	ldr	r3, [r4, #4]
 800291e:	f7ff bb84 	b.w	800202a <HAL_PCD_IRQHandler+0x182>
 8002922:	bf00      	nop
 8002924:	4f54300a 	.word	0x4f54300a
 8002928:	4f54310a 	.word	0x4f54310a
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	f204 412c 	addw	r1, r4, #1068	@ 0x42c
 8002932:	f001 fd4f 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002936:	6863      	ldr	r3, [r4, #4]
 8002938:	f7ff bb7e 	b.w	8002038 <HAL_PCD_IRQHandler+0x190>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800293c:	f013 0f28 	tst.w	r3, #40	@ 0x28
 8002940:	f47f add2 	bne.w	80024e8 <HAL_PCD_IRQHandler+0x640>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002944:	491b      	ldr	r1, [pc, #108]	@ (80029b4 <HAL_PCD_IRQHandler+0xb0c>)
 8002946:	458e      	cmp	lr, r1
 8002948:	d902      	bls.n	8002950 <HAL_PCD_IRQHandler+0xaa8>
 800294a:	041b      	lsls	r3, r3, #16
 800294c:	f53f aef4 	bmi.w	8002738 <HAL_PCD_IRQHandler+0x890>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002950:	6911      	ldr	r1, [r2, #16]
 8002952:	f8db 2298 	ldr.w	r2, [fp, #664]	@ 0x298
 8002956:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800295a:	1a52      	subs	r2, r2, r1
 800295c:	f8cb 229c 	str.w	r2, [fp, #668]	@ 0x29c
        if (epnum == 0U)
 8002960:	f1ba 0f00 	cmp.w	sl, #0
 8002964:	f47f ae82 	bne.w	800266c <HAL_PCD_IRQHandler+0x7c4>
          if (ep->xfer_len == 0U)
 8002968:	f8d5 1294 	ldr.w	r1, [r5, #660]	@ 0x294
 800296c:	b1d9      	cbz	r1, 80029a6 <HAL_PCD_IRQHandler+0xafe>
            ep->xfer_buff += ep->xfer_count;
 800296e:	f8d5 128c 	ldr.w	r1, [r5, #652]	@ 0x28c
 8002972:	4411      	add	r1, r2
 8002974:	f8c5 128c 	str.w	r1, [r5, #652]	@ 0x28c
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002978:	e678      	b.n	800266c <HAL_PCD_IRQHandler+0x7c4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800297a:	6820      	ldr	r0, [r4, #0]
 800297c:	f504 618a 	add.w	r1, r4, #1104	@ 0x450
 8002980:	f001 fd28 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002984:	6863      	ldr	r3, [r4, #4]
 8002986:	f7ff bb5e 	b.w	8002046 <HAL_PCD_IRQHandler+0x19e>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800298a:	f205 42c4 	addw	r2, r5, #1220	@ 0x4c4
 800298e:	4651      	mov	r1, sl
 8002990:	f001 fe74 	bl	800467c <USB_EP0_OutStart>
 8002994:	e66a      	b.n	800266c <HAL_PCD_IRQHandler+0x7c4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002996:	6820      	ldr	r0, [r4, #0]
 8002998:	f204 4174 	addw	r1, r4, #1140	@ 0x474
 800299c:	f001 fd1a 	bl	80043d4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a0:	6863      	ldr	r3, [r4, #4]
 80029a2:	f7ff bb57 	b.w	8002054 <HAL_PCD_IRQHandler+0x1ac>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029a6:	f205 42c4 	addw	r2, r5, #1220	@ 0x4c4
 80029aa:	2101      	movs	r1, #1
 80029ac:	f001 fe66 	bl	800467c <USB_EP0_OutStart>
 80029b0:	e65c      	b.n	800266c <HAL_PCD_IRQHandler+0x7c4>
 80029b2:	bf00      	nop
 80029b4:	4f54300a 	.word	0x4f54300a

080029b8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80029b8:	f890 24bc 	ldrb.w	r2, [r0, #1212]	@ 0x4bc
 80029bc:	2a01      	cmp	r2, #1
 80029be:	d00d      	beq.n	80029dc <HAL_PCD_SetAddress+0x24>
{
 80029c0:	b510      	push	{r4, lr}
 80029c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80029c4:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029c6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80029c8:	f884 24bc 	strb.w	r2, [r4, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80029cc:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029d0:	f001 fde0 	bl	8004594 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 80029da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80029dc:	2002      	movs	r0, #2
}
 80029de:	4770      	bx	lr

080029e0 <HAL_PCD_EP_Open>:
{
 80029e0:	b510      	push	{r4, lr}
 80029e2:	f001 0e0f 	and.w	lr, r1, #15
 80029e6:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80029ea:	0609      	lsls	r1, r1, #24
{
 80029ec:	4604      	mov	r4, r0
 80029ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80029f2:	d424      	bmi.n	8002a3e <HAL_PCD_EP_Open+0x5e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f4:	f50c 711f 	add.w	r1, ip, #636	@ 0x27c
 80029f8:	4401      	add	r1, r0
    ep->is_in = 0U;
 80029fa:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 80029fe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002a02:	f04f 0c00 	mov.w	ip, #0
 8002a06:	f880 c27d 	strb.w	ip, [r0, #637]	@ 0x27d
  ep->maxpacket = ep_mps;
 8002a0a:	60ca      	str	r2, [r1, #12]
  if (ep->is_in != 0U)
 8002a0c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a0e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8002a12:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8002a14:	b10a      	cbz	r2, 8002a1a <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 8002a16:	f8a1 e008 	strh.w	lr, [r1, #8]
  if (ep_type == EP_TYPE_BULK)
 8002a1a:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002a1c:	bf04      	itt	eq
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8002a22:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d015      	beq.n	8002a56 <HAL_PCD_EP_Open+0x76>
 8002a2a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a2c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002a2e:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a32:	f001 fa91 	bl	8003f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 8002a3c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3e:	f10c 013c 	add.w	r1, ip, #60	@ 0x3c
 8002a42:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002a44:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8002a48:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002a4c:	f04f 0c01 	mov.w	ip, #1
 8002a50:	f880 c03d 	strb.w	ip, [r0, #61]	@ 0x3d
 8002a54:	e7d9      	b.n	8002a0a <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8002a56:	2002      	movs	r0, #2
}
 8002a58:	bd10      	pop	{r4, pc}
 8002a5a:	bf00      	nop

08002a5c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002a5c:	f001 030f 	and.w	r3, r1, #15
 8002a60:	f001 020f 	and.w	r2, r1, #15
{
 8002a64:	b510      	push	{r4, lr}
 8002a66:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002a6a:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002a6c:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 8002a6e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 8002a72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a76:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002a7a:	d415      	bmi.n	8002aa8 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a7c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002a80:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8002a82:	f04f 0c00 	mov.w	ip, #0
 8002a86:	f880 c27d 	strb.w	ip, [r0, #637]	@ 0x27d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a8a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002a8c:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d014      	beq.n	8002abe <HAL_PCD_EP_Close+0x62>
 8002a94:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a96:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002a98:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a9c:	f001 faa4 	bl	8003fe8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 8002aa6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa8:	333c      	adds	r3, #60	@ 0x3c
 8002aaa:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8002aac:	f04f 0c01 	mov.w	ip, #1
 8002ab0:	f880 c03d 	strb.w	ip, [r0, #61]	@ 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ab4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002ab6:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d1ea      	bne.n	8002a94 <HAL_PCD_EP_Close+0x38>
 8002abe:	2002      	movs	r0, #2
}
 8002ac0:	bd10      	pop	{r4, pc}
 8002ac2:	bf00      	nop

08002ac4 <HAL_PCD_EP_Receive>:
{
 8002ac4:	b510      	push	{r4, lr}
 8002ac6:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8002aca:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8002ace:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	2124      	movs	r1, #36	@ 0x24
  ep->xfer_len = len;
 8002ad4:	f8cc 3294 	str.w	r3, [ip, #660]	@ 0x294
  ep->xfer_count = 0U;
 8002ad8:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8002ada:	f8cc 228c 	str.w	r2, [ip, #652]	@ 0x28c
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ade:	f88c 427c 	strb.w	r4, [ip, #636]	@ 0x27c
  ep->xfer_count = 0U;
 8002ae2:	f8cc 329c 	str.w	r3, [ip, #668]	@ 0x29c
  ep->is_in = 0U;
 8002ae6:	f88c 327d 	strb.w	r3, [ip, #637]	@ 0x27d
  if (hpcd->Init.dma_enable == 1U)
 8002aea:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aec:	fb01 0104 	mla	r1, r1, r4, r0
  if (hpcd->Init.dma_enable == 1U)
 8002af0:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002af2:	bf08      	it	eq
 8002af4:	f8cc 2290 	streq.w	r2, [ip, #656]	@ 0x290
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002af8:	6800      	ldr	r0, [r0, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afa:	f501 711f 	add.w	r1, r1, #636	@ 0x27c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002afe:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b00:	b91c      	cbnz	r4, 8002b0a <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b02:	f001 fbe5 	bl	80042d0 <USB_EP0StartXfer>
}
 8002b06:	2000      	movs	r0, #0
 8002b08:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b0a:	f001 facf 	bl	80040ac <USB_EPStartXfer>
}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	bf00      	nop

08002b14 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b14:	f001 010f 	and.w	r1, r1, #15
 8002b18:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002b1c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8002b20:	f8d0 029c 	ldr.w	r0, [r0, #668]	@ 0x29c
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop

08002b28 <HAL_PCD_EP_Transmit>:
{
 8002b28:	b510      	push	{r4, lr}
 8002b2a:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8002b2e:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8002b32:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b36:	2124      	movs	r1, #36	@ 0x24
  ep->xfer_len = len;
 8002b38:	f8cc 3054 	str.w	r3, [ip, #84]	@ 0x54
  ep->xfer_count = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8cc 305c 	str.w	r3, [ip, #92]	@ 0x5c
  ep->is_in = 1U;
 8002b42:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8002b44:	f8cc 204c 	str.w	r2, [ip, #76]	@ 0x4c
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b48:	f88c 403c 	strb.w	r4, [ip, #60]	@ 0x3c
  ep->is_in = 1U;
 8002b4c:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8002b50:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b52:	fb01 0104 	mla	r1, r1, r4, r0
  if (hpcd->Init.dma_enable == 1U)
 8002b56:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002b58:	bf08      	it	eq
 8002b5a:	f8cc 2050 	streq.w	r2, [ip, #80]	@ 0x50
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b5e:	6800      	ldr	r0, [r0, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b60:	313c      	adds	r1, #60	@ 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b62:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b64:	b91c      	cbnz	r4, 8002b6e <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b66:	f001 fbb3 	bl	80042d0 <USB_EP0StartXfer>
}
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b6e:	f001 fa9d 	bl	80040ac <USB_EPStartXfer>
}
 8002b72:	2000      	movs	r0, #0
 8002b74:	bd10      	pop	{r4, pc}
 8002b76:	bf00      	nop

08002b78 <HAL_PCD_EP_SetStall>:
{
 8002b78:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b7a:	6843      	ldr	r3, [r0, #4]
 8002b7c:	f001 050f 	and.w	r5, r1, #15
 8002b80:	429d      	cmp	r5, r3
 8002b82:	d833      	bhi.n	8002bec <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8002b84:	060b      	lsls	r3, r1, #24
 8002b86:	4604      	mov	r4, r0
 8002b88:	d41c      	bmi.n	8002bc4 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8002b8a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8002b8e:	2224      	movs	r2, #36	@ 0x24
 8002b90:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8002b94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8002b98:	f501 711f 	add.w	r1, r1, #636	@ 0x27c
    ep->is_in = 0U;
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
  ep->is_stall = 1U;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002ba8:	f894 24bc 	ldrb.w	r2, [r4, #1212]	@ 0x4bc
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d01b      	beq.n	8002be8 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bb0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002bb2:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bb6:	f001 fc93 	bl	80044e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bba:	b1cd      	cbz	r5, 8002bf0 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8002bc4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc8:	2124      	movs	r1, #36	@ 0x24
 8002bca:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8002bce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002bd2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd4:	313c      	adds	r1, #60	@ 0x3c
    ep->is_in = 1U;
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  ep->is_stall = 1U;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bde:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002be0:	f894 24bc 	ldrb.w	r2, [r4, #1212]	@ 0x4bc
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1e3      	bne.n	8002bb0 <HAL_PCD_EP_SetStall+0x38>
 8002be8:	2002      	movs	r0, #2
}
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002bec:	2001      	movs	r0, #1
}
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bf0:	7c21      	ldrb	r1, [r4, #16]
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8002bf8:	f001 fd40 	bl	800467c <USB_EP0_OutStart>
 8002bfc:	e7de      	b.n	8002bbc <HAL_PCD_EP_SetStall+0x44>
 8002bfe:	bf00      	nop

08002c00 <HAL_PCD_EP_ClrStall>:
{
 8002c00:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c02:	6843      	ldr	r3, [r0, #4]
 8002c04:	f001 020f 	and.w	r2, r1, #15
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d82f      	bhi.n	8002c6c <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8002c12:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8002c16:	0609      	lsls	r1, r1, #24
 8002c18:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 8002c1c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 8002c20:	d416      	bmi.n	8002c50 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002c26:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8002c28:	2500      	movs	r5, #0
 8002c2a:	f880 527d 	strb.w	r5, [r0, #637]	@ 0x27d
  ep->is_stall = 0U;
 8002c2e:	2500      	movs	r5, #0
 8002c30:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c32:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002c34:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d015      	beq.n	8002c68 <HAL_PCD_EP_ClrStall+0x68>
 8002c3c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c3e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002c40:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c44:	f001 fc7a 	bl	800453c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c48:	f884 54bc 	strb.w	r5, [r4, #1212]	@ 0x4bc
  return HAL_OK;
 8002c4c:	4628      	mov	r0, r5
}
 8002c4e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	333c      	adds	r3, #60	@ 0x3c
 8002c52:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8002c54:	2501      	movs	r5, #1
 8002c56:	f880 503d 	strb.w	r5, [r0, #61]	@ 0x3d
  ep->is_stall = 0U;
 8002c5a:	2500      	movs	r5, #0
 8002c5c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002c60:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d1e9      	bne.n	8002c3c <HAL_PCD_EP_ClrStall+0x3c>
 8002c68:	2002      	movs	r0, #2
}
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
}
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}

08002c70 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c70:	6800      	ldr	r0, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c72:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c74:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (fifo == 0U)
 8002c76:	b919      	cbnz	r1, 8002c80 <HAL_PCDEx_SetTxFiFo+0x10>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	6283      	str	r3, [r0, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	4770      	bx	lr
{
 8002c80:	b430      	push	{r4, r5}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c82:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8002c84:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c86:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002c8a:	d06b      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c8c:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
    for (i = 0U; i < (fifo - 1U); i++)
 8002c90:	2901      	cmp	r1, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c92:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002c96:	d065      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c98:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    for (i = 0U; i < (fifo - 1U); i++)
 8002c9c:	2902      	cmp	r1, #2
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c9e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002ca2:	d05f      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ca4:	f8d0 410c 	ldr.w	r4, [r0, #268]	@ 0x10c
    for (i = 0U; i < (fifo - 1U); i++)
 8002ca8:	2903      	cmp	r1, #3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002caa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002cae:	d059      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cb0:	f8d0 4110 	ldr.w	r4, [r0, #272]	@ 0x110
    for (i = 0U; i < (fifo - 1U); i++)
 8002cb4:	2904      	cmp	r1, #4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cb6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002cba:	d053      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cbc:	f8d0 4114 	ldr.w	r4, [r0, #276]	@ 0x114
    for (i = 0U; i < (fifo - 1U); i++)
 8002cc0:	2905      	cmp	r1, #5
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cc2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002cc6:	d04d      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cc8:	f8d0 4118 	ldr.w	r4, [r0, #280]	@ 0x118
    for (i = 0U; i < (fifo - 1U); i++)
 8002ccc:	2906      	cmp	r1, #6
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002cd2:	d047      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cd4:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
    for (i = 0U; i < (fifo - 1U); i++)
 8002cd8:	2907      	cmp	r1, #7
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cda:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002cde:	d041      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ce0:	f8d0 4120 	ldr.w	r4, [r0, #288]	@ 0x120
    for (i = 0U; i < (fifo - 1U); i++)
 8002ce4:	2908      	cmp	r1, #8
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ce6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002cea:	d03b      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cec:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
    for (i = 0U; i < (fifo - 1U); i++)
 8002cf0:	2909      	cmp	r1, #9
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cf2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002cf6:	d035      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cf8:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
    for (i = 0U; i < (fifo - 1U); i++)
 8002cfc:	290a      	cmp	r1, #10
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cfe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002d02:	d02f      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d04:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
    for (i = 0U; i < (fifo - 1U); i++)
 8002d08:	290b      	cmp	r1, #11
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d0a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002d0e:	d029      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d10:	f8d0 4130 	ldr.w	r4, [r0, #304]	@ 0x130
    for (i = 0U; i < (fifo - 1U); i++)
 8002d14:	290c      	cmp	r1, #12
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d16:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002d1a:	d023      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d1c:	f8d0 4134 	ldr.w	r4, [r0, #308]	@ 0x134
    for (i = 0U; i < (fifo - 1U); i++)
 8002d20:	290d      	cmp	r1, #13
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d22:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002d26:	d01d      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d28:	f8d0 4138 	ldr.w	r4, [r0, #312]	@ 0x138
    for (i = 0U; i < (fifo - 1U); i++)
 8002d2c:	290e      	cmp	r1, #14
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d2e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002d32:	d017      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d34:	f8d0 413c 	ldr.w	r4, [r0, #316]	@ 0x13c
    for (i = 0U; i < (fifo - 1U); i++)
 8002d38:	290f      	cmp	r1, #15
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d3a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002d3e:	d011      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d40:	f8d0 4140 	ldr.w	r4, [r0, #320]	@ 0x140
    for (i = 0U; i < (fifo - 1U); i++)
 8002d44:	2910      	cmp	r1, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d46:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002d4a:	d00b      	beq.n	8002d64 <HAL_PCDEx_SetTxFiFo+0xf4>
 8002d4c:	2410      	movs	r4, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d4e:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8002d52:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8002d56:	3401      	adds	r4, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d58:	f8dc 5004 	ldr.w	r5, [ip, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d5c:	428c      	cmp	r4, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d5e:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002d62:	d3f4      	bcc.n	8002d4e <HAL_PCDEx_SetTxFiFo+0xde>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d64:	3140      	adds	r1, #64	@ 0x40
 8002d66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002d6a:	431a      	orrs	r2, r3
}
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	bc30      	pop	{r4, r5}
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d70:	604a      	str	r2, [r1, #4]
}
 8002d72:	4770      	bx	lr

08002d74 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002d74:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8002d76:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002d78:	6259      	str	r1, [r3, #36]	@ 0x24
}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop

08002d80 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d80:	2800      	cmp	r0, #0
 8002d82:	f000 81d8 	beq.w	8003136 <HAL_RCC_OscConfig+0x3b6>
{
 8002d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	6803      	ldr	r3, [r0, #0]
 8002d8c:	07dd      	lsls	r5, r3, #31
{
 8002d8e:	b082      	sub	sp, #8
 8002d90:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d92:	d52f      	bpl.n	8002df4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d94:	499d      	ldr	r1, [pc, #628]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002d96:	688a      	ldr	r2, [r1, #8]
 8002d98:	f002 020c 	and.w	r2, r2, #12
 8002d9c:	2a04      	cmp	r2, #4
 8002d9e:	f000 80ec 	beq.w	8002f7a <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	688a      	ldr	r2, [r1, #8]
 8002da4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da8:	2a08      	cmp	r2, #8
 8002daa:	f000 80e2 	beq.w	8002f72 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	6863      	ldr	r3, [r4, #4]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db4:	f000 80eb 	beq.w	8002f8e <HAL_RCC_OscConfig+0x20e>
 8002db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dbc:	f000 8173 	beq.w	80030a6 <HAL_RCC_OscConfig+0x326>
 8002dc0:	4d92      	ldr	r5, [pc, #584]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002dc2:	682a      	ldr	r2, [r5, #0]
 8002dc4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002dc8:	602a      	str	r2, [r5, #0]
 8002dca:	682a      	ldr	r2, [r5, #0]
 8002dcc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dd0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 80e0 	bne.w	8002f98 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fc32 	bl	8001640 <HAL_GetTick>
 8002ddc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	e005      	b.n	8002dec <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fe fc2e 	bl	8001640 <HAL_GetTick>
 8002de4:	1b80      	subs	r0, r0, r6
 8002de6:	2864      	cmp	r0, #100	@ 0x64
 8002de8:	f200 8100 	bhi.w	8002fec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	039f      	lsls	r7, r3, #14
 8002df0:	d4f6      	bmi.n	8002de0 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	079d      	lsls	r5, r3, #30
 8002df6:	d528      	bpl.n	8002e4a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df8:	4a84      	ldr	r2, [pc, #528]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002dfa:	6891      	ldr	r1, [r2, #8]
 8002dfc:	f011 0f0c 	tst.w	r1, #12
 8002e00:	f000 809b 	beq.w	8002f3a <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e04:	6891      	ldr	r1, [r2, #8]
 8002e06:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e0a:	2908      	cmp	r1, #8
 8002e0c:	f000 8091 	beq.w	8002f32 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e10:	68e3      	ldr	r3, [r4, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 810c 	beq.w	8003030 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b7d      	ldr	r3, [pc, #500]	@ (8003010 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	4e7c      	ldr	r6, [pc, #496]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e20:	f7fe fc0e 	bl	8001640 <HAL_GetTick>
 8002e24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	e005      	b.n	8002e34 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e28:	f7fe fc0a 	bl	8001640 <HAL_GetTick>
 8002e2c:	1b40      	subs	r0, r0, r5
 8002e2e:	2802      	cmp	r0, #2
 8002e30:	f200 80dc 	bhi.w	8002fec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	6833      	ldr	r3, [r6, #0]
 8002e36:	079f      	lsls	r7, r3, #30
 8002e38:	d5f6      	bpl.n	8002e28 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	6833      	ldr	r3, [r6, #0]
 8002e3c:	6922      	ldr	r2, [r4, #16]
 8002e3e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002e42:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002e46:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	071a      	lsls	r2, r3, #28
 8002e4c:	d45c      	bmi.n	8002f08 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4e:	075d      	lsls	r5, r3, #29
 8002e50:	d53a      	bpl.n	8002ec8 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4a6e      	ldr	r2, [pc, #440]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002e54:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002e56:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	f040 8088 	bne.w	8002f6e <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e68:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e72:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4e67      	ldr	r6, [pc, #412]	@ (8003014 <HAL_RCC_OscConfig+0x294>)
 8002e76:	6833      	ldr	r3, [r6, #0]
 8002e78:	05d8      	lsls	r0, r3, #23
 8002e7a:	f140 80a7 	bpl.w	8002fcc <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7e:	68a3      	ldr	r3, [r4, #8]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f000 80b7 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x274>
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	f000 811d 	beq.w	80030c6 <HAL_RCC_OscConfig+0x346>
 8002e8c:	4e5f      	ldr	r6, [pc, #380]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002e8e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	6732      	str	r2, [r6, #112]	@ 0x70
 8002e96:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002e98:	f022 0204 	bic.w	r2, r2, #4
 8002e9c:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 80ad 	bne.w	8002ffe <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fbcc 	bl	8001640 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002eac:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eae:	e005      	b.n	8002ebc <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fbc6 	bl	8001640 <HAL_GetTick>
 8002eb4:	1bc0      	subs	r0, r0, r7
 8002eb6:	4540      	cmp	r0, r8
 8002eb8:	f200 8098 	bhi.w	8002fec <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002ebe:	079b      	lsls	r3, r3, #30
 8002ec0:	d4f6      	bmi.n	8002eb0 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec2:	2d00      	cmp	r5, #0
 8002ec4:	f040 80f9 	bne.w	80030ba <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec8:	69a3      	ldr	r3, [r4, #24]
 8002eca:	b1cb      	cbz	r3, 8002f00 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ecc:	4d4f      	ldr	r5, [pc, #316]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002ece:	68aa      	ldr	r2, [r5, #8]
 8002ed0:	f002 020c 	and.w	r2, r2, #12
 8002ed4:	2a08      	cmp	r2, #8
 8002ed6:	f000 80bc 	beq.w	8003052 <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eda:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002edc:	4b4c      	ldr	r3, [pc, #304]	@ (8003010 <HAL_RCC_OscConfig+0x290>)
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee4:	f000 80f9 	beq.w	80030da <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fbaa 	bl	8001640 <HAL_GetTick>
 8002eec:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e004      	b.n	8002efa <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe fba6 	bl	8001640 <HAL_GetTick>
 8002ef4:	1b00      	subs	r0, r0, r4
 8002ef6:	2802      	cmp	r0, #2
 8002ef8:	d878      	bhi.n	8002fec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	682b      	ldr	r3, [r5, #0]
 8002efc:	019b      	lsls	r3, r3, #6
 8002efe:	d4f7      	bmi.n	8002ef0 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002f00:	2000      	movs	r0, #0
}
 8002f02:	b002      	add	sp, #8
 8002f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f08:	6963      	ldr	r3, [r4, #20]
 8002f0a:	b1fb      	cbz	r3, 8002f4c <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8002f0c:	4b40      	ldr	r3, [pc, #256]	@ (8003010 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4e3f      	ldr	r6, [pc, #252]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8002f10:	2201      	movs	r2, #1
 8002f12:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8002f16:	f7fe fb93 	bl	8001640 <HAL_GetTick>
 8002f1a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1c:	e004      	b.n	8002f28 <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe fb8f 	bl	8001640 <HAL_GetTick>
 8002f22:	1b40      	subs	r0, r0, r5
 8002f24:	2802      	cmp	r0, #2
 8002f26:	d861      	bhi.n	8002fec <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f28:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002f2a:	079b      	lsls	r3, r3, #30
 8002f2c:	d5f7      	bpl.n	8002f1e <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	e78d      	b.n	8002e4e <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f32:	6852      	ldr	r2, [r2, #4]
 8002f34:	0251      	lsls	r1, r2, #9
 8002f36:	f53f af6b 	bmi.w	8002e10 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3a:	4a34      	ldr	r2, [pc, #208]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	0792      	lsls	r2, r2, #30
 8002f40:	d538      	bpl.n	8002fb4 <HAL_RCC_OscConfig+0x234>
 8002f42:	68e2      	ldr	r2, [r4, #12]
 8002f44:	2a01      	cmp	r2, #1
 8002f46:	d035      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8002f48:	2001      	movs	r0, #1
 8002f4a:	e7da      	b.n	8002f02 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8002f4c:	4a30      	ldr	r2, [pc, #192]	@ (8003010 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4e:	4e2f      	ldr	r6, [pc, #188]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8002f50:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8002f54:	f7fe fb74 	bl	8001640 <HAL_GetTick>
 8002f58:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5a:	e004      	b.n	8002f66 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fb70 	bl	8001640 <HAL_GetTick>
 8002f60:	1b40      	subs	r0, r0, r5
 8002f62:	2802      	cmp	r0, #2
 8002f64:	d842      	bhi.n	8002fec <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f66:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002f68:	079f      	lsls	r7, r3, #30
 8002f6a:	d4f7      	bmi.n	8002f5c <HAL_RCC_OscConfig+0x1dc>
 8002f6c:	e7df      	b.n	8002f2e <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2500      	movs	r5, #0
 8002f70:	e780      	b.n	8002e74 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f72:	684a      	ldr	r2, [r1, #4]
 8002f74:	0251      	lsls	r1, r2, #9
 8002f76:	f57f af1a 	bpl.w	8002dae <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7a:	4a24      	ldr	r2, [pc, #144]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	0392      	lsls	r2, r2, #14
 8002f80:	f57f af38 	bpl.w	8002df4 <HAL_RCC_OscConfig+0x74>
 8002f84:	6862      	ldr	r2, [r4, #4]
 8002f86:	2a00      	cmp	r2, #0
 8002f88:	f47f af34 	bne.w	8002df4 <HAL_RCC_OscConfig+0x74>
 8002f8c:	e7dc      	b.n	8002f48 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002f90:	6813      	ldr	r3, [r2, #0]
 8002f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f98:	f7fe fb52 	bl	8001640 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9c:	4e1b      	ldr	r6, [pc, #108]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002f9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa0:	e004      	b.n	8002fac <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa2:	f7fe fb4d 	bl	8001640 <HAL_GetTick>
 8002fa6:	1b40      	subs	r0, r0, r5
 8002fa8:	2864      	cmp	r0, #100	@ 0x64
 8002faa:	d81f      	bhi.n	8002fec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fac:	6833      	ldr	r3, [r6, #0]
 8002fae:	039b      	lsls	r3, r3, #14
 8002fb0:	d5f7      	bpl.n	8002fa2 <HAL_RCC_OscConfig+0x222>
 8002fb2:	e71e      	b.n	8002df2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	4915      	ldr	r1, [pc, #84]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002fb6:	6920      	ldr	r0, [r4, #16]
 8002fb8:	680a      	ldr	r2, [r1, #0]
 8002fba:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002fbe:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002fc2:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc4:	071a      	lsls	r2, r3, #28
 8002fc6:	f57f af42 	bpl.w	8002e4e <HAL_RCC_OscConfig+0xce>
 8002fca:	e79d      	b.n	8002f08 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fcc:	6833      	ldr	r3, [r6, #0]
 8002fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fb34 	bl	8001640 <HAL_GetTick>
 8002fd8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	6833      	ldr	r3, [r6, #0]
 8002fdc:	05d9      	lsls	r1, r3, #23
 8002fde:	f53f af4e 	bmi.w	8002e7e <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fe fb2d 	bl	8001640 <HAL_GetTick>
 8002fe6:	1bc0      	subs	r0, r0, r7
 8002fe8:	2802      	cmp	r0, #2
 8002fea:	d9f6      	bls.n	8002fda <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002fec:	2003      	movs	r0, #3
}
 8002fee:	b002      	add	sp, #8
 8002ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff4:	4a05      	ldr	r2, [pc, #20]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
 8002ff6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fb1f 	bl	8001640 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	4f02      	ldr	r7, [pc, #8]	@ (800300c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003004:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x2a2>
 800300c:	40023800 	.word	0x40023800
 8003010:	42470000 	.word	0x42470000
 8003014:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f7fe fb12 	bl	8001640 <HAL_GetTick>
 800301c:	1b80      	subs	r0, r0, r6
 800301e:	4540      	cmp	r0, r8
 8003020:	d8e4      	bhi.n	8002fec <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003024:	079a      	lsls	r2, r3, #30
 8003026:	d5f7      	bpl.n	8003018 <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 8003028:	2d00      	cmp	r5, #0
 800302a:	f43f af4d 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x148>
 800302e:	e044      	b.n	80030ba <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8003030:	4a42      	ldr	r2, [pc, #264]	@ (800313c <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	4e43      	ldr	r6, [pc, #268]	@ (8003140 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8003034:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003036:	f7fe fb03 	bl	8001640 <HAL_GetTick>
 800303a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303c:	e004      	b.n	8003048 <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303e:	f7fe faff 	bl	8001640 <HAL_GetTick>
 8003042:	1b40      	subs	r0, r0, r5
 8003044:	2802      	cmp	r0, #2
 8003046:	d8d1      	bhi.n	8002fec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003048:	6833      	ldr	r3, [r6, #0]
 800304a:	0799      	lsls	r1, r3, #30
 800304c:	d4f7      	bmi.n	800303e <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	e6fb      	b.n	8002e4a <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003052:	2b01      	cmp	r3, #1
 8003054:	f43f af78 	beq.w	8002f48 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8003058:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003060:	4291      	cmp	r1, r2
 8003062:	f47f af71 	bne.w	8002f48 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003068:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306c:	4291      	cmp	r1, r2
 800306e:	f47f af6b 	bne.w	8002f48 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003072:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003074:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003078:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800307a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800307e:	f47f af63 	bne.w	8002f48 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003082:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003084:	0852      	lsrs	r2, r2, #1
 8003086:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800308a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003090:	f47f af5a 	bne.w	8002f48 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003094:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003096:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800309a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800309e:	bf14      	ite	ne
 80030a0:	2001      	movne	r0, #1
 80030a2:	2000      	moveq	r0, #0
 80030a4:	e72d      	b.n	8002f02 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a6:	4b26      	ldr	r3, [pc, #152]	@ (8003140 <HAL_RCC_OscConfig+0x3c0>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030b6:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b8:	e76e      	b.n	8002f98 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4a21      	ldr	r2, [pc, #132]	@ (8003140 <HAL_RCC_OscConfig+0x3c0>)
 80030bc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c4:	e700      	b.n	8002ec8 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <HAL_RCC_OscConfig+0x3c0>)
 80030c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030ca:	f042 0204 	orr.w	r2, r2, #4
 80030ce:	671a      	str	r2, [r3, #112]	@ 0x70
 80030d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d8:	e791      	b.n	8002ffe <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80030da:	f7fe fab1 	bl	8001640 <HAL_GetTick>
 80030de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e0:	e005      	b.n	80030ee <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe faad 	bl	8001640 <HAL_GetTick>
 80030e6:	1b80      	subs	r0, r0, r6
 80030e8:	2802      	cmp	r0, #2
 80030ea:	f63f af7f 	bhi.w	8002fec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	682b      	ldr	r3, [r5, #0]
 80030f0:	0199      	lsls	r1, r3, #6
 80030f2:	d4f6      	bmi.n	80030e2 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030f4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80030f8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80030fa:	430b      	orrs	r3, r1
 80030fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003100:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8003104:	0852      	lsrs	r2, r2, #1
 8003106:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800310a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800310c:	490b      	ldr	r1, [pc, #44]	@ (800313c <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003112:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003114:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003116:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003118:	f7fe fa92 	bl	8001640 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	4d08      	ldr	r5, [pc, #32]	@ (8003140 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 800311e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003120:	e005      	b.n	800312e <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003122:	f7fe fa8d 	bl	8001640 <HAL_GetTick>
 8003126:	1b00      	subs	r0, r0, r4
 8003128:	2802      	cmp	r0, #2
 800312a:	f63f af5f 	bhi.w	8002fec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	682b      	ldr	r3, [r5, #0]
 8003130:	019a      	lsls	r2, r3, #6
 8003132:	d5f6      	bpl.n	8003122 <HAL_RCC_OscConfig+0x3a2>
 8003134:	e6e4      	b.n	8002f00 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8003136:	2001      	movs	r0, #1
}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	42470000 	.word	0x42470000
 8003140:	40023800 	.word	0x40023800

08003144 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003144:	4916      	ldr	r1, [pc, #88]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003146:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003148:	688b      	ldr	r3, [r1, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b04      	cmp	r3, #4
 8003150:	d01b      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x46>
 8003152:	2b08      	cmp	r3, #8
 8003154:	d117      	bne.n	8003186 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003156:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003158:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003160:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003164:	d113      	bne.n	800318e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003166:	480f      	ldr	r0, [pc, #60]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x60>)
 8003168:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800316c:	fba1 0100 	umull	r0, r1, r1, r0
 8003170:	f7fd fd22 	bl	8000bb8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003174:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800317c:	3301      	adds	r3, #1
 800317e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003180:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003184:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003186:	4807      	ldr	r0, [pc, #28]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8003188:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318a:	4807      	ldr	r0, [pc, #28]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800318c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4806      	ldr	r0, [pc, #24]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003190:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003194:	2300      	movs	r3, #0
 8003196:	fba1 0100 	umull	r0, r1, r1, r0
 800319a:	f7fd fd0d 	bl	8000bb8 <__aeabi_uldivmod>
 800319e:	e7e9      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x30>
 80031a0:	40023800 	.word	0x40023800
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200

080031ac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80031ac:	2800      	cmp	r0, #0
 80031ae:	f000 8087 	beq.w	80032c0 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b2:	4a48      	ldr	r2, [pc, #288]	@ (80032d4 <HAL_RCC_ClockConfig+0x128>)
 80031b4:	6813      	ldr	r3, [r2, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	428b      	cmp	r3, r1
{
 80031bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c0:	460d      	mov	r5, r1
 80031c2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	d209      	bcs.n	80031da <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	b2cb      	uxtb	r3, r1
 80031c8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d002      	beq.n	80031da <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80031d4:	2001      	movs	r0, #1
}
 80031d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	0798      	lsls	r0, r3, #30
 80031de:	d514      	bpl.n	800320a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	0759      	lsls	r1, r3, #29
 80031e2:	d504      	bpl.n	80031ee <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e4:	493c      	ldr	r1, [pc, #240]	@ (80032d8 <HAL_RCC_ClockConfig+0x12c>)
 80031e6:	688a      	ldr	r2, [r1, #8]
 80031e8:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80031ec:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	071a      	lsls	r2, r3, #28
 80031f0:	d504      	bpl.n	80031fc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f2:	4939      	ldr	r1, [pc, #228]	@ (80032d8 <HAL_RCC_ClockConfig+0x12c>)
 80031f4:	688a      	ldr	r2, [r1, #8]
 80031f6:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80031fa:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4936      	ldr	r1, [pc, #216]	@ (80032d8 <HAL_RCC_ClockConfig+0x12c>)
 80031fe:	68a0      	ldr	r0, [r4, #8]
 8003200:	688a      	ldr	r2, [r1, #8]
 8003202:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003206:	4302      	orrs	r2, r0
 8003208:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	07df      	lsls	r7, r3, #31
 800320c:	d521      	bpl.n	8003252 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	6862      	ldr	r2, [r4, #4]
 8003210:	2a01      	cmp	r2, #1
 8003212:	d057      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003214:	1e93      	subs	r3, r2, #2
 8003216:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003218:	4b2f      	ldr	r3, [pc, #188]	@ (80032d8 <HAL_RCC_ClockConfig+0x12c>)
 800321a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321c:	d94d      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	0799      	lsls	r1, r3, #30
 8003220:	d5d8      	bpl.n	80031d4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4e2d      	ldr	r6, [pc, #180]	@ (80032d8 <HAL_RCC_ClockConfig+0x12c>)
 8003224:	68b3      	ldr	r3, [r6, #8]
 8003226:	f023 0303 	bic.w	r3, r3, #3
 800322a:	4313      	orrs	r3, r2
 800322c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800322e:	f7fe fa07 	bl	8001640 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003232:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003236:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003238:	e004      	b.n	8003244 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323a:	f7fe fa01 	bl	8001640 <HAL_GetTick>
 800323e:	1bc0      	subs	r0, r0, r7
 8003240:	4540      	cmp	r0, r8
 8003242:	d844      	bhi.n	80032ce <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003244:	68b3      	ldr	r3, [r6, #8]
 8003246:	6862      	ldr	r2, [r4, #4]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003250:	d1f3      	bne.n	800323a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003252:	4a20      	ldr	r2, [pc, #128]	@ (80032d4 <HAL_RCC_ClockConfig+0x128>)
 8003254:	6813      	ldr	r3, [r2, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	42ab      	cmp	r3, r5
 800325c:	d906      	bls.n	800326c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	b2eb      	uxtb	r3, r5
 8003260:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	6813      	ldr	r3, [r2, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	42ab      	cmp	r3, r5
 800326a:	d1b3      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	075a      	lsls	r2, r3, #29
 8003270:	d506      	bpl.n	8003280 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003272:	4919      	ldr	r1, [pc, #100]	@ (80032d8 <HAL_RCC_ClockConfig+0x12c>)
 8003274:	68e0      	ldr	r0, [r4, #12]
 8003276:	688a      	ldr	r2, [r1, #8]
 8003278:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800327c:	4302      	orrs	r2, r0
 800327e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	071b      	lsls	r3, r3, #28
 8003282:	d507      	bpl.n	8003294 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003284:	4a14      	ldr	r2, [pc, #80]	@ (80032d8 <HAL_RCC_ClockConfig+0x12c>)
 8003286:	6921      	ldr	r1, [r4, #16]
 8003288:	6893      	ldr	r3, [r2, #8]
 800328a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800328e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003292:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003294:	f7ff ff56 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003298:	4a0f      	ldr	r2, [pc, #60]	@ (80032d8 <HAL_RCC_ClockConfig+0x12c>)
 800329a:	4c10      	ldr	r4, [pc, #64]	@ (80032dc <HAL_RCC_ClockConfig+0x130>)
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	4910      	ldr	r1, [pc, #64]	@ (80032e0 <HAL_RCC_ClockConfig+0x134>)
 80032a0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80032a4:	4603      	mov	r3, r0
 80032a6:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80032a8:	480e      	ldr	r0, [pc, #56]	@ (80032e4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032aa:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80032ac:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ae:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80032b0:	f7fe f97c 	bl	80015ac <HAL_InitTick>
  return HAL_OK;
 80032b4:	2000      	movs	r0, #0
}
 80032b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ba:	0198      	lsls	r0, r3, #6
 80032bc:	d4b1      	bmi.n	8003222 <HAL_RCC_ClockConfig+0x76>
 80032be:	e789      	b.n	80031d4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80032c0:	2001      	movs	r0, #1
}
 80032c2:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c4:	4b04      	ldr	r3, [pc, #16]	@ (80032d8 <HAL_RCC_ClockConfig+0x12c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	039e      	lsls	r6, r3, #14
 80032ca:	d4aa      	bmi.n	8003222 <HAL_RCC_ClockConfig+0x76>
 80032cc:	e782      	b.n	80031d4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80032ce:	2003      	movs	r0, #3
 80032d0:	e781      	b.n	80031d6 <HAL_RCC_ClockConfig+0x2a>
 80032d2:	bf00      	nop
 80032d4:	40023c00 	.word	0x40023c00
 80032d8:	40023800 	.word	0x40023800
 80032dc:	0800a7ec 	.word	0x0800a7ec
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000008 	.word	0x20000008

080032e8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80032e8:	4b01      	ldr	r3, [pc, #4]	@ (80032f0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000000 	.word	0x20000000

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032f4:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80032f6:	4905      	ldr	r1, [pc, #20]	@ (800330c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	4a05      	ldr	r2, [pc, #20]	@ (8003310 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80032fc:	6808      	ldr	r0, [r1, #0]
 80032fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003302:	5cd3      	ldrb	r3, [r2, r3]
}
 8003304:	40d8      	lsrs	r0, r3
 8003306:	4770      	bx	lr
 8003308:	40023800 	.word	0x40023800
 800330c:	20000000 	.word	0x20000000
 8003310:	0800a7e4 	.word	0x0800a7e4

08003314 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003316:	4905      	ldr	r1, [pc, #20]	@ (800332c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4a05      	ldr	r2, [pc, #20]	@ (8003330 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800331c:	6808      	ldr	r0, [r1, #0]
 800331e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003322:	5cd3      	ldrb	r3, [r2, r3]
}
 8003324:	40d8      	lsrs	r0, r3
 8003326:	4770      	bx	lr
 8003328:	40023800 	.word	0x40023800
 800332c:	20000000 	.word	0x20000000
 8003330:	0800a7e4 	.word	0x0800a7e4

08003334 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003334:	2800      	cmp	r0, #0
 8003336:	f000 8086 	beq.w	8003446 <HAL_UART_Init+0x112>
{
 800333a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800333c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003340:	4604      	mov	r4, r0
 8003342:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003346:	2b00      	cmp	r3, #0
 8003348:	d078      	beq.n	800343c <HAL_UART_Init+0x108>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800334a:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800334c:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 800334e:	2224      	movs	r2, #36	@ 0x24
 8003350:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800335a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335c:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800335e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003360:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8003364:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003366:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003368:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800336a:	4302      	orrs	r2, r0
 800336c:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800336e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003370:	4302      	orrs	r2, r0
 8003372:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003374:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8003378:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800337c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800337e:	430a      	orrs	r2, r1
 8003380:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003386:	4931      	ldr	r1, [pc, #196]	@ (800344c <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003388:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800338c:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800338e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003390:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003392:	d035      	beq.n	8003400 <HAL_UART_Init+0xcc>
 8003394:	4a2e      	ldr	r2, [pc, #184]	@ (8003450 <HAL_UART_Init+0x11c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d032      	beq.n	8003400 <HAL_UART_Init+0xcc>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800339a:	f7ff ffab 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339e:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a0:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a6:	e9d4 5300 	ldrd	r5, r3, [r4]
 80033aa:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ae:	d02a      	beq.n	8003406 <HAL_UART_Init+0xd2>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b0:	009a      	lsls	r2, r3, #2
 80033b2:	0f9b      	lsrs	r3, r3, #30
 80033b4:	f7fd fc00 	bl	8000bb8 <__aeabi_uldivmod>
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_UART_Init+0x120>)
 80033ba:	fba2 1300 	umull	r1, r3, r2, r0
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2164      	movs	r1, #100	@ 0x64
 80033c2:	fb01 0013 	mls	r0, r1, r3, r0
 80033c6:	0100      	lsls	r0, r0, #4
 80033c8:	3032      	adds	r0, #50	@ 0x32
 80033ca:	fba2 2000 	umull	r2, r0, r2, r0
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80033d4:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d6:	692b      	ldr	r3, [r5, #16]
 80033d8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80033dc:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033de:	696b      	ldr	r3, [r5, #20]
 80033e0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80033e4:	616b      	str	r3, [r5, #20]
  __HAL_UART_ENABLE(huart);
 80033e6:	68eb      	ldr	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80033ea:	2220      	movs	r2, #32
  __HAL_UART_ENABLE(huart);
 80033ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033f0:	60eb      	str	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	6421      	str	r1, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033f4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  return HAL_OK;
 80033fc:	4608      	mov	r0, r1
}
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003400:	f7ff ff88 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8003404:	e7cb      	b.n	800339e <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003406:	18da      	adds	r2, r3, r3
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	415b      	adcs	r3, r3
 800340e:	f7fd fbd3 	bl	8000bb8 <__aeabi_uldivmod>
 8003412:	4a10      	ldr	r2, [pc, #64]	@ (8003454 <HAL_UART_Init+0x120>)
 8003414:	fba2 3100 	umull	r3, r1, r2, r0
 8003418:	0949      	lsrs	r1, r1, #5
 800341a:	2364      	movs	r3, #100	@ 0x64
 800341c:	fb03 0311 	mls	r3, r3, r1, r0
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	3332      	adds	r3, #50	@ 0x32
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003432:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003436:	4413      	add	r3, r2
 8003438:	60ab      	str	r3, [r5, #8]
 800343a:	e7cc      	b.n	80033d6 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 800343c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 8003440:	f7fe f80a 	bl	8001458 <HAL_UART_MspInit>
 8003444:	e781      	b.n	800334a <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8003446:	2001      	movs	r0, #1
}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40011000 	.word	0x40011000
 8003450:	40011400 	.word	0x40011400
 8003454:	51eb851f 	.word	0x51eb851f

08003458 <HAL_UART_Transmit_DMA>:
{
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800345c:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
 8003460:	2820      	cmp	r0, #32
 8003462:	d135      	bne.n	80034d0 <HAL_UART_Transmit_DMA+0x78>
    if ((pData == NULL) || (Size == 0U))
 8003464:	b391      	cbz	r1, 80034cc <HAL_UART_Transmit_DMA+0x74>
 8003466:	b38a      	cbz	r2, 80034cc <HAL_UART_Transmit_DMA+0x74>
    __HAL_LOCK(huart);
 8003468:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800346c:	2801      	cmp	r0, #1
 800346e:	d02f      	beq.n	80034d0 <HAL_UART_Transmit_DMA+0x78>
 8003470:	2001      	movs	r0, #1
    huart->TxXferCount = Size;
 8003472:	84e2      	strh	r2, [r4, #38]	@ 0x26
    __HAL_LOCK(huart);
 8003474:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    huart->TxXferSize = Size;
 8003478:	84a2      	strh	r2, [r4, #36]	@ 0x24
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800347a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800347c:	f8df c05c 	ldr.w	ip, [pc, #92]	@ 80034dc <HAL_UART_Transmit_DMA+0x84>
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003480:	4f14      	ldr	r7, [pc, #80]	@ (80034d4 <HAL_UART_Transmit_DMA+0x7c>)
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003482:	4e15      	ldr	r6, [pc, #84]	@ (80034d8 <HAL_UART_Transmit_DMA+0x80>)
    huart->pTxBuffPtr = pData;
 8003484:	6221      	str	r1, [r4, #32]
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003486:	4613      	mov	r3, r2
 8003488:	6822      	ldr	r2, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800348c:	f04f 0e21 	mov.w	lr, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003492:	3204      	adds	r2, #4
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003494:	f884 e03d 	strb.w	lr, [r4, #61]	@ 0x3d
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003498:	e9c0 c70f 	strd	ip, r7, [r0, #60]	@ 0x3c
    huart->hdmatx->XferAbortCallback = NULL;
 800349c:	e9c0 6513 	strd	r6, r5, [r0, #76]	@ 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80034a0:	f7fe f9f2 	bl	8001888 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 80034aa:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 80034ac:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	f102 0314 	add.w	r3, r2, #20
 80034b4:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	f102 0014 	add.w	r0, r2, #20
 80034c0:	e840 3100 	strex	r1, r3, [r0]
 80034c4:	2900      	cmp	r1, #0
 80034c6:	d1f3      	bne.n	80034b0 <HAL_UART_Transmit_DMA+0x58>
    return HAL_OK;
 80034c8:	2000      	movs	r0, #0
}
 80034ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80034cc:	2001      	movs	r0, #1
}
 80034ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 80034d0:	2002      	movs	r0, #2
}
 80034d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d4:	08003535 	.word	0x08003535
 80034d8:	08003549 	.word	0x08003549
 80034dc:	080034e5 	.word	0x080034e5

080034e0 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop

080034e4 <UART_DMATransmitCplt>:
{
 80034e4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80034e6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 80034f0:	d11a      	bne.n	8003528 <UART_DMATransmitCplt+0x44>
    huart->TxXferCount = 0x00U;
 80034f2:	6802      	ldr	r2, [r0, #0]
 80034f4:	84c3      	strh	r3, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	f102 0314 	add.w	r3, r2, #20
 80034fa:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	f102 0014 	add.w	r0, r2, #20
 8003506:	e840 3100 	strex	r1, r3, [r0]
 800350a:	2900      	cmp	r1, #0
 800350c:	d1f3      	bne.n	80034f6 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	f102 030c 	add.w	r3, r2, #12
 8003512:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	f102 000c 	add.w	r0, r2, #12
 800351e:	e840 3100 	strex	r1, r3, [r0]
 8003522:	2900      	cmp	r1, #0
 8003524:	d1f3      	bne.n	800350e <UART_DMATransmitCplt+0x2a>
}
 8003526:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003528:	f7ff ffda 	bl	80034e0 <HAL_UART_TxCpltCallback>
}
 800352c:	bd08      	pop	{r3, pc}
 800352e:	bf00      	nop

08003530 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop

08003534 <UART_DMATxHalfCplt>:
{
 8003534:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003536:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003538:	f7ff fffa 	bl	8003530 <HAL_UART_TxHalfCpltCallback>
}
 800353c:	bd08      	pop	{r3, pc}
 800353e:	bf00      	nop

08003540 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop

08003544 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop

08003548 <UART_DMAError>:
{
 8003548:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800354c:	6803      	ldr	r3, [r0, #0]
 800354e:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003550:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8003554:	2a21      	cmp	r2, #33	@ 0x21
 8003556:	d00b      	beq.n	8003570 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003558:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800355a:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 800355e:	2a22      	cmp	r2, #34	@ 0x22
 8003560:	d01e      	beq.n	80035a0 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003562:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003564:	f043 0310 	orr.w	r3, r3, #16
 8003568:	6403      	str	r3, [r0, #64]	@ 0x40
  HAL_UART_ErrorCallback(huart);
 800356a:	f7ff ffeb 	bl	8003544 <HAL_UART_ErrorCallback>
}
 800356e:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003570:	0609      	lsls	r1, r1, #24
 8003572:	d5f1      	bpl.n	8003558 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8003574:	2200      	movs	r2, #0
 8003576:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	f103 020c 	add.w	r2, r3, #12
 800357c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003580:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	f103 0c0c 	add.w	ip, r3, #12
 8003588:	e84c 2100 	strex	r1, r2, [ip]
 800358c:	2900      	cmp	r1, #0
 800358e:	d1f3      	bne.n	8003578 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8003590:	2220      	movs	r2, #32
 8003592:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003596:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003598:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 800359c:	2a22      	cmp	r2, #34	@ 0x22
 800359e:	d1e0      	bne.n	8003562 <UART_DMAError+0x1a>
 80035a0:	064a      	lsls	r2, r1, #25
 80035a2:	d5de      	bpl.n	8003562 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 80035a4:	2200      	movs	r2, #0
 80035a6:	85c2      	strh	r2, [r0, #46]	@ 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	f103 020c 	add.w	r2, r3, #12
 80035ac:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	f103 0c0c 	add.w	ip, r3, #12
 80035b8:	e84c 2100 	strex	r1, r2, [ip]
 80035bc:	2900      	cmp	r1, #0
 80035be:	d1f3      	bne.n	80035a8 <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	f103 0214 	add.w	r2, r3, #20
 80035c4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	f103 0c14 	add.w	ip, r3, #20
 80035d0:	e84c 2100 	strex	r1, r2, [ip]
 80035d4:	2900      	cmp	r1, #0
 80035d6:	d1f3      	bne.n	80035c0 <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80035da:	2a01      	cmp	r2, #1
 80035dc:	d005      	beq.n	80035ea <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 80035de:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80035e2:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80035e8:	e7bb      	b.n	8003562 <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	f103 020c 	add.w	r2, r3, #12
 80035ee:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	f103 0c0c 	add.w	ip, r3, #12
 80035fa:	e84c 2100 	strex	r1, r2, [ip]
 80035fe:	2900      	cmp	r1, #0
 8003600:	d1f3      	bne.n	80035ea <UART_DMAError+0xa2>
 8003602:	e7ec      	b.n	80035de <UART_DMAError+0x96>

08003604 <UART_DMAAbortOnError>:
{
 8003604:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003606:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8003608:	2300      	movs	r3, #0
 800360a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800360c:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800360e:	f7ff ff99 	bl	8003544 <HAL_UART_ErrorCallback>
}
 8003612:	bd08      	pop	{r3, pc}

08003614 <HAL_UARTEx_RxEventCallback>:
}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop

08003618 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003618:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800361a:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800361c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003622:	d041      	beq.n	80036a8 <UART_Receive_IT.part.0.isra.0+0x90>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003624:	2b00      	cmp	r3, #0
 8003626:	d038      	beq.n	800369a <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003628:	684b      	ldr	r3, [r1, #4]
 800362a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800362e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003630:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003632:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8003634:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8003636:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8003638:	3b01      	subs	r3, #1
 800363a:	b29b      	uxth	r3, r3
 800363c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800363e:	2b00      	cmp	r3, #0
 8003640:	d131      	bne.n	80036a6 <UART_Receive_IT.part.0.isra.0+0x8e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003642:	6802      	ldr	r2, [r0, #0]
 8003644:	68d1      	ldr	r1, [r2, #12]
 8003646:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800364a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800364c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800364e:	68d1      	ldr	r1, [r2, #12]
 8003650:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8003654:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003656:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003658:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800365c:	f021 0101 	bic.w	r1, r1, #1
 8003660:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003662:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003666:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8003668:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800366a:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800366c:	d125      	bne.n	80036ba <UART_Receive_IT.part.0.isra.0+0xa2>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366e:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	f102 030c 	add.w	r3, r2, #12
 8003674:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003678:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	f102 0c0c 	add.w	ip, r2, #12
 8003680:	e84c 3100 	strex	r1, r3, [ip]
 8003684:	2900      	cmp	r1, #0
 8003686:	d1f3      	bne.n	8003670 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003688:	6813      	ldr	r3, [r2, #0]
 800368a:	06db      	lsls	r3, r3, #27
 800368c:	d41a      	bmi.n	80036c4 <UART_Receive_IT.part.0.isra.0+0xac>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800368e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003690:	f7ff ffc0 	bl	8003614 <HAL_UARTEx_RxEventCallback>
}
 8003694:	b003      	add	sp, #12
 8003696:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800369a:	6903      	ldr	r3, [r0, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1c3      	bne.n	8003628 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036a0:	684b      	ldr	r3, [r1, #4]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e7c3      	b.n	800362e <UART_Receive_IT.part.0.isra.0+0x16>
 80036a6:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a8:	6903      	ldr	r3, [r0, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f8      	bne.n	80036a0 <UART_Receive_IT.part.0.isra.0+0x88>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036ae:	684b      	ldr	r3, [r1, #4]
 80036b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b4:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 80036b8:	e7bc      	b.n	8003634 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 80036ba:	f7ff ff41 	bl	8003540 <HAL_UART_RxCpltCallback>
}
 80036be:	b003      	add	sp, #12
 80036c0:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036c4:	2300      	movs	r3, #0
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	6853      	ldr	r3, [r2, #4]
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	9b01      	ldr	r3, [sp, #4]
 80036d2:	e7dc      	b.n	800368e <UART_Receive_IT.part.0.isra.0+0x76>

080036d4 <HAL_UART_IRQHandler>:
{
 80036d4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036d6:	6803      	ldr	r3, [r0, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036da:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036dc:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 80036de:	f012 0f0f 	tst.w	r2, #15
{
 80036e2:	b083      	sub	sp, #12
 80036e4:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80036e6:	d16e      	bne.n	80037c6 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036e8:	0691      	lsls	r1, r2, #26
 80036ea:	d502      	bpl.n	80036f2 <HAL_UART_IRQHandler+0x1e>
 80036ec:	06a9      	lsls	r1, r5, #26
 80036ee:	f100 809f 	bmi.w	8003830 <HAL_UART_IRQHandler+0x15c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80036f4:	2901      	cmp	r1, #1
 80036f6:	d00b      	beq.n	8003710 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036f8:	0610      	lsls	r0, r2, #24
 80036fa:	d502      	bpl.n	8003702 <HAL_UART_IRQHandler+0x2e>
 80036fc:	0629      	lsls	r1, r5, #24
 80036fe:	f100 80a1 	bmi.w	8003844 <HAL_UART_IRQHandler+0x170>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003702:	0652      	lsls	r2, r2, #25
 8003704:	d502      	bpl.n	800370c <HAL_UART_IRQHandler+0x38>
 8003706:	0668      	lsls	r0, r5, #25
 8003708:	f100 80bb 	bmi.w	8003882 <HAL_UART_IRQHandler+0x1ae>
}
 800370c:	b003      	add	sp, #12
 800370e:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003710:	06d0      	lsls	r0, r2, #27
 8003712:	d5f1      	bpl.n	80036f8 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003714:	06e9      	lsls	r1, r5, #27
 8003716:	d5ef      	bpl.n	80036f8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003718:	2200      	movs	r2, #0
 800371a:	9201      	str	r2, [sp, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	9201      	str	r2, [sp, #4]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	9201      	str	r2, [sp, #4]
 8003724:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	0655      	lsls	r5, r2, #25
 800372a:	f140 8134 	bpl.w	8003996 <HAL_UART_IRQHandler+0x2c2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800372e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003730:	6802      	ldr	r2, [r0, #0]
 8003732:	6852      	ldr	r2, [r2, #4]
 8003734:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003736:	2a00      	cmp	r2, #0
 8003738:	d0e8      	beq.n	800370c <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800373a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800373c:	4291      	cmp	r1, r2
 800373e:	d9e5      	bls.n	800370c <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8003740:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003742:	69c2      	ldr	r2, [r0, #28]
 8003744:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8003748:	d036      	beq.n	80037b8 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	f103 020c 	add.w	r2, r3, #12
 800374e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003752:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	f103 050c 	add.w	r5, r3, #12
 800375a:	e845 2100 	strex	r1, r2, [r5]
 800375e:	2900      	cmp	r1, #0
 8003760:	d1f3      	bne.n	800374a <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	f103 0214 	add.w	r2, r3, #20
 8003766:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	f103 0514 	add.w	r5, r3, #20
 8003772:	e845 2100 	strex	r1, r2, [r5]
 8003776:	2900      	cmp	r1, #0
 8003778:	d1f3      	bne.n	8003762 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	f103 0214 	add.w	r2, r3, #20
 800377e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	f103 0514 	add.w	r5, r3, #20
 800378a:	e845 2100 	strex	r1, r2, [r5]
 800378e:	2900      	cmp	r1, #0
 8003790:	d1f3      	bne.n	800377a <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8003792:	2220      	movs	r2, #32
 8003794:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003798:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	f103 020c 	add.w	r2, r3, #12
 800379e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	f103 050c 	add.w	r5, r3, #12
 80037aa:	e845 2100 	strex	r1, r2, [r5]
 80037ae:	2900      	cmp	r1, #0
 80037b0:	d1f3      	bne.n	800379a <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037b2:	f7fe f8a5 	bl	8001900 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037b6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80037b8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80037ba:	1ac9      	subs	r1, r1, r3
 80037bc:	4620      	mov	r0, r4
 80037be:	b289      	uxth	r1, r1
 80037c0:	f7ff ff28 	bl	8003614 <HAL_UARTEx_RxEventCallback>
 80037c4:	e7a2      	b.n	800370c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037c6:	f011 0101 	ands.w	r1, r1, #1
 80037ca:	d178      	bne.n	80038be <HAL_UART_IRQHandler+0x1ea>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037cc:	f415 7f90 	tst.w	r5, #288	@ 0x120
 80037d0:	d08f      	beq.n	80036f2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037d2:	07d0      	lsls	r0, r2, #31
 80037d4:	d50a      	bpl.n	80037ec <HAL_UART_IRQHandler+0x118>
 80037d6:	05e8      	lsls	r0, r5, #23
 80037d8:	f140 80d9 	bpl.w	800398e <HAL_UART_IRQHandler+0x2ba>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037dc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80037de:	f040 0001 	orr.w	r0, r0, #1
 80037e2:	6420      	str	r0, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e4:	0750      	lsls	r0, r2, #29
 80037e6:	d55b      	bpl.n	80038a0 <HAL_UART_IRQHandler+0x1cc>
 80037e8:	2900      	cmp	r1, #0
 80037ea:	d16c      	bne.n	80038c6 <HAL_UART_IRQHandler+0x1f2>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ec:	0790      	lsls	r0, r2, #30
 80037ee:	d570      	bpl.n	80038d2 <HAL_UART_IRQHandler+0x1fe>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037f0:	0710      	lsls	r0, r2, #28
 80037f2:	f100 80c9 	bmi.w	8003988 <HAL_UART_IRQHandler+0x2b4>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80037f8:	2900      	cmp	r1, #0
 80037fa:	d087      	beq.n	800370c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037fc:	0691      	lsls	r1, r2, #26
 80037fe:	d509      	bpl.n	8003814 <HAL_UART_IRQHandler+0x140>
 8003800:	06aa      	lsls	r2, r5, #26
 8003802:	d507      	bpl.n	8003814 <HAL_UART_IRQHandler+0x140>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003804:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8003808:	2a22      	cmp	r2, #34	@ 0x22
 800380a:	d103      	bne.n	8003814 <HAL_UART_IRQHandler+0x140>
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff ff03 	bl	8003618 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003816:	6c21      	ldr	r1, [r4, #64]	@ 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003818:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800381c:	f001 0108 	and.w	r1, r1, #8
 8003820:	ea52 0501 	orrs.w	r5, r2, r1
 8003824:	d15c      	bne.n	80038e0 <HAL_UART_IRQHandler+0x20c>
        HAL_UART_ErrorCallback(huart);
 8003826:	4620      	mov	r0, r4
 8003828:	f7ff fe8c 	bl	8003544 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	6425      	str	r5, [r4, #64]	@ 0x40
 800382e:	e76d      	b.n	800370c <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003830:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003834:	2b22      	cmp	r3, #34	@ 0x22
 8003836:	f47f af69 	bne.w	800370c <HAL_UART_IRQHandler+0x38>
}
 800383a:	b003      	add	sp, #12
 800383c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003840:	f7ff beea 	b.w	8003618 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003844:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003848:	2a21      	cmp	r2, #33	@ 0x21
 800384a:	f47f af5f 	bne.w	800370c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384e:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003850:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003852:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003856:	f000 80d7 	beq.w	8003a08 <HAL_UART_IRQHandler+0x334>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800385a:	1c51      	adds	r1, r2, #1
 800385c:	6221      	str	r1, [r4, #32]
 800385e:	7812      	ldrb	r2, [r2, #0]
 8003860:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003862:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003864:	3a01      	subs	r2, #1
 8003866:	b292      	uxth	r2, r2
 8003868:	84e2      	strh	r2, [r4, #38]	@ 0x26
 800386a:	2a00      	cmp	r2, #0
 800386c:	f47f af4e 	bne.w	800370c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003876:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800387e:	60da      	str	r2, [r3, #12]
 8003880:	e744      	b.n	800370c <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003882:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003884:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003886:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800388a:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800388c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800388e:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003892:	f7ff fe25 	bl	80034e0 <HAL_UART_TxCpltCallback>
    return;
 8003896:	e739      	b.n	800370c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003898:	05e8      	lsls	r0, r5, #23
 800389a:	d49f      	bmi.n	80037dc <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800389c:	0750      	lsls	r0, r2, #29
 800389e:	d412      	bmi.n	80038c6 <HAL_UART_IRQHandler+0x1f2>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038a0:	0790      	lsls	r0, r2, #30
 80038a2:	d516      	bpl.n	80038d2 <HAL_UART_IRQHandler+0x1fe>
 80038a4:	2900      	cmp	r1, #0
 80038a6:	d0a3      	beq.n	80037f0 <HAL_UART_IRQHandler+0x11c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038a8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80038aa:	f041 0104 	orr.w	r1, r1, #4
 80038ae:	6421      	str	r1, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038b0:	0711      	lsls	r1, r2, #28
 80038b2:	d5a0      	bpl.n	80037f6 <HAL_UART_IRQHandler+0x122>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80038b6:	f041 0108 	orr.w	r1, r1, #8
 80038ba:	6421      	str	r1, [r4, #64]	@ 0x40
 80038bc:	e79b      	b.n	80037f6 <HAL_UART_IRQHandler+0x122>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038be:	07d0      	lsls	r0, r2, #31
 80038c0:	d4ea      	bmi.n	8003898 <HAL_UART_IRQHandler+0x1c4>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c2:	0750      	lsls	r0, r2, #29
 80038c4:	d55b      	bpl.n	800397e <HAL_UART_IRQHandler+0x2aa>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80038c8:	f040 0002 	orr.w	r0, r0, #2
 80038cc:	6420      	str	r0, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ce:	0790      	lsls	r0, r2, #30
 80038d0:	d4ea      	bmi.n	80038a8 <HAL_UART_IRQHandler+0x1d4>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038d2:	0710      	lsls	r0, r2, #28
 80038d4:	d58f      	bpl.n	80037f6 <HAL_UART_IRQHandler+0x122>
 80038d6:	f005 0020 	and.w	r0, r5, #32
 80038da:	4308      	orrs	r0, r1
 80038dc:	d08b      	beq.n	80037f6 <HAL_UART_IRQHandler+0x122>
 80038de:	e7e9      	b.n	80038b4 <HAL_UART_IRQHandler+0x1e0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	f103 020c 	add.w	r2, r3, #12
 80038e4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	f103 000c 	add.w	r0, r3, #12
 80038f0:	e840 2100 	strex	r1, r2, [r0]
 80038f4:	2900      	cmp	r1, #0
 80038f6:	d1f3      	bne.n	80038e0 <HAL_UART_IRQHandler+0x20c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	f103 0214 	add.w	r2, r3, #20
 80038fc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003900:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	f103 0014 	add.w	r0, r3, #20
 8003908:	e840 2100 	strex	r1, r2, [r0]
 800390c:	2900      	cmp	r1, #0
 800390e:	d1f3      	bne.n	80038f8 <HAL_UART_IRQHandler+0x224>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003912:	2a01      	cmp	r2, #1
 8003914:	d022      	beq.n	800395c <HAL_UART_IRQHandler+0x288>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003916:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003918:	2120      	movs	r1, #32
 800391a:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391e:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	0655      	lsls	r5, r2, #25
 8003924:	d527      	bpl.n	8003976 <HAL_UART_IRQHandler+0x2a2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	f103 0214 	add.w	r2, r3, #20
 800392a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	f103 0014 	add.w	r0, r3, #20
 8003936:	e840 2100 	strex	r1, r2, [r0]
 800393a:	2900      	cmp	r1, #0
 800393c:	d1f3      	bne.n	8003926 <HAL_UART_IRQHandler+0x252>
          if (huart->hdmarx != NULL)
 800393e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003940:	b1c8      	cbz	r0, 8003976 <HAL_UART_IRQHandler+0x2a2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003942:	4b37      	ldr	r3, [pc, #220]	@ (8003a20 <HAL_UART_IRQHandler+0x34c>)
 8003944:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003946:	f7fe f825 	bl	8001994 <HAL_DMA_Abort_IT>
 800394a:	2800      	cmp	r0, #0
 800394c:	f43f aede 	beq.w	800370c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003950:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003952:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8003954:	b003      	add	sp, #12
 8003956:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800395a:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	f103 020c 	add.w	r2, r3, #12
 8003960:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003964:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	f103 000c 	add.w	r0, r3, #12
 800396c:	e840 2100 	strex	r1, r2, [r0]
 8003970:	2900      	cmp	r1, #0
 8003972:	d1f3      	bne.n	800395c <HAL_UART_IRQHandler+0x288>
 8003974:	e7cf      	b.n	8003916 <HAL_UART_IRQHandler+0x242>
            HAL_UART_ErrorCallback(huart);
 8003976:	4620      	mov	r0, r4
 8003978:	f7ff fde4 	bl	8003544 <HAL_UART_ErrorCallback>
 800397c:	e6c6      	b.n	800370c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800397e:	0791      	lsls	r1, r2, #30
 8003980:	d492      	bmi.n	80038a8 <HAL_UART_IRQHandler+0x1d4>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003982:	0711      	lsls	r1, r2, #28
 8003984:	d496      	bmi.n	80038b4 <HAL_UART_IRQHandler+0x1e0>
 8003986:	e736      	b.n	80037f6 <HAL_UART_IRQHandler+0x122>
 8003988:	06a9      	lsls	r1, r5, #26
 800398a:	d493      	bmi.n	80038b4 <HAL_UART_IRQHandler+0x1e0>
 800398c:	e733      	b.n	80037f6 <HAL_UART_IRQHandler+0x122>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800398e:	0750      	lsls	r0, r2, #29
 8003990:	f53f af2c 	bmi.w	80037ec <HAL_UART_IRQHandler+0x118>
 8003994:	e784      	b.n	80038a0 <HAL_UART_IRQHandler+0x1cc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003996:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8003998:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800399a:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 800399c:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800399e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80039a0:	2a00      	cmp	r2, #0
 80039a2:	f43f aeb3 	beq.w	800370c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039a6:	1a41      	subs	r1, r0, r1
 80039a8:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80039aa:	2900      	cmp	r1, #0
 80039ac:	f43f aeae 	beq.w	800370c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	f103 020c 	add.w	r2, r3, #12
 80039b4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	f103 050c 	add.w	r5, r3, #12
 80039c0:	e845 2000 	strex	r0, r2, [r5]
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d1f3      	bne.n	80039b0 <HAL_UART_IRQHandler+0x2dc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	f103 0214 	add.w	r2, r3, #20
 80039cc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	f103 0514 	add.w	r5, r3, #20
 80039d8:	e845 2000 	strex	r0, r2, [r5]
 80039dc:	2800      	cmp	r0, #0
 80039de:	d1f3      	bne.n	80039c8 <HAL_UART_IRQHandler+0x2f4>
        huart->RxState = HAL_UART_STATE_READY;
 80039e0:	2220      	movs	r2, #32
 80039e2:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e6:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	f103 020c 	add.w	r2, r3, #12
 80039ec:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	f103 050c 	add.w	r5, r3, #12
 80039f8:	e845 2000 	strex	r0, r2, [r5]
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d1f3      	bne.n	80039e8 <HAL_UART_IRQHandler+0x314>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff fe07 	bl	8003614 <HAL_UARTEx_RxEventCallback>
 8003a06:	e681      	b.n	800370c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a08:	6921      	ldr	r1, [r4, #16]
 8003a0a:	2900      	cmp	r1, #0
 8003a0c:	f47f af25 	bne.w	800385a <HAL_UART_IRQHandler+0x186>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a10:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003a14:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003a18:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a1a:	6222      	str	r2, [r4, #32]
 8003a1c:	e721      	b.n	8003862 <HAL_UART_IRQHandler+0x18e>
 8003a1e:	bf00      	nop
 8003a20:	08003605 	.word	0x08003605

08003a24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a24:	b084      	sub	sp, #16
 8003a26:	b082      	sub	sp, #8
 8003a28:	f10d 0c0c 	add.w	ip, sp, #12
 8003a2c:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a30:	9a08      	ldr	r2, [sp, #32]
 8003a32:	2a01      	cmp	r2, #1
{
 8003a34:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a36:	d12c      	bne.n	8003a92 <USB_CoreInit+0x6e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a38:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8003a3a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a3c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003a40:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a42:	68c2      	ldr	r2, [r0, #12]
 8003a44:	f422 0284 	bic.w	r2, r2, #4325376	@ 0x420000
 8003a48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a4c:	60c2      	str	r2, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a4e:	68c2      	ldr	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003a50:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a52:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003a56:	60c2      	str	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003a58:	d05f      	beq.n	8003b1a <USB_CoreInit+0xf6>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8003a5a:	2200      	movs	r2, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8003a5c:	4931      	ldr	r1, [pc, #196]	@ (8003b24 <USB_CoreInit+0x100>)
  __IO uint32_t count = 0U;
 8003a5e:	9200      	str	r2, [sp, #0]
 8003a60:	e002      	b.n	8003a68 <USB_CoreInit+0x44>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	db2d      	blt.n	8003ac4 <USB_CoreInit+0xa0>
    count++;
 8003a68:	9a00      	ldr	r2, [sp, #0]
 8003a6a:	3201      	adds	r2, #1
 8003a6c:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8003a6e:	9a00      	ldr	r2, [sp, #0]
 8003a70:	428a      	cmp	r2, r1
 8003a72:	d9f6      	bls.n	8003a62 <USB_CoreInit+0x3e>
      return HAL_TIMEOUT;
 8003a74:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 8003a76:	9a06      	ldr	r2, [sp, #24]
 8003a78:	2a01      	cmp	r2, #1
 8003a7a:	d107      	bne.n	8003a8c <USB_CoreInit+0x68>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	f042 0206 	orr.w	r2, r2, #6
 8003a82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	f042 0220 	orr.w	r2, r2, #32
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	b002      	add	sp, #8
 8003a8e:	b004      	add	sp, #16
 8003a90:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a92:	68c2      	ldr	r2, [r0, #12]
    if (count > 200000U)
 8003a94:	4923      	ldr	r1, [pc, #140]	@ (8003b24 <USB_CoreInit+0x100>)
  __IO uint32_t count = 0U;
 8003a96:	2000      	movs	r0, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a9c:	60da      	str	r2, [r3, #12]
  __IO uint32_t count = 0U;
 8003a9e:	9001      	str	r0, [sp, #4]
 8003aa0:	e002      	b.n	8003aa8 <USB_CoreInit+0x84>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	db25      	blt.n	8003af4 <USB_CoreInit+0xd0>
    count++;
 8003aa8:	9a01      	ldr	r2, [sp, #4]
 8003aaa:	3201      	adds	r2, #1
 8003aac:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8003aae:	9a01      	ldr	r2, [sp, #4]
 8003ab0:	428a      	cmp	r2, r1
 8003ab2:	d9f6      	bls.n	8003aa2 <USB_CoreInit+0x7e>
      return HAL_TIMEOUT;
 8003ab4:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 8003ab6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003ab8:	b9ba      	cbnz	r2, 8003aea <USB_CoreInit+0xc6>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003abc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ac2:	e7d8      	b.n	8003a76 <USB_CoreInit+0x52>

  /* Core Soft Reset */
  count = 0U;
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ac8:	691a      	ldr	r2, [r3, #16]

  do
  {
    count++;

    if (count > 200000U)
 8003aca:	4916      	ldr	r1, [pc, #88]	@ (8003b24 <USB_CoreInit+0x100>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003acc:	f042 0201 	orr.w	r2, r2, #1
 8003ad0:	611a      	str	r2, [r3, #16]
 8003ad2:	e003      	b.n	8003adc <USB_CoreInit+0xb8>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ad4:	6918      	ldr	r0, [r3, #16]
 8003ad6:	f010 0001 	ands.w	r0, r0, #1
 8003ada:	d0cc      	beq.n	8003a76 <USB_CoreInit+0x52>
    count++;
 8003adc:	9a00      	ldr	r2, [sp, #0]
 8003ade:	3201      	adds	r2, #1
 8003ae0:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8003ae2:	9a00      	ldr	r2, [sp, #0]
 8003ae4:	428a      	cmp	r2, r1
 8003ae6:	d9f5      	bls.n	8003ad4 <USB_CoreInit+0xb0>
 8003ae8:	e7c4      	b.n	8003a74 <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003af0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003af2:	e7c0      	b.n	8003a76 <USB_CoreInit+0x52>
  count = 0U;
 8003af4:	2200      	movs	r2, #0
 8003af6:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003af8:	691a      	ldr	r2, [r3, #16]
    if (count > 200000U)
 8003afa:	490a      	ldr	r1, [pc, #40]	@ (8003b24 <USB_CoreInit+0x100>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	e003      	b.n	8003b0c <USB_CoreInit+0xe8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b04:	6918      	ldr	r0, [r3, #16]
 8003b06:	f010 0001 	ands.w	r0, r0, #1
 8003b0a:	d0d4      	beq.n	8003ab6 <USB_CoreInit+0x92>
    count++;
 8003b0c:	9a01      	ldr	r2, [sp, #4]
 8003b0e:	3201      	adds	r2, #1
 8003b10:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8003b12:	9a01      	ldr	r2, [sp, #4]
 8003b14:	428a      	cmp	r2, r1
 8003b16:	d9f5      	bls.n	8003b04 <USB_CoreInit+0xe0>
 8003b18:	e7cc      	b.n	8003ab4 <USB_CoreInit+0x90>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b1a:	68c2      	ldr	r2, [r0, #12]
 8003b1c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003b20:	60c2      	str	r2, [r0, #12]
 8003b22:	e79a      	b.n	8003a5a <USB_CoreInit+0x36>
 8003b24:	00030d40 	.word	0x00030d40

08003b28 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003b28:	2a02      	cmp	r2, #2
{
 8003b2a:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8003b2c:	d00a      	beq.n	8003b44 <USB_SetTurnaroundTime+0x1c>
 8003b2e:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 8003b38:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	430a      	orrs	r2, r1
}
 8003b3e:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b40:	60da      	str	r2, [r3, #12]
}
 8003b42:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b44:	4a26      	ldr	r2, [pc, #152]	@ (8003be0 <USB_SetTurnaroundTime+0xb8>)
 8003b46:	4827      	ldr	r0, [pc, #156]	@ (8003be4 <USB_SetTurnaroundTime+0xbc>)
 8003b48:	440a      	add	r2, r1
 8003b4a:	4282      	cmp	r2, r0
 8003b4c:	d932      	bls.n	8003bb4 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b4e:	4a26      	ldr	r2, [pc, #152]	@ (8003be8 <USB_SetTurnaroundTime+0xc0>)
 8003b50:	4826      	ldr	r0, [pc, #152]	@ (8003bec <USB_SetTurnaroundTime+0xc4>)
 8003b52:	440a      	add	r2, r1
 8003b54:	4282      	cmp	r2, r0
 8003b56:	d930      	bls.n	8003bba <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b58:	4825      	ldr	r0, [pc, #148]	@ (8003bf0 <USB_SetTurnaroundTime+0xc8>)
 8003b5a:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 8003b5e:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 8003b62:	4282      	cmp	r2, r0
 8003b64:	d92c      	bls.n	8003bc0 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b66:	4823      	ldr	r0, [pc, #140]	@ (8003bf4 <USB_SetTurnaroundTime+0xcc>)
 8003b68:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 8003b6c:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 8003b70:	4282      	cmp	r2, r0
 8003b72:	d328      	bcc.n	8003bc6 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b74:	4a20      	ldr	r2, [pc, #128]	@ (8003bf8 <USB_SetTurnaroundTime+0xd0>)
 8003b76:	4821      	ldr	r0, [pc, #132]	@ (8003bfc <USB_SetTurnaroundTime+0xd4>)
 8003b78:	440a      	add	r2, r1
 8003b7a:	4282      	cmp	r2, r0
 8003b7c:	d926      	bls.n	8003bcc <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b7e:	4a20      	ldr	r2, [pc, #128]	@ (8003c00 <USB_SetTurnaroundTime+0xd8>)
 8003b80:	4820      	ldr	r0, [pc, #128]	@ (8003c04 <USB_SetTurnaroundTime+0xdc>)
 8003b82:	440a      	add	r2, r1
 8003b84:	4282      	cmp	r2, r0
 8003b86:	d324      	bcc.n	8003bd2 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b88:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <USB_SetTurnaroundTime+0xe0>)
 8003b8a:	4820      	ldr	r0, [pc, #128]	@ (8003c0c <USB_SetTurnaroundTime+0xe4>)
 8003b8c:	440a      	add	r2, r1
 8003b8e:	4282      	cmp	r2, r0
 8003b90:	d3cd      	bcc.n	8003b2e <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b92:	481f      	ldr	r0, [pc, #124]	@ (8003c10 <USB_SetTurnaroundTime+0xe8>)
 8003b94:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 8003b98:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 8003b9c:	4282      	cmp	r2, r0
 8003b9e:	d31b      	bcc.n	8003bd8 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c14 <USB_SetTurnaroundTime+0xec>)
 8003ba2:	481d      	ldr	r0, [pc, #116]	@ (8003c18 <USB_SetTurnaroundTime+0xf0>)
 8003ba4:	440a      	add	r2, r1
 8003ba6:	4282      	cmp	r2, r0
 8003ba8:	bf2c      	ite	cs
 8003baa:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 8003bae:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 8003bb2:	e7be      	b.n	8003b32 <USB_SetTurnaroundTime+0xa>
 8003bb4:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8003bb8:	e7bb      	b.n	8003b32 <USB_SetTurnaroundTime+0xa>
 8003bba:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8003bbe:	e7b8      	b.n	8003b32 <USB_SetTurnaroundTime+0xa>
 8003bc0:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8003bc4:	e7b5      	b.n	8003b32 <USB_SetTurnaroundTime+0xa>
 8003bc6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003bca:	e7b2      	b.n	8003b32 <USB_SetTurnaroundTime+0xa>
 8003bcc:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 8003bd0:	e7af      	b.n	8003b32 <USB_SetTurnaroundTime+0xa>
 8003bd2:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8003bd6:	e7ac      	b.n	8003b32 <USB_SetTurnaroundTime+0xa>
 8003bd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bdc:	e7a9      	b.n	8003b32 <USB_SetTurnaroundTime+0xa>
 8003bde:	bf00      	nop
 8003be0:	ff275340 	.word	0xff275340
 8003be4:	000c34ff 	.word	0x000c34ff
 8003be8:	ff1b1e40 	.word	0xff1b1e40
 8003bec:	000f423f 	.word	0x000f423f
 8003bf0:	00124f7f 	.word	0x00124f7f
 8003bf4:	0013d620 	.word	0x0013d620
 8003bf8:	fee5b660 	.word	0xfee5b660
 8003bfc:	0016e35f 	.word	0x0016e35f
 8003c00:	feced300 	.word	0xfeced300
 8003c04:	001b7740 	.word	0x001b7740
 8003c08:	feb35bc0 	.word	0xfeb35bc0
 8003c0c:	002191c0 	.word	0x002191c0
 8003c10:	00387520 	.word	0x00387520
 8003c14:	fe5954e0 	.word	0xfe5954e0
 8003c18:	00419ce0 	.word	0x00419ce0

08003c1c <USB_EnableGlobalInt>:
{
 8003c1c:	4603      	mov	r3, r0
}
 8003c1e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop

08003c2c <USB_DisableGlobalInt>:
{
 8003c2c:	4603      	mov	r3, r0
}
 8003c2e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	609a      	str	r2, [r3, #8]
}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop

08003c3c <USB_SetCurrentMode>:
{
 8003c3c:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c3e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003c40:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c42:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 8003c46:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c48:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003c4a:	d018      	beq.n	8003c7e <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 8003c4c:	b9a9      	cbnz	r1, 8003c7a <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c4e:	68c3      	ldr	r3, [r0, #12]
 8003c50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  uint32_t ms = 0U;
 8003c54:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c56:	60c3      	str	r3, [r0, #12]
 8003c58:	e001      	b.n	8003c5e <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c5a:	2c32      	cmp	r4, #50	@ 0x32
 8003c5c:	d00d      	beq.n	8003c7a <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f7fd fcf4 	bl	800164c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8003c64:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c66:	07db      	lsls	r3, r3, #31
      ms++;
 8003c68:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c6c:	d4f5      	bmi.n	8003c5a <USB_SetCurrentMode+0x1e>
  if (ms == 50U)
 8003c6e:	f1a4 0032 	sub.w	r0, r4, #50	@ 0x32
 8003c72:	fab0 f080 	clz	r0, r0
 8003c76:	0940      	lsrs	r0, r0, #5
}
 8003c78:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c7a:	2001      	movs	r0, #1
}
 8003c7c:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c7e:	68c3      	ldr	r3, [r0, #12]
 8003c80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  uint32_t ms = 0U;
 8003c84:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c86:	60c3      	str	r3, [r0, #12]
 8003c88:	e001      	b.n	8003c8e <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c8a:	2c32      	cmp	r4, #50	@ 0x32
 8003c8c:	d0f5      	beq.n	8003c7a <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f7fd fcdc 	bl	800164c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8003c94:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c96:	07da      	lsls	r2, r3, #31
      ms++;
 8003c98:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c9c:	d5f5      	bpl.n	8003c8a <USB_SetCurrentMode+0x4e>
  if (ms == 50U)
 8003c9e:	f1a4 0032 	sub.w	r0, r4, #50	@ 0x32
 8003ca2:	fab0 f080 	clz	r0, r0
 8003ca6:	0940      	lsrs	r0, r0, #5
 8003ca8:	e7e6      	b.n	8003c78 <USB_SetCurrentMode+0x3c>
 8003caa:	bf00      	nop

08003cac <USB_DevInit>:
{
 8003cac:	b084      	sub	sp, #16
 8003cae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	ac09      	add	r4, sp, #36	@ 0x24
 8003cb4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8003cb6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c0 2104 	str.w	r2, [r0, #260]	@ 0x104
{
 8003cc0:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 8003cc2:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ccc:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    USBx->DIEPTXF[i] = 0U;
 8003cd0:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 8003cd4:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 8003cd8:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
 8003cdc:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
 8003ce0:	f8c0 2120 	str.w	r2, [r0, #288]	@ 0x120
 8003ce4:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 8003ce8:	f8c0 2128 	str.w	r2, [r0, #296]	@ 0x128
 8003cec:	f8c0 212c 	str.w	r2, [r0, #300]	@ 0x12c
 8003cf0:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 8003cf4:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
 8003cf8:	f8c0 2138 	str.w	r2, [r0, #312]	@ 0x138
 8003cfc:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8003d00:	2d00      	cmp	r5, #0
 8003d02:	f040 80b3 	bne.w	8003e6c <USB_DevInit+0x1c0>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d06:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8003d0a:	f042 0202 	orr.w	r2, r2, #2
 8003d0e:	f8cc 2004 	str.w	r2, [ip, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d12:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8003d14:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003d18:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d1a:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8003d1c:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8003d20:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d22:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8003d24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d28:	6382      	str	r2, [r0, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d30:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8003d34:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d3a:	2a01      	cmp	r2, #1
 8003d3c:	f000 80c3 	beq.w	8003ec6 <USB_DevInit+0x21a>
  USBx_DEVICE->DCFG |= speed;
 8003d40:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8003d44:	f042 0203 	orr.w	r2, r2, #3
 8003d48:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  __IO uint32_t count = 0U;
 8003d4c:	2200      	movs	r2, #0
    if (count > 200000U)
 8003d4e:	4965      	ldr	r1, [pc, #404]	@ (8003ee4 <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 8003d50:	9200      	str	r2, [sp, #0]
 8003d52:	e003      	b.n	8003d5c <USB_DevInit+0xb0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	f2c0 80a2 	blt.w	8003ea0 <USB_DevInit+0x1f4>
    count++;
 8003d5c:	9a00      	ldr	r2, [sp, #0]
 8003d5e:	3201      	adds	r2, #1
 8003d60:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8003d62:	9a00      	ldr	r2, [sp, #0]
 8003d64:	428a      	cmp	r2, r1
 8003d66:	d9f5      	bls.n	8003d54 <USB_DevInit+0xa8>
 8003d68:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 8003d6a:	2200      	movs	r2, #0
    if (count > 200000U)
 8003d6c:	495d      	ldr	r1, [pc, #372]	@ (8003ee4 <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 8003d6e:	9201      	str	r2, [sp, #4]
 8003d70:	e003      	b.n	8003d7a <USB_DevInit+0xce>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	2a00      	cmp	r2, #0
 8003d76:	f2c0 8082 	blt.w	8003e7e <USB_DevInit+0x1d2>
    count++;
 8003d7a:	9a01      	ldr	r2, [sp, #4]
 8003d7c:	3201      	adds	r2, #1
 8003d7e:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8003d80:	9a01      	ldr	r2, [sp, #4]
 8003d82:	428a      	cmp	r2, r1
 8003d84:	d9f5      	bls.n	8003d72 <USB_DevInit+0xc6>
    ret = HAL_ERROR;
 8003d86:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8003d88:	2100      	movs	r1, #0
 8003d8a:	f8cc 1010 	str.w	r1, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d8e:	f8cc 1014 	str.w	r1, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d92:	f8cc 101c 	str.w	r1, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d96:	b1fc      	cbz	r4, 8003dd8 <USB_DevInit+0x12c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d98:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 8003da2:	db14      	blt.n	8003dce <USB_DevInit+0x122>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003da4:	2600      	movs	r6, #0
 8003da6:	6016      	str	r6, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003da8:	f04f 0e00 	mov.w	lr, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003dac:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003db0:	3101      	adds	r1, #1
 8003db2:	428c      	cmp	r4, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003db4:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003db8:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dba:	f102 0220 	add.w	r2, r2, #32
 8003dbe:	d033      	beq.n	8003e28 <USB_DevInit+0x17c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dc0:	6816      	ldr	r6, [r2, #0]
 8003dc2:	2e00      	cmp	r6, #0
 8003dc4:	daee      	bge.n	8003da4 <USB_DevInit+0xf8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003dc6:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 8003dca:	6016      	str	r6, [r2, #0]
 8003dcc:	e7f0      	b.n	8003db0 <USB_DevInit+0x104>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dce:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 8003dd2:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
 8003dd6:	e7e7      	b.n	8003da8 <USB_DevInit+0xfc>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003dd8:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8003ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003de0:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx->GINTMSK = 0U;
 8003de4:	2100      	movs	r1, #0
  if (cfg.dma_enable == 0U)
 8003de6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  USBx->GINTMSK = 0U;
 8003de8:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003dea:	f06f 4180 	mvn.w	r1, #1073741824	@ 0x40000000
 8003dee:	6159      	str	r1, [r3, #20]
  if (cfg.dma_enable == 0U)
 8003df0:	b91a      	cbnz	r2, 8003dfa <USB_DevInit+0x14e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	f042 0210 	orr.w	r2, r2, #16
 8003df8:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dfa:	6999      	ldr	r1, [r3, #24]
 8003dfc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ee8 <USB_DevInit+0x23c>)
 8003dfe:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 8003e00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e02:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 8003e04:	b119      	cbz	r1, 8003e0e <USB_DevInit+0x162>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	f042 0208 	orr.w	r2, r2, #8
 8003e0c:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003e0e:	2d01      	cmp	r5, #1
 8003e10:	d105      	bne.n	8003e1e <USB_DevInit+0x172>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e18:	f042 0204 	orr.w	r2, r2, #4
 8003e1c:	619a      	str	r2, [r3, #24]
}
 8003e1e:	b003      	add	sp, #12
 8003e20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003e24:	b004      	add	sp, #16
 8003e26:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e28:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	f503 6230 	add.w	r2, r3, #2816	@ 0xb00
 8003e32:	db15      	blt.n	8003e60 <USB_DevInit+0x1b4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e34:	2100      	movs	r1, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e36:	2600      	movs	r6, #0
 8003e38:	6016      	str	r6, [r2, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e3a:	f04f 0e00 	mov.w	lr, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e3e:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e42:	3101      	adds	r1, #1
 8003e44:	428c      	cmp	r4, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e46:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e4a:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e4c:	f102 0220 	add.w	r2, r2, #32
 8003e50:	d0c2      	beq.n	8003dd8 <USB_DevInit+0x12c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e52:	6816      	ldr	r6, [r2, #0]
 8003e54:	2e00      	cmp	r6, #0
 8003e56:	daee      	bge.n	8003e36 <USB_DevInit+0x18a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e58:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 8003e5c:	6016      	str	r6, [r2, #0]
 8003e5e:	e7f0      	b.n	8003e42 <USB_DevInit+0x196>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e60:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8003e64:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e68:	2100      	movs	r1, #0
 8003e6a:	e7e6      	b.n	8003e3a <USB_DevInit+0x18e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e6c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8003e6e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003e72:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e74:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8003e76:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003e7a:	6382      	str	r2, [r0, #56]	@ 0x38
 8003e7c:	e755      	b.n	8003d2a <USB_DevInit+0x7e>
  count = 0U;
 8003e7e:	2200      	movs	r2, #0
 8003e80:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e82:	2210      	movs	r2, #16
    if (count > 200000U)
 8003e84:	4917      	ldr	r1, [pc, #92]	@ (8003ee4 <USB_DevInit+0x238>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e86:	611a      	str	r2, [r3, #16]
 8003e88:	e003      	b.n	8003e92 <USB_DevInit+0x1e6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	06d2      	lsls	r2, r2, #27
 8003e8e:	f57f af7b 	bpl.w	8003d88 <USB_DevInit+0xdc>
    count++;
 8003e92:	9a01      	ldr	r2, [sp, #4]
 8003e94:	3201      	adds	r2, #1
 8003e96:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8003e98:	9a01      	ldr	r2, [sp, #4]
 8003e9a:	428a      	cmp	r2, r1
 8003e9c:	d9f5      	bls.n	8003e8a <USB_DevInit+0x1de>
 8003e9e:	e772      	b.n	8003d86 <USB_DevInit+0xda>
  count = 0U;
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ea4:	f44f 6284 	mov.w	r2, #1056	@ 0x420
    if (count > 200000U)
 8003ea8:	490e      	ldr	r1, [pc, #56]	@ (8003ee4 <USB_DevInit+0x238>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eaa:	611a      	str	r2, [r3, #16]
 8003eac:	e004      	b.n	8003eb8 <USB_DevInit+0x20c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003eae:	6918      	ldr	r0, [r3, #16]
 8003eb0:	f010 0020 	ands.w	r0, r0, #32
 8003eb4:	f43f af59 	beq.w	8003d6a <USB_DevInit+0xbe>
    count++;
 8003eb8:	9a00      	ldr	r2, [sp, #0]
 8003eba:	3201      	adds	r2, #1
 8003ebc:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8003ebe:	9a00      	ldr	r2, [sp, #0]
 8003ec0:	428a      	cmp	r2, r1
 8003ec2:	d9f4      	bls.n	8003eae <USB_DevInit+0x202>
 8003ec4:	e750      	b.n	8003d68 <USB_DevInit+0xbc>
    if (cfg.speed == USBD_HS_SPEED)
 8003ec6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003ec8:	b922      	cbnz	r2, 8003ed4 <USB_DevInit+0x228>
  USBx_DEVICE->DCFG |= speed;
 8003eca:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8003ece:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  return HAL_OK;
 8003ed2:	e73b      	b.n	8003d4c <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 8003ed4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  return HAL_OK;
 8003ee0:	e734      	b.n	8003d4c <USB_DevInit+0xa0>
 8003ee2:	bf00      	nop
 8003ee4:	00030d40 	.word	0x00030d40
 8003ee8:	803c3800 	.word	0x803c3800

08003eec <USB_FlushTxFifo>:
{
 8003eec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003eee:	2300      	movs	r3, #0
    if (count > 200000U)
 8003ef0:	4a12      	ldr	r2, [pc, #72]	@ (8003f3c <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	e002      	b.n	8003efc <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ef6:	6903      	ldr	r3, [r0, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db08      	blt.n	8003f0e <USB_FlushTxFifo+0x22>
    count++;
 8003efc:	9b01      	ldr	r3, [sp, #4]
 8003efe:	3301      	adds	r3, #1
 8003f00:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003f02:	9b01      	ldr	r3, [sp, #4]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d9f6      	bls.n	8003ef6 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8003f08:	2003      	movs	r0, #3
}
 8003f0a:	b002      	add	sp, #8
 8003f0c:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f0e:	0189      	lsls	r1, r1, #6
  count = 0U;
 8003f10:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f12:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8003f16:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003f18:	4a08      	ldr	r2, [pc, #32]	@ (8003f3c <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f1a:	6101      	str	r1, [r0, #16]
 8003f1c:	e003      	b.n	8003f26 <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f1e:	6903      	ldr	r3, [r0, #16]
 8003f20:	f013 0320 	ands.w	r3, r3, #32
 8003f24:	d006      	beq.n	8003f34 <USB_FlushTxFifo+0x48>
    count++;
 8003f26:	9b01      	ldr	r3, [sp, #4]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003f2c:	9b01      	ldr	r3, [sp, #4]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d9f5      	bls.n	8003f1e <USB_FlushTxFifo+0x32>
 8003f32:	e7e9      	b.n	8003f08 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 8003f34:	4618      	mov	r0, r3
}
 8003f36:	b002      	add	sp, #8
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	00030d40 	.word	0x00030d40

08003f40 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f40:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f44:	f013 0006 	ands.w	r0, r3, #6
 8003f48:	d004      	beq.n	8003f54 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8003f4a:	f013 0f02 	tst.w	r3, #2
 8003f4e:	bf14      	ite	ne
 8003f50:	2002      	movne	r0, #2
 8003f52:	200f      	moveq	r0, #15
}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop

08003f58 <USB_ActivateEndpoint>:
{
 8003f58:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003f5a:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f002 0e0f 	and.w	lr, r2, #15
 8003f62:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 8003f66:	f891 e001 	ldrb.w	lr, [r1, #1]
 8003f6a:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f6e:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f72:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8003f76:	d01a      	beq.n	8003fae <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f78:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8003f7c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8003f80:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f84:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	d40e      	bmi.n	8003faa <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f8c:	68cb      	ldr	r3, [r1, #12]
 8003f8e:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 8003f92:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f98:	4323      	orrs	r3, r4
 8003f9a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8003f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8003faa:	2000      	movs	r0, #0
 8003fac:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003fae:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8003fb2:	4323      	orrs	r3, r4
 8003fb4:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003fb8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003fbc:	041c      	lsls	r4, r3, #16
 8003fbe:	d4f4      	bmi.n	8003faa <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fc0:	68cb      	ldr	r3, [r1, #12]
 8003fc2:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fc6:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fcc:	4323      	orrs	r3, r4
 8003fce:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003fd2:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fde:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	bf00      	nop

08003fe8 <USB_DeactivateEndpoint>:
{
 8003fe8:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8003fea:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003fec:	7849      	ldrb	r1, [r1, #1]
 8003fee:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ff0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8003ff4:	d02c      	beq.n	8004050 <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ff6:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8003ffa:	2900      	cmp	r1, #0
 8003ffc:	db1b      	blt.n	8004036 <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ffe:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8004002:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8004006:	f002 020f 	and.w	r2, r2, #15
 800400a:	fa01 f202 	lsl.w	r2, r1, r2
 800400e:	ea24 0402 	bic.w	r4, r4, r2
 8004012:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004016:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800401a:	4922      	ldr	r1, [pc, #136]	@ (80040a4 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800401c:	ea24 0202 	bic.w	r2, r4, r2
 8004020:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004024:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 8004028:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800402c:	4011      	ands	r1, r2
}
 800402e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004030:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 8004034:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004036:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800403a:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 800403e:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004042:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004046:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800404a:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 800404e:	e7d6      	b.n	8003ffe <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004050:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8004054:	2900      	cmp	r1, #0
 8004056:	da0b      	bge.n	8004070 <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004058:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800405c:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8004060:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004064:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8004068:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800406c:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004070:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 8004074:	f002 040f 	and.w	r4, r2, #15
 8004078:	2201      	movs	r2, #1
 800407a:	40a2      	lsls	r2, r4
 800407c:	ea21 0102 	bic.w	r1, r1, r2
 8004080:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004084:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004088:	4907      	ldr	r1, [pc, #28]	@ (80040a8 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800408a:	ea24 0202 	bic.w	r2, r4, r2
 800408e:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004092:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 8004096:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800409a:	4011      	ands	r1, r2
}
 800409c:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800409e:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 80040a2:	4770      	bx	lr
 80040a4:	eff37800 	.word	0xeff37800
 80040a8:	ec337800 	.word	0xec337800

080040ac <USB_EPStartXfer>:
{
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 80040b0:	784e      	ldrb	r6, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80040b2:	f891 e000 	ldrb.w	lr, [r1]
    if (ep->xfer_len == 0U)
 80040b6:	698c      	ldr	r4, [r1, #24]
      if (ep->type == EP_TYPE_ISOC)
 80040b8:	f891 c004 	ldrb.w	ip, [r1, #4]
  if (ep->is_in == 1U)
 80040bc:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040be:	eb00 134e 	add.w	r3, r0, lr, lsl #5
  if (ep->is_in == 1U)
 80040c2:	d058      	beq.n	8004176 <USB_EPStartXfer+0xca>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040c4:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	@ 0xb10
 80040c8:	0ced      	lsrs	r5, r5, #19
 80040ca:	04ed      	lsls	r5, r5, #19
 80040cc:	f8c3 5b10 	str.w	r5, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040d0:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	@ 0xb10
 80040d4:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 80040d8:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 80040dc:	f8c3 5b10 	str.w	r5, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040e0:	f503 6e30 	add.w	lr, r3, #2816	@ 0xb00
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80040e4:	68cd      	ldr	r5, [r1, #12]
    if (ep->xfer_len == 0U)
 80040e6:	b38c      	cbz	r4, 800414c <USB_EPStartXfer+0xa0>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040e8:	4e78      	ldr	r6, [pc, #480]	@ (80042cc <USB_EPStartXfer+0x220>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040ea:	442c      	add	r4, r5
 80040ec:	3c01      	subs	r4, #1
 80040ee:	fbb4 f4f5 	udiv	r4, r4, r5
 80040f2:	b2a4      	uxth	r4, r4
      ep->xfer_size = ep->maxpacket * pktcnt;
 80040f4:	fb04 f505 	mul.w	r5, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040f8:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80040fc:	f8de 6010 	ldr.w	r6, [lr, #16]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004100:	61cd      	str	r5, [r1, #28]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004102:	4334      	orrs	r4, r6
 8004104:	f8ce 4010 	str.w	r4, [lr, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004108:	f8de 4010 	ldr.w	r4, [lr, #16]
 800410c:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004110:	4325      	orrs	r5, r4
    if (dma == 1U)
 8004112:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004114:	f8ce 5010 	str.w	r5, [lr, #16]
    if (dma == 1U)
 8004118:	d027      	beq.n	800416a <USB_EPStartXfer+0xbe>
    if (ep->type == EP_TYPE_ISOC)
 800411a:	f1bc 0f01 	cmp.w	ip, #1
 800411e:	d10c      	bne.n	800413a <USB_EPStartXfer+0x8e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004120:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8004124:	f412 7f80 	tst.w	r2, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004128:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800412c:	bf0c      	ite	eq
 800412e:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004132:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8004136:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800413a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800413e:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8004142:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8004146:	2000      	movs	r0, #0
 8004148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800414c:	f8de 4010 	ldr.w	r4, [lr, #16]
 8004150:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004154:	4325      	orrs	r5, r4
 8004156:	f8ce 5010 	str.w	r5, [lr, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800415a:	f8de 4010 	ldr.w	r4, [lr, #16]
    if (dma == 1U)
 800415e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004160:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004164:	f8ce 4010 	str.w	r4, [lr, #16]
    if (dma == 1U)
 8004168:	d1d7      	bne.n	800411a <USB_EPStartXfer+0x6e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800416a:	690a      	ldr	r2, [r1, #16]
 800416c:	2a00      	cmp	r2, #0
 800416e:	d0d4      	beq.n	800411a <USB_EPStartXfer+0x6e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004170:	f8ce 2014 	str.w	r2, [lr, #20]
 8004174:	e7d1      	b.n	800411a <USB_EPStartXfer+0x6e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004176:	f503 6510 	add.w	r5, r3, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 800417a:	2c00      	cmp	r4, #0
 800417c:	d139      	bne.n	80041f2 <USB_EPStartXfer+0x146>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800417e:	692e      	ldr	r6, [r5, #16]
 8004180:	f026 56ff 	bic.w	r6, r6, #534773760	@ 0x1fe00000
 8004184:	f426 16c0 	bic.w	r6, r6, #1572864	@ 0x180000
 8004188:	612e      	str	r6, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800418a:	692e      	ldr	r6, [r5, #16]
 800418c:	f446 2600 	orr.w	r6, r6, #524288	@ 0x80000
 8004190:	612e      	str	r6, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004192:	692e      	ldr	r6, [r5, #16]
 8004194:	0cf6      	lsrs	r6, r6, #19
 8004196:	04f6      	lsls	r6, r6, #19
    if (dma == 1U)
 8004198:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800419a:	612e      	str	r6, [r5, #16]
    if (dma == 1U)
 800419c:	d070      	beq.n	8004280 <USB_EPStartXfer+0x1d4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800419e:	f8d3 5900 	ldr.w	r5, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80041a2:	f1bc 0f01 	cmp.w	ip, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041a6:	f045 4504 	orr.w	r5, r5, #2214592512	@ 0x84000000
 80041aa:	f8c3 5900 	str.w	r5, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80041ae:	d1ca      	bne.n	8004146 <USB_EPStartXfer+0x9a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041b0:	f8d0 5808 	ldr.w	r5, [r0, #2056]	@ 0x808
 80041b4:	f415 7f80 	tst.w	r5, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041b8:	f8d3 5900 	ldr.w	r5, [r3, #2304]	@ 0x900
 80041bc:	bf0c      	ite	eq
 80041be:	f045 5500 	orreq.w	r5, r5, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041c2:	f045 5580 	orrne.w	r5, r5, #268435456	@ 0x10000000
 80041c6:	f8c3 5900 	str.w	r5, [r3, #2304]	@ 0x900
  if (dma == 0U)
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	d1bb      	bne.n	8004146 <USB_EPStartXfer+0x9a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80041ce:	b2a4      	uxth	r4, r4
 80041d0:	3403      	adds	r4, #3
    for (i = 0U; i < count32b; i++)
 80041d2:	08a4      	lsrs	r4, r4, #2
 80041d4:	d0b7      	beq.n	8004146 <USB_EPStartXfer+0x9a>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041d6:	690b      	ldr	r3, [r1, #16]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041d8:	eb00 3e0e 	add.w	lr, r0, lr, lsl #12
 80041dc:	f50e 5e80 	add.w	lr, lr, #4096	@ 0x1000
 80041e0:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 80041e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041e8:	f8ce 2000 	str.w	r2, [lr]
    for (i = 0U; i < count32b; i++)
 80041ec:	428b      	cmp	r3, r1
 80041ee:	d1f9      	bne.n	80041e4 <USB_EPStartXfer+0x138>
 80041f0:	e7a9      	b.n	8004146 <USB_EPStartXfer+0x9a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041f2:	692f      	ldr	r7, [r5, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80041f4:	f8d1 a00c 	ldr.w	sl, [r1, #12]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041f8:	0cff      	lsrs	r7, r7, #19
 80041fa:	04ff      	lsls	r7, r7, #19
 80041fc:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041fe:	692f      	ldr	r7, [r5, #16]
 8004200:	f027 57ff 	bic.w	r7, r7, #534773760	@ 0x1fe00000
 8004204:	f427 17c0 	bic.w	r7, r7, #1572864	@ 0x180000
 8004208:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800420a:	4f30      	ldr	r7, [pc, #192]	@ (80042cc <USB_EPStartXfer+0x220>)
 800420c:	f8d5 9010 	ldr.w	r9, [r5, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004210:	eb0a 0804 	add.w	r8, sl, r4
 8004214:	f108 38ff 	add.w	r8, r8, #4294967295
 8004218:	fbb8 f8fa 	udiv	r8, r8, sl
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800421c:	ea07 47c8 	and.w	r7, r7, r8, lsl #19
 8004220:	ea47 0709 	orr.w	r7, r7, r9
 8004224:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004226:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800422a:	f3c4 0712 	ubfx	r7, r4, #0, #19
 800422e:	ea47 0708 	orr.w	r7, r7, r8
      if (ep->type == EP_TYPE_ISOC)
 8004232:	f1bc 0f01 	cmp.w	ip, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004236:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8004238:	d011      	beq.n	800425e <USB_EPStartXfer+0x1b2>
    if (dma == 1U)
 800423a:	2a01      	cmp	r2, #1
 800423c:	d040      	beq.n	80042c0 <USB_EPStartXfer+0x214>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800423e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004242:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8004246:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800424a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 800424e:	f00e 0e0f 	and.w	lr, lr, #15
 8004252:	fa06 f60e 	lsl.w	r6, r6, lr
 8004256:	431e      	orrs	r6, r3
 8004258:	f8c0 6834 	str.w	r6, [r0, #2100]	@ 0x834
 800425c:	e773      	b.n	8004146 <USB_EPStartXfer+0x9a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800425e:	692e      	ldr	r6, [r5, #16]
 8004260:	f026 46c0 	bic.w	r6, r6, #1610612736	@ 0x60000000
 8004264:	612e      	str	r6, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004266:	692e      	ldr	r6, [r5, #16]
    if (dma == 1U)
 8004268:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800426a:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800426e:	612e      	str	r6, [r5, #16]
    if (dma == 1U)
 8004270:	d015      	beq.n	800429e <USB_EPStartXfer+0x1f2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004272:	f8d3 5900 	ldr.w	r5, [r3, #2304]	@ 0x900
 8004276:	f045 4504 	orr.w	r5, r5, #2214592512	@ 0x84000000
 800427a:	f8c3 5900 	str.w	r5, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 800427e:	e797      	b.n	80041b0 <USB_EPStartXfer+0x104>
      if ((uint32_t)ep->dma_addr != 0U)
 8004280:	694a      	ldr	r2, [r1, #20]
 8004282:	b102      	cbz	r2, 8004286 <USB_EPStartXfer+0x1da>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004284:	616a      	str	r2, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 8004286:	f1bc 0f01 	cmp.w	ip, #1
 800428a:	d00b      	beq.n	80042a4 <USB_EPStartXfer+0x1f8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800428c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004290:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8004294:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 8004298:	2000      	movs	r0, #0
 800429a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800429e:	694a      	ldr	r2, [r1, #20]
 80042a0:	b102      	cbz	r2, 80042a4 <USB_EPStartXfer+0x1f8>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042a2:	616a      	str	r2, [r5, #20]
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042a4:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 80042a8:	f412 7f80 	tst.w	r2, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042ac:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80042b0:	bf0c      	ite	eq
 80042b2:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042b6:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 80042ba:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 80042be:	e7e5      	b.n	800428c <USB_EPStartXfer+0x1e0>
      if ((uint32_t)ep->dma_addr != 0U)
 80042c0:	694a      	ldr	r2, [r1, #20]
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	d0e2      	beq.n	800428c <USB_EPStartXfer+0x1e0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042c6:	616a      	str	r2, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 80042c8:	e7e0      	b.n	800428c <USB_EPStartXfer+0x1e0>
 80042ca:	bf00      	nop
 80042cc:	1ff80000 	.word	0x1ff80000

080042d0 <USB_EP0StartXfer>:
{
 80042d0:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 80042d2:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80042d4:	f891 e000 	ldrb.w	lr, [r1]
    if (ep->xfer_len == 0U)
 80042d8:	698d      	ldr	r5, [r1, #24]
  if (ep->is_in == 1U)
 80042da:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042dc:	eb00 1c4e 	add.w	ip, r0, lr, lsl #5
  if (ep->is_in == 1U)
 80042e0:	d02a      	beq.n	8004338 <USB_EP0StartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042e2:	f8dc 0b10 	ldr.w	r0, [ip, #2832]	@ 0xb10
 80042e6:	0cc0      	lsrs	r0, r0, #19
 80042e8:	04c0      	lsls	r0, r0, #19
 80042ea:	f8cc 0b10 	str.w	r0, [ip, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042ee:	f8dc 0b10 	ldr.w	r0, [ip, #2832]	@ 0xb10
 80042f2:	f020 50ff 	bic.w	r0, r0, #534773760	@ 0x1fe00000
 80042f6:	f420 10c0 	bic.w	r0, r0, #1572864	@ 0x180000
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042fa:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042fe:	6118      	str	r0, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 8004300:	68c8      	ldr	r0, [r1, #12]
    if (ep->xfer_len > 0U)
 8004302:	b105      	cbz	r5, 8004306 <USB_EP0StartXfer+0x36>
      ep->xfer_len = ep->maxpacket;
 8004304:	6188      	str	r0, [r1, #24]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004306:	691c      	ldr	r4, [r3, #16]
    ep->xfer_size = ep->maxpacket;
 8004308:	61c8      	str	r0, [r1, #28]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800430a:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800430e:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004310:	691c      	ldr	r4, [r3, #16]
 8004312:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8004316:	4320      	orrs	r0, r4
    if (dma == 1U)
 8004318:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800431a:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800431c:	d007      	beq.n	800432e <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800431e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004322:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004326:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800432a:	2000      	movs	r0, #0
 800432c:	bd70      	pop	{r4, r5, r6, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800432e:	690a      	ldr	r2, [r1, #16]
 8004330:	2a00      	cmp	r2, #0
 8004332:	d0f4      	beq.n	800431e <USB_EP0StartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004334:	615a      	str	r2, [r3, #20]
 8004336:	e7f2      	b.n	800431e <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004338:	f50c 6310 	add.w	r3, ip, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 800433c:	b36d      	cbz	r5, 800439a <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800433e:	691c      	ldr	r4, [r3, #16]
 8004340:	0ce4      	lsrs	r4, r4, #19
 8004342:	04e4      	lsls	r4, r4, #19
 8004344:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004346:	691c      	ldr	r4, [r3, #16]
 8004348:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800434c:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 8004350:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004352:	68cc      	ldr	r4, [r1, #12]
 8004354:	42ac      	cmp	r4, r5
        ep->xfer_len = ep->maxpacket;
 8004356:	bf3c      	itt	cc
 8004358:	618c      	strcc	r4, [r1, #24]
 800435a:	4625      	movcc	r5, r4
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800435c:	691c      	ldr	r4, [r3, #16]
 800435e:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004362:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004364:	691e      	ldr	r6, [r3, #16]
 8004366:	f3c5 0412 	ubfx	r4, r5, #0, #19
 800436a:	4334      	orrs	r4, r6
    if (dma == 1U)
 800436c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800436e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004370:	d02b      	beq.n	80043ca <USB_EP0StartXfer+0xfa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004372:	f8dc 3900 	ldr.w	r3, [ip, #2304]	@ 0x900
 8004376:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800437a:	f8cc 3900 	str.w	r3, [ip, #2304]	@ 0x900
      if (ep->xfer_len > 0U)
 800437e:	2d00      	cmp	r5, #0
 8004380:	d0d3      	beq.n	800432a <USB_EP0StartXfer+0x5a>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004382:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
 8004386:	f00e 030f 	and.w	r3, lr, #15
 800438a:	2201      	movs	r2, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	430b      	orrs	r3, r1
 8004392:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
}
 8004396:	2000      	movs	r0, #0
 8004398:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800439a:	6918      	ldr	r0, [r3, #16]
 800439c:	f020 50ff 	bic.w	r0, r0, #534773760	@ 0x1fe00000
 80043a0:	f420 10c0 	bic.w	r0, r0, #1572864	@ 0x180000
 80043a4:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043a6:	6918      	ldr	r0, [r3, #16]
 80043a8:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 80043ac:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043ae:	6918      	ldr	r0, [r3, #16]
 80043b0:	0cc0      	lsrs	r0, r0, #19
 80043b2:	04c0      	lsls	r0, r0, #19
    if (dma == 1U)
 80043b4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043b6:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 80043b8:	d007      	beq.n	80043ca <USB_EP0StartXfer+0xfa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043ba:	f8dc 3900 	ldr.w	r3, [ip, #2304]	@ 0x900
 80043be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043c2:	f8cc 3900 	str.w	r3, [ip, #2304]	@ 0x900
}
 80043c6:	2000      	movs	r0, #0
 80043c8:	bd70      	pop	{r4, r5, r6, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 80043ca:	694a      	ldr	r2, [r1, #20]
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	d0f4      	beq.n	80043ba <USB_EP0StartXfer+0xea>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043d0:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043d2:	e7f2      	b.n	80043ba <USB_EP0StartXfer+0xea>

080043d4 <USB_EPStopXfer>:
{
 80043d4:	b410      	push	{r4}
  if (ep->is_in == 1U)
 80043d6:	784a      	ldrb	r2, [r1, #1]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043d8:	780b      	ldrb	r3, [r1, #0]
{
 80043da:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80043dc:	2100      	movs	r1, #0
  if (ep->is_in == 1U)
 80043de:	2a01      	cmp	r2, #1
  __IO uint32_t count = 0U;
 80043e0:	9101      	str	r1, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043e2:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 80043e6:	d023      	beq.n	8004430 <USB_EPStopXfer+0x5c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043e8:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 80043ec:	18c2      	adds	r2, r0, r3
 80043ee:	58c1      	ldr	r1, [r0, r3]
 80043f0:	2900      	cmp	r1, #0
 80043f2:	db04      	blt.n	80043fe <USB_EPStopXfer+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;
 80043f4:	2000      	movs	r0, #0
}
 80043f6:	b003      	add	sp, #12
 80043f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043fc:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80043fe:	58c4      	ldr	r4, [r0, r3]
 8004400:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004404:	50c4      	str	r4, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004406:	58c4      	ldr	r4, [r0, r3]
 8004408:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800440c:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 800440e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004412:	e002      	b.n	800441a <USB_EPStopXfer+0x46>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	daec      	bge.n	80043f4 <USB_EPStopXfer+0x20>
        count++;
 800441a:	9b01      	ldr	r3, [sp, #4]
 800441c:	3301      	adds	r3, #1
 800441e:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004420:	9b01      	ldr	r3, [sp, #4]
 8004422:	428b      	cmp	r3, r1
 8004424:	d9f6      	bls.n	8004414 <USB_EPStopXfer+0x40>
          ret = HAL_ERROR;
 8004426:	2001      	movs	r0, #1
}
 8004428:	b003      	add	sp, #12
 800442a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800442e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004430:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8004434:	18c2      	adds	r2, r0, r3
 8004436:	58c1      	ldr	r1, [r0, r3]
 8004438:	2900      	cmp	r1, #0
 800443a:	dadb      	bge.n	80043f4 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800443c:	58c4      	ldr	r4, [r0, r3]
 800443e:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004442:	50c4      	str	r4, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004444:	58c4      	ldr	r4, [r0, r3]
 8004446:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800444a:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 800444c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004450:	e002      	b.n	8004458 <USB_EPStopXfer+0x84>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	dacd      	bge.n	80043f4 <USB_EPStopXfer+0x20>
        count++;
 8004458:	9b01      	ldr	r3, [sp, #4]
 800445a:	3301      	adds	r3, #1
 800445c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800445e:	9b01      	ldr	r3, [sp, #4]
 8004460:	428b      	cmp	r3, r1
 8004462:	d9f6      	bls.n	8004452 <USB_EPStopXfer+0x7e>
 8004464:	e7df      	b.n	8004426 <USB_EPStopXfer+0x52>
 8004466:	bf00      	nop

08004468 <USB_WritePacket>:
{
 8004468:	b410      	push	{r4}
 800446a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800446e:	b964      	cbnz	r4, 800448a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004470:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8004472:	089b      	lsrs	r3, r3, #2
 8004474:	d009      	beq.n	800448a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004476:	3201      	adds	r2, #1
 8004478:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800447c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004480:	f851 2b04 	ldr.w	r2, [r1], #4
 8004484:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004486:	428b      	cmp	r3, r1
 8004488:	d1fa      	bne.n	8004480 <USB_WritePacket+0x18>
}
 800448a:	2000      	movs	r0, #0
 800448c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop

08004494 <USB_ReadPacket>:
{
 8004494:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8004496:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 800449a:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800449c:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 80044a0:	d01c      	beq.n	80044dc <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044a2:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  uint8_t *pDest = dest;
 80044a6:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 80044a8:	2300      	movs	r3, #0
 80044aa:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044ac:	6822      	ldr	r2, [r4, #0]
 80044ae:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 80044b2:	459e      	cmp	lr, r3
 80044b4:	d1f9      	bne.n	80044aa <USB_ReadPacket+0x16>
    pDest++;
 80044b6:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 80044ba:	b176      	cbz	r6, 80044da <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044bc:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
    } while (remaining_bytes != 0U);
 80044c0:	2e01      	cmp	r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044c2:	682b      	ldr	r3, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044c4:	7003      	strb	r3, [r0, #0]
    } while (remaining_bytes != 0U);
 80044c6:	d007      	beq.n	80044d8 <USB_ReadPacket+0x44>
 80044c8:	2e02      	cmp	r6, #2
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044ca:	ea4f 2213 	mov.w	r2, r3, lsr #8
 80044ce:	bf18      	it	ne
 80044d0:	0c1b      	lsrne	r3, r3, #16
 80044d2:	7042      	strb	r2, [r0, #1]
 80044d4:	bf18      	it	ne
 80044d6:	7083      	strbne	r3, [r0, #2]
      pDest++;
 80044d8:	4430      	add	r0, r6
}
 80044da:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 80044dc:	4608      	mov	r0, r1
 80044de:	e7ec      	b.n	80044ba <USB_ReadPacket+0x26>

080044e0 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80044e0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80044e2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80044e4:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80044ea:	d00c      	beq.n	8004506 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044ec:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	db00      	blt.n	80044f6 <USB_EPSetStall+0x16>
 80044f4:	b9d3      	cbnz	r3, 800452c <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80044f6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80044fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80044fe:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004502:	2000      	movs	r0, #0
 8004504:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004506:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800450a:	2a00      	cmp	r2, #0
 800450c:	db06      	blt.n	800451c <USB_EPSetStall+0x3c>
 800450e:	b12b      	cbz	r3, 800451c <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004510:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004514:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004518:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800451c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004524:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004528:	2000      	movs	r0, #0
 800452a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800452c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004530:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004534:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004538:	e7dd      	b.n	80044f6 <USB_EPSetStall+0x16>
 800453a:	bf00      	nop

0800453c <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800453c:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 800453e:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004540:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004544:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 8004546:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004548:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800454c:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 800454e:	d011      	beq.n	8004574 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004550:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004554:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004556:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800455a:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800455e:	d901      	bls.n	8004564 <USB_EPClearStall+0x28>
}
 8004560:	2000      	movs	r0, #0
 8004562:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004564:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004570:	2000      	movs	r0, #0
 8004572:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004574:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004578:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800457a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800457e:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004582:	d8ed      	bhi.n	8004560 <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004584:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800458c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004590:	2000      	movs	r0, #0
 8004592:	4770      	bx	lr

08004594 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004594:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004598:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800459c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80045a0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80045a4:	0109      	lsls	r1, r1, #4
 80045a6:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 80045aa:	4319      	orrs	r1, r3
 80045ac:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 80045b0:	2000      	movs	r0, #0
 80045b2:	4770      	bx	lr

080045b4 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045b4:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 80045b8:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045ba:	f022 0203 	bic.w	r2, r2, #3
 80045be:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80045c2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80045c6:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 80045ca:	f023 0302 	bic.w	r3, r3, #2
}
 80045ce:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80045d0:	604b      	str	r3, [r1, #4]
}
 80045d2:	4770      	bx	lr

080045d4 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045d4:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 80045d8:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045da:	f022 0203 	bic.w	r2, r2, #3
 80045de:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045e2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80045e6:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 80045ea:	f043 0302 	orr.w	r3, r3, #2
}
 80045ee:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045f0:	604b      	str	r3, [r1, #4]
}
 80045f2:	4770      	bx	lr

080045f4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80045f4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80045f6:	6980      	ldr	r0, [r0, #24]
}
 80045f8:	4010      	ands	r0, r2
 80045fa:	4770      	bx	lr

080045fc <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80045fc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004600:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004604:	69c0      	ldr	r0, [r0, #28]
 8004606:	4018      	ands	r0, r3
}
 8004608:	0c00      	lsrs	r0, r0, #16
 800460a:	4770      	bx	lr

0800460c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800460c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004610:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004614:	69c0      	ldr	r0, [r0, #28]
 8004616:	4018      	ands	r0, r3
}
 8004618:	b280      	uxth	r0, r0
 800461a:	4770      	bx	lr

0800461c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800461c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004620:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004624:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004628:	6940      	ldr	r0, [r0, #20]
}
 800462a:	4010      	ands	r0, r2
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop

08004630 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004630:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004634:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004638:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800463c:	f001 010f 	and.w	r1, r1, #15
 8004640:	40cb      	lsrs	r3, r1
 8004642:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004644:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4313      	orrs	r3, r2
}
 800464c:	4018      	ands	r0, r3
 800464e:	4770      	bx	lr

08004650 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004650:	6940      	ldr	r0, [r0, #20]
}
 8004652:	f000 0001 	and.w	r0, r0, #1
 8004656:	4770      	bx	lr

08004658 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004658:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 800465c:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800465e:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8004662:	f022 0207 	bic.w	r2, r2, #7
 8004666:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800466a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800466e:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8004672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 8004676:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004678:	604b      	str	r3, [r1, #4]
}
 800467a:	4770      	bx	lr

0800467c <USB_EP0_OutStart>:
{
 800467c:	b430      	push	{r4, r5}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800467e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004680:	4c11      	ldr	r4, [pc, #68]	@ (80046c8 <USB_EP0_OutStart+0x4c>)
 8004682:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004684:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004688:	d903      	bls.n	8004692 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800468a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 800468e:	2c00      	cmp	r4, #0
 8004690:	db16      	blt.n	80046c0 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004692:	2400      	movs	r4, #0
 8004694:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004696:	691c      	ldr	r4, [r3, #16]
 8004698:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800469c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800469e:	691c      	ldr	r4, [r3, #16]
 80046a0:	f044 0418 	orr.w	r4, r4, #24
 80046a4:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80046a6:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 80046a8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80046aa:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 80046ae:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 80046b0:	d106      	bne.n	80046c0 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80046b2:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80046b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80046b8:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80046bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80046c0:	2000      	movs	r0, #0
 80046c2:	bc30      	pop	{r4, r5}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	4f54300a 	.word	0x4f54300a

080046cc <asn1_get_int>:
#include "asn1.h"
#include <stdint.h>

int asn1_get_int(const uint8_t *buffer, const uint8_t **int_ptr, size_t *nbytes) {
 80046cc:	4684      	mov	ip, r0
    if (buffer[0] != ASN1_INTEGER) {
 80046ce:	7800      	ldrb	r0, [r0, #0]
 80046d0:	2802      	cmp	r0, #2
 80046d2:	d12d      	bne.n	8004730 <asn1_get_int+0x64>
int asn1_get_int(const uint8_t *buffer, const uint8_t **int_ptr, size_t *nbytes) {
 80046d4:	b570      	push	{r4, r5, r6, lr}
        return -1;
    }

    size_t int_index = 2 + (buffer[1] & ~0x7F ? buffer[1] & 0x7F : 0);
 80046d6:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 80046da:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db11      	blt.n	8004706 <asn1_get_int+0x3a>

    return i;
}

size_t asn1_get_len(const uint8_t *buffer) {
    size_t len = buffer[0];
 80046e2:	4634      	mov	r4, r6
    if (buffer[int_index] == 0 && data_bytes > 1) {
 80046e4:	f81c 5000 	ldrb.w	r5, [ip, r0]
 80046e8:	eb0c 0300 	add.w	r3, ip, r0
 80046ec:	b11d      	cbz	r5, 80046f6 <asn1_get_int+0x2a>
    return *nbytes + int_index;
 80046ee:	4420      	add	r0, r4
    *int_ptr = buffer + int_index;
 80046f0:	600b      	str	r3, [r1, #0]
    *nbytes = data_bytes;
 80046f2:	6014      	str	r4, [r2, #0]
}
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
    if (buffer[int_index] == 0 && data_bytes > 1) {
 80046f6:	2c01      	cmp	r4, #1
        ++int_index;
 80046f8:	bf82      	ittt	hi
 80046fa:	3001      	addhi	r0, #1
        --data_bytes;
 80046fc:	f104 34ff 	addhi.w	r4, r4, #4294967295
    *int_ptr = buffer + int_index;
 8004700:	eb0c 0300 	addhi.w	r3, ip, r0
 8004704:	e7f3      	b.n	80046ee <asn1_get_int+0x22>
 8004706:	f006 067f 	and.w	r6, r6, #127	@ 0x7f
    size_t int_index = 2 + (buffer[1] & ~0x7F ? buffer[1] & 0x7F : 0);
 800470a:	1cb0      	adds	r0, r6, #2
    if (buffer[0] & ~0x7F) {
        len = 0;
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 800470c:	b166      	cbz	r6, 8004728 <asn1_get_int+0x5c>
 800470e:	f10c 0e02 	add.w	lr, ip, #2
        len = 0;
 8004712:	2400      	movs	r4, #0
            len = len << 8 | buffer[i];
 8004714:	f81e 5b01 	ldrb.w	r5, [lr], #1
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004718:	ebae 030c 	sub.w	r3, lr, ip
 800471c:	3b01      	subs	r3, #1
 800471e:	429e      	cmp	r6, r3
            len = len << 8 | buffer[i];
 8004720:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004724:	d2f6      	bcs.n	8004714 <asn1_get_int+0x48>
 8004726:	e7dd      	b.n	80046e4 <asn1_get_int+0x18>
    *int_ptr = buffer + int_index;
 8004728:	eb0c 0300 	add.w	r3, ip, r0
        len = 0;
 800472c:	4634      	mov	r4, r6
 800472e:	e7df      	b.n	80046f0 <asn1_get_int+0x24>
        return -1;
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop

08004738 <asn1_get_padding_pub_key>:
    if (buffer[i] != ASN1_SEQUENCE) {
 8004738:	7803      	ldrb	r3, [r0, #0]
 800473a:	2b30      	cmp	r3, #48	@ 0x30
 800473c:	d12b      	bne.n	8004796 <asn1_get_padding_pub_key+0x5e>
    if (buffer[i] & 0x80) {
 800473e:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8004742:	7843      	ldrb	r3, [r0, #1]
 8004744:	2a00      	cmp	r2, #0
 8004746:	db29      	blt.n	800479c <asn1_get_padding_pub_key+0x64>
 8004748:	2302      	movs	r3, #2
    ++i;
 800474a:	2201      	movs	r2, #1
    if (buffer[i] != ASN1_SEQUENCE) {
 800474c:	5cc3      	ldrb	r3, [r0, r3]
 800474e:	2b30      	cmp	r3, #48	@ 0x30
 8004750:	d121      	bne.n	8004796 <asn1_get_padding_pub_key+0x5e>
size_t asn1_get_padding_pub_key(const uint8_t *buffer) {
 8004752:	b530      	push	{r4, r5, lr}
    ++i;
 8004754:	1c93      	adds	r3, r2, #2
    i += asn1_get_len(buffer + i) + 1;
 8004756:	18c4      	adds	r4, r0, r3
    size_t len = buffer[0];
 8004758:	5cc1      	ldrb	r1, [r0, r3]
    if (buffer[0] & ~0x7F) {
 800475a:	56c3      	ldrsb	r3, [r0, r3]
 800475c:	2b00      	cmp	r3, #0
 800475e:	db25      	blt.n	80047ac <asn1_get_padding_pub_key+0x74>
        }
    }

    return len;
 8004760:	1cd3      	adds	r3, r2, #3
    i += asn1_get_len(buffer + i) + 1;
 8004762:	440b      	add	r3, r1
    if (buffer[i] != ASN1_BIT_STRING) {
 8004764:	5cc2      	ldrb	r2, [r0, r3]
 8004766:	2a03      	cmp	r2, #3
 8004768:	d11d      	bne.n	80047a6 <asn1_get_padding_pub_key+0x6e>
    ++i;
 800476a:	3301      	adds	r3, #1
    if (buffer[i] & 0x80) {
 800476c:	56c1      	ldrsb	r1, [r0, r3]
 800476e:	5cc2      	ldrb	r2, [r0, r3]
 8004770:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8004772:	bfbc      	itt	lt
 8004774:	f002 027f 	andlt.w	r2, r2, #127	@ 0x7f
 8004778:	189b      	addlt	r3, r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 800477a:	18c2      	adds	r2, r0, r3
 800477c:	7892      	ldrb	r2, [r2, #2]
 800477e:	2a30      	cmp	r2, #48	@ 0x30
 8004780:	d111      	bne.n	80047a6 <asn1_get_padding_pub_key+0x6e>
    ++i;
 8004782:	3303      	adds	r3, #3
    if (buffer[i] & 0x80) {
 8004784:	56c1      	ldrsb	r1, [r0, r3]
 8004786:	5cc2      	ldrb	r2, [r0, r3]
 8004788:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 800478a:	bfbc      	itt	lt
 800478c:	f002 027f 	andlt.w	r2, r2, #127	@ 0x7f
 8004790:	189b      	addlt	r3, r3, r2
    ++i;
 8004792:	1c58      	adds	r0, r3, #1
}
 8004794:	bd30      	pop	{r4, r5, pc}
        return -1;
 8004796:	f04f 30ff 	mov.w	r0, #4294967295
}
 800479a:	4770      	bx	lr
        i += buffer[i] & 0x7F;
 800479c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047a0:	1c5a      	adds	r2, r3, #1
    ++i;
 80047a2:	3302      	adds	r3, #2
 80047a4:	e7d2      	b.n	800474c <asn1_get_padding_pub_key+0x14>
        return -1;
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80047aa:	bd30      	pop	{r4, r5, pc}
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80047ac:	f011 057f 	ands.w	r5, r1, #127	@ 0x7f
 80047b0:	d00b      	beq.n	80047ca <asn1_get_padding_pub_key+0x92>
 80047b2:	46a4      	mov	ip, r4
        len = 0;
 80047b4:	2100      	movs	r1, #0
            len = len << 8 | buffer[i];
 80047b6:	4663      	mov	r3, ip
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80047b8:	3302      	adds	r3, #2
            len = len << 8 | buffer[i];
 80047ba:	f81c ef01 	ldrb.w	lr, [ip, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80047be:	1b1b      	subs	r3, r3, r4
 80047c0:	429d      	cmp	r5, r3
            len = len << 8 | buffer[i];
 80047c2:	ea4e 2101 	orr.w	r1, lr, r1, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80047c6:	d2f6      	bcs.n	80047b6 <asn1_get_padding_pub_key+0x7e>
 80047c8:	e7ca      	b.n	8004760 <asn1_get_padding_pub_key+0x28>
        len = 0;
 80047ca:	4629      	mov	r1, r5
 80047cc:	e7c8      	b.n	8004760 <asn1_get_padding_pub_key+0x28>
 80047ce:	bf00      	nop

080047d0 <asn1_get_padding_pvt_key>:
    if (buffer[i] != ASN1_SEQUENCE) {
 80047d0:	7803      	ldrb	r3, [r0, #0]
 80047d2:	2b30      	cmp	r3, #48	@ 0x30
 80047d4:	d136      	bne.n	8004844 <asn1_get_padding_pvt_key+0x74>
    if (buffer[i] & 0x80) {
 80047d6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80047da:	7842      	ldrb	r2, [r0, #1]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	db34      	blt.n	800484a <asn1_get_padding_pvt_key+0x7a>
 80047e0:	2202      	movs	r2, #2
    ++i;
 80047e2:	2301      	movs	r3, #1
    if (buffer[i] != ASN1_INTEGER) {
 80047e4:	5c82      	ldrb	r2, [r0, r2]
 80047e6:	2a02      	cmp	r2, #2
 80047e8:	d12c      	bne.n	8004844 <asn1_get_padding_pvt_key+0x74>
size_t asn1_get_padding_pvt_key(const uint8_t *buffer) {
 80047ea:	b530      	push	{r4, r5, lr}
    ++i;
 80047ec:	1c9a      	adds	r2, r3, #2
    i += asn1_get_len(buffer + i) + 1;
 80047ee:	1884      	adds	r4, r0, r2
    size_t len = buffer[0];
 80047f0:	5c81      	ldrb	r1, [r0, r2]
    if (buffer[0] & ~0x7F) {
 80047f2:	5682      	ldrsb	r2, [r0, r2]
 80047f4:	2a00      	cmp	r2, #0
 80047f6:	db44      	blt.n	8004882 <asn1_get_padding_pvt_key+0xb2>
    return len;
 80047f8:	3303      	adds	r3, #3
    i += asn1_get_len(buffer + i) + 1;
 80047fa:	440b      	add	r3, r1
    if (buffer[i] != ASN1_SEQUENCE) {
 80047fc:	5cc2      	ldrb	r2, [r0, r3]
 80047fe:	2a30      	cmp	r2, #48	@ 0x30
 8004800:	d128      	bne.n	8004854 <asn1_get_padding_pvt_key+0x84>
    ++i;
 8004802:	1c5a      	adds	r2, r3, #1
    i += asn1_get_len(buffer + i) + 1;
 8004804:	1885      	adds	r5, r0, r2
    size_t len = buffer[0];
 8004806:	5c81      	ldrb	r1, [r0, r2]
    if (buffer[0] & ~0x7F) {
 8004808:	5682      	ldrsb	r2, [r0, r2]
 800480a:	2a00      	cmp	r2, #0
 800480c:	db25      	blt.n	800485a <asn1_get_padding_pvt_key+0x8a>
    return len;
 800480e:	3302      	adds	r3, #2
    i += asn1_get_len(buffer + i) + 1;
 8004810:	440b      	add	r3, r1
    if (buffer[i] != ASN1_OCTET_STRING) {
 8004812:	5cc2      	ldrb	r2, [r0, r3]
 8004814:	2a04      	cmp	r2, #4
 8004816:	d11d      	bne.n	8004854 <asn1_get_padding_pvt_key+0x84>
    ++i;
 8004818:	3301      	adds	r3, #1
    if (buffer[i] & 0x80) {
 800481a:	56c1      	ldrsb	r1, [r0, r3]
 800481c:	5cc2      	ldrb	r2, [r0, r3]
 800481e:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8004820:	bfbc      	itt	lt
 8004822:	f002 027f 	andlt.w	r2, r2, #127	@ 0x7f
 8004826:	189b      	addlt	r3, r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 8004828:	18c2      	adds	r2, r0, r3
 800482a:	7852      	ldrb	r2, [r2, #1]
 800482c:	2a30      	cmp	r2, #48	@ 0x30
 800482e:	d111      	bne.n	8004854 <asn1_get_padding_pvt_key+0x84>
    ++i;
 8004830:	3302      	adds	r3, #2
    if (buffer[i] & 0x80) {
 8004832:	56c1      	ldrsb	r1, [r0, r3]
 8004834:	5cc2      	ldrb	r2, [r0, r3]
 8004836:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8004838:	bfbc      	itt	lt
 800483a:	f002 027f 	andlt.w	r2, r2, #127	@ 0x7f
 800483e:	189b      	addlt	r3, r3, r2
    ++i;
 8004840:	1c58      	adds	r0, r3, #1
}
 8004842:	bd30      	pop	{r4, r5, pc}
        return -1;
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004848:	4770      	bx	lr
        i += buffer[i] & 0x7F;
 800484a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800484e:	1c53      	adds	r3, r2, #1
    ++i;
 8004850:	3202      	adds	r2, #2
 8004852:	e7c7      	b.n	80047e4 <asn1_get_padding_pvt_key+0x14>
        return -1;
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004858:	bd30      	pop	{r4, r5, pc}
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 800485a:	f011 0e7f 	ands.w	lr, r1, #127	@ 0x7f
 800485e:	d021      	beq.n	80048a4 <asn1_get_padding_pvt_key+0xd4>
 8004860:	46ac      	mov	ip, r5
        len = 0;
 8004862:	2100      	movs	r1, #0
            len = len << 8 | buffer[i];
 8004864:	4662      	mov	r2, ip
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004866:	3202      	adds	r2, #2
            len = len << 8 | buffer[i];
 8004868:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 800486c:	1b52      	subs	r2, r2, r5
 800486e:	4596      	cmp	lr, r2
            len = len << 8 | buffer[i];
 8004870:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004874:	d2f6      	bcs.n	8004864 <asn1_get_padding_pvt_key+0x94>
    return len;
 8004876:	3302      	adds	r3, #2
    i += asn1_get_len(buffer + i) + 1;
 8004878:	440b      	add	r3, r1
    if (buffer[i] != ASN1_OCTET_STRING) {
 800487a:	5cc2      	ldrb	r2, [r0, r3]
 800487c:	2a04      	cmp	r2, #4
 800487e:	d0cb      	beq.n	8004818 <asn1_get_padding_pvt_key+0x48>
 8004880:	e7e8      	b.n	8004854 <asn1_get_padding_pvt_key+0x84>
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004882:	f011 057f 	ands.w	r5, r1, #127	@ 0x7f
 8004886:	d00b      	beq.n	80048a0 <asn1_get_padding_pvt_key+0xd0>
 8004888:	46a4      	mov	ip, r4
        len = 0;
 800488a:	2100      	movs	r1, #0
            len = len << 8 | buffer[i];
 800488c:	4662      	mov	r2, ip
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 800488e:	3202      	adds	r2, #2
            len = len << 8 | buffer[i];
 8004890:	f81c ef01 	ldrb.w	lr, [ip, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004894:	1b12      	subs	r2, r2, r4
 8004896:	4295      	cmp	r5, r2
            len = len << 8 | buffer[i];
 8004898:	ea4e 2101 	orr.w	r1, lr, r1, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 800489c:	d2f6      	bcs.n	800488c <asn1_get_padding_pvt_key+0xbc>
 800489e:	e7ab      	b.n	80047f8 <asn1_get_padding_pvt_key+0x28>
        len = 0;
 80048a0:	4629      	mov	r1, r5
 80048a2:	e7a9      	b.n	80047f8 <asn1_get_padding_pvt_key+0x28>
 80048a4:	4671      	mov	r1, lr
 80048a6:	e7b2      	b.n	800480e <asn1_get_padding_pvt_key+0x3e>

080048a8 <base64_read>:
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
};

int base64_read(const uint8_t *in, const size_t in_size, uint8_t *out, const size_t out_size) {
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (out_size < in_size * 4 / 3) {
 80048aa:	4d24      	ldr	r5, [pc, #144]	@ (800493c <base64_read+0x94>)
 80048ac:	008c      	lsls	r4, r1, #2
 80048ae:	fba5 5404 	umull	r5, r4, r5, r4
 80048b2:	ebb3 0f54 	cmp.w	r3, r4, lsr #1
 80048b6:	d33c      	bcc.n	8004932 <base64_read+0x8a>
        return 0;
    }

    size_t w = 0;
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 80048b8:	0867      	lsrs	r7, r4, #1
 80048ba:	b3e1      	cbz	r1, 8004936 <base64_read+0x8e>
 80048bc:	4c20      	ldr	r4, [pc, #128]	@ (8004940 <base64_read+0x98>)
 80048be:	4684      	mov	ip, r0
 80048c0:	4696      	mov	lr, r2
 80048c2:	2600      	movs	r6, #0
        out[w + 0] = (v64[in[r + 0]] << 2) | (v64[in[r + 1]] >> 4);
 80048c4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80048c8:	f89c 0000 	ldrb.w	r0, [ip]
 80048cc:	f934 5015 	ldrsh.w	r5, [r4, r5, lsl #1]
 80048d0:	f934 0010 	ldrsh.w	r0, [r4, r0, lsl #1]
 80048d4:	112d      	asrs	r5, r5, #4
 80048d6:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
 80048da:	f88e 5000 	strb.w	r5, [lr]
        out[w + 1] = (v64[in[r + 1]] << 4) | (v64[in[r + 2]] >> 2);
 80048de:	f89c 5002 	ldrb.w	r5, [ip, #2]
 80048e2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80048e6:	f934 5015 	ldrsh.w	r5, [r4, r5, lsl #1]
 80048ea:	f934 0010 	ldrsh.w	r0, [r4, r0, lsl #1]
 80048ee:	10ad      	asrs	r5, r5, #2
 80048f0:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 80048f4:	f88e 5001 	strb.w	r5, [lr, #1]
        out[w + 2] = (v64[in[r + 2]] << 6) | (v64[in[r + 3]] >> 0);
 80048f8:	f89c 5002 	ldrb.w	r5, [ip, #2]
 80048fc:	f89c 0003 	ldrb.w	r0, [ip, #3]
 8004900:	f934 5015 	ldrsh.w	r5, [r4, r5, lsl #1]
 8004904:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 8004908:	3604      	adds	r6, #4
        out[w + 2] = (v64[in[r + 2]] << 6) | (v64[in[r + 3]] >> 0);
 800490a:	ea40 1085 	orr.w	r0, r0, r5, lsl #6
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 800490e:	42b1      	cmp	r1, r6
        out[w + 2] = (v64[in[r + 2]] << 6) | (v64[in[r + 3]] >> 0);
 8004910:	f88e 0002 	strb.w	r0, [lr, #2]
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 8004914:	f10c 0c04 	add.w	ip, ip, #4
 8004918:	4670      	mov	r0, lr
 800491a:	f10e 0e03 	add.w	lr, lr, #3
 800491e:	d8d1      	bhi.n	80048c4 <base64_read+0x1c>
        out[w + 1] = (v64[in[r + 1]] << 4) | (v64[in[r + 2]] >> 2);
 8004920:	f1c2 0101 	rsb	r1, r2, #1
 8004924:	4401      	add	r1, r0
    }

    if (w - 2 < out_size) {
 8004926:	428b      	cmp	r3, r1
        out[w - 2] = '\0';
 8004928:	bf84      	itt	hi
 800492a:	2300      	movhi	r3, #0
 800492c:	5453      	strbhi	r3, [r2, r1]
    }

    return in_size * 4 / 3;
 800492e:	4638      	mov	r0, r7
}
 8004930:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0;
 8004932:	2000      	movs	r0, #0
}
 8004934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 8004936:	f06f 0101 	mvn.w	r1, #1
 800493a:	e7f4      	b.n	8004926 <base64_read+0x7e>
 800493c:	aaaaaaab 	.word	0xaaaaaaab
 8004940:	0800a804 	.word	0x0800a804

08004944 <bn_div.part.0>:
    bn_memset(z1_ptr, 0, 0, bn_size_shift);
    bn_assign(z1_ptr, bn_size_shift, z0_ptr, 0, in_bn_size + 1);
    bn_add(left, z1_ptr, left, in_bn_size << 1);
}

void bn_div(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8004944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	b0e7      	sub	sp, #412	@ 0x19c
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 800494a:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800494e:	ac06      	add	r4, sp, #24
void bn_div(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8004950:	461e      	mov	r6, r3
 8004952:	4680      	mov	r8, r0
 8004954:	460d      	mov	r5, r1
 8004956:	4617      	mov	r7, r2
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004958:	2100      	movs	r1, #0
 800495a:	464a      	mov	r2, r9
 800495c:	4620      	mov	r0, r4
 800495e:	f003 f843 	bl	80079e8 <memset>
    for (size_t i = 0; i < size; i++) {
 8004962:	b12e      	cbz	r6, 8004970 <bn_div.part.0+0x2c>
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 8004964:	2301      	movs	r3, #1
    for (size_t i = 0; i < size; i++) {
 8004966:	429e      	cmp	r6, r3
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	bf1c      	itt	ne
 800496c:	2300      	movne	r3, #0
 800496e:	6063      	strne	r3, [r4, #4]
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004970:	4629      	mov	r1, r5
 8004972:	ad26      	add	r5, sp, #152	@ 0x98
 8004974:	464a      	mov	r2, r9
 8004976:	4628      	mov	r0, r5
 8004978:	f003 f8e7 	bl	8007b4a <memcpy>
 800497c:	4641      	mov	r1, r8
 800497e:	464a      	mov	r2, r9
 8004980:	a846      	add	r0, sp, #280	@ 0x118
 8004982:	f003 f8e2 	bl	8007b4a <memcpy>
    bn_from_int(&current, 1, size);
    bn_assign(&denom, 0, bignum2, 0, size);
    bn_assign(&tmp, 0, bignum1, 0, size);

    uint8_t overflow = 0;
    while (bn_cmp(&denom, bignum1, size) != BN_CMP_LARGER) {
 8004986:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800498a:	eb08 0e86 	add.w	lr, r8, r6, lsl #2
        const BN_DTYPE_TMP half_max = 1 + (BN_DTYPE_TMP)(BN_MAX_VAL / 2);
        if (denom[size - 1] >= half_max) {
 800498e:	1e70      	subs	r0, r6, #1
 8004990:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004994:	46bc      	mov	ip, r7
 8004996:	46b2      	mov	sl, r6
void bn_div(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8004998:	4671      	mov	r1, lr
 800499a:	4642      	mov	r2, r8
 800499c:	4653      	mov	r3, sl
 800499e:	e004      	b.n	80049aa <bn_div.part.0+0x66>
bignum_compare_state bn_cmp(const bignum_t *bignum1, const bignum_t *bignum2, size_t size) {
    do {
        --size;
        if ((*bignum1)[size] > (*bignum2)[size]) {
            return BN_CMP_LARGER;
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 80049a0:	f0c0 8177 	bcc.w	8004c92 <bn_div.part.0+0x34e>
            return BN_CMP_SMALLER;
        }
    } while (size != 0);
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8174 	beq.w	8004c92 <bn_div.part.0+0x34e>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80049aa:	f852 6d04 	ldr.w	r6, [r2, #-4]!
 80049ae:	f851 7d04 	ldr.w	r7, [r1, #-4]!
 80049b2:	42be      	cmp	r6, r7
        --size;
 80049b4:	f103 33ff 	add.w	r3, r3, #4294967295
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80049b8:	d9f2      	bls.n	80049a0 <bn_div.part.0+0x5c>
 80049ba:	6829      	ldr	r1, [r5, #0]
 80049bc:	4667      	mov	r7, ip
 80049be:	4656      	mov	r6, sl
    if (!overflow) {
 80049c0:	462b      	mov	r3, r5
 80049c2:	a845      	add	r0, sp, #276	@ 0x114
    (*bignum)[0] <<= 1;
}

static void rshift_one_bit(bignum_t *bignum) {
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 80049c4:	084a      	lsrs	r2, r1, #1
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80049cc:	f843 2b04 	str.w	r2, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 80049d0:	4283      	cmp	r3, r0
 80049d2:	d1f7      	bne.n	80049c4 <bn_div.part.0+0x80>
    }
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 80049d4:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 80049d6:	6821      	ldr	r1, [r4, #0]
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	67eb      	str	r3, [r5, #124]	@ 0x7c
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 80049dc:	a825      	add	r0, sp, #148	@ 0x94
 80049de:	4623      	mov	r3, r4
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 80049e0:	084a      	lsrs	r2, r1, #1
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80049e8:	f843 2b04 	str.w	r2, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 80049ec:	4283      	cmp	r3, r0
 80049ee:	d1f7      	bne.n	80049e0 <bn_div.part.0+0x9c>
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 80049f0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80049f2:	085b      	lsrs	r3, r3, #1
 80049f4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80049f6:	464a      	mov	r2, r9
 80049f8:	2100      	movs	r1, #0
 80049fa:	4638      	mov	r0, r7
 80049fc:	f002 fff4 	bl	80079e8 <memset>
 8004a00:	ab46      	add	r3, sp, #280	@ 0x118
 8004a02:	449b      	add	fp, r3
 8004a04:	eb03 0c09 	add.w	ip, r3, r9
 8004a08:	0873      	lsrs	r3, r6, #1
 8004a0a:	9303      	str	r3, [sp, #12]
 8004a0c:	f026 0301 	bic.w	r3, r6, #1
 8004a10:	9305      	str	r3, [sp, #20]
    for (size_t i = 0; i < size; ++i) {
 8004a12:	2e00      	cmp	r6, #0
 8004a14:	f000 8160 	beq.w	8004cd8 <bn_div.part.0+0x394>
 8004a18:	f006 0301 	and.w	r3, r6, #1
 8004a1c:	9304      	str	r3, [sp, #16]
 8004a1e:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 8004a22:	a945      	add	r1, sp, #276	@ 0x114
    uint8_t borrow = 0;
 8004a24:	46a6      	mov	lr, r4
    for (size_t i = 0; i < size; ++i) {
 8004a26:	2200      	movs	r2, #0
 8004a28:	46a1      	mov	r9, r4
 8004a2a:	e002      	b.n	8004a32 <bn_div.part.0+0xee>
 8004a2c:	4296      	cmp	r6, r2
 8004a2e:	f000 8153 	beq.w	8004cd8 <bn_div.part.0+0x394>
        if ((*bignum)[i] != 0) {
 8004a32:	f85e 3b04 	ldr.w	r3, [lr], #4
    for (size_t i = 0; i < size; ++i) {
 8004a36:	3201      	adds	r2, #1
        if ((*bignum)[i] != 0) {
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f7      	beq.n	8004a2c <bn_div.part.0+0xe8>
 8004a3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a40:	f8cd c008 	str.w	ip, [sp, #8]
 8004a44:	46c1      	mov	r9, r8
 8004a46:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004a4a:	46de      	mov	lr, fp
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	4682      	mov	sl, r0
 8004a50:	e002      	b.n	8004a58 <bn_div.part.0+0x114>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8004a52:	f0c0 813b 	bcc.w	8004ccc <bn_div.part.0+0x388>
    } while (size != 0);
 8004a56:	b13a      	cbz	r2, 8004a68 <bn_div.part.0+0x124>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004a58:	f85e 0d04 	ldr.w	r0, [lr, #-4]!
 8004a5c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8004a60:	4298      	cmp	r0, r3
        --size;
 8004a62:	f102 32ff 	add.w	r2, r2, #4294967295
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004a66:	d9f4      	bls.n	8004a52 <bn_div.part.0+0x10e>
 8004a68:	f8cd c004 	str.w	ip, [sp, #4]
 8004a6c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004a70:	46c1      	mov	r9, r8
 8004a72:	46de      	mov	lr, fp
 8004a74:	4632      	mov	r2, r6
 8004a76:	e002      	b.n	8004a7e <bn_div.part.0+0x13a>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8004a78:	f0c0 8131 	bcc.w	8004cde <bn_div.part.0+0x39a>
    } while (size != 0);
 8004a7c:	b13a      	cbz	r2, 8004a8e <bn_div.part.0+0x14a>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004a7e:	f85e 0d04 	ldr.w	r0, [lr, #-4]!
 8004a82:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8004a86:	4298      	cmp	r0, r3
        --size;
 8004a88:	f102 32ff 	add.w	r2, r2, #4294967295
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004a8c:	d9f4      	bls.n	8004a78 <bn_div.part.0+0x134>
 8004a8e:	f8cd c004 	str.w	ip, [sp, #4]
 8004a92:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004a96:	4650      	mov	r0, sl
 8004a98:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8004a9c:	46aa      	mov	sl, r5
    uint8_t borrow = 0;
 8004a9e:	f04f 0e00 	mov.w	lr, #0
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 8004aa2:	f8d9 2000 	ldr.w	r2, [r9]
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 8004aa6:	f85a 3b04 	ldr.w	r3, [sl], #4
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	bf2c      	ite	cs
 8004aae:	2201      	movcs	r2, #1
 8004ab0:	2200      	movcc	r2, #0
 8004ab2:	ebb3 030e 	subs.w	r3, r3, lr
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8004ab6:	f849 3b04 	str.w	r3, [r9], #4
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004aba:	f162 0200 	sbc.w	r2, r2, #0
        borrow = res <= BN_MAX_VAL;
 8004abe:	fab2 fe82 	clz	lr, r2
    for (size_t i = 0; i < size; ++i) {
 8004ac2:	45cc      	cmp	ip, r9
        borrow = res <= BN_MAX_VAL;
 8004ac4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    for (size_t i = 0; i < size; ++i) {
 8004ac8:	d1eb      	bne.n	8004aa2 <bn_div.part.0+0x15e>
    for (size_t i = 0; i < size; ++i) {
 8004aca:	2e01      	cmp	r6, #1
 8004acc:	f000 810f 	beq.w	8004cee <bn_div.part.0+0x3aa>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	603a      	str	r2, [r7, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6862      	ldr	r2, [r4, #4]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; ++i) {
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	f000 80a5 	beq.w	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	68a3      	ldr	r3, [r4, #8]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	60ba      	str	r2, [r7, #8]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68e2      	ldr	r2, [r4, #12]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	60fa      	str	r2, [r7, #12]
    for (size_t i = 0; i < size; ++i) {
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	f000 8099 	beq.w	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6922      	ldr	r2, [r4, #16]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	613a      	str	r2, [r7, #16]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	6962      	ldr	r2, [r4, #20]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	617a      	str	r2, [r7, #20]
    for (size_t i = 0; i < size; ++i) {
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	f000 808d 	beq.w	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	69a3      	ldr	r3, [r4, #24]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	61ba      	str	r2, [r7, #24]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	69e2      	ldr	r2, [r4, #28]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	9b03      	ldr	r3, [sp, #12]
 8004b28:	61fa      	str	r2, [r7, #28]
    for (size_t i = 0; i < size; ++i) {
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	f000 8081 	beq.w	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	6a23      	ldr	r3, [r4, #32]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	623a      	str	r2, [r7, #32]
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	9b03      	ldr	r3, [sp, #12]
 8004b40:	627a      	str	r2, [r7, #36]	@ 0x24
    for (size_t i = 0; i < size; ++i) {
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d075      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b48:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b50:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004b52:	431a      	orrs	r2, r3
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
    for (size_t i = 0; i < size; ++i) {
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	d06a      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004b60:	431a      	orrs	r2, r3
 8004b62:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b66:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	637a      	str	r2, [r7, #52]	@ 0x34
    for (size_t i = 0; i < size; ++i) {
 8004b6e:	2b07      	cmp	r3, #7
 8004b70:	d05f      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b74:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004b76:	431a      	orrs	r2, r3
 8004b78:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	9b03      	ldr	r3, [sp, #12]
 8004b82:	63fa      	str	r2, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < size; ++i) {
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d054      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b92:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004b94:	431a      	orrs	r2, r3
 8004b96:	9b03      	ldr	r3, [sp, #12]
 8004b98:	647a      	str	r2, [r7, #68]	@ 0x44
    for (size_t i = 0; i < size; ++i) {
 8004b9a:	2b09      	cmp	r3, #9
 8004b9c:	d049      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ba0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8004baa:	431a      	orrs	r2, r3
 8004bac:	9b03      	ldr	r3, [sp, #12]
 8004bae:	64fa      	str	r2, [r7, #76]	@ 0x4c
    for (size_t i = 0; i < size; ++i) {
 8004bb0:	2b0a      	cmp	r3, #10
 8004bb2:	d03e      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004bb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004bb6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	653a      	str	r2, [r7, #80]	@ 0x50
 8004bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bbe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	9b03      	ldr	r3, [sp, #12]
 8004bc4:	657a      	str	r2, [r7, #84]	@ 0x54
    for (size_t i = 0; i < size; ++i) {
 8004bc6:	2b0b      	cmp	r3, #11
 8004bc8:	d033      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004bca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bd4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	9b03      	ldr	r3, [sp, #12]
 8004bda:	65fa      	str	r2, [r7, #92]	@ 0x5c
    for (size_t i = 0; i < size; ++i) {
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d028      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004be0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004be2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004be4:	431a      	orrs	r2, r3
 8004be6:	663a      	str	r2, [r7, #96]	@ 0x60
 8004be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004bec:	431a      	orrs	r2, r3
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	667a      	str	r2, [r7, #100]	@ 0x64
    for (size_t i = 0; i < size; ++i) {
 8004bf2:	2b0d      	cmp	r3, #13
 8004bf4:	d01d      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004bf6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004bf8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c00:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004c02:	431a      	orrs	r2, r3
 8004c04:	9b03      	ldr	r3, [sp, #12]
 8004c06:	66fa      	str	r2, [r7, #108]	@ 0x6c
    for (size_t i = 0; i < size; ++i) {
 8004c08:	2b0e      	cmp	r3, #14
 8004c0a:	d012      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004c0c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004c0e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004c10:	431a      	orrs	r2, r3
 8004c12:	673a      	str	r2, [r7, #112]	@ 0x70
 8004c14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c16:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	9b03      	ldr	r3, [sp, #12]
 8004c1c:	677a      	str	r2, [r7, #116]	@ 0x74
    for (size_t i = 0; i < size; ++i) {
 8004c1e:	2b0f      	cmp	r3, #15
 8004c20:	d007      	beq.n	8004c32 <bn_div.part.0+0x2ee>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004c22:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004c24:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004c26:	431a      	orrs	r2, r3
 8004c28:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004c2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c2c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	67fa      	str	r2, [r7, #124]	@ 0x7c
    for (size_t i = 0; i < size; ++i) {
 8004c32:	9b04      	ldr	r3, [sp, #16]
 8004c34:	b143      	cbz	r3, 8004c48 <bn_div.part.0+0x304>
    uint8_t borrow = 0;
 8004c36:	f8dd e014 	ldr.w	lr, [sp, #20]
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004c3a:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
 8004c3e:	f854 302e 	ldr.w	r3, [r4, lr, lsl #2]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
    for (size_t i = 0; i < size; ++i) {
 8004c48:	f8d4 e000 	ldr.w	lr, [r4]
 8004c4c:	9b01      	ldr	r3, [sp, #4]
 8004c4e:	4602      	mov	r2, r0
 8004c50:	4670      	mov	r0, lr
 8004c52:	4696      	mov	lr, r2
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 8004c54:	0842      	lsrs	r2, r0, #1
 8004c56:	6858      	ldr	r0, [r3, #4]
 8004c58:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 8004c5c:	f843 2b04 	str.w	r2, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8004c60:	459e      	cmp	lr, r3
 8004c62:	d1f7      	bne.n	8004c54 <bn_div.part.0+0x310>
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 8004c64:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8004c66:	4670      	mov	r0, lr
 8004c68:	f8d5 e000 	ldr.w	lr, [r5]
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	4602      	mov	r2, r0
 8004c70:	67e3      	str	r3, [r4, #124]	@ 0x7c
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8004c72:	4670      	mov	r0, lr
 8004c74:	462b      	mov	r3, r5
 8004c76:	4696      	mov	lr, r2
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 8004c78:	0842      	lsrs	r2, r0, #1
 8004c7a:	6858      	ldr	r0, [r3, #4]
 8004c7c:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 8004c80:	f843 2b04 	str.w	r2, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8004c84:	428b      	cmp	r3, r1
 8004c86:	d1f7      	bne.n	8004c78 <bn_div.part.0+0x334>
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 8004c88:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	4670      	mov	r0, lr
 8004c8e:	67eb      	str	r3, [r5, #124]	@ 0x7c
    for (size_t i = 0; i < size; ++i) {
 8004c90:	e6c8      	b.n	8004a24 <bn_div.part.0+0xe0>
        if (denom[size - 1] >= half_max) {
 8004c92:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	db2c      	blt.n	8004cf4 <bn_div.part.0+0x3b0>
 8004c9a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004c9c:	ab25      	add	r3, sp, #148	@ 0x94
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8004c9e:	004a      	lsls	r2, r1, #1
 8004ca0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ca4:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004ca8:	42a3      	cmp	r3, r4
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8004caa:	605a      	str	r2, [r3, #4]
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004cac:	d1f7      	bne.n	8004c9e <bn_div.part.0+0x35a>
    (*bignum)[0] <<= 1;
 8004cae:	004b      	lsls	r3, r1, #1
 8004cb0:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8004cb2:	6023      	str	r3, [r4, #0]
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004cb4:	ab45      	add	r3, sp, #276	@ 0x114
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8004cb6:	004a      	lsls	r2, r1, #1
 8004cb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004cbc:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004cc0:	42ab      	cmp	r3, r5
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8004cc2:	605a      	str	r2, [r3, #4]
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004cc4:	d1f7      	bne.n	8004cb6 <bn_div.part.0+0x372>
    (*bignum)[0] <<= 1;
 8004cc6:	0049      	lsls	r1, r1, #1
 8004cc8:	6029      	str	r1, [r5, #0]
}
 8004cca:	e665      	b.n	8004998 <bn_div.part.0+0x54>
 8004ccc:	f8cd c004 	str.w	ip, [sp, #4]
 8004cd0:	4650      	mov	r0, sl
 8004cd2:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004cd6:	e7b7      	b.n	8004c48 <bn_div.part.0+0x304>
}
 8004cd8:	b067      	add	sp, #412	@ 0x19c
 8004cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cde:	2e01      	cmp	r6, #1
 8004ce0:	f8cd c004 	str.w	ip, [sp, #4]
 8004ce4:	4650      	mov	r0, sl
    for (size_t i = 0; i < size; ++i) {
 8004ce6:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004cea:	f47f aef1 	bne.w	8004ad0 <bn_div.part.0+0x18c>
    uint8_t borrow = 0;
 8004cee:	f04f 0e00 	mov.w	lr, #0
 8004cf2:	e7a2      	b.n	8004c3a <bn_div.part.0+0x2f6>
 8004cf4:	4667      	mov	r7, ip
 8004cf6:	4656      	mov	r6, sl
 8004cf8:	e67d      	b.n	80049f6 <bn_div.part.0+0xb2>
 8004cfa:	bf00      	nop

08004cfc <bn_inner_karatsuba>:
static void bn_inner_karatsuba(bignum_t *left, const bignum_t *right, const size_t in_bn_size) {
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	b0c9      	sub	sp, #292	@ 0x124
 8004d02:	af00      	add	r7, sp, #0
    if (in_bn_size == 1) {
 8004d04:	2a01      	cmp	r2, #1
static void bn_inner_karatsuba(bignum_t *left, const bignum_t *right, const size_t in_bn_size) {
 8004d06:	e9c7 1005 	strd	r1, r0, [r7, #20]
 8004d0a:	f8c7 d008 	str.w	sp, [r7, #8]
    if (in_bn_size == 1) {
 8004d0e:	f000 8166 	beq.w	8004fde <bn_inner_karatsuba+0x2e2>
    for (size_t i = 0; i < size; ++i) {
 8004d12:	4614      	mov	r4, r2
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	f000 814f 	beq.w	8004fb8 <bn_inner_karatsuba+0x2bc>
 8004d1a:	1f05      	subs	r5, r0, #4
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e002      	b.n	8004d28 <bn_inner_karatsuba+0x2c>
 8004d22:	429c      	cmp	r4, r3
 8004d24:	f000 8148 	beq.w	8004fb8 <bn_inner_karatsuba+0x2bc>
        if ((*bignum)[i] != 0) {
 8004d28:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for (size_t i = 0; i < size; ++i) {
 8004d2c:	3301      	adds	r3, #1
        if ((*bignum)[i] != 0) {
 8004d2e:	2900      	cmp	r1, #0
 8004d30:	d0f7      	beq.n	8004d22 <bn_inner_karatsuba+0x26>
    if (left_is_zero) {
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f1a3 0a04 	sub.w	sl, r3, #4
        if ((*bignum)[i] != 0) {
 8004d38:	4652      	mov	r2, sl
    for (size_t i = 0; i < size; ++i) {
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e002      	b.n	8004d44 <bn_inner_karatsuba+0x48>
 8004d3e:	429c      	cmp	r4, r3
 8004d40:	f000 812f 	beq.w	8004fa2 <bn_inner_karatsuba+0x2a6>
        if ((*bignum)[i] != 0) {
 8004d44:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for (size_t i = 0; i < size; ++i) {
 8004d48:	3301      	adds	r3, #1
        if ((*bignum)[i] != 0) {
 8004d4a:	2900      	cmp	r1, #0
 8004d4c:	d0f7      	beq.n	8004d3e <bn_inner_karatsuba+0x42>
    const size_t bn_size_shift = in_bn_size >> 1;
 8004d4e:	0863      	lsrs	r3, r4, #1
    memset(z, 0, z_size * (in_bn_size << 1) * BN_WORD_SIZE);
 8004d50:	0122      	lsls	r2, r4, #4
 8004d52:	2100      	movs	r1, #0
 8004d54:	f107 0020 	add.w	r0, r7, #32
    const size_t bn_size_shift = in_bn_size >> 1;
 8004d58:	461e      	mov	r6, r3
    memset(z, 0, z_size * (in_bn_size << 1) * BN_WORD_SIZE);
 8004d5a:	f002 fe45 	bl	80079e8 <memset>
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8004d5e:	69ba      	ldr	r2, [r7, #24]
    bignum_t* z1_ptr = (bignum_t *)((BN_DTYPE *) z + (in_bn_size << 1));
 8004d60:	f107 0020 	add.w	r0, r7, #32
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8004d64:	4633      	mov	r3, r6
    bignum_t* z1_ptr = (bignum_t *)((BN_DTYPE *) z + (in_bn_size << 1));
 8004d66:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8004d6a:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8004d6e:	2100      	movs	r1, #0
    bignum_t* z1_ptr = (bignum_t *)((BN_DTYPE *) z + (in_bn_size << 1));
 8004d70:	6138      	str	r0, [r7, #16]
 8004d72:	f107 0820 	add.w	r8, r7, #32
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8004d76:	0098      	lsls	r0, r3, #2
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	f1a2 0904 	sub.w	r9, r2, #4
        bn_memset(left, 0, 0, in_bn_size << 1);
 8004d80:	0066      	lsls	r6, r4, #1
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8004d82:	46c6      	mov	lr, r8
 8004d84:	46ac      	mov	ip, r5
    uint8_t carry = 0;
 8004d86:	460a      	mov	r2, r1
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004d88:	4608      	mov	r0, r1
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	f859 bf04 	ldr.w	fp, [r9, #4]!
 8004d90:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8004d94:	eb13 030b 	adds.w	r3, r3, fp
 8004d98:	eb40 0b00 	adc.w	fp, r0, r0
 8004d9c:	189b      	adds	r3, r3, r2
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8004d9e:	f84e 3b04 	str.w	r3, [lr], #4
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004da2:	f14b 0b00 	adc.w	fp, fp, #0
    for (size_t i = 0; i + 1 < size; ++i) {
 8004da6:	69fb      	ldr	r3, [r7, #28]
        carry = tmp > BN_MAX_VAL;
 8004da8:	f1bb 0200 	subs.w	r2, fp, #0
    for (size_t i = 0; i + 1 < size; ++i) {
 8004dac:	f101 0101 	add.w	r1, r1, #1
        carry = tmp > BN_MAX_VAL;
 8004db0:	bf18      	it	ne
 8004db2:	2201      	movne	r2, #1
    for (size_t i = 0; i + 1 < size; ++i) {
 8004db4:	428b      	cmp	r3, r1
 8004db6:	d1e9      	bne.n	8004d8c <bn_inner_karatsuba+0x90>
    (*bignum_res)[size - 1] = carry;
 8004db8:	f107 0120 	add.w	r1, r7, #32
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8004dbc:	68f8      	ldr	r0, [r7, #12]
    (*bignum_res)[size - 1] = carry;
 8004dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	eb02 0b00 	add.w	fp, r2, r0
    for (size_t i = 0; i + 1 < size; ++i) {
 8004dc8:	693a      	ldr	r2, [r7, #16]
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004dca:	f8c7 b000 	str.w	fp, [r7]
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8004dce:	2100      	movs	r1, #0
 8004dd0:	f1a2 0904 	sub.w	r9, r2, #4
 8004dd4:	f1ab 0e04 	sub.w	lr, fp, #4
 8004dd8:	46cc      	mov	ip, r9
    uint8_t carry = 0;
 8004dda:	460a      	mov	r2, r1
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004ddc:	4608      	mov	r0, r1
 8004dde:	f85e bf04 	ldr.w	fp, [lr, #4]!
 8004de2:	f85a 3f04 	ldr.w	r3, [sl, #4]!
 8004de6:	eb13 030b 	adds.w	r3, r3, fp
 8004dea:	eb40 0b00 	adc.w	fp, r0, r0
 8004dee:	189b      	adds	r3, r3, r2
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8004df0:	f84c 3f04 	str.w	r3, [ip, #4]!
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004df4:	f14b 0b00 	adc.w	fp, fp, #0
    for (size_t i = 0; i + 1 < size; ++i) {
 8004df8:	69fb      	ldr	r3, [r7, #28]
        carry = tmp > BN_MAX_VAL;
 8004dfa:	f1bb 0200 	subs.w	r2, fp, #0
    for (size_t i = 0; i + 1 < size; ++i) {
 8004dfe:	f101 0101 	add.w	r1, r1, #1
        carry = tmp > BN_MAX_VAL;
 8004e02:	bf18      	it	ne
 8004e04:	2201      	movne	r2, #1
    for (size_t i = 0; i + 1 < size; ++i) {
 8004e06:	428b      	cmp	r3, r1
 8004e08:	d1e9      	bne.n	8004dde <bn_inner_karatsuba+0xe2>
    (*bignum_res)[size - 1] = carry;
 8004e0a:	6939      	ldr	r1, [r7, #16]
 8004e0c:	f8d7 b000 	ldr.w	fp, [r7]
 8004e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004e14:	4618      	mov	r0, r3
    const size_t size = ((*z0_ptr)[bn_size_shift] | (*z1_ptr)[bn_size_shift]) ? in_bn_size : bn_size_shift;
 8004e16:	f107 0320 	add.w	r3, r7, #32
    bn_inner_karatsuba(z0_ptr, z1_ptr, size);
 8004e1a:	468a      	mov	sl, r1
    const size_t size = ((*z0_ptr)[bn_size_shift] | (*z1_ptr)[bn_size_shift]) ? in_bn_size : bn_size_shift;
 8004e1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004e20:	4313      	orrs	r3, r2
    bn_inner_karatsuba(z0_ptr, z1_ptr, size);
 8004e22:	bf0c      	ite	eq
 8004e24:	4602      	moveq	r2, r0
 8004e26:	4622      	movne	r2, r4
 8004e28:	f107 0020 	add.w	r0, r7, #32
 8004e2c:	f7ff ff66 	bl	8004cfc <bn_inner_karatsuba>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	4650      	mov	r0, sl
 8004e36:	f002 fe88 	bl	8007b4a <memcpy>
    bn_inner_karatsuba(z1_ptr, (bignum_t*)(*(bignum_t *)right + bn_size_shift), bn_size_shift);
 8004e3a:	4659      	mov	r1, fp
 8004e3c:	4650      	mov	r0, sl
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	f7ff ff5c 	bl	8004cfc <bn_inner_karatsuba>
bignum_compare_state bn_cmp(const bignum_t *bignum1, const bignum_t *bignum2, size_t size) {
 8004e44:	f107 0320 	add.w	r3, r7, #32
        bn_memset(left, 0, 0, in_bn_size << 1);
 8004e48:	69f8      	ldr	r0, [r7, #28]
    bn_inner_karatsuba(z1_ptr, (bignum_t*)(*(bignum_t *)right + bn_size_shift), bn_size_shift);
 8004e4a:	46d3      	mov	fp, sl
 8004e4c:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
 8004e50:	00b3      	lsls	r3, r6, #2
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
 8004e58:	4652      	mov	r2, sl
        bn_memset(left, 0, 0, in_bn_size << 1);
 8004e5a:	4633      	mov	r3, r6
 8004e5c:	4686      	mov	lr, r0
 8004e5e:	46a4      	mov	ip, r4
 8004e60:	e002      	b.n	8004e68 <bn_inner_karatsuba+0x16c>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8004e62:	f0c0 80b7 	bcc.w	8004fd4 <bn_inner_karatsuba+0x2d8>
    } while (size != 0);
 8004e66:	b13b      	cbz	r3, 8004e78 <bn_inner_karatsuba+0x17c>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004e68:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8004e6c:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8004e70:	4284      	cmp	r4, r0
        --size;
 8004e72:	f103 33ff 	add.w	r3, r3, #4294967295
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004e76:	d9f4      	bls.n	8004e62 <bn_inner_karatsuba+0x166>
    for (size_t i = 0; i < size; ++i) {
 8004e78:	f8c7 e01c 	str.w	lr, [r7, #28]
 8004e7c:	4664      	mov	r4, ip
 8004e7e:	b1e6      	cbz	r6, 8004eba <bn_inner_karatsuba+0x1be>
    uint8_t borrow = 0;
 8004e80:	2300      	movs	r3, #0
    for (size_t i = 0; i < size; ++i) {
 8004e82:	46cb      	mov	fp, r9
 8004e84:	f107 0e20 	add.w	lr, r7, #32
 8004e88:	469c      	mov	ip, r3
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 8004e8a:	f85b 2f04 	ldr.w	r2, [fp, #4]!
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 8004e8e:	f8de 0000 	ldr.w	r0, [lr]
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004e92:	4252      	negs	r2, r2
 8004e94:	bf2c      	ite	cs
 8004e96:	2101      	movcs	r1, #1
 8004e98:	2100      	movcc	r1, #0
 8004e9a:	1812      	adds	r2, r2, r0
 8004e9c:	f141 0100 	adc.w	r1, r1, #0
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	f161 0100 	sbc.w	r1, r1, #0
    for (size_t i = 0; i < size; ++i) {
 8004ea6:	f10c 0c01 	add.w	ip, ip, #1
        borrow = res <= BN_MAX_VAL;
 8004eaa:	fab1 f381 	clz	r3, r1
    for (size_t i = 0; i < size; ++i) {
 8004eae:	45b4      	cmp	ip, r6
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8004eb0:	f84e 2b04 	str.w	r2, [lr], #4
        borrow = res <= BN_MAX_VAL;
 8004eb4:	ea4f 1353 	mov.w	r3, r3, lsr #5
    for (size_t i = 0; i < size; ++i) {
 8004eb8:	d1e7      	bne.n	8004e8a <bn_inner_karatsuba+0x18e>
 8004eba:	69fb      	ldr	r3, [r7, #28]
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004ebc:	6878      	ldr	r0, [r7, #4]
    bn_memset(left, bn_size_shift, 0, in_bn_size + bn_size_shift);
 8004ebe:	18e2      	adds	r2, r4, r3
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004ec0:	0092      	lsls	r2, r2, #2
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	f002 fd90 	bl	80079e8 <memset>
    bn_inner_karatsuba(left, right, bn_size_shift);
 8004ec8:	e9d7 1b05 	ldrd	r1, fp, [r7, #20]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	4658      	mov	r0, fp
 8004ed0:	f7ff ff14 	bl	8004cfc <bn_inner_karatsuba>
void bn_sub(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8004ed4:	683a      	ldr	r2, [r7, #0]
        bn_memset(left, 0, 0, in_bn_size << 1);
 8004ed6:	4633      	mov	r3, r6
 8004ed8:	445a      	add	r2, fp
 8004eda:	e002      	b.n	8004ee2 <bn_inner_karatsuba+0x1e6>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8004edc:	f0c0 808d 	bcc.w	8004ffa <bn_inner_karatsuba+0x2fe>
    } while (size != 0);
 8004ee0:	b13b      	cbz	r3, 8004ef2 <bn_inner_karatsuba+0x1f6>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004ee2:	f85a 0d04 	ldr.w	r0, [sl, #-4]!
 8004ee6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004eea:	4288      	cmp	r0, r1
        --size;
 8004eec:	f103 33ff 	add.w	r3, r3, #4294967295
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004ef0:	d9f4      	bls.n	8004edc <bn_inner_karatsuba+0x1e0>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004ef2:	e9d7 1303 	ldrd	r1, r3, [r7, #12]
    bn_assign(z1_ptr, bn_size_shift, z0_ptr, 0, in_bn_size + 1);
 8004ef6:	3401      	adds	r4, #1
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004ef8:	69b8      	ldr	r0, [r7, #24]
 8004efa:	00a4      	lsls	r4, r4, #2
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004efc:	1f22      	subs	r2, r4, #4
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004efe:	440b      	add	r3, r1
 8004f00:	4410      	add	r0, r2
 8004f02:	469b      	mov	fp, r3
    for (size_t i = 0; i < size; ++i) {
 8004f04:	2e00      	cmp	r6, #0
 8004f06:	f000 8093 	beq.w	8005030 <bn_inner_karatsuba+0x334>
    uint8_t borrow = 0;
 8004f0a:	2300      	movs	r3, #0
    for (size_t i = 0; i < size; ++i) {
 8004f0c:	46aa      	mov	sl, r5
 8004f0e:	469e      	mov	lr, r3
 8004f10:	61fa      	str	r2, [r7, #28]
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 8004f12:	f85a 1f04 	ldr.w	r1, [sl, #4]!
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004f16:	f8d8 2000 	ldr.w	r2, [r8]
 8004f1a:	4249      	negs	r1, r1
 8004f1c:	bf2c      	ite	cs
 8004f1e:	f04f 0c01 	movcs.w	ip, #1
 8004f22:	f04f 0c00 	movcc.w	ip, #0
 8004f26:	1889      	adds	r1, r1, r2
 8004f28:	f14c 0c00 	adc.w	ip, ip, #0
 8004f2c:	1ac9      	subs	r1, r1, r3
 8004f2e:	f16c 0c00 	sbc.w	ip, ip, #0
    for (size_t i = 0; i < size; ++i) {
 8004f32:	f10e 0e01 	add.w	lr, lr, #1
        borrow = res <= BN_MAX_VAL;
 8004f36:	fabc f38c 	clz	r3, ip
    for (size_t i = 0; i < size; ++i) {
 8004f3a:	45b6      	cmp	lr, r6
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8004f3c:	f848 1b04 	str.w	r1, [r8], #4
        borrow = res <= BN_MAX_VAL;
 8004f40:	ea4f 1353 	mov.w	r3, r3, lsr #5
    for (size_t i = 0; i < size; ++i) {
 8004f44:	d1e5      	bne.n	8004f12 <bn_inner_karatsuba+0x216>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004f46:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	f002 fdfc 	bl	8007b4a <memcpy>
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	2100      	movs	r1, #0
 8004f56:	4640      	mov	r0, r8
 8004f58:	f002 fd46 	bl	80079e8 <memset>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	f107 0120 	add.w	r1, r7, #32
 8004f62:	4658      	mov	r0, fp
 8004f64:	f002 fdf1 	bl	8007b4a <memcpy>
    for (size_t i = 0; i < size; ++i) {
 8004f68:	2200      	movs	r2, #0
 8004f6a:	4610      	mov	r0, r2
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	4611      	mov	r1, r2
 8004f70:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8004f74:	f859 2f04 	ldr.w	r2, [r9, #4]!
 8004f78:	189b      	adds	r3, r3, r2
 8004f7a:	eb44 0204 	adc.w	r2, r4, r4
 8004f7e:	185b      	adds	r3, r3, r1
 8004f80:	f142 0200 	adc.w	r2, r2, #0
        carry = tmp > BN_MAX_VAL;
 8004f84:	1e11      	subs	r1, r2, #0
    for (size_t i = 0; i < size; ++i) {
 8004f86:	f100 0001 	add.w	r0, r0, #1
        carry = tmp > BN_MAX_VAL;
 8004f8a:	bf18      	it	ne
 8004f8c:	2101      	movne	r1, #1
    for (size_t i = 0; i < size; ++i) {
 8004f8e:	42b0      	cmp	r0, r6
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8004f90:	602b      	str	r3, [r5, #0]
    for (size_t i = 0; i < size; ++i) {
 8004f92:	d1ed      	bne.n	8004f70 <bn_inner_karatsuba+0x274>
        return;
 8004f94:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8004f98:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004fa2:	69b8      	ldr	r0, [r7, #24]
 8004fa4:	00e2      	lsls	r2, r4, #3
 8004fa6:	f002 fd1f 	bl	80079e8 <memset>
        return;
 8004faa:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8004fae:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	00a2      	lsls	r2, r4, #2
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004fc2:	f002 fd11 	bl	80079e8 <memset>
        return;
 8004fc6:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8004fca:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	4673      	mov	r3, lr
 8004fd6:	f8c7 e01c 	str.w	lr, [r7, #28]
 8004fda:	4664      	mov	r4, ip
 8004fdc:	e76e      	b.n	8004ebc <bn_inner_karatsuba+0x1c0>
        bn_from_int(left, (BN_DTYPE_TMP)(*left)[0] * (BN_DTYPE_TMP)(*right)[0], 2);
 8004fde:	680b      	ldr	r3, [r1, #0]
 8004fe0:	69b9      	ldr	r1, [r7, #24]
 8004fe2:	680a      	ldr	r2, [r1, #0]
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 8004fe8:	e9c1 2300 	strd	r2, r3, [r1]
        return;
 8004fec:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8004ff0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bn_assign(z1_ptr, bn_size_shift, z0_ptr, 0, in_bn_size + 1);
 8004ffa:	3401      	adds	r4, #1
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004ffc:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8005000:	69b8      	ldr	r0, [r7, #24]
 8005002:	00a4      	lsls	r4, r4, #2
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005004:	1f22      	subs	r2, r4, #4
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8005006:	4410      	add	r0, r2
 8005008:	4641      	mov	r1, r8
 800500a:	f002 fd9e 	bl	8007b4a <memcpy>
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 800500e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8005012:	2100      	movs	r1, #0
 8005014:	4652      	mov	r2, sl
 8005016:	4640      	mov	r0, r8
 8005018:	f002 fce6 	bl	80079e8 <memset>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 800501c:	4640      	mov	r0, r8
 800501e:	4622      	mov	r2, r4
 8005020:	f107 0120 	add.w	r1, r7, #32
 8005024:	4450      	add	r0, sl
 8005026:	f002 fd90 	bl	8007b4a <memcpy>
    for (size_t i = 0; i < size; ++i) {
 800502a:	2e00      	cmp	r6, #0
 800502c:	d19c      	bne.n	8004f68 <bn_inner_karatsuba+0x26c>
 800502e:	e7b1      	b.n	8004f94 <bn_inner_karatsuba+0x298>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8005030:	6939      	ldr	r1, [r7, #16]
 8005032:	f002 fd8a 	bl	8007b4a <memcpy>
    for (size_t i = 0; i < size; ++i) {
 8005036:	e7ad      	b.n	8004f94 <bn_inner_karatsuba+0x298>

08005038 <bn_init>:
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005038:	008a      	lsls	r2, r1, #2
 800503a:	2100      	movs	r1, #0
 800503c:	f002 bcd4 	b.w	80079e8 <memset>

08005040 <bn_assign>:
{
 8005040:	468c      	mov	ip, r1
 8005042:	4611      	mov	r1, r2
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8005044:	9a00      	ldr	r2, [sp, #0]
 8005046:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800504a:	0092      	lsls	r2, r2, #2
 800504c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8005050:	f002 bd7b 	b.w	8007b4a <memcpy>

08005054 <bn_from_bytes>:
void bn_from_bytes(bignum_t *bignum, const uint8_t *bytes, const size_t nbytes) {
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	4615      	mov	r5, r2
 8005058:	460e      	mov	r6, r1
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 800505a:	2280      	movs	r2, #128	@ 0x80
 800505c:	2100      	movs	r1, #0
void bn_from_bytes(bignum_t *bignum, const uint8_t *bytes, const size_t nbytes) {
 800505e:	4604      	mov	r4, r0
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005060:	f002 fcc2 	bl	80079e8 <memset>
    if (nbytes > BN_BYTE_SIZE) {
 8005064:	2d80      	cmp	r5, #128	@ 0x80
 8005066:	d823      	bhi.n	80050b0 <bn_from_bytes+0x5c>
    uint8_t padding = ((nbytes - 1) / BN_WORD_SIZE + 1) * BN_WORD_SIZE - nbytes;
 8005068:	1e6b      	subs	r3, r5, #1
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	3304      	adds	r3, #4
 8005070:	1b5b      	subs	r3, r3, r5
 8005072:	b2db      	uxtb	r3, r3
    for (size_t i = 0; i < nbytes; ++i) {
 8005074:	b1e5      	cbz	r5, 80050b0 <bn_from_bytes+0x5c>
 8005076:	1972      	adds	r2, r6, r5
 8005078:	f1c3 0303 	rsb	r3, r3, #3
 800507c:	f106 3cff 	add.w	ip, r6, #4294967295
 8005080:	18f1      	adds	r1, r6, r3
 8005082:	1e56      	subs	r6, r2, #1
 8005084:	3a02      	subs	r2, #2
        (*bignum)[(nbytes - 1 - i) / BN_WORD_SIZE] |= (BN_DTYPE)bytes[i] << ((BN_WORD_SIZE - 1 - i - padding) % BN_WORD_SIZE) * 8;
 8005086:	eba2 0e0c 	sub.w	lr, r2, ip
 800508a:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 800508e:	eba1 030c 	sub.w	r3, r1, ip
 8005092:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	fa00 f303 	lsl.w	r3, r0, r3
 80050a0:	f854 002e 	ldr.w	r0, [r4, lr, lsl #2]
    for (size_t i = 0; i < nbytes; ++i) {
 80050a4:	45b4      	cmp	ip, r6
        (*bignum)[(nbytes - 1 - i) / BN_WORD_SIZE] |= (BN_DTYPE)bytes[i] << ((BN_WORD_SIZE - 1 - i - padding) % BN_WORD_SIZE) * 8;
 80050a6:	ea43 0300 	orr.w	r3, r3, r0
 80050aa:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
    for (size_t i = 0; i < nbytes; ++i) {
 80050ae:	d1ea      	bne.n	8005086 <bn_from_bytes+0x32>
}
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
 80050b2:	bf00      	nop

080050b4 <bn_from_string>:
void bn_from_string(bignum_t *bignum, const char *str, const size_t nbytes) {
 80050b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b8:	4614      	mov	r4, r2
 80050ba:	b082      	sub	sp, #8
 80050bc:	460e      	mov	r6, r1
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80050be:	2280      	movs	r2, #128	@ 0x80
 80050c0:	2100      	movs	r1, #0
void bn_from_string(bignum_t *bignum, const char *str, const size_t nbytes) {
 80050c2:	4605      	mov	r5, r0
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80050c4:	f002 fc90 	bl	80079e8 <memset>
    while (i > 0) {
 80050c8:	b19c      	cbz	r4, 80050f2 <bn_from_string+0x3e>
        sscanf(&str[i], BN_SSCANF_FORMAT_STR, &tmp);
 80050ca:	4f0b      	ldr	r7, [pc, #44]	@ (80050f8 <bn_from_string+0x44>)
 80050cc:	3d04      	subs	r5, #4
        BN_DTYPE tmp = 0;
 80050ce:	f04f 0800 	mov.w	r8, #0
        i = i > sizeof(BN_DTYPE_TMP) ? i - sizeof(BN_DTYPE_TMP) : 0;
 80050d2:	2c08      	cmp	r4, #8
 80050d4:	bf38      	it	cc
 80050d6:	2408      	movcc	r4, #8
 80050d8:	3c08      	subs	r4, #8
        sscanf(&str[i], BN_SSCANF_FORMAT_STR, &tmp);
 80050da:	aa01      	add	r2, sp, #4
 80050dc:	4639      	mov	r1, r7
 80050de:	1930      	adds	r0, r6, r4
        BN_DTYPE tmp = 0;
 80050e0:	f8cd 8004 	str.w	r8, [sp, #4]
        sscanf(&str[i], BN_SSCANF_FORMAT_STR, &tmp);
 80050e4:	f002 fbbe 	bl	8007864 <siscanf>
        (*bignum)[j] = tmp;
 80050e8:	9b01      	ldr	r3, [sp, #4]
 80050ea:	f845 3f04 	str.w	r3, [r5, #4]!
    while (i > 0) {
 80050ee:	2c00      	cmp	r4, #0
 80050f0:	d1ef      	bne.n	80050d2 <bn_from_string+0x1e>
}
 80050f2:	b002      	add	sp, #8
 80050f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f8:	0800aa04 	.word	0x0800aa04

080050fc <bn_from_int>:
void bn_from_int(bignum_t *bignum, const BN_DTYPE_TMP value, size_t size) {
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	9d06      	ldr	r5, [sp, #24]
 8005100:	4616      	mov	r6, r2
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005102:	2100      	movs	r1, #0
 8005104:	00aa      	lsls	r2, r5, #2
void bn_from_int(bignum_t *bignum, const BN_DTYPE_TMP value, size_t size) {
 8005106:	4604      	mov	r4, r0
 8005108:	461f      	mov	r7, r3
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 800510a:	f002 fc6d 	bl	80079e8 <memset>
    for (size_t i = 0; i < size; i++) {
 800510e:	b11d      	cbz	r5, 8005118 <bn_from_int+0x1c>
 8005110:	2d01      	cmp	r5, #1
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 8005112:	6026      	str	r6, [r4, #0]
 8005114:	bf18      	it	ne
 8005116:	6067      	strne	r7, [r4, #4]
}
 8005118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511a:	bf00      	nop

0800511c <bn_to_string>:
    while (j >= 0 && nbytes > i + 1) {
 800511c:	2a01      	cmp	r2, #1
void bn_to_string(const bignum_t *bignum, char *str, size_t nbytes) {
 800511e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005122:	4688      	mov	r8, r1
    while (j >= 0 && nbytes > i + 1) {
 8005124:	d91c      	bls.n	8005160 <bn_to_string+0x44>
            sprintf(&str[i], BN_SPRINTF_FORMAT_STR, (*bignum)[j]);
 8005126:	f8df 9044 	ldr.w	r9, [pc, #68]	@ 800516c <bn_to_string+0x50>
 800512a:	4617      	mov	r7, r2
 800512c:	4606      	mov	r6, r0
 800512e:	f100 0480 	add.w	r4, r0, #128	@ 0x80
    size_t i = 0;
 8005132:	2500      	movs	r5, #0
 8005134:	e005      	b.n	8005142 <bn_to_string+0x26>
    while (j >= 0 && nbytes > i + 1) {
 8005136:	42b4      	cmp	r4, r6
 8005138:	f105 0301 	add.w	r3, r5, #1
 800513c:	d00f      	beq.n	800515e <bn_to_string+0x42>
 800513e:	42bb      	cmp	r3, r7
 8005140:	d20d      	bcs.n	800515e <bn_to_string+0x42>
        if ((*bignum)[j]) {
 8005142:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 8005146:	2a00      	cmp	r2, #0
 8005148:	d0f5      	beq.n	8005136 <bn_to_string+0x1a>
            sprintf(&str[i], BN_SPRINTF_FORMAT_STR, (*bignum)[j]);
 800514a:	eb08 0005 	add.w	r0, r8, r5
 800514e:	4649      	mov	r1, r9
 8005150:	f002 fb68 	bl	8007824 <siprintf>
            i += sizeof(BN_DTYPE_TMP);
 8005154:	3508      	adds	r5, #8
    while (j >= 0 && nbytes > i + 1) {
 8005156:	42b4      	cmp	r4, r6
 8005158:	f105 0301 	add.w	r3, r5, #1
 800515c:	d1ef      	bne.n	800513e <bn_to_string+0x22>
    str[i] = '\0';
 800515e:	44a8      	add	r8, r5
 8005160:	2300      	movs	r3, #0
 8005162:	f888 3000 	strb.w	r3, [r8]
}
 8005166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800516a:	bf00      	nop
 800516c:	0800aa0c 	.word	0x0800aa0c

08005170 <bn_add>:
    for (size_t i = 0; i < size; ++i) {
 8005170:	b1e3      	cbz	r3, 80051ac <bn_add+0x3c>
void bn_add(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8005172:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (size_t i = 0; i < size; ++i) {
 8005174:	f04f 0e00 	mov.w	lr, #0
 8005178:	1f14      	subs	r4, r2, #4
 800517a:	1f06      	subs	r6, r0, #4
 800517c:	1f0d      	subs	r5, r1, #4
    uint8_t carry = 0;
 800517e:	4672      	mov	r2, lr
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8005180:	4677      	mov	r7, lr
 8005182:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8005186:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800518a:	1840      	adds	r0, r0, r1
 800518c:	eb47 0c07 	adc.w	ip, r7, r7
 8005190:	1880      	adds	r0, r0, r2
 8005192:	f14c 0c00 	adc.w	ip, ip, #0
        carry = tmp > BN_MAX_VAL;
 8005196:	f1bc 0200 	subs.w	r2, ip, #0
    for (size_t i = 0; i < size; ++i) {
 800519a:	f10e 0e01 	add.w	lr, lr, #1
        carry = tmp > BN_MAX_VAL;
 800519e:	bf18      	it	ne
 80051a0:	2201      	movne	r2, #1
    for (size_t i = 0; i < size; ++i) {
 80051a2:	4573      	cmp	r3, lr
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 80051a4:	f844 0f04 	str.w	r0, [r4, #4]!
    for (size_t i = 0; i < size; ++i) {
 80051a8:	d1eb      	bne.n	8005182 <bn_add+0x12>
}
 80051aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop

080051b0 <bn_sub>:
void bn_sub(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 80051b6:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
 80051ba:	461c      	mov	r4, r3
 80051bc:	e001      	b.n	80051c2 <bn_sub+0x12>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 80051be:	d325      	bcc.n	800520c <bn_sub+0x5c>
    } while (size != 0);
 80051c0:	b13c      	cbz	r4, 80051d2 <bn_sub+0x22>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80051c2:	f85e 6d04 	ldr.w	r6, [lr, #-4]!
 80051c6:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
 80051ca:	42ae      	cmp	r6, r5
        --size;
 80051cc:	f104 34ff 	add.w	r4, r4, #4294967295
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80051d0:	d9f5      	bls.n	80051be <bn_sub+0xe>
    for (size_t i = 0; i < size; ++i) {
 80051d2:	b1db      	cbz	r3, 800520c <bn_sub+0x5c>
    uint8_t borrow = 0;
 80051d4:	f04f 0e00 	mov.w	lr, #0
 80051d8:	1f0d      	subs	r5, r1, #4
 80051da:	3804      	subs	r0, #4
 80051dc:	1f16      	subs	r6, r2, #4
    for (size_t i = 0; i < size; ++i) {
 80051de:	4671      	mov	r1, lr
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 80051e0:	f855 4f04 	ldr.w	r4, [r5, #4]!
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 80051e4:	f850 2f04 	ldr.w	r2, [r0, #4]!
        BN_DTYPE_TMP res = tmp1 - tmp2;
 80051e8:	ebb2 0c04 	subs.w	ip, r2, r4
 80051ec:	bf2c      	ite	cs
 80051ee:	2401      	movcs	r4, #1
 80051f0:	2400      	movcc	r4, #0
 80051f2:	ebbc 020e 	subs.w	r2, ip, lr
 80051f6:	f164 0400 	sbc.w	r4, r4, #0
    for (size_t i = 0; i < size; ++i) {
 80051fa:	3101      	adds	r1, #1
        borrow = res <= BN_MAX_VAL;
 80051fc:	fab4 fe84 	clz	lr, r4
    for (size_t i = 0; i < size; ++i) {
 8005200:	428b      	cmp	r3, r1
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8005202:	f846 2f04 	str.w	r2, [r6, #4]!
        borrow = res <= BN_MAX_VAL;
 8005206:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    for (size_t i = 0; i < size; ++i) {
 800520a:	d1e9      	bne.n	80051e0 <bn_sub+0x30>
}
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	bf00      	nop

08005210 <bn_karatsuba>:
void bn_karatsuba(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4614      	mov	r4, r2
    bn_assign(bignum_res, 0, bignum1, 0, size >> 1);
 8005214:	085d      	lsrs	r5, r3, #1
void bn_karatsuba(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8005216:	460e      	mov	r6, r1
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8005218:	00aa      	lsls	r2, r5, #2
 800521a:	4601      	mov	r1, r0
 800521c:	4620      	mov	r0, r4
 800521e:	f002 fc94 	bl	8007b4a <memcpy>
    bn_inner_karatsuba(bignum_res, bignum2, size >> 1);
 8005222:	462a      	mov	r2, r5
 8005224:	4631      	mov	r1, r6
 8005226:	4620      	mov	r0, r4
}
 8005228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bn_inner_karatsuba(bignum_res, bignum2, size >> 1);
 800522c:	f7ff bd66 	b.w	8004cfc <bn_inner_karatsuba>

08005230 <bn_divmod>:
void bn_divmod(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_div, bignum_t *bignum_mod, size_t size) {
 8005230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005234:	b0a1      	sub	sp, #132	@ 0x84
 8005236:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
    for (size_t i = 0; i < size; ++i) {
 8005238:	2c00      	cmp	r4, #0
 800523a:	d053      	beq.n	80052e4 <bn_divmod+0xb4>
 800523c:	461f      	mov	r7, r3
 800523e:	1f0b      	subs	r3, r1, #4
 8005240:	4606      	mov	r6, r0
 8005242:	4688      	mov	r8, r1
 8005244:	4691      	mov	r9, r2
 8005246:	469e      	mov	lr, r3
 8005248:	f04f 0c00 	mov.w	ip, #0
 800524c:	e001      	b.n	8005252 <bn_divmod+0x22>
 800524e:	4564      	cmp	r4, ip
 8005250:	d048      	beq.n	80052e4 <bn_divmod+0xb4>
        if ((*bignum)[i] != 0) {
 8005252:	f85e 5f04 	ldr.w	r5, [lr, #4]!
    for (size_t i = 0; i < size; ++i) {
 8005256:	f10c 0c01 	add.w	ip, ip, #1
        if ((*bignum)[i] != 0) {
 800525a:	2d00      	cmp	r5, #0
 800525c:	d0f7      	beq.n	800524e <bn_divmod+0x1e>
 800525e:	2000      	movs	r0, #0
 8005260:	e001      	b.n	8005266 <bn_divmod+0x36>
    for (size_t i = 0; i < size; ++i) {
 8005262:	4284      	cmp	r4, r0
 8005264:	d00a      	beq.n	800527c <bn_divmod+0x4c>
        if ((*bignum)[i] != 0) {
 8005266:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (size_t i = 0; i < size; ++i) {
 800526a:	3001      	adds	r0, #1
        if ((*bignum)[i] != 0) {
 800526c:	2a00      	cmp	r2, #0
 800526e:	d0f8      	beq.n	8005262 <bn_divmod+0x32>
 8005270:	4623      	mov	r3, r4
 8005272:	464a      	mov	r2, r9
 8005274:	4641      	mov	r1, r8
 8005276:	4630      	mov	r0, r6
 8005278:	f7ff fb64 	bl	8004944 <bn_div.part.0>
    bn_assign(bignum_res, 0, bignum1, 0, size >> 1);
 800527c:	0865      	lsrs	r5, r4, #1
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 800527e:	4649      	mov	r1, r9
 8005280:	00aa      	lsls	r2, r5, #2
 8005282:	4668      	mov	r0, sp
 8005284:	f002 fc61 	bl	8007b4a <memcpy>
    bn_inner_karatsuba(bignum_res, bignum2, size >> 1);
 8005288:	462a      	mov	r2, r5
 800528a:	4641      	mov	r1, r8
 800528c:	4668      	mov	r0, sp
 800528e:	f7ff fd35 	bl	8004cfc <bn_inner_karatsuba>
 8005292:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8005296:	eb0d 0384 	add.w	r3, sp, r4, lsl #2
}
 800529a:	4622      	mov	r2, r4
 800529c:	e001      	b.n	80052a2 <bn_divmod+0x72>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 800529e:	d321      	bcc.n	80052e4 <bn_divmod+0xb4>
    } while (size != 0);
 80052a0:	b13a      	cbz	r2, 80052b2 <bn_divmod+0x82>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80052a2:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 80052a6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80052aa:	4285      	cmp	r5, r0
        --size;
 80052ac:	f102 32ff 	add.w	r2, r2, #4294967295
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80052b0:	d9f5      	bls.n	800529e <bn_divmod+0x6e>
 80052b2:	3e04      	subs	r6, #4
 80052b4:	466d      	mov	r5, sp
 80052b6:	3f04      	subs	r7, #4
 80052b8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    uint8_t borrow = 0;
 80052bc:	2100      	movs	r1, #0
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 80052be:	f856 2f04 	ldr.w	r2, [r6, #4]!
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 80052c2:	f855 3b04 	ldr.w	r3, [r5], #4
        BN_DTYPE_TMP res = tmp1 - tmp2;
 80052c6:	1ad2      	subs	r2, r2, r3
 80052c8:	bf2c      	ite	cs
 80052ca:	2001      	movcs	r0, #1
 80052cc:	2000      	movcc	r0, #0
 80052ce:	1a52      	subs	r2, r2, r1
 80052d0:	f160 0100 	sbc.w	r1, r0, #0
        borrow = res <= BN_MAX_VAL;
 80052d4:	fab1 f181 	clz	r1, r1
    for (size_t i = 0; i < size; ++i) {
 80052d8:	42b4      	cmp	r4, r6
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 80052da:	f847 2f04 	str.w	r2, [r7, #4]!
        borrow = res <= BN_MAX_VAL;
 80052de:	ea4f 1151 	mov.w	r1, r1, lsr #5
    for (size_t i = 0; i < size; ++i) {
 80052e2:	d1ec      	bne.n	80052be <bn_divmod+0x8e>
}
 80052e4:	b021      	add	sp, #132	@ 0x84
 80052e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052ea:	bf00      	nop

080052ec <bn_mod>:
    for (size_t i = 0; i < size; ++i) {
 80052ec:	b1ab      	cbz	r3, 800531a <bn_mod+0x2e>
void bn_mod(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80052ee:	b510      	push	{r4, lr}
    for (size_t i = 0; i < size; ++i) {
 80052f0:	f04f 0c00 	mov.w	ip, #0
void bn_mod(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80052f4:	b0a2      	sub	sp, #136	@ 0x88
 80052f6:	f1a1 0e04 	sub.w	lr, r1, #4
 80052fa:	e001      	b.n	8005300 <bn_mod+0x14>
    for (size_t i = 0; i < size; ++i) {
 80052fc:	4563      	cmp	r3, ip
 80052fe:	d00a      	beq.n	8005316 <bn_mod+0x2a>
        if ((*bignum)[i] != 0) {
 8005300:	f85e 4f04 	ldr.w	r4, [lr, #4]!
    for (size_t i = 0; i < size; ++i) {
 8005304:	f10c 0c01 	add.w	ip, ip, #1
        if ((*bignum)[i] != 0) {
 8005308:	2c00      	cmp	r4, #0
 800530a:	d0f7      	beq.n	80052fc <bn_mod+0x10>
    bn_divmod(bignum1, bignum2, &tmp, bignum_res, size);
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	aa02      	add	r2, sp, #8
 8005312:	f7ff ff8d 	bl	8005230 <bn_divmod>
}
 8005316:	b022      	add	sp, #136	@ 0x88
 8005318:	bd10      	pop	{r4, pc}
 800531a:	4770      	bx	lr

0800531c <bn_cmp>:
bignum_compare_state bn_cmp(const bignum_t *bignum1, const bignum_t *bignum2, size_t size) {
 800531c:	b410      	push	{r4}
 800531e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005322:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005326:	e001      	b.n	800532c <bn_cmp+0x10>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8005328:	d30c      	bcc.n	8005344 <bn_cmp+0x28>
    } while (size != 0);
 800532a:	b182      	cbz	r2, 800534e <bn_cmp+0x32>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 800532c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8005330:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005334:	429c      	cmp	r4, r3
        --size;
 8005336:	f102 32ff 	add.w	r2, r2, #4294967295
        if ((*bignum1)[size] > (*bignum2)[size]) {
 800533a:	d9f5      	bls.n	8005328 <bn_cmp+0xc>
            return BN_CMP_LARGER;
 800533c:	2001      	movs	r0, #1
}
 800533e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005342:	4770      	bx	lr
            return BN_CMP_SMALLER;
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800534c:	4770      	bx	lr
    return BN_CMP_EQUAL;
 800534e:	4610      	mov	r0, r2
}
 8005350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop

08005358 <bn_is_zero>:
    for (size_t i = 0; i < size; ++i) {
 8005358:	b159      	cbz	r1, 8005372 <bn_is_zero+0x1a>
 800535a:	3804      	subs	r0, #4
 800535c:	2300      	movs	r3, #0
 800535e:	e001      	b.n	8005364 <bn_is_zero+0xc>
 8005360:	4299      	cmp	r1, r3
 8005362:	d006      	beq.n	8005372 <bn_is_zero+0x1a>
        if ((*bignum)[i] != 0) {
 8005364:	f850 2f04 	ldr.w	r2, [r0, #4]!
    for (size_t i = 0; i < size; ++i) {
 8005368:	3301      	adds	r3, #1
        if ((*bignum)[i] != 0) {
 800536a:	2a00      	cmp	r2, #0
 800536c:	d0f8      	beq.n	8005360 <bn_is_zero+0x8>
            return 0;
 800536e:	2000      	movs	r0, #0
}
 8005370:	4770      	bx	lr
    return 1;
 8005372:	2001      	movs	r0, #1
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop

08005378 <bn_bitcount>:
}

size_t bn_bitcount(const bignum_t *bignum) {
 8005378:	4601      	mov	r1, r0
 800537a:	f100 0280 	add.w	r2, r0, #128	@ 0x80
    size_t bits = (BN_BYTE_SIZE << 3) - (BN_WORD_SIZE << 3);
 800537e:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 8005382:	e003      	b.n	800538c <bn_bitcount+0x14>
    int i;
    for (i = BN_ARRAY_SIZE - 1; i >= 0 && (*bignum)[i] == 0; --i) {
        bits -= BN_WORD_SIZE << 3;
 8005384:	3820      	subs	r0, #32
    for (i = BN_ARRAY_SIZE - 1; i >= 0 && (*bignum)[i] == 0; --i) {
 8005386:	f110 0f20 	cmn.w	r0, #32
 800538a:	d008      	beq.n	800539e <bn_bitcount+0x26>
 800538c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f7      	beq.n	8005384 <bn_bitcount+0xc>
    }

    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 8005394:	085b      	lsrs	r3, r3, #1
        bits++;
 8005396:	f100 0001 	add.w	r0, r0, #1
    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 800539a:	d1fb      	bne.n	8005394 <bn_bitcount+0x1c>
    }

    return bits;
}
 800539c:	4770      	bx	lr
    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 800539e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f6      	bne.n	8005394 <bn_bitcount+0x1c>
 80053a6:	4770      	bx	lr

080053a8 <montg_inverse>:
#include <stdio.h>
#include <string.h>
#include <time.h>

// Extended Euclidian algorithm
static void montg_inverse(const bignum_t *val, const bignum_t *mod, bignum_t *res) {
 80053a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ac:	4616      	mov	r6, r2
 80053ae:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
    if (bn_cmp(val, mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 80053b2:	2220      	movs	r2, #32
static void montg_inverse(const bignum_t *val, const bignum_t *mod, bignum_t *res) {
 80053b4:	4604      	mov	r4, r0
 80053b6:	4688      	mov	r8, r1
    if (bn_cmp(val, mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 80053b8:	f7ff ffb0 	bl	800531c <bn_cmp>
 80053bc:	3001      	adds	r0, #1
 80053be:	d003      	beq.n	80053c8 <montg_inverse+0x20>
    if (!sign) {
        bn_sub(mod, res, res, BN_ARRAY_SIZE);
    }

    // Если b != 1 в конце, то res не существует. Данная функция не учитывает этот случай.
}
 80053c0:	f50d 7d42 	add.w	sp, sp, #776	@ 0x308
 80053c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bignum_t n, b, q = {0}, r = {0}, t1 = {0}, t3 = {0};
 80053c8:	2280      	movs	r2, #128	@ 0x80
 80053ca:	2100      	movs	r1, #0
 80053cc:	a842      	add	r0, sp, #264	@ 0x108
 80053ce:	f002 fb0b 	bl	80079e8 <memset>
 80053d2:	2280      	movs	r2, #128	@ 0x80
 80053d4:	2100      	movs	r1, #0
 80053d6:	a862      	add	r0, sp, #392	@ 0x188
 80053d8:	f002 fb06 	bl	80079e8 <memset>
 80053dc:	2280      	movs	r2, #128	@ 0x80
 80053de:	2100      	movs	r1, #0
 80053e0:	a882      	add	r0, sp, #520	@ 0x208
 80053e2:	f002 fb01 	bl	80079e8 <memset>
 80053e6:	2280      	movs	r2, #128	@ 0x80
 80053e8:	2100      	movs	r1, #0
 80053ea:	a8a2      	add	r0, sp, #648	@ 0x288
 80053ec:	f002 fafc 	bl	80079e8 <memset>
    bn_assign(&n, 0, mod, 0, BN_ARRAY_SIZE);
 80053f0:	2520      	movs	r5, #32
 80053f2:	2300      	movs	r3, #0
 80053f4:	4619      	mov	r1, r3
 80053f6:	4642      	mov	r2, r8
 80053f8:	a802      	add	r0, sp, #8
 80053fa:	9500      	str	r5, [sp, #0]
 80053fc:	f7ff fe20 	bl	8005040 <bn_assign>
    bn_assign(&b, 0, val, 0, BN_ARRAY_SIZE);
 8005400:	2300      	movs	r3, #0
 8005402:	4619      	mov	r1, r3
 8005404:	4622      	mov	r2, r4
 8005406:	a822      	add	r0, sp, #136	@ 0x88
 8005408:	9500      	str	r5, [sp, #0]
 800540a:	f7ff fe19 	bl	8005040 <bn_assign>
    bn_from_int(res, 1, BN_ARRAY_SIZE);
 800540e:	4630      	mov	r0, r6
 8005410:	9500      	str	r5, [sp, #0]
 8005412:	2201      	movs	r2, #1
 8005414:	2300      	movs	r3, #0
 8005416:	f7ff fe71 	bl	80050fc <bn_from_int>
    bn_divmod(&n, &b, &q, &r, BN_ARRAY_SIZE);
 800541a:	ab62      	add	r3, sp, #392	@ 0x188
 800541c:	aa42      	add	r2, sp, #264	@ 0x108
 800541e:	a922      	add	r1, sp, #136	@ 0x88
 8005420:	a802      	add	r0, sp, #8
 8005422:	9500      	str	r5, [sp, #0]
 8005424:	f7ff ff04 	bl	8005230 <bn_divmod>
    bn_karatsuba(res, &q, &t3, BN_ARRAY_SIZE);
 8005428:	462b      	mov	r3, r5
 800542a:	aaa2      	add	r2, sp, #648	@ 0x288
 800542c:	a942      	add	r1, sp, #264	@ 0x108
 800542e:	4630      	mov	r0, r6
    uint8_t sign = 1;
 8005430:	2701      	movs	r7, #1
    bn_karatsuba(res, &q, &t3, BN_ARRAY_SIZE);
 8005432:	f7ff feed 	bl	8005210 <bn_karatsuba>
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 8005436:	e02e      	b.n	8005496 <montg_inverse+0xee>
        bn_assign(&n, 0, &b, 0, BN_ARRAY_SIZE);
 8005438:	4621      	mov	r1, r4
 800543a:	a802      	add	r0, sp, #8
 800543c:	9500      	str	r5, [sp, #0]
 800543e:	f7ff fdff 	bl	8005040 <bn_assign>
        bn_assign(&b, 0, &r, 0, BN_ARRAY_SIZE);
 8005442:	4623      	mov	r3, r4
 8005444:	aa62      	add	r2, sp, #392	@ 0x188
 8005446:	4621      	mov	r1, r4
 8005448:	a822      	add	r0, sp, #136	@ 0x88
 800544a:	9500      	str	r5, [sp, #0]
 800544c:	f7ff fdf8 	bl	8005040 <bn_assign>
        bn_assign(&t1, 0, res, 0, BN_ARRAY_SIZE);
 8005450:	4623      	mov	r3, r4
 8005452:	4632      	mov	r2, r6
 8005454:	4621      	mov	r1, r4
 8005456:	a882      	add	r0, sp, #520	@ 0x208
 8005458:	9500      	str	r5, [sp, #0]
 800545a:	f7ff fdf1 	bl	8005040 <bn_assign>
        bn_assign(res, 0, &t3, 0, BN_ARRAY_SIZE);
 800545e:	4623      	mov	r3, r4
 8005460:	aaa2      	add	r2, sp, #648	@ 0x288
 8005462:	4621      	mov	r1, r4
 8005464:	4630      	mov	r0, r6
 8005466:	9500      	str	r5, [sp, #0]
 8005468:	f7ff fdea 	bl	8005040 <bn_assign>
        bn_divmod(n_ptr, b_ptr, &q, &r, BN_ARRAY_SIZE);
 800546c:	ab62      	add	r3, sp, #392	@ 0x188
 800546e:	aa42      	add	r2, sp, #264	@ 0x108
 8005470:	a922      	add	r1, sp, #136	@ 0x88
 8005472:	a802      	add	r0, sp, #8
 8005474:	9500      	str	r5, [sp, #0]
 8005476:	f7ff fedb 	bl	8005230 <bn_divmod>
        bn_karatsuba(res, &q, &t3, BN_ARRAY_SIZE);
 800547a:	2320      	movs	r3, #32
 800547c:	aaa2      	add	r2, sp, #648	@ 0x288
 800547e:	a942      	add	r1, sp, #264	@ 0x108
 8005480:	4630      	mov	r0, r6
 8005482:	f7ff fec5 	bl	8005210 <bn_karatsuba>
        bn_add(&t3, &t1, &t3, BN_ARRAY_SIZE);
 8005486:	aaa2      	add	r2, sp, #648	@ 0x288
 8005488:	2320      	movs	r3, #32
 800548a:	a982      	add	r1, sp, #520	@ 0x208
 800548c:	4610      	mov	r0, r2
 800548e:	f087 0701 	eor.w	r7, r7, #1
 8005492:	f7ff fe6d 	bl	8005170 <bn_add>
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 8005496:	2120      	movs	r1, #32
 8005498:	a862      	add	r0, sp, #392	@ 0x188
 800549a:	f7ff ff5d 	bl	8005358 <bn_is_zero>
        bn_assign(&n, 0, &b, 0, BN_ARRAY_SIZE);
 800549e:	aa22      	add	r2, sp, #136	@ 0x88
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 80054a0:	4604      	mov	r4, r0
        bn_assign(&n, 0, &b, 0, BN_ARRAY_SIZE);
 80054a2:	4603      	mov	r3, r0
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d0c7      	beq.n	8005438 <montg_inverse+0x90>
    if (!sign) {
 80054a8:	2f00      	cmp	r7, #0
 80054aa:	d189      	bne.n	80053c0 <montg_inverse+0x18>
        bn_sub(mod, res, res, BN_ARRAY_SIZE);
 80054ac:	2320      	movs	r3, #32
 80054ae:	4632      	mov	r2, r6
 80054b0:	4631      	mov	r1, r6
 80054b2:	4640      	mov	r0, r8
 80054b4:	f7ff fe7c 	bl	80051b0 <bn_sub>
}
 80054b8:	f50d 7d42 	add.w	sp, sp, #776	@ 0x308
 80054bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054c0 <montg_init>:

// mod - RSA key mod
void montg_init(montg_t *md, const bignum_t *mod) {
    if (mod == NULL) {
 80054c0:	b351      	cbz	r1, 8005518 <montg_init+0x58>
void montg_init(montg_t *md, const bignum_t *mod) {
 80054c2:	b5f0      	push	{r4, r5, r6, r7, lr}
        return;
    }

    md->shift = BN_ARRAY_SIZE / 2;    // 512 для ключа 512 бит - лучше передавать ключ вместо mod для инициализации
 80054c4:	2610      	movs	r6, #16
 80054c6:	2700      	movs	r7, #0
void montg_init(montg_t *md, const bignum_t *mod) {
 80054c8:	b083      	sub	sp, #12
    md->shift = BN_ARRAY_SIZE / 2;    // 512 для ключа 512 бит - лучше передавать ключ вместо mod для инициализации
 80054ca:	e9c0 6760 	strd	r6, r7, [r0, #384]	@ 0x180
    md->shift_byte_size = BN_BYTE_SIZE / 2;
 80054ce:	2640      	movs	r6, #64	@ 0x40
 80054d0:	2700      	movs	r7, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	e9c0 6762 	strd	r6, r7, [r0, #392]	@ 0x188

    bn_assign(&md->mod, 0, mod, 0, BN_ARRAY_SIZE);
 80054d8:	2300      	movs	r3, #0
 80054da:	2620      	movs	r6, #32
 80054dc:	460a      	mov	r2, r1

    bn_init(&md->r, BN_ARRAY_SIZE);
 80054de:	f104 0580 	add.w	r5, r4, #128	@ 0x80
    bn_assign(&md->mod, 0, mod, 0, BN_ARRAY_SIZE);
 80054e2:	4619      	mov	r1, r3
 80054e4:	9600      	str	r6, [sp, #0]
 80054e6:	f7ff fdab 	bl	8005040 <bn_assign>
    bn_init(&md->r, BN_ARRAY_SIZE);
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	f7ff fda3 	bl	8005038 <bn_init>
    md->r[BN_ARRAY_SIZE / 2] = 1;

    bn_sub(&md->r, &md->mod, &md->r_inv, BN_ARRAY_SIZE);
 80054f2:	f504 7780 	add.w	r7, r4, #256	@ 0x100
    md->r[BN_ARRAY_SIZE / 2] = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
    bn_sub(&md->r, &md->mod, &md->r_inv, BN_ARRAY_SIZE);
 80054fc:	463a      	mov	r2, r7
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	4633      	mov	r3, r6
 8005504:	f7ff fe54 	bl	80051b0 <bn_sub>
    montg_inverse(&md->r_inv, &md->r, &md->r_inv);
 8005508:	463a      	mov	r2, r7
 800550a:	4629      	mov	r1, r5
 800550c:	4638      	mov	r0, r7
}
 800550e:	b003      	add	sp, #12
 8005510:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    montg_inverse(&md->r_inv, &md->r, &md->r_inv);
 8005514:	f7ff bf48 	b.w	80053a8 <montg_inverse>
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop

0800551c <montg_transform>:

void montg_transform(const montg_t *md, const bignum_t *val, bignum_t *res) {
 800551c:	b570      	push	{r4, r5, r6, lr}
    bignum_t temp;
    memmove(temp + md->shift, *val, md->shift_byte_size);
 800551e:	f8d0 6188 	ldr.w	r6, [r0, #392]	@ 0x188
void montg_transform(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8005522:	4604      	mov	r4, r0
    memmove(temp + md->shift, *val, md->shift_byte_size);
 8005524:	f8d0 0180 	ldr.w	r0, [r0, #384]	@ 0x180
void montg_transform(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8005528:	b0a0      	sub	sp, #128	@ 0x80
 800552a:	4615      	mov	r5, r2
    memmove(temp + md->shift, *val, md->shift_byte_size);
 800552c:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
 8005530:	4632      	mov	r2, r6
 8005532:	f002 fb0a 	bl	8007b4a <memcpy>
    memset(temp, 0, md->shift_byte_size);
 8005536:	4632      	mov	r2, r6
 8005538:	2100      	movs	r1, #0
 800553a:	4668      	mov	r0, sp
 800553c:	f002 fa54 	bl	80079e8 <memset>
    bn_mod(&temp, &md->mod, res, BN_ARRAY_SIZE);
 8005540:	2320      	movs	r3, #32
 8005542:	462a      	mov	r2, r5
 8005544:	4621      	mov	r1, r4
 8005546:	4668      	mov	r0, sp
 8005548:	f7ff fed0 	bl	80052ec <bn_mod>
}
 800554c:	b020      	add	sp, #128	@ 0x80
 800554e:	bd70      	pop	{r4, r5, r6, pc}

08005550 <montg_mul>:
    bignum_t one;
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
    montg_mul(md, val, &one, res);
}

void montg_mul(const montg_t *md, const bignum_t *lhs, const bignum_t *rhs, bignum_t *res) {
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	460d      	mov	r5, r1
 8005554:	b0e2      	sub	sp, #392	@ 0x188
 8005556:	4604      	mov	r4, r0
    bignum_t m, m_r_inv, t;
    uint8_t overflow = 0;
    bn_karatsuba(lhs, rhs, &t, BN_ARRAY_SIZE);
 8005558:	4611      	mov	r1, r2
 800555a:	4628      	mov	r0, r5
 800555c:	aa42      	add	r2, sp, #264	@ 0x108
void montg_mul(const montg_t *md, const bignum_t *lhs, const bignum_t *rhs, bignum_t *res) {
 800555e:	461d      	mov	r5, r3
    bn_karatsuba(lhs, rhs, &t, BN_ARRAY_SIZE);
 8005560:	2320      	movs	r3, #32
 8005562:	f7ff fe55 	bl	8005210 <bn_karatsuba>
    bn_assign(res, 0, &t, 0, BN_ARRAY_SIZE);
 8005566:	2620      	movs	r6, #32
 8005568:	2300      	movs	r3, #0
 800556a:	4619      	mov	r1, r3
 800556c:	aa42      	add	r2, sp, #264	@ 0x108
 800556e:	4628      	mov	r0, r5
 8005570:	9600      	str	r6, [sp, #0]
 8005572:	f7ff fd65 	bl	8005040 <bn_assign>
    bn_assign(&m, 0, res, 0, BN_ARRAY_SIZE);
 8005576:	2300      	movs	r3, #0
 8005578:	4619      	mov	r1, r3
 800557a:	462a      	mov	r2, r5
 800557c:	a802      	add	r0, sp, #8
 800557e:	9600      	str	r6, [sp, #0]
 8005580:	f7ff fd5e 	bl	8005040 <bn_assign>

    memset(m + md->shift, 0, md->shift_byte_size);
 8005584:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
 8005588:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
 800558c:	ab02      	add	r3, sp, #8
 800558e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005592:	2100      	movs	r1, #0
 8005594:	f002 fa28 	bl	80079e8 <memset>
    bn_karatsuba(&m, &md->r_inv, &m_r_inv, BN_ARRAY_SIZE);
 8005598:	4633      	mov	r3, r6
 800559a:	aa22      	add	r2, sp, #136	@ 0x88
 800559c:	f504 7180 	add.w	r1, r4, #256	@ 0x100
 80055a0:	a802      	add	r0, sp, #8
 80055a2:	f7ff fe35 	bl	8005210 <bn_karatsuba>
    memset(m_r_inv + md->shift, 0, md->shift_byte_size);
 80055a6:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
 80055aa:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
 80055ae:	ab22      	add	r3, sp, #136	@ 0x88
 80055b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80055b4:	2100      	movs	r1, #0
 80055b6:	f002 fa17 	bl	80079e8 <memset>

    bn_karatsuba(&m_r_inv, &md->mod, &m, BN_ARRAY_SIZE);
 80055ba:	4633      	mov	r3, r6
 80055bc:	aa02      	add	r2, sp, #8
 80055be:	4621      	mov	r1, r4
 80055c0:	a822      	add	r0, sp, #136	@ 0x88
 80055c2:	f7ff fe25 	bl	8005210 <bn_karatsuba>
    bn_add(res, &m, res, BN_ARRAY_SIZE);
 80055c6:	4633      	mov	r3, r6
 80055c8:	462a      	mov	r2, r5
 80055ca:	a902      	add	r1, sp, #8
 80055cc:	4628      	mov	r0, r5
 80055ce:	f7ff fdcf 	bl	8005170 <bn_add>

    overflow = bn_cmp(res, &t, BN_ARRAY_SIZE) == BN_CMP_SMALLER && bn_cmp(res, &m, BN_ARRAY_SIZE) == BN_CMP_SMALLER;
 80055d2:	4632      	mov	r2, r6
 80055d4:	a942      	add	r1, sp, #264	@ 0x108
 80055d6:	4628      	mov	r0, r5
 80055d8:	f7ff fea0 	bl	800531c <bn_cmp>
 80055dc:	3001      	adds	r0, #1
 80055de:	d020      	beq.n	8005622 <montg_mul+0xd2>

    memmove(*res, *res + md->shift, md->shift_byte_size);
 80055e0:	f8d4 1180 	ldr.w	r1, [r4, #384]	@ 0x180
 80055e4:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
 80055e8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80055ec:	4628      	mov	r0, r5
 80055ee:	f002 f9e1 	bl	80079b4 <memmove>
    memset(*res + md->shift, 0, md->shift_byte_size);
 80055f2:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
 80055f6:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
 80055fa:	2100      	movs	r1, #0
 80055fc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005600:	f002 f9f2 	bl	80079e8 <memset>

    if (overflow) {
        (*res)[BN_ARRAY_SIZE / 2] = 1;
    }

    if (bn_cmp(res, &md->mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 8005604:	2220      	movs	r2, #32
 8005606:	4621      	mov	r1, r4
 8005608:	4628      	mov	r0, r5
 800560a:	f7ff fe87 	bl	800531c <bn_cmp>
 800560e:	3001      	adds	r0, #1
 8005610:	d005      	beq.n	800561e <montg_mul+0xce>
        bn_sub(res, &md->mod, res, BN_ARRAY_SIZE);
 8005612:	2320      	movs	r3, #32
 8005614:	462a      	mov	r2, r5
 8005616:	4621      	mov	r1, r4
 8005618:	4628      	mov	r0, r5
 800561a:	f7ff fdc9 	bl	80051b0 <bn_sub>
    }
}
 800561e:	b062      	add	sp, #392	@ 0x188
 8005620:	bd70      	pop	{r4, r5, r6, pc}
    overflow = bn_cmp(res, &t, BN_ARRAY_SIZE) == BN_CMP_SMALLER && bn_cmp(res, &m, BN_ARRAY_SIZE) == BN_CMP_SMALLER;
 8005622:	4632      	mov	r2, r6
 8005624:	a902      	add	r1, sp, #8
 8005626:	4628      	mov	r0, r5
 8005628:	f7ff fe78 	bl	800531c <bn_cmp>
    memmove(*res, *res + md->shift, md->shift_byte_size);
 800562c:	f8d4 1180 	ldr.w	r1, [r4, #384]	@ 0x180
 8005630:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
 8005634:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    overflow = bn_cmp(res, &t, BN_ARRAY_SIZE) == BN_CMP_SMALLER && bn_cmp(res, &m, BN_ARRAY_SIZE) == BN_CMP_SMALLER;
 8005638:	4606      	mov	r6, r0
    memmove(*res, *res + md->shift, md->shift_byte_size);
 800563a:	4628      	mov	r0, r5
 800563c:	f002 f9ba 	bl	80079b4 <memmove>
    memset(*res + md->shift, 0, md->shift_byte_size);
 8005640:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
 8005644:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
 8005648:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800564c:	2100      	movs	r1, #0
 800564e:	f002 f9cb 	bl	80079e8 <memset>
    if (overflow) {
 8005652:	3601      	adds	r6, #1
        (*res)[BN_ARRAY_SIZE / 2] = 1;
 8005654:	bf04      	itt	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	642b      	streq	r3, [r5, #64]	@ 0x40
 800565a:	e7d3      	b.n	8005604 <montg_mul+0xb4>

0800565c <montg_revert>:
void montg_revert(const montg_t *md, const bignum_t *val, bignum_t *res) {
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	b0a2      	sub	sp, #136	@ 0x88
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
 8005660:	2320      	movs	r3, #32
void montg_revert(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8005662:	4604      	mov	r4, r0
 8005664:	460d      	mov	r5, r1
 8005666:	4616      	mov	r6, r2
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	a802      	add	r0, sp, #8
 800566c:	2201      	movs	r2, #1
 800566e:	2300      	movs	r3, #0
 8005670:	f7ff fd44 	bl	80050fc <bn_from_int>
    montg_mul(md, val, &one, res);
 8005674:	4633      	mov	r3, r6
 8005676:	aa02      	add	r2, sp, #8
 8005678:	4629      	mov	r1, r5
 800567a:	4620      	mov	r0, r4
 800567c:	f7ff ff68 	bl	8005550 <montg_mul>
}
 8005680:	b022      	add	sp, #136	@ 0x88
 8005682:	bd70      	pop	{r4, r5, r6, pc}

08005684 <montg_pow>:

void montg_pow(const montg_t *md, const bignum_t *b, const bignum_t *exp, bignum_t *res) {
 8005684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005688:	b083      	sub	sp, #12
 800568a:	461e      	mov	r6, r3
    bn_assign(res, 0, b, 0, BN_ARRAY_SIZE);
 800568c:	2320      	movs	r3, #32
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	2300      	movs	r3, #0
void montg_pow(const montg_t *md, const bignum_t *b, const bignum_t *exp, bignum_t *res) {
 8005692:	4617      	mov	r7, r2
 8005694:	4689      	mov	r9, r1
    bn_assign(res, 0, b, 0, BN_ARRAY_SIZE);
 8005696:	460a      	mov	r2, r1
void montg_pow(const montg_t *md, const bignum_t *b, const bignum_t *exp, bignum_t *res) {
 8005698:	4680      	mov	r8, r0
    bn_assign(res, 0, b, 0, BN_ARRAY_SIZE);
 800569a:	4619      	mov	r1, r3
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff fccf 	bl	8005040 <bn_assign>
    
    size_t len = bn_bitcount(exp) - 1;
 80056a2:	4638      	mov	r0, r7
 80056a4:	f7ff fe68 	bl	8005378 <bn_bitcount>
    uint8_t *end = (uint8_t *)(*exp) + len / 8;
    uint8_t *beg = (uint8_t *)(*exp);
    uint8_t mask = 1 << ((len - 1) & 7);
 80056a8:	1e83      	subs	r3, r0, #2
 80056aa:	f003 0307 	and.w	r3, r3, #7
    size_t len = bn_bitcount(exp) - 1;
 80056ae:	3801      	subs	r0, #1
    uint8_t mask = 1 << ((len - 1) & 7);
 80056b0:	2401      	movs	r4, #1
    uint8_t *end = (uint8_t *)(*exp) + len / 8;
 80056b2:	eb07 05d0 	add.w	r5, r7, r0, lsr #3
    uint8_t mask = 1 << ((len - 1) & 7);
 80056b6:	409c      	lsls	r4, r3

    if (mask == 128) {
 80056b8:	2b07      	cmp	r3, #7
    uint8_t mask = 1 << ((len - 1) & 7);
 80056ba:	b2e4      	uxtb	r4, r4
        end--;
 80056bc:	bf08      	it	eq
 80056be:	f105 35ff 	addeq.w	r5, r5, #4294967295
    }

    while (end >= beg) {
 80056c2:	42af      	cmp	r7, r5
 80056c4:	d80f      	bhi.n	80056e6 <montg_pow+0x62>
        montg_mul(md, res, res, res);
 80056c6:	4633      	mov	r3, r6
 80056c8:	4632      	mov	r2, r6
 80056ca:	4631      	mov	r1, r6
 80056cc:	4640      	mov	r0, r8
 80056ce:	f7ff ff3f 	bl	8005550 <montg_mul>
        if (*end & mask) {
 80056d2:	782b      	ldrb	r3, [r5, #0]
 80056d4:	421c      	tst	r4, r3
 80056d6:	d109      	bne.n	80056ec <montg_pow+0x68>
            montg_mul(md, b, res, res);
        }

        mask >>= 1;
        if (!mask) {
 80056d8:	0864      	lsrs	r4, r4, #1
 80056da:	d1f2      	bne.n	80056c2 <montg_pow+0x3e>
            mask = 128;
            end--;
 80056dc:	3d01      	subs	r5, #1
    while (end >= beg) {
 80056de:	42af      	cmp	r7, r5
            mask = 128;
 80056e0:	f04f 0480 	mov.w	r4, #128	@ 0x80
    while (end >= beg) {
 80056e4:	d9ef      	bls.n	80056c6 <montg_pow+0x42>
        }
    }
}
 80056e6:	b003      	add	sp, #12
 80056e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            montg_mul(md, b, res, res);
 80056ec:	4633      	mov	r3, r6
 80056ee:	4632      	mov	r2, r6
 80056f0:	4649      	mov	r1, r9
 80056f2:	4640      	mov	r0, r8
 80056f4:	f7ff ff2c 	bl	8005550 <montg_mul>
 80056f8:	e7ee      	b.n	80056d8 <montg_pow+0x54>
 80056fa:	bf00      	nop

080056fc <import_pub_key>:
#include "asn1.h"
#include "base64.h"
#include "bignum.h"
#include "montgomery.h"

void import_pub_key(rsa_pub_key_t *key, const char *data) {
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char begin[] = "-----BEGIN PUBLIC KEY-----";
 8005700:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 80057f0 <import_pub_key+0xf4>
    const char end[] = "-----END PUBLIC KEY-----";
 8005704:	4c39      	ldr	r4, [pc, #228]	@ (80057ec <import_pub_key+0xf0>)
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 8005706:	b090      	sub	sp, #64	@ 0x40
 8005708:	460d      	mov	r5, r1
 800570a:	4606      	mov	r6, r0
    const char begin[] = "-----BEGIN PUBLIC KEY-----";
 800570c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 8005710:	af00      	add	r7, sp, #0
    const char begin[] = "-----BEGIN PUBLIC KEY-----";
 8005712:	f107 0c24 	add.w	ip, r7, #36	@ 0x24
 8005716:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800571a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 800571e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005722:	f82c 2b02 	strh.w	r2, [ip], #2
 8005726:	0c12      	lsrs	r2, r2, #16
 8005728:	f88c 2000 	strb.w	r2, [ip]
    const char end[] = "-----END PUBLIC KEY-----";
 800572c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800572e:	f107 0e08 	add.w	lr, r7, #8
 8005732:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005736:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800573a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 800573e:	46e8      	mov	r8, sp
    size_t in_size = 2048;
    char pem[in_size];
 8005740:	f5ad 6d00 	sub.w	sp, sp, #2048	@ 0x800
    strcpy(pem, data);
 8005744:	4629      	mov	r1, r5
 8005746:	4668      	mov	r0, sp
    const char end[] = "-----END PUBLIC KEY-----";
 8005748:	f88e 2000 	strb.w	r2, [lr]
    strcpy(pem, data);
 800574c:	f002 f97c 	bl	8007a48 <stpcpy>
 8005750:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005754:	221a      	movs	r2, #26
 8005756:	4682      	mov	sl, r0

    size_t beg_size = strlen(begin);
    size_t end_size = strlen(end);
    size_t pem_size = strlen(pem);
    char *beg_pos = strstr(pem, begin);
 8005758:	4668      	mov	r0, sp
 800575a:	f002 f94d 	bl	80079f8 <strncmp>
    size_t beg_idx = beg_pos - pem;
    char *end_pos = strstr(pem, end);
 800575e:	f107 0108 	add.w	r1, r7, #8
 8005762:	4604      	mov	r4, r0
 8005764:	4668      	mov	r0, sp
 8005766:	f002 f959 	bl	8007a1c <strstr>
    size_t end_idx = end_pos - pem;

    if (beg_idx == 0 && end_idx == pem_size - end_size) {
 800576a:	b124      	cbz	r4, 8005776 <import_pub_key+0x7a>
            return;
        }
        bn_from_bytes(&key->pub_exp, int_ptr, int_size);
        read_ptr += read_size;
    }
}
 800576c:	3740      	adds	r7, #64	@ 0x40
 800576e:	46c5      	mov	sp, r8
 8005770:	46bd      	mov	sp, r7
 8005772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t pem_size = strlen(pem);
 8005776:	466b      	mov	r3, sp
 8005778:	ebaa 0a03 	sub.w	sl, sl, r3
    size_t end_idx = end_pos - pem;
 800577c:	1ac0      	subs	r0, r0, r3
    if (beg_idx == 0 && end_idx == pem_size - end_size) {
 800577e:	f1aa 0318 	sub.w	r3, sl, #24
 8005782:	4283      	cmp	r3, r0
 8005784:	d1f2      	bne.n	800576c <import_pub_key+0x70>
        uint8_t buffer[in_size];
 8005786:	46e9      	mov	r9, sp
 8005788:	f5ad 6d00 	sub.w	sp, sp, #2048	@ 0x800
        memset(buffer, 0, in_size);
 800578c:	4621      	mov	r1, r4
 800578e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005792:	4668      	mov	r0, sp
 8005794:	f002 f928 	bl	80079e8 <memset>
        base64_read((uint8_t *)data + beg_size, pem_size - beg_size - end_size, buffer, in_size);
 8005798:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800579c:	f1aa 0132 	sub.w	r1, sl, #50	@ 0x32
 80057a0:	466a      	mov	r2, sp
 80057a2:	f105 001a 	add.w	r0, r5, #26
 80057a6:	f7ff f87f 	bl	80048a8 <base64_read>
        const size_t key_padding = asn1_get_padding_pub_key(buffer);
 80057aa:	4668      	mov	r0, sp
 80057ac:	f7fe ffc4 	bl	8004738 <asn1_get_padding_pub_key>
        read_ptr = buffer + key_padding;
 80057b0:	eb0d 0500 	add.w	r5, sp, r0
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80057b4:	1d3a      	adds	r2, r7, #4
 80057b6:	4639      	mov	r1, r7
 80057b8:	4628      	mov	r0, r5
 80057ba:	f7fe ff87 	bl	80046cc <asn1_get_int>
        if (read_size == -1) {
 80057be:	1c43      	adds	r3, r0, #1
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80057c0:	4604      	mov	r4, r0
        if (read_size == -1) {
 80057c2:	d0d3      	beq.n	800576c <import_pub_key+0x70>
        bn_from_bytes(&key->mod, int_ptr, int_size);
 80057c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057c8:	4630      	mov	r0, r6
 80057ca:	f7ff fc43 	bl	8005054 <bn_from_bytes>
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80057ce:	1d3a      	adds	r2, r7, #4
 80057d0:	4639      	mov	r1, r7
 80057d2:	1928      	adds	r0, r5, r4
 80057d4:	f7fe ff7a 	bl	80046cc <asn1_get_int>
        if (read_size == -1) {
 80057d8:	3001      	adds	r0, #1
 80057da:	d0c7      	beq.n	800576c <import_pub_key+0x70>
        bn_from_bytes(&key->pub_exp, int_ptr, int_size);
 80057dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057e0:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 80057e4:	f7ff fc36 	bl	8005054 <bn_from_bytes>
        read_ptr += read_size;
 80057e8:	46cd      	mov	sp, r9
 80057ea:	e7bf      	b.n	800576c <import_pub_key+0x70>
 80057ec:	0800aa14 	.word	0x0800aa14
 80057f0:	0800aa30 	.word	0x0800aa30

080057f4 <import_pvt_key>:

void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char begin[] = "-----BEGIN PRIVATE KEY-----";
 80057f8:	f8df a130 	ldr.w	sl, [pc, #304]	@ 800592c <import_pvt_key+0x138>
    const char end[] = "-----END PRIVATE KEY-----";
 80057fc:	4c4a      	ldr	r4, [pc, #296]	@ (8005928 <import_pvt_key+0x134>)
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 80057fe:	b0b8      	sub	sp, #224	@ 0xe0
 8005800:	460e      	mov	r6, r1
 8005802:	4680      	mov	r8, r0
    const char begin[] = "-----BEGIN PRIVATE KEY-----";
 8005804:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 8005808:	af00      	add	r7, sp, #0
    const char begin[] = "-----BEGIN PRIVATE KEY-----";
 800580a:	f107 0e24 	add.w	lr, r7, #36	@ 0x24
 800580e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005812:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8005816:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    const char end[] = "-----END PRIVATE KEY-----";
 800581a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800581c:	f107 0c08 	add.w	ip, r7, #8
 8005820:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005824:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 8005828:	46e9      	mov	r9, sp
    size_t in_size = 9192;
    char pem[in_size];
 800582a:	f5ad 5d0f 	sub.w	sp, sp, #9152	@ 0x23c0
    const char end[] = "-----END PRIVATE KEY-----";
 800582e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    char pem[in_size];
 8005832:	b08a      	sub	sp, #40	@ 0x28
 8005834:	466d      	mov	r5, sp
    strcpy(pem, data);
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
    const char end[] = "-----END PRIVATE KEY-----";
 800583a:	f8ac 2000 	strh.w	r2, [ip]
    strcpy(pem, data);
 800583e:	f002 f903 	bl	8007a48 <stpcpy>
 8005842:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005846:	221b      	movs	r2, #27
 8005848:	4604      	mov	r4, r0

    size_t beg_size = strlen(begin);
    size_t end_size = strlen(end);
    size_t pem_size = strlen(pem);
    char *beg_pos = strstr(pem, begin);
 800584a:	4628      	mov	r0, r5
 800584c:	f002 f8d4 	bl	80079f8 <strncmp>
    size_t beg_idx = beg_pos - pem;
    char *end_pos = strstr(pem, end);
 8005850:	f107 0108 	add.w	r1, r7, #8
 8005854:	4682      	mov	sl, r0
 8005856:	4628      	mov	r0, r5
 8005858:	f002 f8e0 	bl	8007a1c <strstr>
    size_t end_idx = end_pos - pem;

    if (!(beg_idx == 0 && end_idx == pem_size - end_size)) {
 800585c:	f1ba 0f00 	cmp.w	sl, #0
 8005860:	d004      	beq.n	800586c <import_pvt_key+0x78>
            return;
        }
        bn_from_bytes(targets[i], int_ptr, int_size);
        read_ptr += read_size;
    }
}
 8005862:	37e0      	adds	r7, #224	@ 0xe0
        return;
 8005864:	46cd      	mov	sp, r9
}
 8005866:	46bd      	mov	sp, r7
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t pem_size = strlen(pem);
 800586c:	1b64      	subs	r4, r4, r5
    size_t end_idx = end_pos - pem;
 800586e:	1b40      	subs	r0, r0, r5
    if (!(beg_idx == 0 && end_idx == pem_size - end_size)) {
 8005870:	f1a4 0319 	sub.w	r3, r4, #25
 8005874:	4283      	cmp	r3, r0
 8005876:	d1f4      	bne.n	8005862 <import_pvt_key+0x6e>
    uint8_t buffer[in_size];
 8005878:	f5ad 5d0f 	sub.w	sp, sp, #9152	@ 0x23c0
 800587c:	b08a      	sub	sp, #40	@ 0x28
 800587e:	466d      	mov	r5, sp
    memset(buffer, 0, in_size);
 8005880:	4651      	mov	r1, sl
 8005882:	f242 32e8 	movw	r2, #9192	@ 0x23e8
 8005886:	4628      	mov	r0, r5
 8005888:	f002 f8ae 	bl	80079e8 <memset>
    base64_read((uint8_t *)data + beg_size, pem_size - beg_size - end_size, buffer, in_size);
 800588c:	f1a4 0134 	sub.w	r1, r4, #52	@ 0x34
 8005890:	462a      	mov	r2, r5
 8005892:	f242 33e8 	movw	r3, #9192	@ 0x23e8
 8005896:	f106 001b 	add.w	r0, r6, #27
 800589a:	f7ff f805 	bl	80048a8 <base64_read>
    const size_t key_padding = asn1_get_padding_pvt_key(buffer);
 800589e:	4628      	mov	r0, r5
 80058a0:	f7fe ff96 	bl	80047d0 <asn1_get_padding_pvt_key>
    read_ptr = buffer + key_padding;
 80058a4:	4405      	add	r5, r0
    read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80058a6:	1d3a      	adds	r2, r7, #4
 80058a8:	4639      	mov	r1, r7
 80058aa:	4628      	mov	r0, r5
 80058ac:	f7fe ff0e 	bl	80046cc <asn1_get_int>
    if (read_size == -1) {
 80058b0:	1c42      	adds	r2, r0, #1
    read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80058b2:	4604      	mov	r4, r0
    if (read_size == -1) {
 80058b4:	d0d5      	beq.n	8005862 <import_pvt_key+0x6e>
    bn_from_bytes(&version, int_ptr, int_size);
 80058b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058ba:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80058be:	f7ff fbc9 	bl	8005054 <bn_from_bytes>
    if (!bn_is_zero(&version, BN_ARRAY_SIZE)) {
 80058c2:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80058c6:	2120      	movs	r1, #32
 80058c8:	f7ff fd46 	bl	8005358 <bn_is_zero>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d0c8      	beq.n	8005862 <import_pvt_key+0x6e>
    bignum_t *targets[] = {&key->mod, &key->pub_exp, &key->pvt_exp, &key->p, &key->q, &key->exp1, &key->exp2, &key->coeff};
 80058d0:	f108 0380 	add.w	r3, r8, #128	@ 0x80
 80058d4:	e9c7 8310 	strd	r8, r3, [r7, #64]	@ 0x40
 80058d8:	f508 7380 	add.w	r3, r8, #256	@ 0x100
 80058dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058de:	f508 73c0 	add.w	r3, r8, #384	@ 0x180
 80058e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e4:	f508 7300 	add.w	r3, r8, #512	@ 0x200
 80058e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80058ea:	f508 7320 	add.w	r3, r8, #640	@ 0x280
 80058ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f0:	f508 7240 	add.w	r2, r8, #768	@ 0x300
 80058f4:	f508 7360 	add.w	r3, r8, #896	@ 0x380
 80058f8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    read_ptr += read_size;
 80058fc:	442c      	add	r4, r5
    for (size_t i = 0; i < targets_size; i++) {
 80058fe:	f107 065c 	add.w	r6, r7, #92	@ 0x5c
 8005902:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 8005906:	4620      	mov	r0, r4
 8005908:	1d3a      	adds	r2, r7, #4
 800590a:	4639      	mov	r1, r7
 800590c:	f7fe fede 	bl	80046cc <asn1_get_int>
        if (read_size == -1) {
 8005910:	1c43      	adds	r3, r0, #1
        read_ptr += read_size;
 8005912:	4404      	add	r4, r0
        if (read_size == -1) {
 8005914:	d0a5      	beq.n	8005862 <import_pvt_key+0x6e>
        bn_from_bytes(targets[i], int_ptr, int_size);
 8005916:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800591a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800591e:	f7ff fb99 	bl	8005054 <bn_from_bytes>
    for (size_t i = 0; i < targets_size; i++) {
 8005922:	42ae      	cmp	r6, r5
 8005924:	d1ef      	bne.n	8005906 <import_pvt_key+0x112>
 8005926:	e79c      	b.n	8005862 <import_pvt_key+0x6e>
 8005928:	0800aa4c 	.word	0x0800aa4c
 800592c:	0800aa68 	.word	0x0800aa68

08005930 <encrypt_buf>:

    montg_pow(montg_domain, &bignum_montg_in, &key->pub_exp, &bignum_montg_out);
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
}

void encrypt_buf(const rsa_pub_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t bignum_in_len, char *buffer_out, size_t bignum_out_len) {
 8005930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005932:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8005936:	461f      	mov	r7, r3
 8005938:	460c      	mov	r4, r1
 800593a:	4616      	mov	r6, r2
 800593c:	4605      	mov	r5, r0
    bignum_t in_bn, out_bn;
    bn_init(&in_bn, BN_ARRAY_SIZE);
 800593e:	2120      	movs	r1, #32
 8005940:	4668      	mov	r0, sp
 8005942:	f7ff fb79 	bl	8005038 <bn_init>

    memmove(in_bn, buffer_in, bignum_in_len * sizeof(char));
 8005946:	463a      	mov	r2, r7
 8005948:	4631      	mov	r1, r6
 800594a:	4668      	mov	r0, sp
 800594c:	f002 f8fd 	bl	8007b4a <memcpy>
    montg_transform(montg_domain, bignum_in, &bignum_montg_in);
 8005950:	aa40      	add	r2, sp, #256	@ 0x100
 8005952:	4669      	mov	r1, sp
 8005954:	4620      	mov	r0, r4
 8005956:	f7ff fde1 	bl	800551c <montg_transform>
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
 800595a:	a860      	add	r0, sp, #384	@ 0x180
 800595c:	2120      	movs	r1, #32
 800595e:	f7ff fb6b 	bl	8005038 <bn_init>
    montg_pow(montg_domain, &bignum_montg_in, &key->pub_exp, &bignum_montg_out);
 8005962:	ab60      	add	r3, sp, #384	@ 0x180
 8005964:	f105 0280 	add.w	r2, r5, #128	@ 0x80
 8005968:	a940      	add	r1, sp, #256	@ 0x100
 800596a:	4620      	mov	r0, r4
 800596c:	f7ff fe8a 	bl	8005684 <montg_pow>
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
 8005970:	aa20      	add	r2, sp, #128	@ 0x80
 8005972:	a960      	add	r1, sp, #384	@ 0x180
 8005974:	4620      	mov	r0, r4
 8005976:	f7ff fe71 	bl	800565c <montg_revert>
    encrypt(key, montg_domain, &in_bn, &out_bn);
    bn_to_string(&out_bn, buffer_out, bignum_out_len);
 800597a:	e9dd 1286 	ldrd	r1, r2, [sp, #536]	@ 0x218
 800597e:	a820      	add	r0, sp, #128	@ 0x80
 8005980:	f7ff fbcc 	bl	800511c <bn_to_string>
}
 8005984:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
 8005988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598a:	bf00      	nop

0800598c <decrypt_buf>:
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
    montg_pow(montg_domain, &bignum_montg_in, &key->pvt_exp, &bignum_montg_out);
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
}

void decrypt_buf(const rsa_pvt_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 800598c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598e:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8005992:	461f      	mov	r7, r3
 8005994:	460c      	mov	r4, r1
 8005996:	4616      	mov	r6, r2
 8005998:	4605      	mov	r5, r0
    bignum_t in_bn, out_bn;
    bn_init(&in_bn, BN_ARRAY_SIZE);
 800599a:	2120      	movs	r1, #32
 800599c:	4668      	mov	r0, sp
 800599e:	f7ff fb4b 	bl	8005038 <bn_init>

    bn_from_string(&in_bn, buffer_in, buffer_in_len);
 80059a2:	463a      	mov	r2, r7
 80059a4:	4631      	mov	r1, r6
 80059a6:	4668      	mov	r0, sp
 80059a8:	f7ff fb84 	bl	80050b4 <bn_from_string>
    montg_transform(montg_domain, bignum_in, &bignum_montg_in);
 80059ac:	aa40      	add	r2, sp, #256	@ 0x100
 80059ae:	4669      	mov	r1, sp
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff fdb3 	bl	800551c <montg_transform>
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
 80059b6:	a860      	add	r0, sp, #384	@ 0x180
 80059b8:	2120      	movs	r1, #32
 80059ba:	f7ff fb3d 	bl	8005038 <bn_init>
    montg_pow(montg_domain, &bignum_montg_in, &key->pvt_exp, &bignum_montg_out);
 80059be:	ab60      	add	r3, sp, #384	@ 0x180
 80059c0:	f505 7280 	add.w	r2, r5, #256	@ 0x100
 80059c4:	a940      	add	r1, sp, #256	@ 0x100
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7ff fe5c 	bl	8005684 <montg_pow>
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
 80059cc:	aa20      	add	r2, sp, #128	@ 0x80
 80059ce:	a960      	add	r1, sp, #384	@ 0x180
 80059d0:	4620      	mov	r0, r4
 80059d2:	f7ff fe43 	bl	800565c <montg_revert>
    decrypt(key, montg_domain, &in_bn, &out_bn);
    memmove(buffer_out, out_bn, buffer_out_len * sizeof(uint8_t));
 80059d6:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 80059d8:	9886      	ldr	r0, [sp, #536]	@ 0x218
 80059da:	a920      	add	r1, sp, #128	@ 0x80
 80059dc:	f002 f8b5 	bl	8007b4a <memcpy>
}
 80059e0:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
 80059e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e6:	bf00      	nop

080059e8 <sign_buf>:

void sign_buf(const rsa_pvt_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 80059e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ea:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 80059ee:	461f      	mov	r7, r3
 80059f0:	460c      	mov	r4, r1
 80059f2:	4616      	mov	r6, r2
 80059f4:	4605      	mov	r5, r0
    bignum_t in_bn = {0}, out_bn;
 80059f6:	2280      	movs	r2, #128	@ 0x80
 80059f8:	2100      	movs	r1, #0
 80059fa:	4668      	mov	r0, sp
 80059fc:	f001 fff4 	bl	80079e8 <memset>

    memmove(in_bn, buffer_in, buffer_in_len * sizeof(char));
 8005a00:	463a      	mov	r2, r7
 8005a02:	4631      	mov	r1, r6
 8005a04:	4668      	mov	r0, sp
 8005a06:	f002 f8a0 	bl	8007b4a <memcpy>
    montg_transform(montg_domain, bignum_in, &bignum_montg_in);
 8005a0a:	aa40      	add	r2, sp, #256	@ 0x100
 8005a0c:	4669      	mov	r1, sp
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f7ff fd84 	bl	800551c <montg_transform>
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
 8005a14:	a860      	add	r0, sp, #384	@ 0x180
 8005a16:	2120      	movs	r1, #32
 8005a18:	f7ff fb0e 	bl	8005038 <bn_init>
    montg_pow(montg_domain, &bignum_montg_in, &key->pvt_exp, &bignum_montg_out);
 8005a1c:	ab60      	add	r3, sp, #384	@ 0x180
 8005a1e:	f505 7280 	add.w	r2, r5, #256	@ 0x100
 8005a22:	a940      	add	r1, sp, #256	@ 0x100
 8005a24:	4620      	mov	r0, r4
 8005a26:	f7ff fe2d 	bl	8005684 <montg_pow>
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
 8005a2a:	aa20      	add	r2, sp, #128	@ 0x80
 8005a2c:	a960      	add	r1, sp, #384	@ 0x180
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f7ff fe14 	bl	800565c <montg_revert>
    decrypt(key, montg_domain, &in_bn, &out_bn);
    bn_to_string(&out_bn, buffer_out, buffer_out_len);
 8005a34:	e9dd 1286 	ldrd	r1, r2, [sp, #536]	@ 0x218
 8005a38:	a820      	add	r0, sp, #128	@ 0x80
 8005a3a:	f7ff fb6f 	bl	800511c <bn_to_string>
}
 8005a3e:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
 8005a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a44 <verify_buf>:

void verify_buf(const rsa_pub_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t bignum_in_len, char *buffer_out, size_t bignum_out_len) {
 8005a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a46:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8005a4a:	461f      	mov	r7, r3
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	4616      	mov	r6, r2
 8005a50:	4605      	mov	r5, r0
    bignum_t in_bn = {0}, out_bn;
 8005a52:	2280      	movs	r2, #128	@ 0x80
 8005a54:	2100      	movs	r1, #0
 8005a56:	4668      	mov	r0, sp
 8005a58:	f001 ffc6 	bl	80079e8 <memset>

    bn_from_string(&in_bn, buffer_in, bignum_in_len);
 8005a5c:	463a      	mov	r2, r7
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4668      	mov	r0, sp
 8005a62:	f7ff fb27 	bl	80050b4 <bn_from_string>
    montg_transform(montg_domain, bignum_in, &bignum_montg_in);
 8005a66:	aa40      	add	r2, sp, #256	@ 0x100
 8005a68:	4669      	mov	r1, sp
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7ff fd56 	bl	800551c <montg_transform>
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
 8005a70:	a860      	add	r0, sp, #384	@ 0x180
 8005a72:	2120      	movs	r1, #32
 8005a74:	f7ff fae0 	bl	8005038 <bn_init>
    montg_pow(montg_domain, &bignum_montg_in, &key->pub_exp, &bignum_montg_out);
 8005a78:	ab60      	add	r3, sp, #384	@ 0x180
 8005a7a:	f105 0280 	add.w	r2, r5, #128	@ 0x80
 8005a7e:	a940      	add	r1, sp, #256	@ 0x100
 8005a80:	4620      	mov	r0, r4
 8005a82:	f7ff fdff 	bl	8005684 <montg_pow>
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
 8005a86:	aa20      	add	r2, sp, #128	@ 0x80
 8005a88:	a960      	add	r1, sp, #384	@ 0x180
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f7ff fde6 	bl	800565c <montg_revert>
    encrypt(key, montg_domain, &in_bn, &out_bn);
    memmove(buffer_out, out_bn, bignum_out_len * sizeof(uint8_t));
 8005a90:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8005a92:	9886      	ldr	r0, [sp, #536]	@ 0x218
 8005a94:	a920      	add	r1, sp, #128	@ 0x80
 8005a96:	f002 f858 	bl	8007b4a <memcpy>
 8005a9a:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
 8005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aa0 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aa0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005aa4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8005aa8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aaa:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0

  if (hcdc == NULL)
 8005aae:	b184      	cbz	r4, 8005ad2 <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ab0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
 8005ab4:	b15b      	cbz	r3, 8005ace <USBD_CDC_EP0_RxReady+0x2e>
 8005ab6:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8005aba:	28ff      	cmp	r0, #255	@ 0xff
 8005abc:	d007      	beq.n	8005ace <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005ac8:	23ff      	movs	r3, #255	@ 0xff
 8005aca:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005ace:	2000      	movs	r0, #0
}
 8005ad0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005ad2:	2003      	movs	r0, #3
}
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop

08005ad8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ad8:	230a      	movs	r3, #10
 8005ada:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8005adc:	4800      	ldr	r0, [pc, #0]	@ (8005ae0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005ade:	4770      	bx	lr
 8005ae0:	20000088 	.word	0x20000088

08005ae4 <USBD_CDC_GetFSCfgDesc>:
{
 8005ae4:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ae6:	2182      	movs	r1, #130	@ 0x82
{
 8005ae8:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005aea:	480f      	ldr	r0, [pc, #60]	@ (8005b28 <USBD_CDC_GetFSCfgDesc+0x44>)
 8005aec:	f000 fbb6 	bl	800625c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005af0:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005af2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005af4:	480c      	ldr	r0, [pc, #48]	@ (8005b28 <USBD_CDC_GetFSCfgDesc+0x44>)
 8005af6:	f000 fbb1 	bl	800625c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005afa:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005afc:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005afe:	480a      	ldr	r0, [pc, #40]	@ (8005b28 <USBD_CDC_GetFSCfgDesc+0x44>)
 8005b00:	f000 fbac 	bl	800625c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8005b04:	b10d      	cbz	r5, 8005b0a <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b06:	2210      	movs	r2, #16
 8005b08:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8005b0a:	b11c      	cbz	r4, 8005b14 <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2140      	movs	r1, #64	@ 0x40
 8005b10:	7121      	strb	r1, [r4, #4]
 8005b12:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8005b14:	b118      	cbz	r0, 8005b1e <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b16:	2200      	movs	r2, #0
 8005b18:	2140      	movs	r1, #64	@ 0x40
 8005b1a:	7101      	strb	r1, [r0, #4]
 8005b1c:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b1e:	2343      	movs	r3, #67	@ 0x43
}
 8005b20:	4801      	ldr	r0, [pc, #4]	@ (8005b28 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b22:	8033      	strh	r3, [r6, #0]
}
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
 8005b26:	bf00      	nop
 8005b28:	2000000c 	.word	0x2000000c

08005b2c <USBD_CDC_GetHSCfgDesc>:
{
 8005b2c:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b2e:	2182      	movs	r1, #130	@ 0x82
{
 8005b30:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b32:	480f      	ldr	r0, [pc, #60]	@ (8005b70 <USBD_CDC_GetHSCfgDesc+0x44>)
 8005b34:	f000 fb92 	bl	800625c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b38:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b3a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b3c:	480c      	ldr	r0, [pc, #48]	@ (8005b70 <USBD_CDC_GetHSCfgDesc+0x44>)
 8005b3e:	f000 fb8d 	bl	800625c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b42:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b44:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b46:	480a      	ldr	r0, [pc, #40]	@ (8005b70 <USBD_CDC_GetHSCfgDesc+0x44>)
 8005b48:	f000 fb88 	bl	800625c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8005b4c:	b10d      	cbz	r5, 8005b52 <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005b4e:	2210      	movs	r2, #16
 8005b50:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8005b52:	b11c      	cbz	r4, 8005b5c <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b54:	2100      	movs	r1, #0
 8005b56:	2202      	movs	r2, #2
 8005b58:	7121      	strb	r1, [r4, #4]
 8005b5a:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8005b5c:	b118      	cbz	r0, 8005b66 <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b5e:	2100      	movs	r1, #0
 8005b60:	2202      	movs	r2, #2
 8005b62:	7101      	strb	r1, [r0, #4]
 8005b64:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b66:	2343      	movs	r3, #67	@ 0x43
}
 8005b68:	4801      	ldr	r0, [pc, #4]	@ (8005b70 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b6a:	8033      	strh	r3, [r6, #0]
}
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	bf00      	nop
 8005b70:	2000000c 	.word	0x2000000c

08005b74 <USBD_CDC_DataOut>:
{
 8005b74:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b76:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005b7a:	33b0      	adds	r3, #176	@ 0xb0
 8005b7c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b80:	b195      	cbz	r5, 8005ba8 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b82:	4604      	mov	r4, r0
 8005b84:	f001 f92a 	bl	8006ddc <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b88:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b8c:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b90:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005b94:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8005b98:	f8d4 32c4 	ldr.w	r3, [r4, #708]	@ 0x2c4
 8005b9c:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005ba4:	2000      	movs	r0, #0
}
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8005ba8:	2003      	movs	r0, #3
}
 8005baa:	bd38      	pop	{r3, r4, r5, pc}

08005bac <USBD_CDC_DataIn>:
{
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005bb2:	f8d0 62c8 	ldr.w	r6, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bb6:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8005bba:	f8de 52c0 	ldr.w	r5, [lr, #704]	@ 0x2c0
 8005bbe:	b345      	cbz	r5, 8005c12 <USBD_CDC_DataIn+0x66>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bc0:	f001 040f 	and.w	r4, r1, #15
 8005bc4:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8005bc8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8005bcc:	460a      	mov	r2, r1
 8005bce:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8005bd2:	b96b      	cbnz	r3, 8005bf0 <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005bd4:	f8de 32c4 	ldr.w	r3, [lr, #708]	@ 0x2c4
 8005bd8:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8005bda:	2100      	movs	r1, #0
 8005bdc:	f8c5 1214 	str.w	r1, [r5, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005be0:	b123      	cbz	r3, 8005bec <USBD_CDC_DataIn+0x40>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005be2:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
 8005be6:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8005bea:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005bec:	2000      	movs	r0, #0
}
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005bf0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8005bf4:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8005bf8:	6cb4      	ldr	r4, [r6, #72]	@ 0x48
 8005bfa:	fbb3 f6f4 	udiv	r6, r3, r4
 8005bfe:	fb04 3316 	mls	r3, r4, r6, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e6      	bne.n	8005bd4 <USBD_CDC_DataIn+0x28>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005c06:	f8cc 3018 	str.w	r3, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f001 f8ce 	bl	8006dac <USBD_LL_Transmit>
 8005c10:	e7ec      	b.n	8005bec <USBD_CDC_DataIn+0x40>
    return (uint8_t)USBD_FAIL;
 8005c12:	2003      	movs	r0, #3
}
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	bf00      	nop

08005c18 <USBD_CDC_Setup>:
{
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005c1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005c22:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c24:	f8d3 62c0 	ldr.w	r6, [r3, #704]	@ 0x2c0
  uint8_t ifalt = 0U;
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f88d 2005 	strb.w	r2, [sp, #5]
  uint16_t status_info = 0U;
 8005c2e:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hcdc == NULL)
 8005c32:	b166      	cbz	r6, 8005c4e <USBD_CDC_Setup+0x36>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c34:	f891 c000 	ldrb.w	ip, [r1]
 8005c38:	f01c 0260 	ands.w	r2, ip, #96	@ 0x60
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	460d      	mov	r5, r1
 8005c40:	d01e      	beq.n	8005c80 <USBD_CDC_Setup+0x68>
 8005c42:	2a20      	cmp	r2, #32
 8005c44:	d006      	beq.n	8005c54 <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 8005c46:	4629      	mov	r1, r5
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fdbb 	bl	80067c4 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 8005c4e:	2003      	movs	r0, #3
}
 8005c50:	b002      	add	sp, #8
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
      if (req->wLength != 0U)
 8005c54:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c56:	f891 e001 	ldrb.w	lr, [r1, #1]
      if (req->wLength != 0U)
 8005c5a:	b37a      	cbz	r2, 8005cbc <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 8005c5c:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 8005c60:	d04c      	beq.n	8005cfc <USBD_CDC_Setup+0xe4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005c66:	4631      	mov	r1, r6
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4670      	mov	r0, lr
 8005c6c:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c6e:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c70:	2a07      	cmp	r2, #7
 8005c72:	4631      	mov	r1, r6
 8005c74:	bf28      	it	cs
 8005c76:	2207      	movcs	r2, #7
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fdd7 	bl	800682c <USBD_CtlSendData>
 8005c7e:	e022      	b.n	8005cc6 <USBD_CDC_Setup+0xae>
      switch (req->bRequest)
 8005c80:	784b      	ldrb	r3, [r1, #1]
 8005c82:	2b0b      	cmp	r3, #11
 8005c84:	d8df      	bhi.n	8005c46 <USBD_CDC_Setup+0x2e>
 8005c86:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <USBD_CDC_Setup+0x74>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cc7 	.word	0x08005cc7
 8005c94:	08005c47 	.word	0x08005c47
 8005c98:	08005c47 	.word	0x08005c47
 8005c9c:	08005c47 	.word	0x08005c47
 8005ca0:	08005c47 	.word	0x08005c47
 8005ca4:	08005c47 	.word	0x08005c47
 8005ca8:	08005c47 	.word	0x08005c47
 8005cac:	08005c47 	.word	0x08005c47
 8005cb0:	08005c47 	.word	0x08005c47
 8005cb4:	08005ce9 	.word	0x08005ce9
 8005cb8:	08005ccb 	.word	0x08005ccb
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005cc0:	4670      	mov	r0, lr
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4798      	blx	r3
    return (uint8_t)USBD_FAIL;
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	e7c2      	b.n	8005c50 <USBD_CDC_Setup+0x38>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cca:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d0f9      	beq.n	8005cc6 <USBD_CDC_Setup+0xae>
 8005cd2:	e7b8      	b.n	8005c46 <USBD_CDC_Setup+0x2e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d1b4      	bne.n	8005c46 <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f10d 0106 	add.w	r1, sp, #6
 8005ce2:	f000 fda3 	bl	800682c <USBD_CtlSendData>
 8005ce6:	e7ee      	b.n	8005cc6 <USBD_CDC_Setup+0xae>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d1aa      	bne.n	8005c46 <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f10d 0105 	add.w	r1, sp, #5
 8005cf6:	f000 fd99 	bl	800682c <USBD_CtlSendData>
 8005cfa:	e7e4      	b.n	8005cc6 <USBD_CDC_Setup+0xae>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005cfc:	2a40      	cmp	r2, #64	@ 0x40
 8005cfe:	bf28      	it	cs
 8005d00:	2240      	movcs	r2, #64	@ 0x40
          hcdc->CmdOpCode = req->bRequest;
 8005d02:	f886 e200 	strb.w	lr, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005d06:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	f000 fda4 	bl	8006858 <USBD_CtlPrepareRx>
 8005d10:	e7d9      	b.n	8005cc6 <USBD_CDC_Setup+0xae>
 8005d12:	bf00      	nop

08005d14 <USBD_CDC_DeInit>:
{
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005d18:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005d1a:	2181      	movs	r1, #129	@ 0x81
 8005d1c:	f001 f802 	bl	8006d24 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d20:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005d22:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 fffd 	bl	8006d24 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005d2a:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005d2e:	2182      	movs	r1, #130	@ 0x82
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fff7 	bl	8006d24 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005d36:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005d3a:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005d3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d40:	f8d3 22c0 	ldr.w	r2, [r3, #704]	@ 0x2c0
 8005d44:	b18a      	cbz	r2, 8005d6a <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005d46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005d4e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005d52:	33b0      	adds	r3, #176	@ 0xb0
 8005d54:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8005d58:	f001 f848 	bl	8006dec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d5c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005d60:	33b0      	adds	r3, #176	@ 0xb0
 8005d62:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8005d66:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	bd38      	pop	{r3, r4, r5, pc}
 8005d6e:	bf00      	nop

08005d70 <USBD_CDC_Init>:
{
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d74:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005d78:	f001 f834 	bl	8006de4 <USBD_static_malloc>
  if (hcdc == NULL)
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d05a      	beq.n	8005e38 <USBD_CDC_Init+0xc8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d82:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005d86:	2100      	movs	r1, #0
 8005d88:	f001 fe2e 	bl	80079e8 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d8c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005d90:	33b0      	adds	r3, #176	@ 0xb0
 8005d92:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d96:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d98:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d9c:	b3b3      	cbz	r3, 8005e0c <USBD_CDC_Init+0x9c>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d9e:	2340      	movs	r3, #64	@ 0x40
 8005da0:	2202      	movs	r2, #2
 8005da2:	2181      	movs	r1, #129	@ 0x81
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 ffaf 	bl	8006d08 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005daa:	2101      	movs	r1, #1
 8005dac:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005dae:	2340      	movs	r3, #64	@ 0x40
 8005db0:	2202      	movs	r2, #2
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 ffa8 	bl	8006d08 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005db8:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dba:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dbc:	2308      	movs	r3, #8
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dbe:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dc2:	2182      	movs	r1, #130	@ 0x82
 8005dc4:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dc6:	f8a4 7178 	strh.w	r7, [r4, #376]	@ 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 ff9c 	bl	8006d08 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dd0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005dd4:	f8a4 704c 	strh.w	r7, [r4, #76]	@ 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 8005ddc:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  hcdc->RxBuffer = NULL;
 8005de2:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 8005dea:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
  hcdc->TxState = 0U;
 8005dee:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005df2:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 8005df6:	b322      	cbz	r2, 8005e42 <USBD_CDC_Init+0xd2>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df8:	7c23      	ldrb	r3, [r4, #16]
 8005dfa:	b9bb      	cbnz	r3, 8005e2c <USBD_CDC_Init+0xbc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e00:	4639      	mov	r1, r7
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 ffde 	bl	8006dc4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005e08:	2000      	movs	r0, #0
}
 8005e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e10:	2202      	movs	r2, #2
 8005e12:	2181      	movs	r1, #129	@ 0x81
 8005e14:	4620      	mov	r0, r4
 8005e16:	f000 ff77 	bl	8006d08 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e22:	2202      	movs	r2, #2
 8005e24:	4620      	mov	r0, r4
 8005e26:	f000 ff6f 	bl	8006d08 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e2a:	e7c5      	b.n	8005db8 <USBD_CDC_Init+0x48>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e2c:	2340      	movs	r3, #64	@ 0x40
 8005e2e:	4639      	mov	r1, r7
 8005e30:	4620      	mov	r0, r4
 8005e32:	f000 ffc7 	bl	8006dc4 <USBD_LL_PrepareReceive>
 8005e36:	e7e7      	b.n	8005e08 <USBD_CDC_Init+0x98>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e38:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005e3c:	33b0      	adds	r3, #176	@ 0xb0
 8005e3e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e42:	2002      	movs	r0, #2
}
 8005e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e46:	bf00      	nop

08005e48 <USBD_CDC_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	2182      	movs	r1, #130	@ 0x82
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	480f      	ldr	r0, [pc, #60]	@ (8005e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8005e50:	f000 fa04 	bl	800625c <USBD_GetEpDesc>
 8005e54:	2101      	movs	r1, #1
 8005e56:	4605      	mov	r5, r0
 8005e58:	480c      	ldr	r0, [pc, #48]	@ (8005e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8005e5a:	f000 f9ff 	bl	800625c <USBD_GetEpDesc>
 8005e5e:	2181      	movs	r1, #129	@ 0x81
 8005e60:	4604      	mov	r4, r0
 8005e62:	480a      	ldr	r0, [pc, #40]	@ (8005e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8005e64:	f000 f9fa 	bl	800625c <USBD_GetEpDesc>
 8005e68:	b10d      	cbz	r5, 8005e6e <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	71aa      	strb	r2, [r5, #6]
 8005e6e:	b11c      	cbz	r4, 8005e78 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 8005e70:	2200      	movs	r2, #0
 8005e72:	2140      	movs	r1, #64	@ 0x40
 8005e74:	7121      	strb	r1, [r4, #4]
 8005e76:	7162      	strb	r2, [r4, #5]
 8005e78:	b118      	cbz	r0, 8005e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2140      	movs	r1, #64	@ 0x40
 8005e7e:	7101      	strb	r1, [r0, #4]
 8005e80:	7142      	strb	r2, [r0, #5]
 8005e82:	2343      	movs	r3, #67	@ 0x43
 8005e84:	4801      	ldr	r0, [pc, #4]	@ (8005e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8005e86:	8033      	strh	r3, [r6, #0]
 8005e88:	bd70      	pop	{r4, r5, r6, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2000000c 	.word	0x2000000c

08005e90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e90:	4603      	mov	r3, r0
  if (fops == NULL)
 8005e92:	b139      	cbz	r1, 8005ea4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e94:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005e98:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 8005e9c:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 8005e9e:	f8c3 12c4 	str.w	r1, [r3, #708]	@ 0x2c4
  return (uint8_t)USBD_OK;
 8005ea2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005ea4:	2003      	movs	r0, #3
}
 8005ea6:	4770      	bx	lr

08005ea8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ea8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005eac:	33b0      	adds	r3, #176	@ 0xb0
 8005eae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8005eb2:	b12b      	cbz	r3, 8005ec0 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8005eb4:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005eb8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005ec0:	2003      	movs	r0, #3
}
 8005ec2:	4770      	bx	lr

08005ec4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ec4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005ec8:	33b0      	adds	r3, #176	@ 0xb0
 8005eca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8005ece:	b11b      	cbz	r3, 8005ed8 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8005ed0:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005ed8:	2003      	movs	r0, #3
}
 8005eda:	4770      	bx	lr

08005edc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005edc:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005ee0:	32b0      	adds	r2, #176	@ 0xb0
 8005ee2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ee6:	b18a      	cbz	r2, 8005f0c <USBD_CDC_ReceivePacket+0x30>
{
 8005ee8:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eea:	7c03      	ldrb	r3, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005eec:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef0:	b12b      	cbz	r3, 8005efe <USBD_CDC_ReceivePacket+0x22>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ef2:	2340      	movs	r3, #64	@ 0x40
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	f000 ff65 	bl	8006dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005efa:	2000      	movs	r0, #0
}
 8005efc:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f02:	2101      	movs	r1, #1
 8005f04:	f000 ff5e 	bl	8006dc4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005f08:	2000      	movs	r0, #0
}
 8005f0a:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 8005f0c:	2003      	movs	r0, #3
}
 8005f0e:	4770      	bx	lr

08005f10 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f10:	b178      	cbz	r0, 8005f32 <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005f18:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f1c:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f20:	b109      	cbz	r1, 8005f26 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005f22:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f26:	2301      	movs	r3, #1
 8005f28:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 8005f2c:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f2e:	f000 bead 	b.w	8006c8c <USBD_LL_Init>

  return ret;
}
 8005f32:	2003      	movs	r0, #3
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop

08005f38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8005f42:	b189      	cbz	r1, 8005f68 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f44:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 8005f46:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	b123      	cbz	r3, 8005f58 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f4e:	f10d 0006 	add.w	r0, sp, #6
 8005f52:	4798      	blx	r3
 8005f54:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f58:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8005f5c:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 8005f5e:	3301      	adds	r3, #1
 8005f60:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
}
 8005f64:	b002      	add	sp, #8
 8005f66:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005f68:	2003      	movs	r0, #3
}
 8005f6a:	b002      	add	sp, #8
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	bf00      	nop

08005f70 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f70:	f000 bebe 	b.w	8006cf0 <USBD_LL_Start>

08005f74 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f74:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005f78:	b10b      	cbz	r3, 8005f7e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop

08005f84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f84:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f86:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8005f8e:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005f90:	bf18      	it	ne
 8005f92:	2003      	movne	r0, #3
 8005f94:	bd08      	pop	{r3, pc}
 8005f96:	bf00      	nop

08005f98 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f9c:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f000 fc03 	bl	80067ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005fa6:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8005faa:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 8005fae:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8005fb8:	f001 031f 	and.w	r3, r1, #31
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d009      	beq.n	8005fd4 <USBD_LL_SetupStage+0x3c>
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d013      	beq.n	8005fec <USBD_LL_SetupStage+0x54>
 8005fc4:	b163      	cbz	r3, 8005fe0 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 8005fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fd0:	f000 beb4 	b.w	8006d3c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4620      	mov	r0, r4
}
 8005fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fdc:	f000 bafe 	b.w	80065dc <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4620      	mov	r0, r4
}
 8005fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fe8:	f000 b94e 	b.w	8006288 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fec:	4629      	mov	r1, r5
 8005fee:	4620      	mov	r0, r4
}
 8005ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ff4:	f000 bb2e 	b.w	8006654 <USBD_StdEPReq>

08005ff8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8005ffc:	b931      	cbnz	r1, 800600c <USBD_LL_DataOutStage+0x14>
 8005ffe:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006000:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006004:	2a03      	cmp	r2, #3
 8006006:	d010      	beq.n	800602a <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8006008:	2000      	movs	r0, #0
 800600a:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006010:	2b03      	cmp	r3, #3
 8006012:	d1f9      	bne.n	8006008 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8006014:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f4      	beq.n	8006008 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 800601e:	2200      	movs	r2, #0
}
 8006020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 8006024:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006028:	4718      	bx	r3
 800602a:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 800602c:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 8006030:	4291      	cmp	r1, r2
 8006032:	d808      	bhi.n	8006046 <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006034:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006038:	2a03      	cmp	r2, #3
 800603a:	d00e      	beq.n	800605a <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 800603c:	4620      	mov	r0, r4
 800603e:	f000 fc21 	bl	8006884 <USBD_CtlSendStatus>
}
 8006042:	2000      	movs	r0, #0
 8006044:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8006046:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006048:	428a      	cmp	r2, r1
 800604a:	bf28      	it	cs
 800604c:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800604e:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006052:	4661      	mov	r1, ip
 8006054:	f000 fc0e 	bl	8006874 <USBD_CtlContinueRx>
 8006058:	e7d6      	b.n	8006008 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800605a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800605e:	6912      	ldr	r2, [r2, #16]
 8006060:	2a00      	cmp	r2, #0
 8006062:	d0eb      	beq.n	800603c <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 8006064:	f8c0 32d4 	str.w	r3, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006068:	4790      	blx	r2
 800606a:	e7e7      	b.n	800603c <USBD_LL_DataOutStage+0x44>

0800606c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006070:	b961      	cbnz	r1, 800608c <USBD_LL_DataInStage+0x20>
 8006072:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006074:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006078:	2a02      	cmp	r2, #2
 800607a:	d016      	beq.n	80060aa <USBD_LL_DataInStage+0x3e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800607c:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8006080:	b113      	cbz	r3, 8006088 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8006088:	2000      	movs	r0, #0
 800608a:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006090:	2b03      	cmp	r3, #3
 8006092:	d1f9      	bne.n	8006088 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 8006094:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f4      	beq.n	8006088 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 800609e:	2200      	movs	r2, #0
}
 80060a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80060a4:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80060a8:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80060aa:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 80060ae:	42b2      	cmp	r2, r6
 80060b0:	460d      	mov	r5, r1
 80060b2:	d810      	bhi.n	80060d6 <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 80060b4:	d01b      	beq.n	80060ee <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b6:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d024      	beq.n	8006108 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060be:	2180      	movs	r1, #128	@ 0x80
 80060c0:	4620      	mov	r0, r4
 80060c2:	f000 fe3b 	bl	8006d3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fbe8 	bl	800689c <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 80060cc:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0d9      	beq.n	8006088 <USBD_LL_DataInStage+0x1c>
 80060d4:	e7d5      	b.n	8006082 <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 80060d6:	1b92      	subs	r2, r2, r6
 80060d8:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060da:	4619      	mov	r1, r3
 80060dc:	f000 fbb4 	bl	8006848 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060e0:	462b      	mov	r3, r5
 80060e2:	462a      	mov	r2, r5
 80060e4:	4629      	mov	r1, r5
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 fe6c 	bl	8006dc4 <USBD_LL_PrepareReceive>
 80060ec:	e7c6      	b.n	800607c <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 80060ee:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d8e0      	bhi.n	80060b6 <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 80060f4:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d2dc      	bcs.n	80060b6 <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060fc:	460a      	mov	r2, r1
 80060fe:	f000 fba3 	bl	8006848 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006102:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 8006106:	e7eb      	b.n	80060e0 <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006108:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0d5      	beq.n	80060be <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 8006112:	2200      	movs	r2, #0
 8006114:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006118:	4620      	mov	r0, r4
 800611a:	4798      	blx	r3
 800611c:	e7cf      	b.n	80060be <USBD_LL_DataInStage+0x52>
 800611e:	bf00      	nop

08006120 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006122:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8006126:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006128:	2201      	movs	r2, #1
 800612a:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
{
 800612e:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 8006130:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006132:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 8006136:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800613a:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 800613e:	b11b      	cbz	r3, 8006148 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	b10b      	cbz	r3, 8006148 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006144:	4798      	blx	r3
 8006146:	b9b0      	cbnz	r0, 8006176 <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8006148:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800614a:	2200      	movs	r2, #0
 800614c:	2340      	movs	r3, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800614e:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006150:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006152:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006154:	4620      	mov	r0, r4
 8006156:	f000 fdd7 	bl	8006d08 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800615a:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800615e:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006162:	462b      	mov	r3, r5
 8006164:	2200      	movs	r2, #0
 8006166:	2180      	movs	r1, #128	@ 0x80
 8006168:	4620      	mov	r0, r4
 800616a:	f000 fdcd 	bl	8006d08 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800616e:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006170:	6225      	str	r5, [r4, #32]

  return ret;
}
 8006172:	4638      	mov	r0, r7
 8006174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 8006176:	2703      	movs	r7, #3
 8006178:	e7e7      	b.n	800614a <USBD_LL_Reset+0x2a>
 800617a:	bf00      	nop

0800617c <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800617c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800617e:	2000      	movs	r0, #0
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop

08006184 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8006184:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
{
 8006188:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800618a:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d

  return USBD_OK;
}
 8006192:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006194:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop

0800619c <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800619c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d104      	bne.n	80061ae <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061a4:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 80061ae:	2000      	movs	r0, #0
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop

080061b4 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80061b8:	2a03      	cmp	r2, #3
 80061ba:	d001      	beq.n	80061c0 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80061bc:	2000      	movs	r0, #0
 80061be:	4770      	bx	lr
{
 80061c0:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 80061c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80061c6:	b113      	cbz	r3, 80061ce <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	b103      	cbz	r3, 80061ce <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 80061cc:	4798      	blx	r3
}
 80061ce:	2000      	movs	r0, #0
 80061d0:	bd08      	pop	{r3, pc}
 80061d2:	bf00      	nop

080061d4 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 80061d4:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80061d8:	32ae      	adds	r2, #174	@ 0xae
 80061da:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80061de:	b162      	cbz	r2, 80061fa <USBD_LL_IsoINIncomplete+0x26>
{
 80061e0:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d001      	beq.n	80061ee <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80061ea:	2000      	movs	r0, #0
}
 80061ec:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80061ee:	6a13      	ldr	r3, [r2, #32]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0fa      	beq.n	80061ea <USBD_LL_IsoINIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80061f4:	4798      	blx	r3
  return USBD_OK;
 80061f6:	2000      	movs	r0, #0
}
 80061f8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80061fa:	2003      	movs	r0, #3
}
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop

08006200 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8006200:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8006204:	32ae      	adds	r2, #174	@ 0xae
 8006206:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800620a:	b162      	cbz	r2, 8006226 <USBD_LL_IsoOUTIncomplete+0x26>
{
 800620c:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006212:	2b03      	cmp	r3, #3
 8006214:	d001      	beq.n	800621a <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006216:	2000      	movs	r0, #0
}
 8006218:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800621a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0fa      	beq.n	8006216 <USBD_LL_IsoOUTIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006220:	4798      	blx	r3
  return USBD_OK;
 8006222:	2000      	movs	r0, #0
}
 8006224:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006226:	2003      	movs	r0, #3
}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop

0800622c <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 800622c:	2000      	movs	r0, #0
 800622e:	4770      	bx	lr

08006230 <USBD_LL_DevDisconnected>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006230:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006234:	2101      	movs	r1, #1
 8006236:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass[0] != NULL)
 800623a:	b142      	cbz	r2, 800624e <USBD_LL_DevDisconnected+0x1e>
{
 800623c:	b508      	push	{r3, lr}
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800623e:	6852      	ldr	r2, [r2, #4]
 8006240:	7901      	ldrb	r1, [r0, #4]
 8006242:	4790      	blx	r2
 8006244:	b908      	cbnz	r0, 800624a <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 8006246:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006248:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800624a:	2003      	movs	r0, #3
}
 800624c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800624e:	2000      	movs	r0, #0
}
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop

08006254 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006254:	2000      	movs	r0, #0
 8006256:	4770      	bx	lr

08006258 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 8006258:	2000      	movs	r0, #0
 800625a:	4770      	bx	lr

0800625c <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800625c:	7802      	ldrb	r2, [r0, #0]
 800625e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8006262:	4594      	cmp	ip, r2
 8006264:	4613      	mov	r3, r2
 8006266:	d803      	bhi.n	8006270 <USBD_GetEpDesc+0x14>
 8006268:	e00c      	b.n	8006284 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 800626a:	459c      	cmp	ip, r3
 800626c:	d90a      	bls.n	8006284 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800626e:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006270:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 8006272:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006274:	7842      	ldrb	r2, [r0, #1]
 8006276:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 8006278:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800627a:	d1f6      	bne.n	800626a <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800627c:	7882      	ldrb	r2, [r0, #2]
 800627e:	428a      	cmp	r2, r1
 8006280:	d1f3      	bne.n	800626a <USBD_GetEpDesc+0xe>
}
 8006282:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006284:	2000      	movs	r0, #0
}
 8006286:	4770      	bx	lr

08006288 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	780b      	ldrb	r3, [r1, #0]
 800628c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006290:	2b20      	cmp	r3, #32
{
 8006292:	b082      	sub	sp, #8
 8006294:	460d      	mov	r5, r1
 8006296:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006298:	d00e      	beq.n	80062b8 <USBD_StdDevReq+0x30>
 800629a:	2b40      	cmp	r3, #64	@ 0x40
 800629c:	d00c      	beq.n	80062b8 <USBD_StdDevReq+0x30>
 800629e:	b1bb      	cbz	r3, 80062d0 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062a0:	2180      	movs	r1, #128	@ 0x80
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 fd4a 	bl	8006d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062a8:	2100      	movs	r1, #0
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 fd46 	bl	8006d3c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80062b0:	2500      	movs	r5, #0
}
 80062b2:	4628      	mov	r0, r5
 80062b4:	b002      	add	sp, #8
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062b8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80062bc:	33ae      	adds	r3, #174	@ 0xae
 80062be:	4629      	mov	r1, r5
 80062c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	4620      	mov	r0, r4
}
 80062c8:	b002      	add	sp, #8
 80062ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062ce:	4718      	bx	r3
      switch (req->bRequest)
 80062d0:	784b      	ldrb	r3, [r1, #1]
 80062d2:	2b09      	cmp	r3, #9
 80062d4:	d8e4      	bhi.n	80062a0 <USBD_StdDevReq+0x18>
 80062d6:	a201      	add	r2, pc, #4	@ (adr r2, 80062dc <USBD_StdDevReq+0x54>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	0800633d 	.word	0x0800633d
 80062e0:	08006365 	.word	0x08006365
 80062e4:	080062a1 	.word	0x080062a1
 80062e8:	08006383 	.word	0x08006383
 80062ec:	080062a1 	.word	0x080062a1
 80062f0:	0800639b 	.word	0x0800639b
 80062f4:	080063db 	.word	0x080063db
 80062f8:	080062a1 	.word	0x080062a1
 80062fc:	08006411 	.word	0x08006411
 8006300:	08006305 	.word	0x08006305
  cfgidx = (uint8_t)(req->wValue);
 8006304:	7889      	ldrb	r1, [r1, #2]
 8006306:	4db4      	ldr	r5, [pc, #720]	@ (80065d8 <USBD_StdDevReq+0x350>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006308:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800630a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800630c:	f200 8140 	bhi.w	8006590 <USBD_StdDevReq+0x308>
  switch (pdev->dev_state)
 8006310:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006314:	2b02      	cmp	r3, #2
 8006316:	b2de      	uxtb	r6, r3
 8006318:	f000 8126 	beq.w	8006568 <USBD_StdDevReq+0x2e0>
 800631c:	2e03      	cmp	r6, #3
 800631e:	f000 8101 	beq.w	8006524 <USBD_StdDevReq+0x29c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006322:	2180      	movs	r1, #128	@ 0x80
 8006324:	f000 fd0a 	bl	8006d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006328:	2100      	movs	r1, #0
 800632a:	4620      	mov	r0, r4
 800632c:	f000 fd06 	bl	8006d3c <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006330:	7829      	ldrb	r1, [r5, #0]
 8006332:	4620      	mov	r0, r4
 8006334:	f7ff fe26 	bl	8005f84 <USBD_ClrClassConfig>
    return USBD_FAIL;
 8006338:	2503      	movs	r5, #3
 800633a:	e7ba      	b.n	80062b2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800633c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006340:	3b01      	subs	r3, #1
 8006342:	2b02      	cmp	r3, #2
 8006344:	d8ac      	bhi.n	80062a0 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8006346:	88ca      	ldrh	r2, [r1, #6]
 8006348:	2a02      	cmp	r2, #2
 800634a:	d1a9      	bne.n	80062a0 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 800634c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8006350:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006352:	2b00      	cmp	r3, #0
 8006354:	bf0c      	ite	eq
 8006356:	2301      	moveq	r3, #1
 8006358:	2303      	movne	r3, #3
 800635a:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800635e:	f000 fa65 	bl	800682c <USBD_CtlSendData>
      break;
 8006362:	e7a5      	b.n	80062b0 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8006364:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006368:	3b01      	subs	r3, #1
 800636a:	2b02      	cmp	r3, #2
 800636c:	d898      	bhi.n	80062a0 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800636e:	884b      	ldrh	r3, [r1, #2]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d19d      	bne.n	80062b0 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800637a:	4620      	mov	r0, r4
 800637c:	f000 fa82 	bl	8006884 <USBD_CtlSendStatus>
 8006380:	e796      	b.n	80062b0 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006382:	884b      	ldrh	r3, [r1, #2]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d0f6      	beq.n	8006376 <USBD_StdDevReq+0xee>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006388:	2b02      	cmp	r3, #2
 800638a:	d189      	bne.n	80062a0 <USBD_StdDevReq+0x18>
    pdev->dev_test_mode = req->wIndex >> 8;
 800638c:	888b      	ldrh	r3, [r1, #4]
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006394:	f000 fa76 	bl	8006884 <USBD_CtlSendStatus>
 8006398:	e78a      	b.n	80062b0 <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800639a:	888b      	ldrh	r3, [r1, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	f47f af7f 	bne.w	80062a0 <USBD_StdDevReq+0x18>
 80063a2:	88cb      	ldrh	r3, [r1, #6]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f47f af7b 	bne.w	80062a0 <USBD_StdDevReq+0x18>
 80063aa:	884d      	ldrh	r5, [r1, #2]
 80063ac:	2d7f      	cmp	r5, #127	@ 0x7f
 80063ae:	f63f af77 	bhi.w	80062a0 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	f43f af72 	beq.w	80062a0 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80063bc:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80063be:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063c2:	f000 fce7 	bl	8006d94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 fa5c 	bl	8006884 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80063cc:	2d00      	cmp	r5, #0
 80063ce:	f000 80ff 	beq.w	80065d0 <USBD_StdDevReq+0x348>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063d2:	2302      	movs	r3, #2
 80063d4:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80063d8:	e76a      	b.n	80062b0 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 80063da:	884a      	ldrh	r2, [r1, #2]
 80063dc:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 80063de:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 80063e0:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 80063e2:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 80063e6:	2b06      	cmp	r3, #6
 80063e8:	f63f af5a 	bhi.w	80062a0 <USBD_StdDevReq+0x18>
 80063ec:	a101      	add	r1, pc, #4	@ (adr r1, 80063f4 <USBD_StdDevReq+0x16c>)
 80063ee:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	080064b5 	.word	0x080064b5
 80063f8:	0800649b 	.word	0x0800649b
 80063fc:	08006489 	.word	0x08006489
 8006400:	080062a1 	.word	0x080062a1
 8006404:	080062a1 	.word	0x080062a1
 8006408:	08006473 	.word	0x08006473
 800640c:	08006437 	.word	0x08006437
  if (req->wLength != 1U)
 8006410:	88ca      	ldrh	r2, [r1, #6]
 8006412:	2a01      	cmp	r2, #1
 8006414:	f47f af44 	bne.w	80062a0 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8006418:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 800641c:	2902      	cmp	r1, #2
 800641e:	b2cb      	uxtb	r3, r1
 8006420:	d879      	bhi.n	8006516 <USBD_StdDevReq+0x28e>
 8006422:	2b00      	cmp	r3, #0
 8006424:	f43f af3c 	beq.w	80062a0 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8006428:	4601      	mov	r1, r0
 800642a:	2300      	movs	r3, #0
 800642c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006430:	f000 f9fc 	bl	800682c <USBD_CtlSendData>
        break;
 8006434:	e73c      	b.n	80062b0 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006436:	7c03      	ldrb	r3, [r0, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f47f af31 	bne.w	80062a0 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800643e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006442:	f10d 0006 	add.w	r0, sp, #6
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800644a:	2307      	movs	r3, #7
 800644c:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800644e:	88eb      	ldrh	r3, [r5, #6]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d092      	beq.n	800637a <USBD_StdDevReq+0xf2>
    if (len != 0U)
 8006454:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006458:	2a00      	cmp	r2, #0
 800645a:	f43f af21 	beq.w	80062a0 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 800645e:	429a      	cmp	r2, r3
 8006460:	bf28      	it	cs
 8006462:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006464:	4601      	mov	r1, r0
 8006466:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8006468:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800646c:	f000 f9de 	bl	800682c <USBD_CtlSendData>
 8006470:	e71e      	b.n	80062b0 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006472:	7c03      	ldrb	r3, [r0, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f47f af13 	bne.w	80062a0 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800647a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800647e:	f10d 0006 	add.w	r0, sp, #6
 8006482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006484:	4798      	blx	r3
  if (err != 0U)
 8006486:	e7e2      	b.n	800644e <USBD_StdDevReq+0x1c6>
      switch ((uint8_t)(req->wValue))
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	2a05      	cmp	r2, #5
 800648c:	f63f af08 	bhi.w	80062a0 <USBD_StdDevReq+0x18>
 8006490:	e8df f002 	tbb	[pc, r2]
 8006494:	292f353b 	.word	0x292f353b
 8006498:	1823      	.short	0x1823
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800649a:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800649c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	f040 8087 	bne.w	80065b4 <USBD_StdDevReq+0x32c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80064a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a8:	f10d 0006 	add.w	r0, sp, #6
 80064ac:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064ae:	2302      	movs	r3, #2
 80064b0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80064b2:	e7cc      	b.n	800644e <USBD_StdDevReq+0x1c6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064b8:	7c00      	ldrb	r0, [r0, #16]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f10d 0106 	add.w	r1, sp, #6
 80064c0:	4798      	blx	r3
  if (err != 0U)
 80064c2:	e7c4      	b.n	800644e <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f43f aee8 	beq.w	80062a0 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064d0:	7c20      	ldrb	r0, [r4, #16]
 80064d2:	f10d 0106 	add.w	r1, sp, #6
 80064d6:	4798      	blx	r3
  if (err != 0U)
 80064d8:	e7b9      	b.n	800644e <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1f5      	bne.n	80064d0 <USBD_StdDevReq+0x248>
 80064e4:	e6dc      	b.n	80062a0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ef      	bne.n	80064d0 <USBD_StdDevReq+0x248>
 80064f0:	e6d6      	b.n	80062a0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e9      	bne.n	80064d0 <USBD_StdDevReq+0x248>
 80064fc:	e6d0      	b.n	80062a0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80064fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e3      	bne.n	80064d0 <USBD_StdDevReq+0x248>
 8006508:	e6ca      	b.n	80062a0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800650a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1dd      	bne.n	80064d0 <USBD_StdDevReq+0x248>
 8006514:	e6c4      	b.n	80062a0 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8006516:	2b03      	cmp	r3, #3
 8006518:	f47f aec2 	bne.w	80062a0 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800651c:	1d01      	adds	r1, r0, #4
 800651e:	f000 f985 	bl	800682c <USBD_CtlSendData>
        break;
 8006522:	e6c5      	b.n	80062b0 <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 8006524:	2900      	cmp	r1, #0
 8006526:	d03b      	beq.n	80065a0 <USBD_StdDevReq+0x318>
      else if (cfgidx != pdev->dev_config)
 8006528:	6841      	ldr	r1, [r0, #4]
 800652a:	2901      	cmp	r1, #1
 800652c:	f43f af25 	beq.w	800637a <USBD_StdDevReq+0xf2>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006530:	b2c9      	uxtb	r1, r1
 8006532:	f7ff fd27 	bl	8005f84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006536:	7829      	ldrb	r1, [r5, #0]
 8006538:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800653a:	4620      	mov	r0, r4
 800653c:	f7ff fd1a 	bl	8005f74 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006540:	4605      	mov	r5, r0
 8006542:	2800      	cmp	r0, #0
 8006544:	f43f af19 	beq.w	800637a <USBD_StdDevReq+0xf2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006548:	2180      	movs	r1, #128	@ 0x80
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fbf6 	bl	8006d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006550:	2100      	movs	r1, #0
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fbf2 	bl	8006d3c <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006558:	7921      	ldrb	r1, [r4, #4]
 800655a:	4620      	mov	r0, r4
 800655c:	f7ff fd12 	bl	8005f84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006560:	2302      	movs	r3, #2
 8006562:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006566:	e6a4      	b.n	80062b2 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 8006568:	2900      	cmp	r1, #0
 800656a:	f43f af06 	beq.w	800637a <USBD_StdDevReq+0xf2>
        pdev->dev_config = cfgidx;
 800656e:	2101      	movs	r1, #1
 8006570:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006572:	f7ff fcff 	bl	8005f74 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006576:	4605      	mov	r5, r0
 8006578:	b318      	cbz	r0, 80065c2 <USBD_StdDevReq+0x33a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800657a:	2180      	movs	r1, #128	@ 0x80
 800657c:	4620      	mov	r0, r4
 800657e:	f000 fbdd 	bl	8006d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006582:	2100      	movs	r1, #0
 8006584:	4620      	mov	r0, r4
 8006586:	f000 fbd9 	bl	8006d3c <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800658a:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 800658e:	e690      	b.n	80062b2 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006590:	2180      	movs	r1, #128	@ 0x80
 8006592:	f000 fbd3 	bl	8006d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006596:	2100      	movs	r1, #0
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fbcf 	bl	8006d3c <USBD_LL_StallEP>
    return USBD_FAIL;
 800659e:	e6cb      	b.n	8006338 <USBD_StdDevReq+0xb0>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065a0:	2302      	movs	r3, #2
 80065a2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80065a6:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065a8:	f7ff fcec 	bl	8005f84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 f969 	bl	8006884 <USBD_CtlSendStatus>
 80065b2:	e67d      	b.n	80062b0 <USBD_StdDevReq+0x28>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	f10d 0006 	add.w	r0, sp, #6
 80065ba:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065bc:	2302      	movs	r3, #2
 80065be:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80065c0:	e745      	b.n	800644e <USBD_StdDevReq+0x1c6>
          (void)USBD_CtlSendStatus(pdev);
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f95e 	bl	8006884 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065c8:	2303      	movs	r3, #3
 80065ca:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80065ce:	e66f      	b.n	80062b0 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80065d6:	e66b      	b.n	80062b0 <USBD_StdDevReq+0x28>
 80065d8:	200009e8 	.word	0x200009e8

080065dc <USBD_StdItfReq>:
{
 80065dc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065de:	780b      	ldrb	r3, [r1, #0]
 80065e0:	065a      	lsls	r2, r3, #25
{
 80065e2:	460d      	mov	r5, r1
 80065e4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e6:	d50c      	bpl.n	8006602 <USBD_StdItfReq+0x26>
 80065e8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80065ec:	2a40      	cmp	r2, #64	@ 0x40
 80065ee:	d008      	beq.n	8006602 <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80065f0:	2180      	movs	r1, #128	@ 0x80
 80065f2:	f000 fba3 	bl	8006d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065f6:	2100      	movs	r1, #0
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fb9f 	bl	8006d3c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80065fe:	2000      	movs	r0, #0
}
 8006600:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8006602:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006606:	3b01      	subs	r3, #1
 8006608:	2b02      	cmp	r3, #2
 800660a:	d802      	bhi.n	8006612 <USBD_StdItfReq+0x36>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800660c:	7929      	ldrb	r1, [r5, #4]
 800660e:	2901      	cmp	r1, #1
 8006610:	d908      	bls.n	8006624 <USBD_StdItfReq+0x48>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006612:	2180      	movs	r1, #128	@ 0x80
 8006614:	4620      	mov	r0, r4
 8006616:	f000 fb91 	bl	8006d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800661a:	2100      	movs	r1, #0
 800661c:	4620      	mov	r0, r4
 800661e:	f000 fb8d 	bl	8006d3c <USBD_LL_StallEP>
}
 8006622:	e7ec      	b.n	80065fe <USBD_StdItfReq+0x22>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff fe15 	bl	8006254 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800662a:	b988      	cbnz	r0, 8006650 <USBD_StdItfReq+0x74>
              if (pdev->pClass[idx]->Setup != NULL)
 800662c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	b16b      	cbz	r3, 8006650 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8006634:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006638:	4629      	mov	r1, r5
 800663a:	4620      	mov	r0, r4
 800663c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800663e:	88ea      	ldrh	r2, [r5, #6]
 8006640:	2a00      	cmp	r2, #0
 8006642:	d1dd      	bne.n	8006600 <USBD_StdItfReq+0x24>
 8006644:	2800      	cmp	r0, #0
 8006646:	d1db      	bne.n	8006600 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8006648:	4620      	mov	r0, r4
 800664a:	f000 f91b 	bl	8006884 <USBD_CtlSendStatus>
 800664e:	e7d6      	b.n	80065fe <USBD_StdItfReq+0x22>
                ret = USBD_FAIL;
 8006650:	2003      	movs	r0, #3
}
 8006652:	bd38      	pop	{r3, r4, r5, pc}

08006654 <USBD_StdEPReq>:
{
 8006654:	b530      	push	{r4, r5, lr}
 8006656:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 8006658:	888a      	ldrh	r2, [r1, #4]
 800665a:	7823      	ldrb	r3, [r4, #0]
 800665c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006660:	2b20      	cmp	r3, #32
{
 8006662:	b083      	sub	sp, #12
 8006664:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 8006666:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006668:	d01e      	beq.n	80066a8 <USBD_StdEPReq+0x54>
 800666a:	2b40      	cmp	r3, #64	@ 0x40
 800666c:	d01c      	beq.n	80066a8 <USBD_StdEPReq+0x54>
 800666e:	b36b      	cbz	r3, 80066cc <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006670:	2180      	movs	r1, #128	@ 0x80
 8006672:	4628      	mov	r0, r5
 8006674:	f000 fb62 	bl	8006d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006678:	2100      	movs	r1, #0
 800667a:	4628      	mov	r0, r5
 800667c:	f000 fb5e 	bl	8006d3c <USBD_LL_StallEP>
}
 8006680:	2000      	movs	r0, #0
 8006682:	b003      	add	sp, #12
 8006684:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 8006686:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800668a:	2b02      	cmp	r3, #2
 800668c:	b2da      	uxtb	r2, r3
 800668e:	d05e      	beq.n	800674e <USBD_StdEPReq+0xfa>
 8006690:	2a03      	cmp	r2, #3
 8006692:	d1ed      	bne.n	8006670 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006694:	8863      	ldrh	r3, [r4, #2]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f2      	bne.n	8006680 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800669a:	064b      	lsls	r3, r1, #25
 800669c:	d17d      	bne.n	800679a <USBD_StdEPReq+0x146>
                (void)USBD_CtlSendStatus(pdev);
 800669e:	4628      	mov	r0, r5
 80066a0:	9101      	str	r1, [sp, #4]
 80066a2:	f000 f8ef 	bl	8006884 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066a6:	9901      	ldr	r1, [sp, #4]
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7ff fdd5 	bl	8006258 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d1e6      	bne.n	8006680 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 80066b2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
                  pdev->classId = idx;
 80066b6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0df      	beq.n	8006680 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066c0:	4621      	mov	r1, r4
 80066c2:	4628      	mov	r0, r5
}
 80066c4:	b003      	add	sp, #12
 80066c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066ca:	4718      	bx	r3
      switch (req->bRequest)
 80066cc:	7863      	ldrb	r3, [r4, #1]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d0d9      	beq.n	8006686 <USBD_StdEPReq+0x32>
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d02a      	beq.n	800672c <USBD_StdEPReq+0xd8>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1ca      	bne.n	8006670 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 80066da:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80066de:	2b02      	cmp	r3, #2
 80066e0:	b2d8      	uxtb	r0, r3
 80066e2:	d03d      	beq.n	8006760 <USBD_StdEPReq+0x10c>
 80066e4:	2803      	cmp	r0, #3
 80066e6:	d1c3      	bne.n	8006670 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066e8:	f001 030f 	and.w	r3, r1, #15
 80066ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80066f0:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066f2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80066f6:	d442      	bmi.n	800677e <USBD_StdEPReq+0x12a>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066f8:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0b7      	beq.n	8006670 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006700:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8006704:	2414      	movs	r4, #20
 8006706:	fb04 5403 	mla	r4, r4, r3, r5
 800670a:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800670e:	2b00      	cmp	r3, #0
 8006710:	d041      	beq.n	8006796 <USBD_StdEPReq+0x142>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006712:	4628      	mov	r0, r5
 8006714:	f000 fb2a 	bl	8006d6c <USBD_LL_IsStallEP>
 8006718:	2800      	cmp	r0, #0
 800671a:	d03c      	beq.n	8006796 <USBD_StdEPReq+0x142>
 800671c:	2301      	movs	r3, #1
                pep->status = 0x0000U;
 800671e:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006720:	2202      	movs	r2, #2
 8006722:	4621      	mov	r1, r4
 8006724:	4628      	mov	r0, r5
 8006726:	f000 f881 	bl	800682c <USBD_CtlSendData>
              break;
 800672a:	e7a9      	b.n	8006680 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 800672c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006730:	2b02      	cmp	r3, #2
 8006732:	b2da      	uxtb	r2, r3
 8006734:	d00b      	beq.n	800674e <USBD_StdEPReq+0xfa>
 8006736:	2a03      	cmp	r2, #3
 8006738:	d19a      	bne.n	8006670 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800673a:	8863      	ldrh	r3, [r4, #2]
 800673c:	b91b      	cbnz	r3, 8006746 <USBD_StdEPReq+0xf2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800673e:	0648      	lsls	r0, r1, #25
 8006740:	d001      	beq.n	8006746 <USBD_StdEPReq+0xf2>
 8006742:	88e3      	ldrh	r3, [r4, #6]
 8006744:	b373      	cbz	r3, 80067a4 <USBD_StdEPReq+0x150>
              (void)USBD_CtlSendStatus(pdev);
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f89c 	bl	8006884 <USBD_CtlSendStatus>
              break;
 800674c:	e798      	b.n	8006680 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800674e:	064a      	lsls	r2, r1, #25
 8006750:	d08e      	beq.n	8006670 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006752:	f000 faf3 	bl	8006d3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006756:	2180      	movs	r1, #128	@ 0x80
 8006758:	4628      	mov	r0, r5
 800675a:	f000 faef 	bl	8006d3c <USBD_LL_StallEP>
 800675e:	e78f      	b.n	8006680 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006760:	0648      	lsls	r0, r1, #25
 8006762:	d185      	bne.n	8006670 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006764:	0611      	lsls	r1, r2, #24
 8006766:	bf4c      	ite	mi
 8006768:	f105 0114 	addmi.w	r1, r5, #20
 800676c:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 8006770:	2300      	movs	r3, #0
 8006772:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006774:	2202      	movs	r2, #2
 8006776:	4628      	mov	r0, r5
 8006778:	f000 f858 	bl	800682c <USBD_CtlSendData>
              break;
 800677c:	e780      	b.n	8006680 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800677e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	f43f af75 	beq.w	8006670 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006786:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800678a:	1c5c      	adds	r4, r3, #1
 800678c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006790:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8006794:	e7bb      	b.n	800670e <USBD_StdEPReq+0xba>
{
 8006796:	2300      	movs	r3, #0
 8006798:	e7c1      	b.n	800671e <USBD_StdEPReq+0xca>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800679a:	9101      	str	r1, [sp, #4]
 800679c:	f000 fada 	bl	8006d54 <USBD_LL_ClearStallEP>
 80067a0:	9901      	ldr	r1, [sp, #4]
 80067a2:	e77c      	b.n	800669e <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067a4:	4628      	mov	r0, r5
 80067a6:	f000 fac9 	bl	8006d3c <USBD_LL_StallEP>
 80067aa:	e7cc      	b.n	8006746 <USBD_StdEPReq+0xf2>

080067ac <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80067ac:	780b      	ldrb	r3, [r1, #0]
 80067ae:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80067b0:	784b      	ldrb	r3, [r1, #1]
 80067b2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 80067b4:	884b      	ldrh	r3, [r1, #2]
 80067b6:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 80067b8:	888b      	ldrh	r3, [r1, #4]
 80067ba:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 80067bc:	88cb      	ldrh	r3, [r1, #6]
 80067be:	80c3      	strh	r3, [r0, #6]
}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop

080067c4 <USBD_CtlError>:
{
 80067c4:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067c6:	2180      	movs	r1, #128	@ 0x80
{
 80067c8:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ca:	f000 fab7 	bl	8006d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80067ce:	4620      	mov	r0, r4
 80067d0:	2100      	movs	r1, #0
}
 80067d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80067d6:	f000 bab1 	b.w	8006d3c <USBD_LL_StallEP>
 80067da:	bf00      	nop

080067dc <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80067dc:	b308      	cbz	r0, 8006822 <USBD_GetString+0x46>
{
 80067de:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80067e0:	7803      	ldrb	r3, [r0, #0]
 80067e2:	460e      	mov	r6, r1
 80067e4:	4614      	mov	r4, r2
 80067e6:	4605      	mov	r5, r0
 80067e8:	b1e3      	cbz	r3, 8006824 <USBD_GetString+0x48>
 80067ea:	3001      	adds	r0, #1
 80067ec:	f7f9 fd48 	bl	8000280 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	3301      	adds	r3, #1
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80067fc:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80067fe:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006800:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 8006802:	782c      	ldrb	r4, [r5, #0]
 8006804:	b164      	cbz	r4, 8006820 <USBD_GetString+0x44>
 8006806:	4628      	mov	r0, r5
  idx++;
 8006808:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800680a:	2100      	movs	r1, #0
    idx++;
 800680c:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800680e:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8006810:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 8006812:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 8006814:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8006818:	3302      	adds	r3, #2
 800681a:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800681c:	2c00      	cmp	r4, #0
 800681e:	d1f5      	bne.n	800680c <USBD_GetString+0x30>
}
 8006820:	bd70      	pop	{r4, r5, r6, pc}
 8006822:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8006824:	2202      	movs	r2, #2
 8006826:	4613      	mov	r3, r2
 8006828:	e7e7      	b.n	80067fa <USBD_GetString+0x1e>
 800682a:	bf00      	nop

0800682c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800682c:	b508      	push	{r3, lr}
 800682e:	4613      	mov	r3, r2
 8006830:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006832:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 8006834:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006838:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800683c:	2100      	movs	r1, #0
 800683e:	f000 fab5 	bl	8006dac <USBD_LL_Transmit>

  return USBD_OK;
}
 8006842:	2000      	movs	r0, #0
 8006844:	bd08      	pop	{r3, pc}
 8006846:	bf00      	nop

08006848 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006848:	b508      	push	{r3, lr}
 800684a:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800684c:	460a      	mov	r2, r1
 800684e:	2100      	movs	r1, #0
 8006850:	f000 faac 	bl	8006dac <USBD_LL_Transmit>

  return USBD_OK;
}
 8006854:	2000      	movs	r0, #0
 8006856:	bd08      	pop	{r3, pc}

08006858 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006858:	b508      	push	{r3, lr}
 800685a:	4613      	mov	r3, r2
 800685c:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800685e:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 8006860:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006864:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006868:	2100      	movs	r1, #0
 800686a:	f000 faab 	bl	8006dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800686e:	2000      	movs	r0, #0
 8006870:	bd08      	pop	{r3, pc}
 8006872:	bf00      	nop

08006874 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006874:	b508      	push	{r3, lr}
 8006876:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006878:	460a      	mov	r2, r1
 800687a:	2100      	movs	r1, #0
 800687c:	f000 faa2 	bl	8006dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006880:	2000      	movs	r0, #0
 8006882:	bd08      	pop	{r3, pc}

08006884 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006884:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006886:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006888:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800688a:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800688e:	461a      	mov	r2, r3
 8006890:	4619      	mov	r1, r3
 8006892:	f000 fa8b 	bl	8006dac <USBD_LL_Transmit>

  return USBD_OK;
}
 8006896:	2000      	movs	r0, #0
 8006898:	bd08      	pop	{r3, pc}
 800689a:	bf00      	nop

0800689c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800689c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800689e:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068a0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068a2:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068a6:	461a      	mov	r2, r3
 80068a8:	4619      	mov	r1, r3
 80068aa:	f000 fa8b 	bl	8006dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80068ae:	2000      	movs	r0, #0
 80068b0:	bd08      	pop	{r3, pc}
 80068b2:	bf00      	nop

080068b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80068b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80068b6:	4918      	ldr	r1, [pc, #96]	@ (8006918 <MX_USB_DEVICE_Init+0x64>)
 80068b8:	4818      	ldr	r0, [pc, #96]	@ (800691c <MX_USB_DEVICE_Init+0x68>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	f7ff fb28 	bl	8005f10 <USBD_Init>
 80068c0:	b970      	cbnz	r0, 80068e0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80068c2:	4917      	ldr	r1, [pc, #92]	@ (8006920 <MX_USB_DEVICE_Init+0x6c>)
 80068c4:	4815      	ldr	r0, [pc, #84]	@ (800691c <MX_USB_DEVICE_Init+0x68>)
 80068c6:	f7ff fb37 	bl	8005f38 <USBD_RegisterClass>
 80068ca:	b988      	cbnz	r0, 80068f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80068cc:	4915      	ldr	r1, [pc, #84]	@ (8006924 <MX_USB_DEVICE_Init+0x70>)
 80068ce:	4813      	ldr	r0, [pc, #76]	@ (800691c <MX_USB_DEVICE_Init+0x68>)
 80068d0:	f7ff fade 	bl	8005e90 <USBD_CDC_RegisterInterface>
 80068d4:	b9a0      	cbnz	r0, 8006900 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80068d6:	4811      	ldr	r0, [pc, #68]	@ (800691c <MX_USB_DEVICE_Init+0x68>)
 80068d8:	f7ff fb4a 	bl	8005f70 <USBD_Start>
 80068dc:	b9b8      	cbnz	r0, 800690e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80068e0:	f7fa fcf0 	bl	80012c4 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80068e4:	490e      	ldr	r1, [pc, #56]	@ (8006920 <MX_USB_DEVICE_Init+0x6c>)
 80068e6:	480d      	ldr	r0, [pc, #52]	@ (800691c <MX_USB_DEVICE_Init+0x68>)
 80068e8:	f7ff fb26 	bl	8005f38 <USBD_RegisterClass>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d0ed      	beq.n	80068cc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80068f0:	f7fa fce8 	bl	80012c4 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80068f4:	490b      	ldr	r1, [pc, #44]	@ (8006924 <MX_USB_DEVICE_Init+0x70>)
 80068f6:	4809      	ldr	r0, [pc, #36]	@ (800691c <MX_USB_DEVICE_Init+0x68>)
 80068f8:	f7ff faca 	bl	8005e90 <USBD_CDC_RegisterInterface>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d0ea      	beq.n	80068d6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8006900:	f7fa fce0 	bl	80012c4 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006904:	4805      	ldr	r0, [pc, #20]	@ (800691c <MX_USB_DEVICE_Init+0x68>)
 8006906:	f7ff fb33 	bl	8005f70 <USBD_Start>
 800690a:	2800      	cmp	r0, #0
 800690c:	d0e7      	beq.n	80068de <MX_USB_DEVICE_Init+0x2a>
}
 800690e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006912:	f7fa bcd7 	b.w	80012c4 <Error_Handler>
 8006916:	bf00      	nop
 8006918:	200000dc 	.word	0x200000dc
 800691c:	200009ec 	.word	0x200009ec
 8006920:	20000050 	.word	0x20000050
 8006924:	20000094 	.word	0x20000094

08006928 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006928:	2000      	movs	r0, #0
 800692a:	4770      	bx	lr

0800692c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800692c:	2000      	movs	r0, #0
 800692e:	4770      	bx	lr

08006930 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8006930:	2000      	movs	r0, #0
 8006932:	4770      	bx	lr

08006934 <CDC_Receive_FS>:
{
 8006934:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006936:	4c05      	ldr	r4, [pc, #20]	@ (800694c <CDC_Receive_FS+0x18>)
{
 8006938:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800693a:	4620      	mov	r0, r4
 800693c:	f7ff fac2 	bl	8005ec4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006940:	4620      	mov	r0, r4
 8006942:	f7ff facb 	bl	8005edc <USBD_CDC_ReceivePacket>
}
 8006946:	2000      	movs	r0, #0
 8006948:	bd10      	pop	{r4, pc}
 800694a:	bf00      	nop
 800694c:	200009ec 	.word	0x200009ec

08006950 <CDC_Init_FS>:
{
 8006950:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006952:	4c06      	ldr	r4, [pc, #24]	@ (800696c <CDC_Init_FS+0x1c>)
 8006954:	4906      	ldr	r1, [pc, #24]	@ (8006970 <CDC_Init_FS+0x20>)
 8006956:	2200      	movs	r2, #0
 8006958:	4620      	mov	r0, r4
 800695a:	f7ff faa5 	bl	8005ea8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800695e:	4905      	ldr	r1, [pc, #20]	@ (8006974 <CDC_Init_FS+0x24>)
 8006960:	4620      	mov	r0, r4
 8006962:	f7ff faaf 	bl	8005ec4 <USBD_CDC_SetRxBuffer>
}
 8006966:	2000      	movs	r0, #0
 8006968:	bd10      	pop	{r4, pc}
 800696a:	bf00      	nop
 800696c:	200009ec 	.word	0x200009ec
 8006970:	20000cc8 	.word	0x20000cc8
 8006974:	200014c8 	.word	0x200014c8

08006978 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006978:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800697a:	4801      	ldr	r0, [pc, #4]	@ (8006980 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800697c:	800b      	strh	r3, [r1, #0]
}
 800697e:	4770      	bx	lr
 8006980:	200000c8 	.word	0x200000c8

08006984 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006984:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006986:	4801      	ldr	r0, [pc, #4]	@ (800698c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006988:	800b      	strh	r3, [r1, #0]
}
 800698a:	4770      	bx	lr
 800698c:	200000c4 	.word	0x200000c4

08006990 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006990:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006992:	4c04      	ldr	r4, [pc, #16]	@ (80069a4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006994:	4804      	ldr	r0, [pc, #16]	@ (80069a8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 8006996:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006998:	4621      	mov	r1, r4
 800699a:	f7ff ff1f 	bl	80067dc <USBD_GetString>
  return USBD_StrDesc;
}
 800699e:	4620      	mov	r0, r4
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	bf00      	nop
 80069a4:	20001cc8 	.word	0x20001cc8
 80069a8:	0800aa84 	.word	0x0800aa84

080069ac <USBD_FS_ProductStrDescriptor>:
{
 80069ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069ae:	4c04      	ldr	r4, [pc, #16]	@ (80069c0 <USBD_FS_ProductStrDescriptor+0x14>)
 80069b0:	4804      	ldr	r0, [pc, #16]	@ (80069c4 <USBD_FS_ProductStrDescriptor+0x18>)
{
 80069b2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069b4:	4621      	mov	r1, r4
 80069b6:	f7ff ff11 	bl	80067dc <USBD_GetString>
}
 80069ba:	4620      	mov	r0, r4
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	bf00      	nop
 80069c0:	20001cc8 	.word	0x20001cc8
 80069c4:	0800aa98 	.word	0x0800aa98

080069c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069c8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069ca:	4c04      	ldr	r4, [pc, #16]	@ (80069dc <USBD_FS_ConfigStrDescriptor+0x14>)
 80069cc:	4804      	ldr	r0, [pc, #16]	@ (80069e0 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 80069ce:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069d0:	4621      	mov	r1, r4
 80069d2:	f7ff ff03 	bl	80067dc <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80069d6:	4620      	mov	r0, r4
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	bf00      	nop
 80069dc:	20001cc8 	.word	0x20001cc8
 80069e0:	0800aab0 	.word	0x0800aab0

080069e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069e4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069e6:	4c04      	ldr	r4, [pc, #16]	@ (80069f8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80069e8:	4804      	ldr	r0, [pc, #16]	@ (80069fc <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 80069ea:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069ec:	4621      	mov	r1, r4
 80069ee:	f7ff fef5 	bl	80067dc <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80069f2:	4620      	mov	r0, r4
 80069f4:	bd10      	pop	{r4, pc}
 80069f6:	bf00      	nop
 80069f8:	20001cc8 	.word	0x20001cc8
 80069fc:	0800aabc 	.word	0x0800aabc

08006a00 <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a00:	4a51      	ldr	r2, [pc, #324]	@ (8006b48 <USBD_FS_SerialStrDescriptor+0x148>)
 8006a02:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8006a06:	f8d2 0a18 	ldr.w	r0, [r2, #2584]	@ 0xa18
  *length = USB_SIZ_STRING_SERIAL;
 8006a0a:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 8006a0e:	181b      	adds	r3, r3, r0
  *length = USB_SIZ_STRING_SERIAL;
 8006a10:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 8006a14:	d101      	bne.n	8006a1a <USBD_FS_SerialStrDescriptor+0x1a>
}
 8006a16:	484d      	ldr	r0, [pc, #308]	@ (8006b4c <USBD_FS_SerialStrDescriptor+0x14c>)
 8006a18:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a1a:	f8d2 1a14 	ldr.w	r1, [r2, #2580]	@ 0xa14

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a1e:	4a4b      	ldr	r2, [pc, #300]	@ (8006b4c <USBD_FS_SerialStrDescriptor+0x14c>)
 8006a20:	0f18      	lsrs	r0, r3, #28
    if (((value >> 28)) < 0xA)
 8006a22:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006a26:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a2a:	bf2c      	ite	cs
 8006a2c:	3037      	addcs	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a2e:	3030      	addcc	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006a30:	f882 c003 	strb.w	ip, [r2, #3]
    if (((value >> 28)) < 0xA)
 8006a34:	f3c3 6c03 	ubfx	ip, r3, #24, #4
 8006a38:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a3c:	7090      	strb	r0, [r2, #2]
 8006a3e:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 8006a40:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a44:	bf8c      	ite	hi
 8006a46:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a48:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006a4a:	f882 c005 	strb.w	ip, [r2, #5]
    if (((value >> 28)) < 0xA)
 8006a4e:	f3c3 5c03 	ubfx	ip, r3, #20, #4
 8006a52:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a56:	7110      	strb	r0, [r2, #4]
 8006a58:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 8006a5a:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a5e:	bf8c      	ite	hi
 8006a60:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a62:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006a64:	f882 c007 	strb.w	ip, [r2, #7]
    if (((value >> 28)) < 0xA)
 8006a68:	f3c3 4c03 	ubfx	ip, r3, #16, #4
 8006a6c:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a70:	7190      	strb	r0, [r2, #6]
 8006a72:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 8006a74:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a78:	bf8c      	ite	hi
 8006a7a:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a7c:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006a7e:	f882 c009 	strb.w	ip, [r2, #9]
    if (((value >> 28)) < 0xA)
 8006a82:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8006a86:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a8a:	7210      	strb	r0, [r2, #8]
 8006a8c:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 8006a8e:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a92:	bf8c      	ite	hi
 8006a94:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a96:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006a98:	f882 c00b 	strb.w	ip, [r2, #11]
    if (((value >> 28)) < 0xA)
 8006a9c:	f3c3 2c03 	ubfx	ip, r3, #8, #4
 8006aa0:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006aa4:	7290      	strb	r0, [r2, #10]
 8006aa6:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 8006aa8:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006aac:	bf8c      	ite	hi
 8006aae:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ab0:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006ab2:	f882 c00d 	strb.w	ip, [r2, #13]
    if (((value >> 28)) < 0xA)
 8006ab6:	f3c3 1c03 	ubfx	ip, r3, #4, #4
 8006aba:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006abe:	7310      	strb	r0, [r2, #12]
 8006ac0:	4660      	mov	r0, ip
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ac2:	bf8c      	ite	hi
 8006ac4:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ac6:	3030      	addls	r0, #48	@ 0x30
 8006ac8:	7390      	strb	r0, [r2, #14]
    if (((value >> 28)) < 0xA)
 8006aca:	f003 000f 	and.w	r0, r3, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ace:	4603      	mov	r3, r0
    if (((value >> 28)) < 0xA)
 8006ad0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ad2:	bf94      	ite	ls
 8006ad4:	3330      	addls	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ad6:	3337      	addhi	r3, #55	@ 0x37
    pbuf[2 * idx + 1] = 0;
 8006ad8:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8006ada:	f1b1 4f20 	cmp.w	r1, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ade:	7413      	strb	r3, [r2, #16]
 8006ae0:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ae4:	bf2c      	ite	cs
 8006ae6:	3337      	addcs	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ae8:	3330      	addcc	r3, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006aea:	7450      	strb	r0, [r2, #17]
    if (((value >> 28)) < 0xA)
 8006aec:	f3c1 6003 	ubfx	r0, r1, #24, #4
 8006af0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006af2:	7493      	strb	r3, [r2, #18]
 8006af4:	4603      	mov	r3, r0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006af6:	bf8c      	ite	hi
 8006af8:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006afa:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006afc:	f3c1 5003 	ubfx	r0, r1, #20, #4
 8006b00:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006b02:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b06:	7513      	strb	r3, [r2, #20]
 8006b08:	4603      	mov	r3, r0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b0a:	bf8c      	ite	hi
 8006b0c:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b0e:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006b10:	f3c1 4003 	ubfx	r0, r1, #16, #4
    pbuf[2 * idx + 1] = 0;
 8006b14:	f882 c00f 	strb.w	ip, [r2, #15]
 8006b18:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8006b1c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006b1e:	f882 c013 	strb.w	ip, [r2, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b22:	7593      	strb	r3, [r2, #22]
    pbuf[2 * idx + 1] = 0;
 8006b24:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b28:	4603      	mov	r3, r0
    pbuf[2 * idx + 1] = 0;
 8006b2a:	f882 c015 	strb.w	ip, [r2, #21]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b2e:	bf98      	it	ls
 8006b30:	3330      	addls	r3, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 8006b32:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b36:	bf88      	it	hi
 8006b38:	3337      	addhi	r3, #55	@ 0x37
    pbuf[2 * idx + 1] = 0;
 8006b3a:	2100      	movs	r1, #0
}
 8006b3c:	4803      	ldr	r0, [pc, #12]	@ (8006b4c <USBD_FS_SerialStrDescriptor+0x14c>)
    pbuf[2 * idx + 1] = 0;
 8006b3e:	f882 c017 	strb.w	ip, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b42:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8006b44:	7651      	strb	r1, [r2, #25]
}
 8006b46:	4770      	bx	lr
 8006b48:	1fff7000 	.word	0x1fff7000
 8006b4c:	200000a8 	.word	0x200000a8

08006b50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b50:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b52:	6803      	ldr	r3, [r0, #0]
{
 8006b54:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b56:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b5c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006b60:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006b64:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b66:	d001      	beq.n	8006b6c <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b68:	b009      	add	sp, #36	@ 0x24
 8006b6a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b6c:	4d17      	ldr	r5, [pc, #92]	@ (8006bcc <HAL_PCD_MspInit+0x7c>)
 8006b6e:	9400      	str	r4, [sp, #0]
 8006b70:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b72:	4817      	ldr	r0, [pc, #92]	@ (8006bd0 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	632b      	str	r3, [r5, #48]	@ 0x30
 8006b7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b82:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8006b86:	2302      	movs	r3, #2
 8006b88:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b8c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b90:	9305      	str	r3, [sp, #20]
 8006b92:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b94:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b96:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b98:	f7fa ffe4 	bl	8001b64 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b9c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba2:	636b      	str	r3, [r5, #52]	@ 0x34
 8006ba4:	9401      	str	r4, [sp, #4]
 8006ba6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8006ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bac:	646b      	str	r3, [r5, #68]	@ 0x44
 8006bae:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8006bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bb8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bba:	2043      	movs	r0, #67	@ 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bbc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bbe:	f7fa fd69 	bl	8001694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006bc2:	2043      	movs	r0, #67	@ 0x43
 8006bc4:	f7fa fda2 	bl	800170c <HAL_NVIC_EnableIRQ>
}
 8006bc8:	b009      	add	sp, #36	@ 0x24
 8006bca:	bd30      	pop	{r4, r5, pc}
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	40020000 	.word	0x40020000

08006bd4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bd4:	f200 41c4 	addw	r1, r0, #1220	@ 0x4c4
 8006bd8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006bdc:	f7ff b9dc 	b.w	8005f98 <USBD_LL_SetupStage>

08006be0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006be0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006be4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006be8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006bec:	f8d3 228c 	ldr.w	r2, [r3, #652]	@ 0x28c
 8006bf0:	f7ff ba02 	b.w	8005ff8 <USBD_LL_DataOutStage>

08006bf4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006bf4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006bf8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006bfc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006c00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c02:	f7ff ba33 	b.w	800606c <USBD_LL_DataInStage>
 8006c06:	bf00      	nop

08006c08 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c08:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006c0c:	f7ff bad2 	b.w	80061b4 <USBD_LL_SOF>

08006c10 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c10:	68c3      	ldr	r3, [r0, #12]
 8006c12:	2b02      	cmp	r3, #2
{
 8006c14:	b510      	push	{r4, lr}
 8006c16:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c18:	d001      	beq.n	8006c1e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006c1a:	f7fa fb53 	bl	80012c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c1e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	@ 0x508
 8006c22:	2101      	movs	r1, #1
 8006c24:	f7ff faaa 	bl	800617c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c28:	f8d4 0508 	ldr.w	r0, [r4, #1288]	@ 0x508
}
 8006c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c30:	f7ff ba76 	b.w	8006120 <USBD_LL_Reset>

08006c34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c34:	b510      	push	{r4, lr}
 8006c36:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c38:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006c3c:	f7ff faa2 	bl	8006184 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c40:	6822      	ldr	r2, [r4, #0]
 8006c42:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8006c46:	f043 0301 	orr.w	r3, r3, #1
 8006c4a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c4e:	6a23      	ldr	r3, [r4, #32]
 8006c50:	b123      	cbz	r3, 8006c5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c52:	4a03      	ldr	r2, [pc, #12]	@ (8006c60 <HAL_PCD_SuspendCallback+0x2c>)
 8006c54:	6913      	ldr	r3, [r2, #16]
 8006c56:	f043 0306 	orr.w	r3, r3, #6
 8006c5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c5c:	bd10      	pop	{r4, pc}
 8006c5e:	bf00      	nop
 8006c60:	e000ed00 	.word	0xe000ed00

08006c64 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c64:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006c68:	f7ff ba98 	b.w	800619c <USBD_LL_Resume>

08006c6c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c6c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006c70:	f7ff bac6 	b.w	8006200 <USBD_LL_IsoOUTIncomplete>

08006c74 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c74:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006c78:	f7ff baac 	b.w	80061d4 <USBD_LL_IsoINIncomplete>

08006c7c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c7c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006c80:	f7ff bad4 	b.w	800622c <USBD_LL_DevConnected>

08006c84 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c84:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
 8006c88:	f7ff bad2 	b.w	8006230 <USBD_LL_DevDisconnected>

08006c8c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c8c:	7802      	ldrb	r2, [r0, #0]
 8006c8e:	b10a      	cbz	r2, 8006c94 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8006c90:	2000      	movs	r0, #0
 8006c92:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 8006c94:	4b15      	ldr	r3, [pc, #84]	@ (8006cec <USBD_LL_Init+0x60>)
{
 8006c96:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 8006c98:	f8c3 0508 	str.w	r0, [r3, #1288]	@ 0x508
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c9c:	f04f 44a0 	mov.w	r4, #1342177280	@ 0x50000000
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ca0:	f8c0 32c8 	str.w	r3, [r0, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ca4:	2004      	movs	r0, #4
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006ca6:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ca8:	e9c3 4000 	strd	r4, r0, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006cac:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cae:	e9c3 1203 	strd	r1, r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006cb2:	e9c3 1206 	strd	r1, r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006cb6:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006cba:	e9c3 220b 	strd	r2, r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006cbe:	f7fb f84b 	bl	8001d58 <HAL_PCD_Init>
 8006cc2:	b978      	cbnz	r0, 8006ce4 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006cc4:	2180      	movs	r1, #128	@ 0x80
 8006cc6:	4809      	ldr	r0, [pc, #36]	@ (8006cec <USBD_LL_Init+0x60>)
 8006cc8:	f7fc f854 	bl	8002d74 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006ccc:	2240      	movs	r2, #64	@ 0x40
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4806      	ldr	r0, [pc, #24]	@ (8006cec <USBD_LL_Init+0x60>)
 8006cd2:	f7fb ffcd 	bl	8002c70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006cd6:	2280      	movs	r2, #128	@ 0x80
 8006cd8:	2101      	movs	r1, #1
 8006cda:	4804      	ldr	r0, [pc, #16]	@ (8006cec <USBD_LL_Init+0x60>)
 8006cdc:	f7fb ffc8 	bl	8002c70 <HAL_PCDEx_SetTxFiFo>
}
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006ce4:	f7fa faee 	bl	80012c4 <Error_Handler>
 8006ce8:	e7ec      	b.n	8006cc4 <USBD_LL_Init+0x38>
 8006cea:	bf00      	nop
 8006cec:	200020e8 	.word	0x200020e8

08006cf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006cf0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8006cf2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006cf6:	f7fb f8b7 	bl	8001e68 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006cfa:	b118      	cbz	r0, 8006d04 <USBD_LL_Start+0x14>
 8006cfc:	2802      	cmp	r0, #2
 8006cfe:	bf0c      	ite	eq
 8006d00:	2001      	moveq	r0, #1
 8006d02:	2003      	movne	r0, #3
}
 8006d04:	bd08      	pop	{r3, pc}
 8006d06:	bf00      	nop

08006d08 <USBD_LL_OpenEP>:
{
 8006d08:	4694      	mov	ip, r2
 8006d0a:	b508      	push	{r3, lr}
 8006d0c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d0e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006d12:	4663      	mov	r3, ip
 8006d14:	f7fb fe64 	bl	80029e0 <HAL_PCD_EP_Open>
  switch (hal_status)
 8006d18:	b118      	cbz	r0, 8006d22 <USBD_LL_OpenEP+0x1a>
 8006d1a:	2802      	cmp	r0, #2
 8006d1c:	bf0c      	ite	eq
 8006d1e:	2001      	moveq	r0, #1
 8006d20:	2003      	movne	r0, #3
}
 8006d22:	bd08      	pop	{r3, pc}

08006d24 <USBD_LL_CloseEP>:
{
 8006d24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d26:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006d2a:	f7fb fe97 	bl	8002a5c <HAL_PCD_EP_Close>
  switch (hal_status)
 8006d2e:	b118      	cbz	r0, 8006d38 <USBD_LL_CloseEP+0x14>
 8006d30:	2802      	cmp	r0, #2
 8006d32:	bf0c      	ite	eq
 8006d34:	2001      	moveq	r0, #1
 8006d36:	2003      	movne	r0, #3
}
 8006d38:	bd08      	pop	{r3, pc}
 8006d3a:	bf00      	nop

08006d3c <USBD_LL_StallEP>:
{
 8006d3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d3e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006d42:	f7fb ff19 	bl	8002b78 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8006d46:	b118      	cbz	r0, 8006d50 <USBD_LL_StallEP+0x14>
 8006d48:	2802      	cmp	r0, #2
 8006d4a:	bf0c      	ite	eq
 8006d4c:	2001      	moveq	r0, #1
 8006d4e:	2003      	movne	r0, #3
}
 8006d50:	bd08      	pop	{r3, pc}
 8006d52:	bf00      	nop

08006d54 <USBD_LL_ClearStallEP>:
{
 8006d54:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d56:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006d5a:	f7fb ff51 	bl	8002c00 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8006d5e:	b118      	cbz	r0, 8006d68 <USBD_LL_ClearStallEP+0x14>
 8006d60:	2802      	cmp	r0, #2
 8006d62:	bf0c      	ite	eq
 8006d64:	2001      	moveq	r0, #1
 8006d66:	2003      	movne	r0, #3
}
 8006d68:	bd08      	pop	{r3, pc}
 8006d6a:	bf00      	nop

08006d6c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006d6c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d6e:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8006d72:	d406      	bmi.n	8006d82 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d74:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006d78:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006d7c:	f893 027e 	ldrb.w	r0, [r3, #638]	@ 0x27e
}
 8006d80:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d82:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006d86:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006d8a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006d8e:	f893 003e 	ldrb.w	r0, [r3, #62]	@ 0x3e
 8006d92:	4770      	bx	lr

08006d94 <USBD_LL_SetUSBAddress>:
{
 8006d94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d96:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006d9a:	f7fb fe0d 	bl	80029b8 <HAL_PCD_SetAddress>
  switch (hal_status)
 8006d9e:	b118      	cbz	r0, 8006da8 <USBD_LL_SetUSBAddress+0x14>
 8006da0:	2802      	cmp	r0, #2
 8006da2:	bf0c      	ite	eq
 8006da4:	2001      	moveq	r0, #1
 8006da6:	2003      	movne	r0, #3
}
 8006da8:	bd08      	pop	{r3, pc}
 8006daa:	bf00      	nop

08006dac <USBD_LL_Transmit>:
{
 8006dac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006dae:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006db2:	f7fb feb9 	bl	8002b28 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8006db6:	b118      	cbz	r0, 8006dc0 <USBD_LL_Transmit+0x14>
 8006db8:	2802      	cmp	r0, #2
 8006dba:	bf0c      	ite	eq
 8006dbc:	2001      	moveq	r0, #1
 8006dbe:	2003      	movne	r0, #3
}
 8006dc0:	bd08      	pop	{r3, pc}
 8006dc2:	bf00      	nop

08006dc4 <USBD_LL_PrepareReceive>:
{
 8006dc4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006dc6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006dca:	f7fb fe7b 	bl	8002ac4 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8006dce:	b118      	cbz	r0, 8006dd8 <USBD_LL_PrepareReceive+0x14>
 8006dd0:	2802      	cmp	r0, #2
 8006dd2:	bf0c      	ite	eq
 8006dd4:	2001      	moveq	r0, #1
 8006dd6:	2003      	movne	r0, #3
}
 8006dd8:	bd08      	pop	{r3, pc}
 8006dda:	bf00      	nop

08006ddc <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ddc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006de0:	f7fb be98 	b.w	8002b14 <HAL_PCD_EP_GetRxCount>

08006de4 <USBD_static_malloc>:
}
 8006de4:	4800      	ldr	r0, [pc, #0]	@ (8006de8 <USBD_static_malloc+0x4>)
 8006de6:	4770      	bx	lr
 8006de8:	20001ec8 	.word	0x20001ec8

08006dec <USBD_static_free>:
}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop

08006df0 <__cvt>:
 8006df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df4:	ec57 6b10 	vmov	r6, r7, d0
 8006df8:	2f00      	cmp	r7, #0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	463b      	mov	r3, r7
 8006e00:	bfbb      	ittet	lt
 8006e02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006e06:	461f      	movlt	r7, r3
 8006e08:	2300      	movge	r3, #0
 8006e0a:	232d      	movlt	r3, #45	@ 0x2d
 8006e0c:	700b      	strb	r3, [r1, #0]
 8006e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e14:	4691      	mov	r9, r2
 8006e16:	f023 0820 	bic.w	r8, r3, #32
 8006e1a:	bfbc      	itt	lt
 8006e1c:	4632      	movlt	r2, r6
 8006e1e:	4616      	movlt	r6, r2
 8006e20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e24:	d005      	beq.n	8006e32 <__cvt+0x42>
 8006e26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e2a:	d100      	bne.n	8006e2e <__cvt+0x3e>
 8006e2c:	3401      	adds	r4, #1
 8006e2e:	2102      	movs	r1, #2
 8006e30:	e000      	b.n	8006e34 <__cvt+0x44>
 8006e32:	2103      	movs	r1, #3
 8006e34:	ab03      	add	r3, sp, #12
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	ab02      	add	r3, sp, #8
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	ec47 6b10 	vmov	d0, r6, r7
 8006e40:	4653      	mov	r3, sl
 8006e42:	4622      	mov	r2, r4
 8006e44:	f000 ff18 	bl	8007c78 <_dtoa_r>
 8006e48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	d119      	bne.n	8006e84 <__cvt+0x94>
 8006e50:	f019 0f01 	tst.w	r9, #1
 8006e54:	d00e      	beq.n	8006e74 <__cvt+0x84>
 8006e56:	eb00 0904 	add.w	r9, r0, r4
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4639      	mov	r1, r7
 8006e62:	f7f9 fe39 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e66:	b108      	cbz	r0, 8006e6c <__cvt+0x7c>
 8006e68:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e6c:	2230      	movs	r2, #48	@ 0x30
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	454b      	cmp	r3, r9
 8006e72:	d31e      	bcc.n	8006eb2 <__cvt+0xc2>
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e78:	1b5b      	subs	r3, r3, r5
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	b004      	add	sp, #16
 8006e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e88:	eb00 0904 	add.w	r9, r0, r4
 8006e8c:	d1e5      	bne.n	8006e5a <__cvt+0x6a>
 8006e8e:	7803      	ldrb	r3, [r0, #0]
 8006e90:	2b30      	cmp	r3, #48	@ 0x30
 8006e92:	d10a      	bne.n	8006eaa <__cvt+0xba>
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 fe1c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ea0:	b918      	cbnz	r0, 8006eaa <__cvt+0xba>
 8006ea2:	f1c4 0401 	rsb	r4, r4, #1
 8006ea6:	f8ca 4000 	str.w	r4, [sl]
 8006eaa:	f8da 3000 	ldr.w	r3, [sl]
 8006eae:	4499      	add	r9, r3
 8006eb0:	e7d3      	b.n	8006e5a <__cvt+0x6a>
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	9103      	str	r1, [sp, #12]
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	e7d9      	b.n	8006e6e <__cvt+0x7e>

08006eba <__exponent>:
 8006eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	bfba      	itte	lt
 8006ec0:	4249      	neglt	r1, r1
 8006ec2:	232d      	movlt	r3, #45	@ 0x2d
 8006ec4:	232b      	movge	r3, #43	@ 0x2b
 8006ec6:	2909      	cmp	r1, #9
 8006ec8:	7002      	strb	r2, [r0, #0]
 8006eca:	7043      	strb	r3, [r0, #1]
 8006ecc:	dd29      	ble.n	8006f22 <__exponent+0x68>
 8006ece:	f10d 0307 	add.w	r3, sp, #7
 8006ed2:	461d      	mov	r5, r3
 8006ed4:	270a      	movs	r7, #10
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006edc:	fb07 1416 	mls	r4, r7, r6, r1
 8006ee0:	3430      	adds	r4, #48	@ 0x30
 8006ee2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	2c63      	cmp	r4, #99	@ 0x63
 8006eea:	f103 33ff 	add.w	r3, r3, #4294967295
 8006eee:	4631      	mov	r1, r6
 8006ef0:	dcf1      	bgt.n	8006ed6 <__exponent+0x1c>
 8006ef2:	3130      	adds	r1, #48	@ 0x30
 8006ef4:	1e94      	subs	r4, r2, #2
 8006ef6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006efa:	1c41      	adds	r1, r0, #1
 8006efc:	4623      	mov	r3, r4
 8006efe:	42ab      	cmp	r3, r5
 8006f00:	d30a      	bcc.n	8006f18 <__exponent+0x5e>
 8006f02:	f10d 0309 	add.w	r3, sp, #9
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	42ac      	cmp	r4, r5
 8006f0a:	bf88      	it	hi
 8006f0c:	2300      	movhi	r3, #0
 8006f0e:	3302      	adds	r3, #2
 8006f10:	4403      	add	r3, r0
 8006f12:	1a18      	subs	r0, r3, r0
 8006f14:	b003      	add	sp, #12
 8006f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f20:	e7ed      	b.n	8006efe <__exponent+0x44>
 8006f22:	2330      	movs	r3, #48	@ 0x30
 8006f24:	3130      	adds	r1, #48	@ 0x30
 8006f26:	7083      	strb	r3, [r0, #2]
 8006f28:	70c1      	strb	r1, [r0, #3]
 8006f2a:	1d03      	adds	r3, r0, #4
 8006f2c:	e7f1      	b.n	8006f12 <__exponent+0x58>
	...

08006f30 <_printf_float>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	b08d      	sub	sp, #52	@ 0x34
 8006f36:	460c      	mov	r4, r1
 8006f38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f3c:	4616      	mov	r6, r2
 8006f3e:	461f      	mov	r7, r3
 8006f40:	4605      	mov	r5, r0
 8006f42:	f000 fd8b 	bl	8007a5c <_localeconv_r>
 8006f46:	6803      	ldr	r3, [r0, #0]
 8006f48:	9304      	str	r3, [sp, #16]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7f9 f998 	bl	8000280 <strlen>
 8006f50:	2300      	movs	r3, #0
 8006f52:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f54:	f8d8 3000 	ldr.w	r3, [r8]
 8006f58:	9005      	str	r0, [sp, #20]
 8006f5a:	3307      	adds	r3, #7
 8006f5c:	f023 0307 	bic.w	r3, r3, #7
 8006f60:	f103 0208 	add.w	r2, r3, #8
 8006f64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f68:	f8d4 b000 	ldr.w	fp, [r4]
 8006f6c:	f8c8 2000 	str.w	r2, [r8]
 8006f70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f78:	9307      	str	r3, [sp, #28]
 8006f7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f86:	4b9c      	ldr	r3, [pc, #624]	@ (80071f8 <_printf_float+0x2c8>)
 8006f88:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8c:	f7f9 fdd6 	bl	8000b3c <__aeabi_dcmpun>
 8006f90:	bb70      	cbnz	r0, 8006ff0 <_printf_float+0xc0>
 8006f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f96:	4b98      	ldr	r3, [pc, #608]	@ (80071f8 <_printf_float+0x2c8>)
 8006f98:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9c:	f7f9 fdb0 	bl	8000b00 <__aeabi_dcmple>
 8006fa0:	bb30      	cbnz	r0, 8006ff0 <_printf_float+0xc0>
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4649      	mov	r1, r9
 8006faa:	f7f9 fd9f 	bl	8000aec <__aeabi_dcmplt>
 8006fae:	b110      	cbz	r0, 8006fb6 <_printf_float+0x86>
 8006fb0:	232d      	movs	r3, #45	@ 0x2d
 8006fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fb6:	4a91      	ldr	r2, [pc, #580]	@ (80071fc <_printf_float+0x2cc>)
 8006fb8:	4b91      	ldr	r3, [pc, #580]	@ (8007200 <_printf_float+0x2d0>)
 8006fba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006fbe:	bf94      	ite	ls
 8006fc0:	4690      	movls	r8, r2
 8006fc2:	4698      	movhi	r8, r3
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	f02b 0304 	bic.w	r3, fp, #4
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	f04f 0900 	mov.w	r9, #0
 8006fd2:	9700      	str	r7, [sp, #0]
 8006fd4:	4633      	mov	r3, r6
 8006fd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f000 f9d2 	bl	8007384 <_printf_common>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f040 808d 	bne.w	8007100 <_printf_float+0x1d0>
 8006fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fea:	b00d      	add	sp, #52	@ 0x34
 8006fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff0:	4642      	mov	r2, r8
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	f7f9 fda0 	bl	8000b3c <__aeabi_dcmpun>
 8006ffc:	b140      	cbz	r0, 8007010 <_printf_float+0xe0>
 8006ffe:	464b      	mov	r3, r9
 8007000:	2b00      	cmp	r3, #0
 8007002:	bfbc      	itt	lt
 8007004:	232d      	movlt	r3, #45	@ 0x2d
 8007006:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800700a:	4a7e      	ldr	r2, [pc, #504]	@ (8007204 <_printf_float+0x2d4>)
 800700c:	4b7e      	ldr	r3, [pc, #504]	@ (8007208 <_printf_float+0x2d8>)
 800700e:	e7d4      	b.n	8006fba <_printf_float+0x8a>
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007016:	9206      	str	r2, [sp, #24]
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	d13b      	bne.n	8007094 <_printf_float+0x164>
 800701c:	2306      	movs	r3, #6
 800701e:	6063      	str	r3, [r4, #4]
 8007020:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007024:	2300      	movs	r3, #0
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	ab0a      	add	r3, sp, #40	@ 0x28
 800702c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007030:	ab09      	add	r3, sp, #36	@ 0x24
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	6861      	ldr	r1, [r4, #4]
 8007036:	ec49 8b10 	vmov	d0, r8, r9
 800703a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800703e:	4628      	mov	r0, r5
 8007040:	f7ff fed6 	bl	8006df0 <__cvt>
 8007044:	9b06      	ldr	r3, [sp, #24]
 8007046:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007048:	2b47      	cmp	r3, #71	@ 0x47
 800704a:	4680      	mov	r8, r0
 800704c:	d129      	bne.n	80070a2 <_printf_float+0x172>
 800704e:	1cc8      	adds	r0, r1, #3
 8007050:	db02      	blt.n	8007058 <_printf_float+0x128>
 8007052:	6863      	ldr	r3, [r4, #4]
 8007054:	4299      	cmp	r1, r3
 8007056:	dd41      	ble.n	80070dc <_printf_float+0x1ac>
 8007058:	f1aa 0a02 	sub.w	sl, sl, #2
 800705c:	fa5f fa8a 	uxtb.w	sl, sl
 8007060:	3901      	subs	r1, #1
 8007062:	4652      	mov	r2, sl
 8007064:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007068:	9109      	str	r1, [sp, #36]	@ 0x24
 800706a:	f7ff ff26 	bl	8006eba <__exponent>
 800706e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007070:	1813      	adds	r3, r2, r0
 8007072:	2a01      	cmp	r2, #1
 8007074:	4681      	mov	r9, r0
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	dc02      	bgt.n	8007080 <_printf_float+0x150>
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	07d2      	lsls	r2, r2, #31
 800707e:	d501      	bpl.n	8007084 <_printf_float+0x154>
 8007080:	3301      	adds	r3, #1
 8007082:	6123      	str	r3, [r4, #16]
 8007084:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0a2      	beq.n	8006fd2 <_printf_float+0xa2>
 800708c:	232d      	movs	r3, #45	@ 0x2d
 800708e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007092:	e79e      	b.n	8006fd2 <_printf_float+0xa2>
 8007094:	9a06      	ldr	r2, [sp, #24]
 8007096:	2a47      	cmp	r2, #71	@ 0x47
 8007098:	d1c2      	bne.n	8007020 <_printf_float+0xf0>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1c0      	bne.n	8007020 <_printf_float+0xf0>
 800709e:	2301      	movs	r3, #1
 80070a0:	e7bd      	b.n	800701e <_printf_float+0xee>
 80070a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070a6:	d9db      	bls.n	8007060 <_printf_float+0x130>
 80070a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80070ac:	d118      	bne.n	80070e0 <_printf_float+0x1b0>
 80070ae:	2900      	cmp	r1, #0
 80070b0:	6863      	ldr	r3, [r4, #4]
 80070b2:	dd0b      	ble.n	80070cc <_printf_float+0x19c>
 80070b4:	6121      	str	r1, [r4, #16]
 80070b6:	b913      	cbnz	r3, 80070be <_printf_float+0x18e>
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	07d0      	lsls	r0, r2, #31
 80070bc:	d502      	bpl.n	80070c4 <_printf_float+0x194>
 80070be:	3301      	adds	r3, #1
 80070c0:	440b      	add	r3, r1
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070c6:	f04f 0900 	mov.w	r9, #0
 80070ca:	e7db      	b.n	8007084 <_printf_float+0x154>
 80070cc:	b913      	cbnz	r3, 80070d4 <_printf_float+0x1a4>
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	07d2      	lsls	r2, r2, #31
 80070d2:	d501      	bpl.n	80070d8 <_printf_float+0x1a8>
 80070d4:	3302      	adds	r3, #2
 80070d6:	e7f4      	b.n	80070c2 <_printf_float+0x192>
 80070d8:	2301      	movs	r3, #1
 80070da:	e7f2      	b.n	80070c2 <_printf_float+0x192>
 80070dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070e2:	4299      	cmp	r1, r3
 80070e4:	db05      	blt.n	80070f2 <_printf_float+0x1c2>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	6121      	str	r1, [r4, #16]
 80070ea:	07d8      	lsls	r0, r3, #31
 80070ec:	d5ea      	bpl.n	80070c4 <_printf_float+0x194>
 80070ee:	1c4b      	adds	r3, r1, #1
 80070f0:	e7e7      	b.n	80070c2 <_printf_float+0x192>
 80070f2:	2900      	cmp	r1, #0
 80070f4:	bfd4      	ite	le
 80070f6:	f1c1 0202 	rsble	r2, r1, #2
 80070fa:	2201      	movgt	r2, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	e7e0      	b.n	80070c2 <_printf_float+0x192>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	055a      	lsls	r2, r3, #21
 8007104:	d407      	bmi.n	8007116 <_printf_float+0x1e6>
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	4642      	mov	r2, r8
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	d12b      	bne.n	800716c <_printf_float+0x23c>
 8007114:	e767      	b.n	8006fe6 <_printf_float+0xb6>
 8007116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800711a:	f240 80dd 	bls.w	80072d8 <_printf_float+0x3a8>
 800711e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007122:	2200      	movs	r2, #0
 8007124:	2300      	movs	r3, #0
 8007126:	f7f9 fcd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800712a:	2800      	cmp	r0, #0
 800712c:	d033      	beq.n	8007196 <_printf_float+0x266>
 800712e:	4a37      	ldr	r2, [pc, #220]	@ (800720c <_printf_float+0x2dc>)
 8007130:	2301      	movs	r3, #1
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f af54 	beq.w	8006fe6 <_printf_float+0xb6>
 800713e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007142:	4543      	cmp	r3, r8
 8007144:	db02      	blt.n	800714c <_printf_float+0x21c>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	07d8      	lsls	r0, r3, #31
 800714a:	d50f      	bpl.n	800716c <_printf_float+0x23c>
 800714c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f af45 	beq.w	8006fe6 <_printf_float+0xb6>
 800715c:	f04f 0900 	mov.w	r9, #0
 8007160:	f108 38ff 	add.w	r8, r8, #4294967295
 8007164:	f104 0a1a 	add.w	sl, r4, #26
 8007168:	45c8      	cmp	r8, r9
 800716a:	dc09      	bgt.n	8007180 <_printf_float+0x250>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	079b      	lsls	r3, r3, #30
 8007170:	f100 8103 	bmi.w	800737a <_printf_float+0x44a>
 8007174:	68e0      	ldr	r0, [r4, #12]
 8007176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007178:	4298      	cmp	r0, r3
 800717a:	bfb8      	it	lt
 800717c:	4618      	movlt	r0, r3
 800717e:	e734      	b.n	8006fea <_printf_float+0xba>
 8007180:	2301      	movs	r3, #1
 8007182:	4652      	mov	r2, sl
 8007184:	4631      	mov	r1, r6
 8007186:	4628      	mov	r0, r5
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	f43f af2b 	beq.w	8006fe6 <_printf_float+0xb6>
 8007190:	f109 0901 	add.w	r9, r9, #1
 8007194:	e7e8      	b.n	8007168 <_printf_float+0x238>
 8007196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	dc39      	bgt.n	8007210 <_printf_float+0x2e0>
 800719c:	4a1b      	ldr	r2, [pc, #108]	@ (800720c <_printf_float+0x2dc>)
 800719e:	2301      	movs	r3, #1
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f af1d 	beq.w	8006fe6 <_printf_float+0xb6>
 80071ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80071b0:	ea59 0303 	orrs.w	r3, r9, r3
 80071b4:	d102      	bne.n	80071bc <_printf_float+0x28c>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	d5d7      	bpl.n	800716c <_printf_float+0x23c>
 80071bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f af0d 	beq.w	8006fe6 <_printf_float+0xb6>
 80071cc:	f04f 0a00 	mov.w	sl, #0
 80071d0:	f104 0b1a 	add.w	fp, r4, #26
 80071d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d6:	425b      	negs	r3, r3
 80071d8:	4553      	cmp	r3, sl
 80071da:	dc01      	bgt.n	80071e0 <_printf_float+0x2b0>
 80071dc:	464b      	mov	r3, r9
 80071de:	e793      	b.n	8007108 <_printf_float+0x1d8>
 80071e0:	2301      	movs	r3, #1
 80071e2:	465a      	mov	r2, fp
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f aefb 	beq.w	8006fe6 <_printf_float+0xb6>
 80071f0:	f10a 0a01 	add.w	sl, sl, #1
 80071f4:	e7ee      	b.n	80071d4 <_printf_float+0x2a4>
 80071f6:	bf00      	nop
 80071f8:	7fefffff 	.word	0x7fefffff
 80071fc:	0800aaca 	.word	0x0800aaca
 8007200:	0800aace 	.word	0x0800aace
 8007204:	0800aad2 	.word	0x0800aad2
 8007208:	0800aad6 	.word	0x0800aad6
 800720c:	0800ad07 	.word	0x0800ad07
 8007210:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007212:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007216:	4553      	cmp	r3, sl
 8007218:	bfa8      	it	ge
 800721a:	4653      	movge	r3, sl
 800721c:	2b00      	cmp	r3, #0
 800721e:	4699      	mov	r9, r3
 8007220:	dc36      	bgt.n	8007290 <_printf_float+0x360>
 8007222:	f04f 0b00 	mov.w	fp, #0
 8007226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800722a:	f104 021a 	add.w	r2, r4, #26
 800722e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007230:	9306      	str	r3, [sp, #24]
 8007232:	eba3 0309 	sub.w	r3, r3, r9
 8007236:	455b      	cmp	r3, fp
 8007238:	dc31      	bgt.n	800729e <_printf_float+0x36e>
 800723a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723c:	459a      	cmp	sl, r3
 800723e:	dc3a      	bgt.n	80072b6 <_printf_float+0x386>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	07da      	lsls	r2, r3, #31
 8007244:	d437      	bmi.n	80072b6 <_printf_float+0x386>
 8007246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007248:	ebaa 0903 	sub.w	r9, sl, r3
 800724c:	9b06      	ldr	r3, [sp, #24]
 800724e:	ebaa 0303 	sub.w	r3, sl, r3
 8007252:	4599      	cmp	r9, r3
 8007254:	bfa8      	it	ge
 8007256:	4699      	movge	r9, r3
 8007258:	f1b9 0f00 	cmp.w	r9, #0
 800725c:	dc33      	bgt.n	80072c6 <_printf_float+0x396>
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007266:	f104 0b1a 	add.w	fp, r4, #26
 800726a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800726c:	ebaa 0303 	sub.w	r3, sl, r3
 8007270:	eba3 0309 	sub.w	r3, r3, r9
 8007274:	4543      	cmp	r3, r8
 8007276:	f77f af79 	ble.w	800716c <_printf_float+0x23c>
 800727a:	2301      	movs	r3, #1
 800727c:	465a      	mov	r2, fp
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	f43f aeae 	beq.w	8006fe6 <_printf_float+0xb6>
 800728a:	f108 0801 	add.w	r8, r8, #1
 800728e:	e7ec      	b.n	800726a <_printf_float+0x33a>
 8007290:	4642      	mov	r2, r8
 8007292:	4631      	mov	r1, r6
 8007294:	4628      	mov	r0, r5
 8007296:	47b8      	blx	r7
 8007298:	3001      	adds	r0, #1
 800729a:	d1c2      	bne.n	8007222 <_printf_float+0x2f2>
 800729c:	e6a3      	b.n	8006fe6 <_printf_float+0xb6>
 800729e:	2301      	movs	r3, #1
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	9206      	str	r2, [sp, #24]
 80072a6:	47b8      	blx	r7
 80072a8:	3001      	adds	r0, #1
 80072aa:	f43f ae9c 	beq.w	8006fe6 <_printf_float+0xb6>
 80072ae:	9a06      	ldr	r2, [sp, #24]
 80072b0:	f10b 0b01 	add.w	fp, fp, #1
 80072b4:	e7bb      	b.n	800722e <_printf_float+0x2fe>
 80072b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	d1c0      	bne.n	8007246 <_printf_float+0x316>
 80072c4:	e68f      	b.n	8006fe6 <_printf_float+0xb6>
 80072c6:	9a06      	ldr	r2, [sp, #24]
 80072c8:	464b      	mov	r3, r9
 80072ca:	4442      	add	r2, r8
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	d1c3      	bne.n	800725e <_printf_float+0x32e>
 80072d6:	e686      	b.n	8006fe6 <_printf_float+0xb6>
 80072d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072dc:	f1ba 0f01 	cmp.w	sl, #1
 80072e0:	dc01      	bgt.n	80072e6 <_printf_float+0x3b6>
 80072e2:	07db      	lsls	r3, r3, #31
 80072e4:	d536      	bpl.n	8007354 <_printf_float+0x424>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4642      	mov	r2, r8
 80072ea:	4631      	mov	r1, r6
 80072ec:	4628      	mov	r0, r5
 80072ee:	47b8      	blx	r7
 80072f0:	3001      	adds	r0, #1
 80072f2:	f43f ae78 	beq.w	8006fe6 <_printf_float+0xb6>
 80072f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072fa:	4631      	mov	r1, r6
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b8      	blx	r7
 8007300:	3001      	adds	r0, #1
 8007302:	f43f ae70 	beq.w	8006fe6 <_printf_float+0xb6>
 8007306:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800730a:	2200      	movs	r2, #0
 800730c:	2300      	movs	r3, #0
 800730e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007312:	f7f9 fbe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007316:	b9c0      	cbnz	r0, 800734a <_printf_float+0x41a>
 8007318:	4653      	mov	r3, sl
 800731a:	f108 0201 	add.w	r2, r8, #1
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	47b8      	blx	r7
 8007324:	3001      	adds	r0, #1
 8007326:	d10c      	bne.n	8007342 <_printf_float+0x412>
 8007328:	e65d      	b.n	8006fe6 <_printf_float+0xb6>
 800732a:	2301      	movs	r3, #1
 800732c:	465a      	mov	r2, fp
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	47b8      	blx	r7
 8007334:	3001      	adds	r0, #1
 8007336:	f43f ae56 	beq.w	8006fe6 <_printf_float+0xb6>
 800733a:	f108 0801 	add.w	r8, r8, #1
 800733e:	45d0      	cmp	r8, sl
 8007340:	dbf3      	blt.n	800732a <_printf_float+0x3fa>
 8007342:	464b      	mov	r3, r9
 8007344:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007348:	e6df      	b.n	800710a <_printf_float+0x1da>
 800734a:	f04f 0800 	mov.w	r8, #0
 800734e:	f104 0b1a 	add.w	fp, r4, #26
 8007352:	e7f4      	b.n	800733e <_printf_float+0x40e>
 8007354:	2301      	movs	r3, #1
 8007356:	4642      	mov	r2, r8
 8007358:	e7e1      	b.n	800731e <_printf_float+0x3ee>
 800735a:	2301      	movs	r3, #1
 800735c:	464a      	mov	r2, r9
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	47b8      	blx	r7
 8007364:	3001      	adds	r0, #1
 8007366:	f43f ae3e 	beq.w	8006fe6 <_printf_float+0xb6>
 800736a:	f108 0801 	add.w	r8, r8, #1
 800736e:	68e3      	ldr	r3, [r4, #12]
 8007370:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007372:	1a5b      	subs	r3, r3, r1
 8007374:	4543      	cmp	r3, r8
 8007376:	dcf0      	bgt.n	800735a <_printf_float+0x42a>
 8007378:	e6fc      	b.n	8007174 <_printf_float+0x244>
 800737a:	f04f 0800 	mov.w	r8, #0
 800737e:	f104 0919 	add.w	r9, r4, #25
 8007382:	e7f4      	b.n	800736e <_printf_float+0x43e>

08007384 <_printf_common>:
 8007384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007388:	4616      	mov	r6, r2
 800738a:	4698      	mov	r8, r3
 800738c:	688a      	ldr	r2, [r1, #8]
 800738e:	690b      	ldr	r3, [r1, #16]
 8007390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007394:	4293      	cmp	r3, r2
 8007396:	bfb8      	it	lt
 8007398:	4613      	movlt	r3, r2
 800739a:	6033      	str	r3, [r6, #0]
 800739c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073a0:	4607      	mov	r7, r0
 80073a2:	460c      	mov	r4, r1
 80073a4:	b10a      	cbz	r2, 80073aa <_printf_common+0x26>
 80073a6:	3301      	adds	r3, #1
 80073a8:	6033      	str	r3, [r6, #0]
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	0699      	lsls	r1, r3, #26
 80073ae:	bf42      	ittt	mi
 80073b0:	6833      	ldrmi	r3, [r6, #0]
 80073b2:	3302      	addmi	r3, #2
 80073b4:	6033      	strmi	r3, [r6, #0]
 80073b6:	6825      	ldr	r5, [r4, #0]
 80073b8:	f015 0506 	ands.w	r5, r5, #6
 80073bc:	d106      	bne.n	80073cc <_printf_common+0x48>
 80073be:	f104 0a19 	add.w	sl, r4, #25
 80073c2:	68e3      	ldr	r3, [r4, #12]
 80073c4:	6832      	ldr	r2, [r6, #0]
 80073c6:	1a9b      	subs	r3, r3, r2
 80073c8:	42ab      	cmp	r3, r5
 80073ca:	dc26      	bgt.n	800741a <_printf_common+0x96>
 80073cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	3b00      	subs	r3, #0
 80073d4:	bf18      	it	ne
 80073d6:	2301      	movne	r3, #1
 80073d8:	0692      	lsls	r2, r2, #26
 80073da:	d42b      	bmi.n	8007434 <_printf_common+0xb0>
 80073dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073e0:	4641      	mov	r1, r8
 80073e2:	4638      	mov	r0, r7
 80073e4:	47c8      	blx	r9
 80073e6:	3001      	adds	r0, #1
 80073e8:	d01e      	beq.n	8007428 <_printf_common+0xa4>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	6922      	ldr	r2, [r4, #16]
 80073ee:	f003 0306 	and.w	r3, r3, #6
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	bf02      	ittt	eq
 80073f6:	68e5      	ldreq	r5, [r4, #12]
 80073f8:	6833      	ldreq	r3, [r6, #0]
 80073fa:	1aed      	subeq	r5, r5, r3
 80073fc:	68a3      	ldr	r3, [r4, #8]
 80073fe:	bf0c      	ite	eq
 8007400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007404:	2500      	movne	r5, #0
 8007406:	4293      	cmp	r3, r2
 8007408:	bfc4      	itt	gt
 800740a:	1a9b      	subgt	r3, r3, r2
 800740c:	18ed      	addgt	r5, r5, r3
 800740e:	2600      	movs	r6, #0
 8007410:	341a      	adds	r4, #26
 8007412:	42b5      	cmp	r5, r6
 8007414:	d11a      	bne.n	800744c <_printf_common+0xc8>
 8007416:	2000      	movs	r0, #0
 8007418:	e008      	b.n	800742c <_printf_common+0xa8>
 800741a:	2301      	movs	r3, #1
 800741c:	4652      	mov	r2, sl
 800741e:	4641      	mov	r1, r8
 8007420:	4638      	mov	r0, r7
 8007422:	47c8      	blx	r9
 8007424:	3001      	adds	r0, #1
 8007426:	d103      	bne.n	8007430 <_printf_common+0xac>
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007430:	3501      	adds	r5, #1
 8007432:	e7c6      	b.n	80073c2 <_printf_common+0x3e>
 8007434:	18e1      	adds	r1, r4, r3
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	2030      	movs	r0, #48	@ 0x30
 800743a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800743e:	4422      	add	r2, r4
 8007440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007448:	3302      	adds	r3, #2
 800744a:	e7c7      	b.n	80073dc <_printf_common+0x58>
 800744c:	2301      	movs	r3, #1
 800744e:	4622      	mov	r2, r4
 8007450:	4641      	mov	r1, r8
 8007452:	4638      	mov	r0, r7
 8007454:	47c8      	blx	r9
 8007456:	3001      	adds	r0, #1
 8007458:	d0e6      	beq.n	8007428 <_printf_common+0xa4>
 800745a:	3601      	adds	r6, #1
 800745c:	e7d9      	b.n	8007412 <_printf_common+0x8e>
	...

08007460 <_printf_i>:
 8007460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007464:	7e0f      	ldrb	r7, [r1, #24]
 8007466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007468:	2f78      	cmp	r7, #120	@ 0x78
 800746a:	4691      	mov	r9, r2
 800746c:	4680      	mov	r8, r0
 800746e:	460c      	mov	r4, r1
 8007470:	469a      	mov	sl, r3
 8007472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007476:	d807      	bhi.n	8007488 <_printf_i+0x28>
 8007478:	2f62      	cmp	r7, #98	@ 0x62
 800747a:	d80a      	bhi.n	8007492 <_printf_i+0x32>
 800747c:	2f00      	cmp	r7, #0
 800747e:	f000 80d2 	beq.w	8007626 <_printf_i+0x1c6>
 8007482:	2f58      	cmp	r7, #88	@ 0x58
 8007484:	f000 80b9 	beq.w	80075fa <_printf_i+0x19a>
 8007488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800748c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007490:	e03a      	b.n	8007508 <_printf_i+0xa8>
 8007492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007496:	2b15      	cmp	r3, #21
 8007498:	d8f6      	bhi.n	8007488 <_printf_i+0x28>
 800749a:	a101      	add	r1, pc, #4	@ (adr r1, 80074a0 <_printf_i+0x40>)
 800749c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074a0:	080074f9 	.word	0x080074f9
 80074a4:	0800750d 	.word	0x0800750d
 80074a8:	08007489 	.word	0x08007489
 80074ac:	08007489 	.word	0x08007489
 80074b0:	08007489 	.word	0x08007489
 80074b4:	08007489 	.word	0x08007489
 80074b8:	0800750d 	.word	0x0800750d
 80074bc:	08007489 	.word	0x08007489
 80074c0:	08007489 	.word	0x08007489
 80074c4:	08007489 	.word	0x08007489
 80074c8:	08007489 	.word	0x08007489
 80074cc:	0800760d 	.word	0x0800760d
 80074d0:	08007537 	.word	0x08007537
 80074d4:	080075c7 	.word	0x080075c7
 80074d8:	08007489 	.word	0x08007489
 80074dc:	08007489 	.word	0x08007489
 80074e0:	0800762f 	.word	0x0800762f
 80074e4:	08007489 	.word	0x08007489
 80074e8:	08007537 	.word	0x08007537
 80074ec:	08007489 	.word	0x08007489
 80074f0:	08007489 	.word	0x08007489
 80074f4:	080075cf 	.word	0x080075cf
 80074f8:	6833      	ldr	r3, [r6, #0]
 80074fa:	1d1a      	adds	r2, r3, #4
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6032      	str	r2, [r6, #0]
 8007500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007508:	2301      	movs	r3, #1
 800750a:	e09d      	b.n	8007648 <_printf_i+0x1e8>
 800750c:	6833      	ldr	r3, [r6, #0]
 800750e:	6820      	ldr	r0, [r4, #0]
 8007510:	1d19      	adds	r1, r3, #4
 8007512:	6031      	str	r1, [r6, #0]
 8007514:	0606      	lsls	r6, r0, #24
 8007516:	d501      	bpl.n	800751c <_printf_i+0xbc>
 8007518:	681d      	ldr	r5, [r3, #0]
 800751a:	e003      	b.n	8007524 <_printf_i+0xc4>
 800751c:	0645      	lsls	r5, r0, #25
 800751e:	d5fb      	bpl.n	8007518 <_printf_i+0xb8>
 8007520:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007524:	2d00      	cmp	r5, #0
 8007526:	da03      	bge.n	8007530 <_printf_i+0xd0>
 8007528:	232d      	movs	r3, #45	@ 0x2d
 800752a:	426d      	negs	r5, r5
 800752c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007530:	4859      	ldr	r0, [pc, #356]	@ (8007698 <_printf_i+0x238>)
 8007532:	230a      	movs	r3, #10
 8007534:	e011      	b.n	800755a <_printf_i+0xfa>
 8007536:	6821      	ldr	r1, [r4, #0]
 8007538:	6833      	ldr	r3, [r6, #0]
 800753a:	0608      	lsls	r0, r1, #24
 800753c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007540:	d402      	bmi.n	8007548 <_printf_i+0xe8>
 8007542:	0649      	lsls	r1, r1, #25
 8007544:	bf48      	it	mi
 8007546:	b2ad      	uxthmi	r5, r5
 8007548:	2f6f      	cmp	r7, #111	@ 0x6f
 800754a:	4853      	ldr	r0, [pc, #332]	@ (8007698 <_printf_i+0x238>)
 800754c:	6033      	str	r3, [r6, #0]
 800754e:	bf14      	ite	ne
 8007550:	230a      	movne	r3, #10
 8007552:	2308      	moveq	r3, #8
 8007554:	2100      	movs	r1, #0
 8007556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800755a:	6866      	ldr	r6, [r4, #4]
 800755c:	60a6      	str	r6, [r4, #8]
 800755e:	2e00      	cmp	r6, #0
 8007560:	bfa2      	ittt	ge
 8007562:	6821      	ldrge	r1, [r4, #0]
 8007564:	f021 0104 	bicge.w	r1, r1, #4
 8007568:	6021      	strge	r1, [r4, #0]
 800756a:	b90d      	cbnz	r5, 8007570 <_printf_i+0x110>
 800756c:	2e00      	cmp	r6, #0
 800756e:	d04b      	beq.n	8007608 <_printf_i+0x1a8>
 8007570:	4616      	mov	r6, r2
 8007572:	fbb5 f1f3 	udiv	r1, r5, r3
 8007576:	fb03 5711 	mls	r7, r3, r1, r5
 800757a:	5dc7      	ldrb	r7, [r0, r7]
 800757c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007580:	462f      	mov	r7, r5
 8007582:	42bb      	cmp	r3, r7
 8007584:	460d      	mov	r5, r1
 8007586:	d9f4      	bls.n	8007572 <_printf_i+0x112>
 8007588:	2b08      	cmp	r3, #8
 800758a:	d10b      	bne.n	80075a4 <_printf_i+0x144>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	07df      	lsls	r7, r3, #31
 8007590:	d508      	bpl.n	80075a4 <_printf_i+0x144>
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	6861      	ldr	r1, [r4, #4]
 8007596:	4299      	cmp	r1, r3
 8007598:	bfde      	ittt	le
 800759a:	2330      	movle	r3, #48	@ 0x30
 800759c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075a4:	1b92      	subs	r2, r2, r6
 80075a6:	6122      	str	r2, [r4, #16]
 80075a8:	f8cd a000 	str.w	sl, [sp]
 80075ac:	464b      	mov	r3, r9
 80075ae:	aa03      	add	r2, sp, #12
 80075b0:	4621      	mov	r1, r4
 80075b2:	4640      	mov	r0, r8
 80075b4:	f7ff fee6 	bl	8007384 <_printf_common>
 80075b8:	3001      	adds	r0, #1
 80075ba:	d14a      	bne.n	8007652 <_printf_i+0x1f2>
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	b004      	add	sp, #16
 80075c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	f043 0320 	orr.w	r3, r3, #32
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	4833      	ldr	r0, [pc, #204]	@ (800769c <_printf_i+0x23c>)
 80075d0:	2778      	movs	r7, #120	@ 0x78
 80075d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	6831      	ldr	r1, [r6, #0]
 80075da:	061f      	lsls	r7, r3, #24
 80075dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80075e0:	d402      	bmi.n	80075e8 <_printf_i+0x188>
 80075e2:	065f      	lsls	r7, r3, #25
 80075e4:	bf48      	it	mi
 80075e6:	b2ad      	uxthmi	r5, r5
 80075e8:	6031      	str	r1, [r6, #0]
 80075ea:	07d9      	lsls	r1, r3, #31
 80075ec:	bf44      	itt	mi
 80075ee:	f043 0320 	orrmi.w	r3, r3, #32
 80075f2:	6023      	strmi	r3, [r4, #0]
 80075f4:	b11d      	cbz	r5, 80075fe <_printf_i+0x19e>
 80075f6:	2310      	movs	r3, #16
 80075f8:	e7ac      	b.n	8007554 <_printf_i+0xf4>
 80075fa:	4827      	ldr	r0, [pc, #156]	@ (8007698 <_printf_i+0x238>)
 80075fc:	e7e9      	b.n	80075d2 <_printf_i+0x172>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	f023 0320 	bic.w	r3, r3, #32
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	e7f6      	b.n	80075f6 <_printf_i+0x196>
 8007608:	4616      	mov	r6, r2
 800760a:	e7bd      	b.n	8007588 <_printf_i+0x128>
 800760c:	6833      	ldr	r3, [r6, #0]
 800760e:	6825      	ldr	r5, [r4, #0]
 8007610:	6961      	ldr	r1, [r4, #20]
 8007612:	1d18      	adds	r0, r3, #4
 8007614:	6030      	str	r0, [r6, #0]
 8007616:	062e      	lsls	r6, r5, #24
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	d501      	bpl.n	8007620 <_printf_i+0x1c0>
 800761c:	6019      	str	r1, [r3, #0]
 800761e:	e002      	b.n	8007626 <_printf_i+0x1c6>
 8007620:	0668      	lsls	r0, r5, #25
 8007622:	d5fb      	bpl.n	800761c <_printf_i+0x1bc>
 8007624:	8019      	strh	r1, [r3, #0]
 8007626:	2300      	movs	r3, #0
 8007628:	6123      	str	r3, [r4, #16]
 800762a:	4616      	mov	r6, r2
 800762c:	e7bc      	b.n	80075a8 <_printf_i+0x148>
 800762e:	6833      	ldr	r3, [r6, #0]
 8007630:	1d1a      	adds	r2, r3, #4
 8007632:	6032      	str	r2, [r6, #0]
 8007634:	681e      	ldr	r6, [r3, #0]
 8007636:	6862      	ldr	r2, [r4, #4]
 8007638:	2100      	movs	r1, #0
 800763a:	4630      	mov	r0, r6
 800763c:	f7f8 fdd0 	bl	80001e0 <memchr>
 8007640:	b108      	cbz	r0, 8007646 <_printf_i+0x1e6>
 8007642:	1b80      	subs	r0, r0, r6
 8007644:	6060      	str	r0, [r4, #4]
 8007646:	6863      	ldr	r3, [r4, #4]
 8007648:	6123      	str	r3, [r4, #16]
 800764a:	2300      	movs	r3, #0
 800764c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007650:	e7aa      	b.n	80075a8 <_printf_i+0x148>
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	4632      	mov	r2, r6
 8007656:	4649      	mov	r1, r9
 8007658:	4640      	mov	r0, r8
 800765a:	47d0      	blx	sl
 800765c:	3001      	adds	r0, #1
 800765e:	d0ad      	beq.n	80075bc <_printf_i+0x15c>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	079b      	lsls	r3, r3, #30
 8007664:	d413      	bmi.n	800768e <_printf_i+0x22e>
 8007666:	68e0      	ldr	r0, [r4, #12]
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	4298      	cmp	r0, r3
 800766c:	bfb8      	it	lt
 800766e:	4618      	movlt	r0, r3
 8007670:	e7a6      	b.n	80075c0 <_printf_i+0x160>
 8007672:	2301      	movs	r3, #1
 8007674:	4632      	mov	r2, r6
 8007676:	4649      	mov	r1, r9
 8007678:	4640      	mov	r0, r8
 800767a:	47d0      	blx	sl
 800767c:	3001      	adds	r0, #1
 800767e:	d09d      	beq.n	80075bc <_printf_i+0x15c>
 8007680:	3501      	adds	r5, #1
 8007682:	68e3      	ldr	r3, [r4, #12]
 8007684:	9903      	ldr	r1, [sp, #12]
 8007686:	1a5b      	subs	r3, r3, r1
 8007688:	42ab      	cmp	r3, r5
 800768a:	dcf2      	bgt.n	8007672 <_printf_i+0x212>
 800768c:	e7eb      	b.n	8007666 <_printf_i+0x206>
 800768e:	2500      	movs	r5, #0
 8007690:	f104 0619 	add.w	r6, r4, #25
 8007694:	e7f5      	b.n	8007682 <_printf_i+0x222>
 8007696:	bf00      	nop
 8007698:	0800aada 	.word	0x0800aada
 800769c:	0800aaeb 	.word	0x0800aaeb

080076a0 <std>:
 80076a0:	2300      	movs	r3, #0
 80076a2:	b510      	push	{r4, lr}
 80076a4:	4604      	mov	r4, r0
 80076a6:	e9c0 3300 	strd	r3, r3, [r0]
 80076aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ae:	6083      	str	r3, [r0, #8]
 80076b0:	8181      	strh	r1, [r0, #12]
 80076b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80076b4:	81c2      	strh	r2, [r0, #14]
 80076b6:	6183      	str	r3, [r0, #24]
 80076b8:	4619      	mov	r1, r3
 80076ba:	2208      	movs	r2, #8
 80076bc:	305c      	adds	r0, #92	@ 0x5c
 80076be:	f000 f993 	bl	80079e8 <memset>
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <std+0x58>)
 80076c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <std+0x5c>)
 80076c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <std+0x60>)
 80076cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007704 <std+0x64>)
 80076d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80076d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007708 <std+0x68>)
 80076d4:	6224      	str	r4, [r4, #32]
 80076d6:	429c      	cmp	r4, r3
 80076d8:	d006      	beq.n	80076e8 <std+0x48>
 80076da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076de:	4294      	cmp	r4, r2
 80076e0:	d002      	beq.n	80076e8 <std+0x48>
 80076e2:	33d0      	adds	r3, #208	@ 0xd0
 80076e4:	429c      	cmp	r4, r3
 80076e6:	d105      	bne.n	80076f4 <std+0x54>
 80076e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f0:	f000 ba28 	b.w	8007b44 <__retarget_lock_init_recursive>
 80076f4:	bd10      	pop	{r4, pc}
 80076f6:	bf00      	nop
 80076f8:	080078b9 	.word	0x080078b9
 80076fc:	080078df 	.word	0x080078df
 8007700:	08007917 	.word	0x08007917
 8007704:	0800793b 	.word	0x0800793b
 8007708:	200025f4 	.word	0x200025f4

0800770c <stdio_exit_handler>:
 800770c:	4a02      	ldr	r2, [pc, #8]	@ (8007718 <stdio_exit_handler+0xc>)
 800770e:	4903      	ldr	r1, [pc, #12]	@ (800771c <stdio_exit_handler+0x10>)
 8007710:	4803      	ldr	r0, [pc, #12]	@ (8007720 <stdio_exit_handler+0x14>)
 8007712:	f000 b869 	b.w	80077e8 <_fwalk_sglue>
 8007716:	bf00      	nop
 8007718:	200000f8 	.word	0x200000f8
 800771c:	08009af1 	.word	0x08009af1
 8007720:	20000108 	.word	0x20000108

08007724 <cleanup_stdio>:
 8007724:	6841      	ldr	r1, [r0, #4]
 8007726:	4b0c      	ldr	r3, [pc, #48]	@ (8007758 <cleanup_stdio+0x34>)
 8007728:	4299      	cmp	r1, r3
 800772a:	b510      	push	{r4, lr}
 800772c:	4604      	mov	r4, r0
 800772e:	d001      	beq.n	8007734 <cleanup_stdio+0x10>
 8007730:	f002 f9de 	bl	8009af0 <_fflush_r>
 8007734:	68a1      	ldr	r1, [r4, #8]
 8007736:	4b09      	ldr	r3, [pc, #36]	@ (800775c <cleanup_stdio+0x38>)
 8007738:	4299      	cmp	r1, r3
 800773a:	d002      	beq.n	8007742 <cleanup_stdio+0x1e>
 800773c:	4620      	mov	r0, r4
 800773e:	f002 f9d7 	bl	8009af0 <_fflush_r>
 8007742:	68e1      	ldr	r1, [r4, #12]
 8007744:	4b06      	ldr	r3, [pc, #24]	@ (8007760 <cleanup_stdio+0x3c>)
 8007746:	4299      	cmp	r1, r3
 8007748:	d004      	beq.n	8007754 <cleanup_stdio+0x30>
 800774a:	4620      	mov	r0, r4
 800774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007750:	f002 b9ce 	b.w	8009af0 <_fflush_r>
 8007754:	bd10      	pop	{r4, pc}
 8007756:	bf00      	nop
 8007758:	200025f4 	.word	0x200025f4
 800775c:	2000265c 	.word	0x2000265c
 8007760:	200026c4 	.word	0x200026c4

08007764 <global_stdio_init.part.0>:
 8007764:	b510      	push	{r4, lr}
 8007766:	4b0b      	ldr	r3, [pc, #44]	@ (8007794 <global_stdio_init.part.0+0x30>)
 8007768:	4c0b      	ldr	r4, [pc, #44]	@ (8007798 <global_stdio_init.part.0+0x34>)
 800776a:	4a0c      	ldr	r2, [pc, #48]	@ (800779c <global_stdio_init.part.0+0x38>)
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	4620      	mov	r0, r4
 8007770:	2200      	movs	r2, #0
 8007772:	2104      	movs	r1, #4
 8007774:	f7ff ff94 	bl	80076a0 <std>
 8007778:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800777c:	2201      	movs	r2, #1
 800777e:	2109      	movs	r1, #9
 8007780:	f7ff ff8e 	bl	80076a0 <std>
 8007784:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007788:	2202      	movs	r2, #2
 800778a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778e:	2112      	movs	r1, #18
 8007790:	f7ff bf86 	b.w	80076a0 <std>
 8007794:	2000272c 	.word	0x2000272c
 8007798:	200025f4 	.word	0x200025f4
 800779c:	0800770d 	.word	0x0800770d

080077a0 <__sfp_lock_acquire>:
 80077a0:	4801      	ldr	r0, [pc, #4]	@ (80077a8 <__sfp_lock_acquire+0x8>)
 80077a2:	f000 b9d0 	b.w	8007b46 <__retarget_lock_acquire_recursive>
 80077a6:	bf00      	nop
 80077a8:	20002735 	.word	0x20002735

080077ac <__sfp_lock_release>:
 80077ac:	4801      	ldr	r0, [pc, #4]	@ (80077b4 <__sfp_lock_release+0x8>)
 80077ae:	f000 b9cb 	b.w	8007b48 <__retarget_lock_release_recursive>
 80077b2:	bf00      	nop
 80077b4:	20002735 	.word	0x20002735

080077b8 <__sinit>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	4604      	mov	r4, r0
 80077bc:	f7ff fff0 	bl	80077a0 <__sfp_lock_acquire>
 80077c0:	6a23      	ldr	r3, [r4, #32]
 80077c2:	b11b      	cbz	r3, 80077cc <__sinit+0x14>
 80077c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c8:	f7ff bff0 	b.w	80077ac <__sfp_lock_release>
 80077cc:	4b04      	ldr	r3, [pc, #16]	@ (80077e0 <__sinit+0x28>)
 80077ce:	6223      	str	r3, [r4, #32]
 80077d0:	4b04      	ldr	r3, [pc, #16]	@ (80077e4 <__sinit+0x2c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1f5      	bne.n	80077c4 <__sinit+0xc>
 80077d8:	f7ff ffc4 	bl	8007764 <global_stdio_init.part.0>
 80077dc:	e7f2      	b.n	80077c4 <__sinit+0xc>
 80077de:	bf00      	nop
 80077e0:	08007725 	.word	0x08007725
 80077e4:	2000272c 	.word	0x2000272c

080077e8 <_fwalk_sglue>:
 80077e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077ec:	4607      	mov	r7, r0
 80077ee:	4688      	mov	r8, r1
 80077f0:	4614      	mov	r4, r2
 80077f2:	2600      	movs	r6, #0
 80077f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077f8:	f1b9 0901 	subs.w	r9, r9, #1
 80077fc:	d505      	bpl.n	800780a <_fwalk_sglue+0x22>
 80077fe:	6824      	ldr	r4, [r4, #0]
 8007800:	2c00      	cmp	r4, #0
 8007802:	d1f7      	bne.n	80077f4 <_fwalk_sglue+0xc>
 8007804:	4630      	mov	r0, r6
 8007806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800780a:	89ab      	ldrh	r3, [r5, #12]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d907      	bls.n	8007820 <_fwalk_sglue+0x38>
 8007810:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007814:	3301      	adds	r3, #1
 8007816:	d003      	beq.n	8007820 <_fwalk_sglue+0x38>
 8007818:	4629      	mov	r1, r5
 800781a:	4638      	mov	r0, r7
 800781c:	47c0      	blx	r8
 800781e:	4306      	orrs	r6, r0
 8007820:	3568      	adds	r5, #104	@ 0x68
 8007822:	e7e9      	b.n	80077f8 <_fwalk_sglue+0x10>

08007824 <siprintf>:
 8007824:	b40e      	push	{r1, r2, r3}
 8007826:	b500      	push	{lr}
 8007828:	b09c      	sub	sp, #112	@ 0x70
 800782a:	ab1d      	add	r3, sp, #116	@ 0x74
 800782c:	9002      	str	r0, [sp, #8]
 800782e:	9006      	str	r0, [sp, #24]
 8007830:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007834:	4809      	ldr	r0, [pc, #36]	@ (800785c <siprintf+0x38>)
 8007836:	9107      	str	r1, [sp, #28]
 8007838:	9104      	str	r1, [sp, #16]
 800783a:	4909      	ldr	r1, [pc, #36]	@ (8007860 <siprintf+0x3c>)
 800783c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007840:	9105      	str	r1, [sp, #20]
 8007842:	6800      	ldr	r0, [r0, #0]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	a902      	add	r1, sp, #8
 8007848:	f001 fcb8 	bl	80091bc <_svfiprintf_r>
 800784c:	9b02      	ldr	r3, [sp, #8]
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
 8007852:	b01c      	add	sp, #112	@ 0x70
 8007854:	f85d eb04 	ldr.w	lr, [sp], #4
 8007858:	b003      	add	sp, #12
 800785a:	4770      	bx	lr
 800785c:	20000104 	.word	0x20000104
 8007860:	ffff0208 	.word	0xffff0208

08007864 <siscanf>:
 8007864:	b40e      	push	{r1, r2, r3}
 8007866:	b530      	push	{r4, r5, lr}
 8007868:	b09c      	sub	sp, #112	@ 0x70
 800786a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800786c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007870:	f854 5b04 	ldr.w	r5, [r4], #4
 8007874:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007878:	9002      	str	r0, [sp, #8]
 800787a:	9006      	str	r0, [sp, #24]
 800787c:	f7f8 fd00 	bl	8000280 <strlen>
 8007880:	4b0b      	ldr	r3, [pc, #44]	@ (80078b0 <siscanf+0x4c>)
 8007882:	9003      	str	r0, [sp, #12]
 8007884:	9007      	str	r0, [sp, #28]
 8007886:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007888:	480a      	ldr	r0, [pc, #40]	@ (80078b4 <siscanf+0x50>)
 800788a:	9401      	str	r4, [sp, #4]
 800788c:	2300      	movs	r3, #0
 800788e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007890:	9314      	str	r3, [sp, #80]	@ 0x50
 8007892:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007896:	f8ad 3016 	strh.w	r3, [sp, #22]
 800789a:	462a      	mov	r2, r5
 800789c:	4623      	mov	r3, r4
 800789e:	a902      	add	r1, sp, #8
 80078a0:	6800      	ldr	r0, [r0, #0]
 80078a2:	f001 fddf 	bl	8009464 <__ssvfiscanf_r>
 80078a6:	b01c      	add	sp, #112	@ 0x70
 80078a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078ac:	b003      	add	sp, #12
 80078ae:	4770      	bx	lr
 80078b0:	080078db 	.word	0x080078db
 80078b4:	20000104 	.word	0x20000104

080078b8 <__sread>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	460c      	mov	r4, r1
 80078bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c0:	f000 f8f2 	bl	8007aa8 <_read_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	bfab      	itete	ge
 80078c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078ca:	89a3      	ldrhlt	r3, [r4, #12]
 80078cc:	181b      	addge	r3, r3, r0
 80078ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078d2:	bfac      	ite	ge
 80078d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078d6:	81a3      	strhlt	r3, [r4, #12]
 80078d8:	bd10      	pop	{r4, pc}

080078da <__seofread>:
 80078da:	2000      	movs	r0, #0
 80078dc:	4770      	bx	lr

080078de <__swrite>:
 80078de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e2:	461f      	mov	r7, r3
 80078e4:	898b      	ldrh	r3, [r1, #12]
 80078e6:	05db      	lsls	r3, r3, #23
 80078e8:	4605      	mov	r5, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	4616      	mov	r6, r2
 80078ee:	d505      	bpl.n	80078fc <__swrite+0x1e>
 80078f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f4:	2302      	movs	r3, #2
 80078f6:	2200      	movs	r2, #0
 80078f8:	f000 f8c4 	bl	8007a84 <_lseek_r>
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007906:	81a3      	strh	r3, [r4, #12]
 8007908:	4632      	mov	r2, r6
 800790a:	463b      	mov	r3, r7
 800790c:	4628      	mov	r0, r5
 800790e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007912:	f000 b8db 	b.w	8007acc <_write_r>

08007916 <__sseek>:
 8007916:	b510      	push	{r4, lr}
 8007918:	460c      	mov	r4, r1
 800791a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791e:	f000 f8b1 	bl	8007a84 <_lseek_r>
 8007922:	1c43      	adds	r3, r0, #1
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	bf15      	itete	ne
 8007928:	6560      	strne	r0, [r4, #84]	@ 0x54
 800792a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800792e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007932:	81a3      	strheq	r3, [r4, #12]
 8007934:	bf18      	it	ne
 8007936:	81a3      	strhne	r3, [r4, #12]
 8007938:	bd10      	pop	{r4, pc}

0800793a <__sclose>:
 800793a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793e:	f000 b891 	b.w	8007a64 <_close_r>

08007942 <_vsniprintf_r>:
 8007942:	b530      	push	{r4, r5, lr}
 8007944:	4614      	mov	r4, r2
 8007946:	2c00      	cmp	r4, #0
 8007948:	b09b      	sub	sp, #108	@ 0x6c
 800794a:	4605      	mov	r5, r0
 800794c:	461a      	mov	r2, r3
 800794e:	da05      	bge.n	800795c <_vsniprintf_r+0x1a>
 8007950:	238b      	movs	r3, #139	@ 0x8b
 8007952:	6003      	str	r3, [r0, #0]
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	b01b      	add	sp, #108	@ 0x6c
 800795a:	bd30      	pop	{r4, r5, pc}
 800795c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007960:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007964:	bf14      	ite	ne
 8007966:	f104 33ff 	addne.w	r3, r4, #4294967295
 800796a:	4623      	moveq	r3, r4
 800796c:	9302      	str	r3, [sp, #8]
 800796e:	9305      	str	r3, [sp, #20]
 8007970:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007974:	9100      	str	r1, [sp, #0]
 8007976:	9104      	str	r1, [sp, #16]
 8007978:	f8ad 300e 	strh.w	r3, [sp, #14]
 800797c:	4669      	mov	r1, sp
 800797e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007980:	f001 fc1c 	bl	80091bc <_svfiprintf_r>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	bfbc      	itt	lt
 8007988:	238b      	movlt	r3, #139	@ 0x8b
 800798a:	602b      	strlt	r3, [r5, #0]
 800798c:	2c00      	cmp	r4, #0
 800798e:	d0e3      	beq.n	8007958 <_vsniprintf_r+0x16>
 8007990:	9b00      	ldr	r3, [sp, #0]
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
 8007996:	e7df      	b.n	8007958 <_vsniprintf_r+0x16>

08007998 <vsniprintf>:
 8007998:	b507      	push	{r0, r1, r2, lr}
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	4613      	mov	r3, r2
 800799e:	460a      	mov	r2, r1
 80079a0:	4601      	mov	r1, r0
 80079a2:	4803      	ldr	r0, [pc, #12]	@ (80079b0 <vsniprintf+0x18>)
 80079a4:	6800      	ldr	r0, [r0, #0]
 80079a6:	f7ff ffcc 	bl	8007942 <_vsniprintf_r>
 80079aa:	b003      	add	sp, #12
 80079ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80079b0:	20000104 	.word	0x20000104

080079b4 <memmove>:
 80079b4:	4288      	cmp	r0, r1
 80079b6:	b510      	push	{r4, lr}
 80079b8:	eb01 0402 	add.w	r4, r1, r2
 80079bc:	d902      	bls.n	80079c4 <memmove+0x10>
 80079be:	4284      	cmp	r4, r0
 80079c0:	4623      	mov	r3, r4
 80079c2:	d807      	bhi.n	80079d4 <memmove+0x20>
 80079c4:	1e43      	subs	r3, r0, #1
 80079c6:	42a1      	cmp	r1, r4
 80079c8:	d008      	beq.n	80079dc <memmove+0x28>
 80079ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079d2:	e7f8      	b.n	80079c6 <memmove+0x12>
 80079d4:	4402      	add	r2, r0
 80079d6:	4601      	mov	r1, r0
 80079d8:	428a      	cmp	r2, r1
 80079da:	d100      	bne.n	80079de <memmove+0x2a>
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079e6:	e7f7      	b.n	80079d8 <memmove+0x24>

080079e8 <memset>:
 80079e8:	4402      	add	r2, r0
 80079ea:	4603      	mov	r3, r0
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d100      	bne.n	80079f2 <memset+0xa>
 80079f0:	4770      	bx	lr
 80079f2:	f803 1b01 	strb.w	r1, [r3], #1
 80079f6:	e7f9      	b.n	80079ec <memset+0x4>

080079f8 <strncmp>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	b16a      	cbz	r2, 8007a18 <strncmp+0x20>
 80079fc:	3901      	subs	r1, #1
 80079fe:	1884      	adds	r4, r0, r2
 8007a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d103      	bne.n	8007a14 <strncmp+0x1c>
 8007a0c:	42a0      	cmp	r0, r4
 8007a0e:	d001      	beq.n	8007a14 <strncmp+0x1c>
 8007a10:	2a00      	cmp	r2, #0
 8007a12:	d1f5      	bne.n	8007a00 <strncmp+0x8>
 8007a14:	1ad0      	subs	r0, r2, r3
 8007a16:	bd10      	pop	{r4, pc}
 8007a18:	4610      	mov	r0, r2
 8007a1a:	e7fc      	b.n	8007a16 <strncmp+0x1e>

08007a1c <strstr>:
 8007a1c:	780a      	ldrb	r2, [r1, #0]
 8007a1e:	b570      	push	{r4, r5, r6, lr}
 8007a20:	b96a      	cbnz	r2, 8007a3e <strstr+0x22>
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d109      	bne.n	8007a3c <strstr+0x20>
 8007a28:	460c      	mov	r4, r1
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0f6      	beq.n	8007a22 <strstr+0x6>
 8007a34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007a38:	429e      	cmp	r6, r3
 8007a3a:	d0f7      	beq.n	8007a2c <strstr+0x10>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	7803      	ldrb	r3, [r0, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1ef      	bne.n	8007a24 <strstr+0x8>
 8007a44:	4618      	mov	r0, r3
 8007a46:	e7ec      	b.n	8007a22 <strstr+0x6>

08007a48 <stpcpy>:
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f803 2b01 	strb.w	r2, [r3], #1
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	d1f8      	bne.n	8007a4a <stpcpy+0x2>
 8007a58:	4770      	bx	lr
	...

08007a5c <_localeconv_r>:
 8007a5c:	4800      	ldr	r0, [pc, #0]	@ (8007a60 <_localeconv_r+0x4>)
 8007a5e:	4770      	bx	lr
 8007a60:	20000244 	.word	0x20000244

08007a64 <_close_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4d06      	ldr	r5, [pc, #24]	@ (8007a80 <_close_r+0x1c>)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	4608      	mov	r0, r1
 8007a6e:	602b      	str	r3, [r5, #0]
 8007a70:	f7f9 fc9c 	bl	80013ac <_close>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_close_r+0x1a>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_close_r+0x1a>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	20002730 	.word	0x20002730

08007a84 <_lseek_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d07      	ldr	r5, [pc, #28]	@ (8007aa4 <_lseek_r+0x20>)
 8007a88:	4604      	mov	r4, r0
 8007a8a:	4608      	mov	r0, r1
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	602a      	str	r2, [r5, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f7f9 fc96 	bl	80013c4 <_lseek>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_lseek_r+0x1e>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_lseek_r+0x1e>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	20002730 	.word	0x20002730

08007aa8 <_read_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d07      	ldr	r5, [pc, #28]	@ (8007ac8 <_read_r+0x20>)
 8007aac:	4604      	mov	r4, r0
 8007aae:	4608      	mov	r0, r1
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	602a      	str	r2, [r5, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f7f9 fc5c 	bl	8001374 <_read>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_read_r+0x1e>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_read_r+0x1e>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	20002730 	.word	0x20002730

08007acc <_write_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4d07      	ldr	r5, [pc, #28]	@ (8007aec <_write_r+0x20>)
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	602a      	str	r2, [r5, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f7f9 fc58 	bl	8001390 <_write>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_write_r+0x1e>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_write_r+0x1e>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	20002730 	.word	0x20002730

08007af0 <__errno>:
 8007af0:	4b01      	ldr	r3, [pc, #4]	@ (8007af8 <__errno+0x8>)
 8007af2:	6818      	ldr	r0, [r3, #0]
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	20000104 	.word	0x20000104

08007afc <__libc_init_array>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4d0d      	ldr	r5, [pc, #52]	@ (8007b34 <__libc_init_array+0x38>)
 8007b00:	4c0d      	ldr	r4, [pc, #52]	@ (8007b38 <__libc_init_array+0x3c>)
 8007b02:	1b64      	subs	r4, r4, r5
 8007b04:	10a4      	asrs	r4, r4, #2
 8007b06:	2600      	movs	r6, #0
 8007b08:	42a6      	cmp	r6, r4
 8007b0a:	d109      	bne.n	8007b20 <__libc_init_array+0x24>
 8007b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b3c <__libc_init_array+0x40>)
 8007b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8007b40 <__libc_init_array+0x44>)
 8007b10:	f002 fcc4 	bl	800a49c <_init>
 8007b14:	1b64      	subs	r4, r4, r5
 8007b16:	10a4      	asrs	r4, r4, #2
 8007b18:	2600      	movs	r6, #0
 8007b1a:	42a6      	cmp	r6, r4
 8007b1c:	d105      	bne.n	8007b2a <__libc_init_array+0x2e>
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b24:	4798      	blx	r3
 8007b26:	3601      	adds	r6, #1
 8007b28:	e7ee      	b.n	8007b08 <__libc_init_array+0xc>
 8007b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2e:	4798      	blx	r3
 8007b30:	3601      	adds	r6, #1
 8007b32:	e7f2      	b.n	8007b1a <__libc_init_array+0x1e>
 8007b34:	0800ae5c 	.word	0x0800ae5c
 8007b38:	0800ae5c 	.word	0x0800ae5c
 8007b3c:	0800ae5c 	.word	0x0800ae5c
 8007b40:	0800ae60 	.word	0x0800ae60

08007b44 <__retarget_lock_init_recursive>:
 8007b44:	4770      	bx	lr

08007b46 <__retarget_lock_acquire_recursive>:
 8007b46:	4770      	bx	lr

08007b48 <__retarget_lock_release_recursive>:
 8007b48:	4770      	bx	lr

08007b4a <memcpy>:
 8007b4a:	440a      	add	r2, r1
 8007b4c:	4291      	cmp	r1, r2
 8007b4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b52:	d100      	bne.n	8007b56 <memcpy+0xc>
 8007b54:	4770      	bx	lr
 8007b56:	b510      	push	{r4, lr}
 8007b58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b60:	4291      	cmp	r1, r2
 8007b62:	d1f9      	bne.n	8007b58 <memcpy+0xe>
 8007b64:	bd10      	pop	{r4, pc}

08007b66 <quorem>:
 8007b66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6a:	6903      	ldr	r3, [r0, #16]
 8007b6c:	690c      	ldr	r4, [r1, #16]
 8007b6e:	42a3      	cmp	r3, r4
 8007b70:	4607      	mov	r7, r0
 8007b72:	db7e      	blt.n	8007c72 <quorem+0x10c>
 8007b74:	3c01      	subs	r4, #1
 8007b76:	f101 0814 	add.w	r8, r1, #20
 8007b7a:	00a3      	lsls	r3, r4, #2
 8007b7c:	f100 0514 	add.w	r5, r0, #20
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b90:	3301      	adds	r3, #1
 8007b92:	429a      	cmp	r2, r3
 8007b94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b9c:	d32e      	bcc.n	8007bfc <quorem+0x96>
 8007b9e:	f04f 0a00 	mov.w	sl, #0
 8007ba2:	46c4      	mov	ip, r8
 8007ba4:	46ae      	mov	lr, r5
 8007ba6:	46d3      	mov	fp, sl
 8007ba8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bac:	b298      	uxth	r0, r3
 8007bae:	fb06 a000 	mla	r0, r6, r0, sl
 8007bb2:	0c02      	lsrs	r2, r0, #16
 8007bb4:	0c1b      	lsrs	r3, r3, #16
 8007bb6:	fb06 2303 	mla	r3, r6, r3, r2
 8007bba:	f8de 2000 	ldr.w	r2, [lr]
 8007bbe:	b280      	uxth	r0, r0
 8007bc0:	b292      	uxth	r2, r2
 8007bc2:	1a12      	subs	r2, r2, r0
 8007bc4:	445a      	add	r2, fp
 8007bc6:	f8de 0000 	ldr.w	r0, [lr]
 8007bca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bd8:	b292      	uxth	r2, r2
 8007bda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bde:	45e1      	cmp	r9, ip
 8007be0:	f84e 2b04 	str.w	r2, [lr], #4
 8007be4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007be8:	d2de      	bcs.n	8007ba8 <quorem+0x42>
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	58eb      	ldr	r3, [r5, r3]
 8007bee:	b92b      	cbnz	r3, 8007bfc <quorem+0x96>
 8007bf0:	9b01      	ldr	r3, [sp, #4]
 8007bf2:	3b04      	subs	r3, #4
 8007bf4:	429d      	cmp	r5, r3
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	d32f      	bcc.n	8007c5a <quorem+0xf4>
 8007bfa:	613c      	str	r4, [r7, #16]
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	f001 f979 	bl	8008ef4 <__mcmp>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	db25      	blt.n	8007c52 <quorem+0xec>
 8007c06:	4629      	mov	r1, r5
 8007c08:	2000      	movs	r0, #0
 8007c0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c0e:	f8d1 c000 	ldr.w	ip, [r1]
 8007c12:	fa1f fe82 	uxth.w	lr, r2
 8007c16:	fa1f f38c 	uxth.w	r3, ip
 8007c1a:	eba3 030e 	sub.w	r3, r3, lr
 8007c1e:	4403      	add	r3, r0
 8007c20:	0c12      	lsrs	r2, r2, #16
 8007c22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c30:	45c1      	cmp	r9, r8
 8007c32:	f841 3b04 	str.w	r3, [r1], #4
 8007c36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c3a:	d2e6      	bcs.n	8007c0a <quorem+0xa4>
 8007c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c44:	b922      	cbnz	r2, 8007c50 <quorem+0xea>
 8007c46:	3b04      	subs	r3, #4
 8007c48:	429d      	cmp	r5, r3
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	d30b      	bcc.n	8007c66 <quorem+0x100>
 8007c4e:	613c      	str	r4, [r7, #16]
 8007c50:	3601      	adds	r6, #1
 8007c52:	4630      	mov	r0, r6
 8007c54:	b003      	add	sp, #12
 8007c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5a:	6812      	ldr	r2, [r2, #0]
 8007c5c:	3b04      	subs	r3, #4
 8007c5e:	2a00      	cmp	r2, #0
 8007c60:	d1cb      	bne.n	8007bfa <quorem+0x94>
 8007c62:	3c01      	subs	r4, #1
 8007c64:	e7c6      	b.n	8007bf4 <quorem+0x8e>
 8007c66:	6812      	ldr	r2, [r2, #0]
 8007c68:	3b04      	subs	r3, #4
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	d1ef      	bne.n	8007c4e <quorem+0xe8>
 8007c6e:	3c01      	subs	r4, #1
 8007c70:	e7ea      	b.n	8007c48 <quorem+0xe2>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e7ee      	b.n	8007c54 <quorem+0xee>
	...

08007c78 <_dtoa_r>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	69c7      	ldr	r7, [r0, #28]
 8007c7e:	b099      	sub	sp, #100	@ 0x64
 8007c80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c84:	ec55 4b10 	vmov	r4, r5, d0
 8007c88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007c8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c8c:	4683      	mov	fp, r0
 8007c8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c92:	b97f      	cbnz	r7, 8007cb4 <_dtoa_r+0x3c>
 8007c94:	2010      	movs	r0, #16
 8007c96:	f000 fdfd 	bl	8008894 <malloc>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ca0:	b920      	cbnz	r0, 8007cac <_dtoa_r+0x34>
 8007ca2:	4ba7      	ldr	r3, [pc, #668]	@ (8007f40 <_dtoa_r+0x2c8>)
 8007ca4:	21ef      	movs	r1, #239	@ 0xef
 8007ca6:	48a7      	ldr	r0, [pc, #668]	@ (8007f44 <_dtoa_r+0x2cc>)
 8007ca8:	f001 ffce 	bl	8009c48 <__assert_func>
 8007cac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cb0:	6007      	str	r7, [r0, #0]
 8007cb2:	60c7      	str	r7, [r0, #12]
 8007cb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cb8:	6819      	ldr	r1, [r3, #0]
 8007cba:	b159      	cbz	r1, 8007cd4 <_dtoa_r+0x5c>
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	604a      	str	r2, [r1, #4]
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4093      	lsls	r3, r2
 8007cc4:	608b      	str	r3, [r1, #8]
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	f000 feda 	bl	8008a80 <_Bfree>
 8007ccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	1e2b      	subs	r3, r5, #0
 8007cd6:	bfb9      	ittee	lt
 8007cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007cdc:	9303      	strlt	r3, [sp, #12]
 8007cde:	2300      	movge	r3, #0
 8007ce0:	6033      	strge	r3, [r6, #0]
 8007ce2:	9f03      	ldr	r7, [sp, #12]
 8007ce4:	4b98      	ldr	r3, [pc, #608]	@ (8007f48 <_dtoa_r+0x2d0>)
 8007ce6:	bfbc      	itt	lt
 8007ce8:	2201      	movlt	r2, #1
 8007cea:	6032      	strlt	r2, [r6, #0]
 8007cec:	43bb      	bics	r3, r7
 8007cee:	d112      	bne.n	8007d16 <_dtoa_r+0x9e>
 8007cf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cfc:	4323      	orrs	r3, r4
 8007cfe:	f000 854d 	beq.w	800879c <_dtoa_r+0xb24>
 8007d02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f5c <_dtoa_r+0x2e4>
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 854f 	beq.w	80087ac <_dtoa_r+0xb34>
 8007d0e:	f10a 0303 	add.w	r3, sl, #3
 8007d12:	f000 bd49 	b.w	80087a8 <_dtoa_r+0xb30>
 8007d16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	ec51 0b17 	vmov	r0, r1, d7
 8007d20:	2300      	movs	r3, #0
 8007d22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d26:	f7f8 fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	b158      	cbz	r0, 8007d46 <_dtoa_r+0xce>
 8007d2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d30:	2301      	movs	r3, #1
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d36:	b113      	cbz	r3, 8007d3e <_dtoa_r+0xc6>
 8007d38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d3a:	4b84      	ldr	r3, [pc, #528]	@ (8007f4c <_dtoa_r+0x2d4>)
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f60 <_dtoa_r+0x2e8>
 8007d42:	f000 bd33 	b.w	80087ac <_dtoa_r+0xb34>
 8007d46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d4a:	aa16      	add	r2, sp, #88	@ 0x58
 8007d4c:	a917      	add	r1, sp, #92	@ 0x5c
 8007d4e:	4658      	mov	r0, fp
 8007d50:	f001 f980 	bl	8009054 <__d2b>
 8007d54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d58:	4681      	mov	r9, r0
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	d077      	beq.n	8007e4e <_dtoa_r+0x1d6>
 8007d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d78:	4619      	mov	r1, r3
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	4b74      	ldr	r3, [pc, #464]	@ (8007f50 <_dtoa_r+0x2d8>)
 8007d7e:	f7f8 fa8b 	bl	8000298 <__aeabi_dsub>
 8007d82:	a369      	add	r3, pc, #420	@ (adr r3, 8007f28 <_dtoa_r+0x2b0>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 fc3e 	bl	8000608 <__aeabi_dmul>
 8007d8c:	a368      	add	r3, pc, #416	@ (adr r3, 8007f30 <_dtoa_r+0x2b8>)
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f7f8 fa83 	bl	800029c <__adddf3>
 8007d96:	4604      	mov	r4, r0
 8007d98:	4630      	mov	r0, r6
 8007d9a:	460d      	mov	r5, r1
 8007d9c:	f7f8 fbca 	bl	8000534 <__aeabi_i2d>
 8007da0:	a365      	add	r3, pc, #404	@ (adr r3, 8007f38 <_dtoa_r+0x2c0>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f7f8 fc2f 	bl	8000608 <__aeabi_dmul>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4620      	mov	r0, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7f8 fa73 	bl	800029c <__adddf3>
 8007db6:	4604      	mov	r4, r0
 8007db8:	460d      	mov	r5, r1
 8007dba:	f7f8 fed5 	bl	8000b68 <__aeabi_d2iz>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fe90 	bl	8000aec <__aeabi_dcmplt>
 8007dcc:	b140      	cbz	r0, 8007de0 <_dtoa_r+0x168>
 8007dce:	4638      	mov	r0, r7
 8007dd0:	f7f8 fbb0 	bl	8000534 <__aeabi_i2d>
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	462b      	mov	r3, r5
 8007dd8:	f7f8 fe7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ddc:	b900      	cbnz	r0, 8007de0 <_dtoa_r+0x168>
 8007dde:	3f01      	subs	r7, #1
 8007de0:	2f16      	cmp	r7, #22
 8007de2:	d851      	bhi.n	8007e88 <_dtoa_r+0x210>
 8007de4:	4b5b      	ldr	r3, [pc, #364]	@ (8007f54 <_dtoa_r+0x2dc>)
 8007de6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007df2:	f7f8 fe7b 	bl	8000aec <__aeabi_dcmplt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d048      	beq.n	8007e8c <_dtoa_r+0x214>
 8007dfa:	3f01      	subs	r7, #1
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e02:	1b9b      	subs	r3, r3, r6
 8007e04:	1e5a      	subs	r2, r3, #1
 8007e06:	bf44      	itt	mi
 8007e08:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e0c:	2300      	movmi	r3, #0
 8007e0e:	9208      	str	r2, [sp, #32]
 8007e10:	bf54      	ite	pl
 8007e12:	f04f 0800 	movpl.w	r8, #0
 8007e16:	9308      	strmi	r3, [sp, #32]
 8007e18:	2f00      	cmp	r7, #0
 8007e1a:	db39      	blt.n	8007e90 <_dtoa_r+0x218>
 8007e1c:	9b08      	ldr	r3, [sp, #32]
 8007e1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e20:	443b      	add	r3, r7
 8007e22:	9308      	str	r3, [sp, #32]
 8007e24:	2300      	movs	r3, #0
 8007e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e2a:	2b09      	cmp	r3, #9
 8007e2c:	d864      	bhi.n	8007ef8 <_dtoa_r+0x280>
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	bfc4      	itt	gt
 8007e32:	3b04      	subgt	r3, #4
 8007e34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e38:	f1a3 0302 	sub.w	r3, r3, #2
 8007e3c:	bfcc      	ite	gt
 8007e3e:	2400      	movgt	r4, #0
 8007e40:	2401      	movle	r4, #1
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d863      	bhi.n	8007f0e <_dtoa_r+0x296>
 8007e46:	e8df f003 	tbb	[pc, r3]
 8007e4a:	372a      	.short	0x372a
 8007e4c:	5535      	.short	0x5535
 8007e4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e52:	441e      	add	r6, r3
 8007e54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	bfc1      	itttt	gt
 8007e5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e60:	409f      	lslgt	r7, r3
 8007e62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e6a:	bfd6      	itet	le
 8007e6c:	f1c3 0320 	rsble	r3, r3, #32
 8007e70:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e74:	fa04 f003 	lslle.w	r0, r4, r3
 8007e78:	f7f8 fb4c 	bl	8000514 <__aeabi_ui2d>
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e82:	3e01      	subs	r6, #1
 8007e84:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e86:	e777      	b.n	8007d78 <_dtoa_r+0x100>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e7b8      	b.n	8007dfe <_dtoa_r+0x186>
 8007e8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007e8e:	e7b7      	b.n	8007e00 <_dtoa_r+0x188>
 8007e90:	427b      	negs	r3, r7
 8007e92:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e94:	2300      	movs	r3, #0
 8007e96:	eba8 0807 	sub.w	r8, r8, r7
 8007e9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e9c:	e7c4      	b.n	8007e28 <_dtoa_r+0x1b0>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dc35      	bgt.n	8007f14 <_dtoa_r+0x29c>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	9307      	str	r3, [sp, #28]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eb2:	e00b      	b.n	8007ecc <_dtoa_r+0x254>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e7f3      	b.n	8007ea0 <_dtoa_r+0x228>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ebe:	18fb      	adds	r3, r7, r3
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	9307      	str	r3, [sp, #28]
 8007ec8:	bfb8      	it	lt
 8007eca:	2301      	movlt	r3, #1
 8007ecc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	f102 0514 	add.w	r5, r2, #20
 8007ed8:	429d      	cmp	r5, r3
 8007eda:	d91f      	bls.n	8007f1c <_dtoa_r+0x2a4>
 8007edc:	6041      	str	r1, [r0, #4]
 8007ede:	4658      	mov	r0, fp
 8007ee0:	f000 fd8e 	bl	8008a00 <_Balloc>
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d13c      	bne.n	8007f64 <_dtoa_r+0x2ec>
 8007eea:	4b1b      	ldr	r3, [pc, #108]	@ (8007f58 <_dtoa_r+0x2e0>)
 8007eec:	4602      	mov	r2, r0
 8007eee:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ef2:	e6d8      	b.n	8007ca6 <_dtoa_r+0x2e>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e7e0      	b.n	8007eba <_dtoa_r+0x242>
 8007ef8:	2401      	movs	r4, #1
 8007efa:	2300      	movs	r3, #0
 8007efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007efe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f00:	f04f 33ff 	mov.w	r3, #4294967295
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	9307      	str	r3, [sp, #28]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2312      	movs	r3, #18
 8007f0c:	e7d0      	b.n	8007eb0 <_dtoa_r+0x238>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f12:	e7f5      	b.n	8007f00 <_dtoa_r+0x288>
 8007f14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	9307      	str	r3, [sp, #28]
 8007f1a:	e7d7      	b.n	8007ecc <_dtoa_r+0x254>
 8007f1c:	3101      	adds	r1, #1
 8007f1e:	0052      	lsls	r2, r2, #1
 8007f20:	e7d8      	b.n	8007ed4 <_dtoa_r+0x25c>
 8007f22:	bf00      	nop
 8007f24:	f3af 8000 	nop.w
 8007f28:	636f4361 	.word	0x636f4361
 8007f2c:	3fd287a7 	.word	0x3fd287a7
 8007f30:	8b60c8b3 	.word	0x8b60c8b3
 8007f34:	3fc68a28 	.word	0x3fc68a28
 8007f38:	509f79fb 	.word	0x509f79fb
 8007f3c:	3fd34413 	.word	0x3fd34413
 8007f40:	0800ab09 	.word	0x0800ab09
 8007f44:	0800ab20 	.word	0x0800ab20
 8007f48:	7ff00000 	.word	0x7ff00000
 8007f4c:	0800ad08 	.word	0x0800ad08
 8007f50:	3ff80000 	.word	0x3ff80000
 8007f54:	0800ac18 	.word	0x0800ac18
 8007f58:	0800ab78 	.word	0x0800ab78
 8007f5c:	0800ab05 	.word	0x0800ab05
 8007f60:	0800ad07 	.word	0x0800ad07
 8007f64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f68:	6018      	str	r0, [r3, #0]
 8007f6a:	9b07      	ldr	r3, [sp, #28]
 8007f6c:	2b0e      	cmp	r3, #14
 8007f6e:	f200 80a4 	bhi.w	80080ba <_dtoa_r+0x442>
 8007f72:	2c00      	cmp	r4, #0
 8007f74:	f000 80a1 	beq.w	80080ba <_dtoa_r+0x442>
 8007f78:	2f00      	cmp	r7, #0
 8007f7a:	dd33      	ble.n	8007fe4 <_dtoa_r+0x36c>
 8007f7c:	4bad      	ldr	r3, [pc, #692]	@ (8008234 <_dtoa_r+0x5bc>)
 8007f7e:	f007 020f 	and.w	r2, r7, #15
 8007f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f86:	ed93 7b00 	vldr	d7, [r3]
 8007f8a:	05f8      	lsls	r0, r7, #23
 8007f8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f94:	d516      	bpl.n	8007fc4 <_dtoa_r+0x34c>
 8007f96:	4ba8      	ldr	r3, [pc, #672]	@ (8008238 <_dtoa_r+0x5c0>)
 8007f98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fa0:	f7f8 fc5c 	bl	800085c <__aeabi_ddiv>
 8007fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fa8:	f004 040f 	and.w	r4, r4, #15
 8007fac:	2603      	movs	r6, #3
 8007fae:	4da2      	ldr	r5, [pc, #648]	@ (8008238 <_dtoa_r+0x5c0>)
 8007fb0:	b954      	cbnz	r4, 8007fc8 <_dtoa_r+0x350>
 8007fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fba:	f7f8 fc4f 	bl	800085c <__aeabi_ddiv>
 8007fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fc2:	e028      	b.n	8008016 <_dtoa_r+0x39e>
 8007fc4:	2602      	movs	r6, #2
 8007fc6:	e7f2      	b.n	8007fae <_dtoa_r+0x336>
 8007fc8:	07e1      	lsls	r1, r4, #31
 8007fca:	d508      	bpl.n	8007fde <_dtoa_r+0x366>
 8007fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fd4:	f7f8 fb18 	bl	8000608 <__aeabi_dmul>
 8007fd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fdc:	3601      	adds	r6, #1
 8007fde:	1064      	asrs	r4, r4, #1
 8007fe0:	3508      	adds	r5, #8
 8007fe2:	e7e5      	b.n	8007fb0 <_dtoa_r+0x338>
 8007fe4:	f000 80d2 	beq.w	800818c <_dtoa_r+0x514>
 8007fe8:	427c      	negs	r4, r7
 8007fea:	4b92      	ldr	r3, [pc, #584]	@ (8008234 <_dtoa_r+0x5bc>)
 8007fec:	4d92      	ldr	r5, [pc, #584]	@ (8008238 <_dtoa_r+0x5c0>)
 8007fee:	f004 020f 	and.w	r2, r4, #15
 8007ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ffe:	f7f8 fb03 	bl	8000608 <__aeabi_dmul>
 8008002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008006:	1124      	asrs	r4, r4, #4
 8008008:	2300      	movs	r3, #0
 800800a:	2602      	movs	r6, #2
 800800c:	2c00      	cmp	r4, #0
 800800e:	f040 80b2 	bne.w	8008176 <_dtoa_r+0x4fe>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1d3      	bne.n	8007fbe <_dtoa_r+0x346>
 8008016:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008018:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 80b7 	beq.w	8008190 <_dtoa_r+0x518>
 8008022:	4b86      	ldr	r3, [pc, #536]	@ (800823c <_dtoa_r+0x5c4>)
 8008024:	2200      	movs	r2, #0
 8008026:	4620      	mov	r0, r4
 8008028:	4629      	mov	r1, r5
 800802a:	f7f8 fd5f 	bl	8000aec <__aeabi_dcmplt>
 800802e:	2800      	cmp	r0, #0
 8008030:	f000 80ae 	beq.w	8008190 <_dtoa_r+0x518>
 8008034:	9b07      	ldr	r3, [sp, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80aa 	beq.w	8008190 <_dtoa_r+0x518>
 800803c:	9b00      	ldr	r3, [sp, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	dd37      	ble.n	80080b2 <_dtoa_r+0x43a>
 8008042:	1e7b      	subs	r3, r7, #1
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	4620      	mov	r0, r4
 8008048:	4b7d      	ldr	r3, [pc, #500]	@ (8008240 <_dtoa_r+0x5c8>)
 800804a:	2200      	movs	r2, #0
 800804c:	4629      	mov	r1, r5
 800804e:	f7f8 fadb 	bl	8000608 <__aeabi_dmul>
 8008052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008056:	9c00      	ldr	r4, [sp, #0]
 8008058:	3601      	adds	r6, #1
 800805a:	4630      	mov	r0, r6
 800805c:	f7f8 fa6a 	bl	8000534 <__aeabi_i2d>
 8008060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008064:	f7f8 fad0 	bl	8000608 <__aeabi_dmul>
 8008068:	4b76      	ldr	r3, [pc, #472]	@ (8008244 <_dtoa_r+0x5cc>)
 800806a:	2200      	movs	r2, #0
 800806c:	f7f8 f916 	bl	800029c <__adddf3>
 8008070:	4605      	mov	r5, r0
 8008072:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008076:	2c00      	cmp	r4, #0
 8008078:	f040 808d 	bne.w	8008196 <_dtoa_r+0x51e>
 800807c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008080:	4b71      	ldr	r3, [pc, #452]	@ (8008248 <_dtoa_r+0x5d0>)
 8008082:	2200      	movs	r2, #0
 8008084:	f7f8 f908 	bl	8000298 <__aeabi_dsub>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008090:	462a      	mov	r2, r5
 8008092:	4633      	mov	r3, r6
 8008094:	f7f8 fd48 	bl	8000b28 <__aeabi_dcmpgt>
 8008098:	2800      	cmp	r0, #0
 800809a:	f040 828b 	bne.w	80085b4 <_dtoa_r+0x93c>
 800809e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a2:	462a      	mov	r2, r5
 80080a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080a8:	f7f8 fd20 	bl	8000aec <__aeabi_dcmplt>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f040 8128 	bne.w	8008302 <_dtoa_r+0x68a>
 80080b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f2c0 815a 	blt.w	8008376 <_dtoa_r+0x6fe>
 80080c2:	2f0e      	cmp	r7, #14
 80080c4:	f300 8157 	bgt.w	8008376 <_dtoa_r+0x6fe>
 80080c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008234 <_dtoa_r+0x5bc>)
 80080ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080ce:	ed93 7b00 	vldr	d7, [r3]
 80080d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	ed8d 7b00 	vstr	d7, [sp]
 80080da:	da03      	bge.n	80080e4 <_dtoa_r+0x46c>
 80080dc:	9b07      	ldr	r3, [sp, #28]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f340 8101 	ble.w	80082e6 <_dtoa_r+0x66e>
 80080e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080e8:	4656      	mov	r6, sl
 80080ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7f8 fbb3 	bl	800085c <__aeabi_ddiv>
 80080f6:	f7f8 fd37 	bl	8000b68 <__aeabi_d2iz>
 80080fa:	4680      	mov	r8, r0
 80080fc:	f7f8 fa1a 	bl	8000534 <__aeabi_i2d>
 8008100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008104:	f7f8 fa80 	bl	8000608 <__aeabi_dmul>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4620      	mov	r0, r4
 800810e:	4629      	mov	r1, r5
 8008110:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008114:	f7f8 f8c0 	bl	8000298 <__aeabi_dsub>
 8008118:	f806 4b01 	strb.w	r4, [r6], #1
 800811c:	9d07      	ldr	r5, [sp, #28]
 800811e:	eba6 040a 	sub.w	r4, r6, sl
 8008122:	42a5      	cmp	r5, r4
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	f040 8117 	bne.w	800835a <_dtoa_r+0x6e2>
 800812c:	f7f8 f8b6 	bl	800029c <__adddf3>
 8008130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008134:	4604      	mov	r4, r0
 8008136:	460d      	mov	r5, r1
 8008138:	f7f8 fcf6 	bl	8000b28 <__aeabi_dcmpgt>
 800813c:	2800      	cmp	r0, #0
 800813e:	f040 80f9 	bne.w	8008334 <_dtoa_r+0x6bc>
 8008142:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	f7f8 fcc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800814e:	b118      	cbz	r0, 8008158 <_dtoa_r+0x4e0>
 8008150:	f018 0f01 	tst.w	r8, #1
 8008154:	f040 80ee 	bne.w	8008334 <_dtoa_r+0x6bc>
 8008158:	4649      	mov	r1, r9
 800815a:	4658      	mov	r0, fp
 800815c:	f000 fc90 	bl	8008a80 <_Bfree>
 8008160:	2300      	movs	r3, #0
 8008162:	7033      	strb	r3, [r6, #0]
 8008164:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008166:	3701      	adds	r7, #1
 8008168:	601f      	str	r7, [r3, #0]
 800816a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 831d 	beq.w	80087ac <_dtoa_r+0xb34>
 8008172:	601e      	str	r6, [r3, #0]
 8008174:	e31a      	b.n	80087ac <_dtoa_r+0xb34>
 8008176:	07e2      	lsls	r2, r4, #31
 8008178:	d505      	bpl.n	8008186 <_dtoa_r+0x50e>
 800817a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800817e:	f7f8 fa43 	bl	8000608 <__aeabi_dmul>
 8008182:	3601      	adds	r6, #1
 8008184:	2301      	movs	r3, #1
 8008186:	1064      	asrs	r4, r4, #1
 8008188:	3508      	adds	r5, #8
 800818a:	e73f      	b.n	800800c <_dtoa_r+0x394>
 800818c:	2602      	movs	r6, #2
 800818e:	e742      	b.n	8008016 <_dtoa_r+0x39e>
 8008190:	9c07      	ldr	r4, [sp, #28]
 8008192:	9704      	str	r7, [sp, #16]
 8008194:	e761      	b.n	800805a <_dtoa_r+0x3e2>
 8008196:	4b27      	ldr	r3, [pc, #156]	@ (8008234 <_dtoa_r+0x5bc>)
 8008198:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800819a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800819e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081a2:	4454      	add	r4, sl
 80081a4:	2900      	cmp	r1, #0
 80081a6:	d053      	beq.n	8008250 <_dtoa_r+0x5d8>
 80081a8:	4928      	ldr	r1, [pc, #160]	@ (800824c <_dtoa_r+0x5d4>)
 80081aa:	2000      	movs	r0, #0
 80081ac:	f7f8 fb56 	bl	800085c <__aeabi_ddiv>
 80081b0:	4633      	mov	r3, r6
 80081b2:	462a      	mov	r2, r5
 80081b4:	f7f8 f870 	bl	8000298 <__aeabi_dsub>
 80081b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081bc:	4656      	mov	r6, sl
 80081be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081c2:	f7f8 fcd1 	bl	8000b68 <__aeabi_d2iz>
 80081c6:	4605      	mov	r5, r0
 80081c8:	f7f8 f9b4 	bl	8000534 <__aeabi_i2d>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081d4:	f7f8 f860 	bl	8000298 <__aeabi_dsub>
 80081d8:	3530      	adds	r5, #48	@ 0x30
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081e2:	f806 5b01 	strb.w	r5, [r6], #1
 80081e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081ea:	f7f8 fc7f 	bl	8000aec <__aeabi_dcmplt>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d171      	bne.n	80082d6 <_dtoa_r+0x65e>
 80081f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f6:	4911      	ldr	r1, [pc, #68]	@ (800823c <_dtoa_r+0x5c4>)
 80081f8:	2000      	movs	r0, #0
 80081fa:	f7f8 f84d 	bl	8000298 <__aeabi_dsub>
 80081fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008202:	f7f8 fc73 	bl	8000aec <__aeabi_dcmplt>
 8008206:	2800      	cmp	r0, #0
 8008208:	f040 8095 	bne.w	8008336 <_dtoa_r+0x6be>
 800820c:	42a6      	cmp	r6, r4
 800820e:	f43f af50 	beq.w	80080b2 <_dtoa_r+0x43a>
 8008212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008216:	4b0a      	ldr	r3, [pc, #40]	@ (8008240 <_dtoa_r+0x5c8>)
 8008218:	2200      	movs	r2, #0
 800821a:	f7f8 f9f5 	bl	8000608 <__aeabi_dmul>
 800821e:	4b08      	ldr	r3, [pc, #32]	@ (8008240 <_dtoa_r+0x5c8>)
 8008220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008224:	2200      	movs	r2, #0
 8008226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800822a:	f7f8 f9ed 	bl	8000608 <__aeabi_dmul>
 800822e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008232:	e7c4      	b.n	80081be <_dtoa_r+0x546>
 8008234:	0800ac18 	.word	0x0800ac18
 8008238:	0800abf0 	.word	0x0800abf0
 800823c:	3ff00000 	.word	0x3ff00000
 8008240:	40240000 	.word	0x40240000
 8008244:	401c0000 	.word	0x401c0000
 8008248:	40140000 	.word	0x40140000
 800824c:	3fe00000 	.word	0x3fe00000
 8008250:	4631      	mov	r1, r6
 8008252:	4628      	mov	r0, r5
 8008254:	f7f8 f9d8 	bl	8000608 <__aeabi_dmul>
 8008258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800825c:	9415      	str	r4, [sp, #84]	@ 0x54
 800825e:	4656      	mov	r6, sl
 8008260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008264:	f7f8 fc80 	bl	8000b68 <__aeabi_d2iz>
 8008268:	4605      	mov	r5, r0
 800826a:	f7f8 f963 	bl	8000534 <__aeabi_i2d>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008276:	f7f8 f80f 	bl	8000298 <__aeabi_dsub>
 800827a:	3530      	adds	r5, #48	@ 0x30
 800827c:	f806 5b01 	strb.w	r5, [r6], #1
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	42a6      	cmp	r6, r4
 8008286:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	d124      	bne.n	80082da <_dtoa_r+0x662>
 8008290:	4bac      	ldr	r3, [pc, #688]	@ (8008544 <_dtoa_r+0x8cc>)
 8008292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008296:	f7f8 f801 	bl	800029c <__adddf3>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a2:	f7f8 fc41 	bl	8000b28 <__aeabi_dcmpgt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d145      	bne.n	8008336 <_dtoa_r+0x6be>
 80082aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082ae:	49a5      	ldr	r1, [pc, #660]	@ (8008544 <_dtoa_r+0x8cc>)
 80082b0:	2000      	movs	r0, #0
 80082b2:	f7f7 fff1 	bl	8000298 <__aeabi_dsub>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082be:	f7f8 fc15 	bl	8000aec <__aeabi_dcmplt>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f43f aef5 	beq.w	80080b2 <_dtoa_r+0x43a>
 80082c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80082ca:	1e73      	subs	r3, r6, #1
 80082cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80082ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082d2:	2b30      	cmp	r3, #48	@ 0x30
 80082d4:	d0f8      	beq.n	80082c8 <_dtoa_r+0x650>
 80082d6:	9f04      	ldr	r7, [sp, #16]
 80082d8:	e73e      	b.n	8008158 <_dtoa_r+0x4e0>
 80082da:	4b9b      	ldr	r3, [pc, #620]	@ (8008548 <_dtoa_r+0x8d0>)
 80082dc:	f7f8 f994 	bl	8000608 <__aeabi_dmul>
 80082e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082e4:	e7bc      	b.n	8008260 <_dtoa_r+0x5e8>
 80082e6:	d10c      	bne.n	8008302 <_dtoa_r+0x68a>
 80082e8:	4b98      	ldr	r3, [pc, #608]	@ (800854c <_dtoa_r+0x8d4>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082f0:	f7f8 f98a 	bl	8000608 <__aeabi_dmul>
 80082f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082f8:	f7f8 fc0c 	bl	8000b14 <__aeabi_dcmpge>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f000 8157 	beq.w	80085b0 <_dtoa_r+0x938>
 8008302:	2400      	movs	r4, #0
 8008304:	4625      	mov	r5, r4
 8008306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008308:	43db      	mvns	r3, r3
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	4656      	mov	r6, sl
 800830e:	2700      	movs	r7, #0
 8008310:	4621      	mov	r1, r4
 8008312:	4658      	mov	r0, fp
 8008314:	f000 fbb4 	bl	8008a80 <_Bfree>
 8008318:	2d00      	cmp	r5, #0
 800831a:	d0dc      	beq.n	80082d6 <_dtoa_r+0x65e>
 800831c:	b12f      	cbz	r7, 800832a <_dtoa_r+0x6b2>
 800831e:	42af      	cmp	r7, r5
 8008320:	d003      	beq.n	800832a <_dtoa_r+0x6b2>
 8008322:	4639      	mov	r1, r7
 8008324:	4658      	mov	r0, fp
 8008326:	f000 fbab 	bl	8008a80 <_Bfree>
 800832a:	4629      	mov	r1, r5
 800832c:	4658      	mov	r0, fp
 800832e:	f000 fba7 	bl	8008a80 <_Bfree>
 8008332:	e7d0      	b.n	80082d6 <_dtoa_r+0x65e>
 8008334:	9704      	str	r7, [sp, #16]
 8008336:	4633      	mov	r3, r6
 8008338:	461e      	mov	r6, r3
 800833a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800833e:	2a39      	cmp	r2, #57	@ 0x39
 8008340:	d107      	bne.n	8008352 <_dtoa_r+0x6da>
 8008342:	459a      	cmp	sl, r3
 8008344:	d1f8      	bne.n	8008338 <_dtoa_r+0x6c0>
 8008346:	9a04      	ldr	r2, [sp, #16]
 8008348:	3201      	adds	r2, #1
 800834a:	9204      	str	r2, [sp, #16]
 800834c:	2230      	movs	r2, #48	@ 0x30
 800834e:	f88a 2000 	strb.w	r2, [sl]
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	3201      	adds	r2, #1
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	e7bd      	b.n	80082d6 <_dtoa_r+0x65e>
 800835a:	4b7b      	ldr	r3, [pc, #492]	@ (8008548 <_dtoa_r+0x8d0>)
 800835c:	2200      	movs	r2, #0
 800835e:	f7f8 f953 	bl	8000608 <__aeabi_dmul>
 8008362:	2200      	movs	r2, #0
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	f7f8 fbb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800836e:	2800      	cmp	r0, #0
 8008370:	f43f aebb 	beq.w	80080ea <_dtoa_r+0x472>
 8008374:	e6f0      	b.n	8008158 <_dtoa_r+0x4e0>
 8008376:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008378:	2a00      	cmp	r2, #0
 800837a:	f000 80db 	beq.w	8008534 <_dtoa_r+0x8bc>
 800837e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008380:	2a01      	cmp	r2, #1
 8008382:	f300 80bf 	bgt.w	8008504 <_dtoa_r+0x88c>
 8008386:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008388:	2a00      	cmp	r2, #0
 800838a:	f000 80b7 	beq.w	80084fc <_dtoa_r+0x884>
 800838e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008392:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008394:	4646      	mov	r6, r8
 8008396:	9a08      	ldr	r2, [sp, #32]
 8008398:	2101      	movs	r1, #1
 800839a:	441a      	add	r2, r3
 800839c:	4658      	mov	r0, fp
 800839e:	4498      	add	r8, r3
 80083a0:	9208      	str	r2, [sp, #32]
 80083a2:	f000 fc21 	bl	8008be8 <__i2b>
 80083a6:	4605      	mov	r5, r0
 80083a8:	b15e      	cbz	r6, 80083c2 <_dtoa_r+0x74a>
 80083aa:	9b08      	ldr	r3, [sp, #32]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	dd08      	ble.n	80083c2 <_dtoa_r+0x74a>
 80083b0:	42b3      	cmp	r3, r6
 80083b2:	9a08      	ldr	r2, [sp, #32]
 80083b4:	bfa8      	it	ge
 80083b6:	4633      	movge	r3, r6
 80083b8:	eba8 0803 	sub.w	r8, r8, r3
 80083bc:	1af6      	subs	r6, r6, r3
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	9308      	str	r3, [sp, #32]
 80083c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083c4:	b1f3      	cbz	r3, 8008404 <_dtoa_r+0x78c>
 80083c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 80b7 	beq.w	800853c <_dtoa_r+0x8c4>
 80083ce:	b18c      	cbz	r4, 80083f4 <_dtoa_r+0x77c>
 80083d0:	4629      	mov	r1, r5
 80083d2:	4622      	mov	r2, r4
 80083d4:	4658      	mov	r0, fp
 80083d6:	f000 fcc7 	bl	8008d68 <__pow5mult>
 80083da:	464a      	mov	r2, r9
 80083dc:	4601      	mov	r1, r0
 80083de:	4605      	mov	r5, r0
 80083e0:	4658      	mov	r0, fp
 80083e2:	f000 fc17 	bl	8008c14 <__multiply>
 80083e6:	4649      	mov	r1, r9
 80083e8:	9004      	str	r0, [sp, #16]
 80083ea:	4658      	mov	r0, fp
 80083ec:	f000 fb48 	bl	8008a80 <_Bfree>
 80083f0:	9b04      	ldr	r3, [sp, #16]
 80083f2:	4699      	mov	r9, r3
 80083f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f6:	1b1a      	subs	r2, r3, r4
 80083f8:	d004      	beq.n	8008404 <_dtoa_r+0x78c>
 80083fa:	4649      	mov	r1, r9
 80083fc:	4658      	mov	r0, fp
 80083fe:	f000 fcb3 	bl	8008d68 <__pow5mult>
 8008402:	4681      	mov	r9, r0
 8008404:	2101      	movs	r1, #1
 8008406:	4658      	mov	r0, fp
 8008408:	f000 fbee 	bl	8008be8 <__i2b>
 800840c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800840e:	4604      	mov	r4, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 81cf 	beq.w	80087b4 <_dtoa_r+0xb3c>
 8008416:	461a      	mov	r2, r3
 8008418:	4601      	mov	r1, r0
 800841a:	4658      	mov	r0, fp
 800841c:	f000 fca4 	bl	8008d68 <__pow5mult>
 8008420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008422:	2b01      	cmp	r3, #1
 8008424:	4604      	mov	r4, r0
 8008426:	f300 8095 	bgt.w	8008554 <_dtoa_r+0x8dc>
 800842a:	9b02      	ldr	r3, [sp, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 8087 	bne.w	8008540 <_dtoa_r+0x8c8>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008438:	2b00      	cmp	r3, #0
 800843a:	f040 8089 	bne.w	8008550 <_dtoa_r+0x8d8>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008444:	0d1b      	lsrs	r3, r3, #20
 8008446:	051b      	lsls	r3, r3, #20
 8008448:	b12b      	cbz	r3, 8008456 <_dtoa_r+0x7de>
 800844a:	9b08      	ldr	r3, [sp, #32]
 800844c:	3301      	adds	r3, #1
 800844e:	9308      	str	r3, [sp, #32]
 8008450:	f108 0801 	add.w	r8, r8, #1
 8008454:	2301      	movs	r3, #1
 8008456:	930a      	str	r3, [sp, #40]	@ 0x28
 8008458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 81b0 	beq.w	80087c0 <_dtoa_r+0xb48>
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008466:	6918      	ldr	r0, [r3, #16]
 8008468:	f000 fb72 	bl	8008b50 <__hi0bits>
 800846c:	f1c0 0020 	rsb	r0, r0, #32
 8008470:	9b08      	ldr	r3, [sp, #32]
 8008472:	4418      	add	r0, r3
 8008474:	f010 001f 	ands.w	r0, r0, #31
 8008478:	d077      	beq.n	800856a <_dtoa_r+0x8f2>
 800847a:	f1c0 0320 	rsb	r3, r0, #32
 800847e:	2b04      	cmp	r3, #4
 8008480:	dd6b      	ble.n	800855a <_dtoa_r+0x8e2>
 8008482:	9b08      	ldr	r3, [sp, #32]
 8008484:	f1c0 001c 	rsb	r0, r0, #28
 8008488:	4403      	add	r3, r0
 800848a:	4480      	add	r8, r0
 800848c:	4406      	add	r6, r0
 800848e:	9308      	str	r3, [sp, #32]
 8008490:	f1b8 0f00 	cmp.w	r8, #0
 8008494:	dd05      	ble.n	80084a2 <_dtoa_r+0x82a>
 8008496:	4649      	mov	r1, r9
 8008498:	4642      	mov	r2, r8
 800849a:	4658      	mov	r0, fp
 800849c:	f000 fcbe 	bl	8008e1c <__lshift>
 80084a0:	4681      	mov	r9, r0
 80084a2:	9b08      	ldr	r3, [sp, #32]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	dd05      	ble.n	80084b4 <_dtoa_r+0x83c>
 80084a8:	4621      	mov	r1, r4
 80084aa:	461a      	mov	r2, r3
 80084ac:	4658      	mov	r0, fp
 80084ae:	f000 fcb5 	bl	8008e1c <__lshift>
 80084b2:	4604      	mov	r4, r0
 80084b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d059      	beq.n	800856e <_dtoa_r+0x8f6>
 80084ba:	4621      	mov	r1, r4
 80084bc:	4648      	mov	r0, r9
 80084be:	f000 fd19 	bl	8008ef4 <__mcmp>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	da53      	bge.n	800856e <_dtoa_r+0x8f6>
 80084c6:	1e7b      	subs	r3, r7, #1
 80084c8:	9304      	str	r3, [sp, #16]
 80084ca:	4649      	mov	r1, r9
 80084cc:	2300      	movs	r3, #0
 80084ce:	220a      	movs	r2, #10
 80084d0:	4658      	mov	r0, fp
 80084d2:	f000 faf7 	bl	8008ac4 <__multadd>
 80084d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084d8:	4681      	mov	r9, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 8172 	beq.w	80087c4 <_dtoa_r+0xb4c>
 80084e0:	2300      	movs	r3, #0
 80084e2:	4629      	mov	r1, r5
 80084e4:	220a      	movs	r2, #10
 80084e6:	4658      	mov	r0, fp
 80084e8:	f000 faec 	bl	8008ac4 <__multadd>
 80084ec:	9b00      	ldr	r3, [sp, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	4605      	mov	r5, r0
 80084f2:	dc67      	bgt.n	80085c4 <_dtoa_r+0x94c>
 80084f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	dc41      	bgt.n	800857e <_dtoa_r+0x906>
 80084fa:	e063      	b.n	80085c4 <_dtoa_r+0x94c>
 80084fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008502:	e746      	b.n	8008392 <_dtoa_r+0x71a>
 8008504:	9b07      	ldr	r3, [sp, #28]
 8008506:	1e5c      	subs	r4, r3, #1
 8008508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800850a:	42a3      	cmp	r3, r4
 800850c:	bfbf      	itttt	lt
 800850e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008510:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008512:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008514:	1ae3      	sublt	r3, r4, r3
 8008516:	bfb4      	ite	lt
 8008518:	18d2      	addlt	r2, r2, r3
 800851a:	1b1c      	subge	r4, r3, r4
 800851c:	9b07      	ldr	r3, [sp, #28]
 800851e:	bfbc      	itt	lt
 8008520:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008522:	2400      	movlt	r4, #0
 8008524:	2b00      	cmp	r3, #0
 8008526:	bfb5      	itete	lt
 8008528:	eba8 0603 	sublt.w	r6, r8, r3
 800852c:	9b07      	ldrge	r3, [sp, #28]
 800852e:	2300      	movlt	r3, #0
 8008530:	4646      	movge	r6, r8
 8008532:	e730      	b.n	8008396 <_dtoa_r+0x71e>
 8008534:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008536:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008538:	4646      	mov	r6, r8
 800853a:	e735      	b.n	80083a8 <_dtoa_r+0x730>
 800853c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800853e:	e75c      	b.n	80083fa <_dtoa_r+0x782>
 8008540:	2300      	movs	r3, #0
 8008542:	e788      	b.n	8008456 <_dtoa_r+0x7de>
 8008544:	3fe00000 	.word	0x3fe00000
 8008548:	40240000 	.word	0x40240000
 800854c:	40140000 	.word	0x40140000
 8008550:	9b02      	ldr	r3, [sp, #8]
 8008552:	e780      	b.n	8008456 <_dtoa_r+0x7de>
 8008554:	2300      	movs	r3, #0
 8008556:	930a      	str	r3, [sp, #40]	@ 0x28
 8008558:	e782      	b.n	8008460 <_dtoa_r+0x7e8>
 800855a:	d099      	beq.n	8008490 <_dtoa_r+0x818>
 800855c:	9a08      	ldr	r2, [sp, #32]
 800855e:	331c      	adds	r3, #28
 8008560:	441a      	add	r2, r3
 8008562:	4498      	add	r8, r3
 8008564:	441e      	add	r6, r3
 8008566:	9208      	str	r2, [sp, #32]
 8008568:	e792      	b.n	8008490 <_dtoa_r+0x818>
 800856a:	4603      	mov	r3, r0
 800856c:	e7f6      	b.n	800855c <_dtoa_r+0x8e4>
 800856e:	9b07      	ldr	r3, [sp, #28]
 8008570:	9704      	str	r7, [sp, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	dc20      	bgt.n	80085b8 <_dtoa_r+0x940>
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857a:	2b02      	cmp	r3, #2
 800857c:	dd1e      	ble.n	80085bc <_dtoa_r+0x944>
 800857e:	9b00      	ldr	r3, [sp, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	f47f aec0 	bne.w	8008306 <_dtoa_r+0x68e>
 8008586:	4621      	mov	r1, r4
 8008588:	2205      	movs	r2, #5
 800858a:	4658      	mov	r0, fp
 800858c:	f000 fa9a 	bl	8008ac4 <__multadd>
 8008590:	4601      	mov	r1, r0
 8008592:	4604      	mov	r4, r0
 8008594:	4648      	mov	r0, r9
 8008596:	f000 fcad 	bl	8008ef4 <__mcmp>
 800859a:	2800      	cmp	r0, #0
 800859c:	f77f aeb3 	ble.w	8008306 <_dtoa_r+0x68e>
 80085a0:	4656      	mov	r6, sl
 80085a2:	2331      	movs	r3, #49	@ 0x31
 80085a4:	f806 3b01 	strb.w	r3, [r6], #1
 80085a8:	9b04      	ldr	r3, [sp, #16]
 80085aa:	3301      	adds	r3, #1
 80085ac:	9304      	str	r3, [sp, #16]
 80085ae:	e6ae      	b.n	800830e <_dtoa_r+0x696>
 80085b0:	9c07      	ldr	r4, [sp, #28]
 80085b2:	9704      	str	r7, [sp, #16]
 80085b4:	4625      	mov	r5, r4
 80085b6:	e7f3      	b.n	80085a0 <_dtoa_r+0x928>
 80085b8:	9b07      	ldr	r3, [sp, #28]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 8104 	beq.w	80087cc <_dtoa_r+0xb54>
 80085c4:	2e00      	cmp	r6, #0
 80085c6:	dd05      	ble.n	80085d4 <_dtoa_r+0x95c>
 80085c8:	4629      	mov	r1, r5
 80085ca:	4632      	mov	r2, r6
 80085cc:	4658      	mov	r0, fp
 80085ce:	f000 fc25 	bl	8008e1c <__lshift>
 80085d2:	4605      	mov	r5, r0
 80085d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d05a      	beq.n	8008690 <_dtoa_r+0xa18>
 80085da:	6869      	ldr	r1, [r5, #4]
 80085dc:	4658      	mov	r0, fp
 80085de:	f000 fa0f 	bl	8008a00 <_Balloc>
 80085e2:	4606      	mov	r6, r0
 80085e4:	b928      	cbnz	r0, 80085f2 <_dtoa_r+0x97a>
 80085e6:	4b84      	ldr	r3, [pc, #528]	@ (80087f8 <_dtoa_r+0xb80>)
 80085e8:	4602      	mov	r2, r0
 80085ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085ee:	f7ff bb5a 	b.w	8007ca6 <_dtoa_r+0x2e>
 80085f2:	692a      	ldr	r2, [r5, #16]
 80085f4:	3202      	adds	r2, #2
 80085f6:	0092      	lsls	r2, r2, #2
 80085f8:	f105 010c 	add.w	r1, r5, #12
 80085fc:	300c      	adds	r0, #12
 80085fe:	f7ff faa4 	bl	8007b4a <memcpy>
 8008602:	2201      	movs	r2, #1
 8008604:	4631      	mov	r1, r6
 8008606:	4658      	mov	r0, fp
 8008608:	f000 fc08 	bl	8008e1c <__lshift>
 800860c:	f10a 0301 	add.w	r3, sl, #1
 8008610:	9307      	str	r3, [sp, #28]
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	4453      	add	r3, sl
 8008616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008618:	9b02      	ldr	r3, [sp, #8]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	462f      	mov	r7, r5
 8008620:	930a      	str	r3, [sp, #40]	@ 0x28
 8008622:	4605      	mov	r5, r0
 8008624:	9b07      	ldr	r3, [sp, #28]
 8008626:	4621      	mov	r1, r4
 8008628:	3b01      	subs	r3, #1
 800862a:	4648      	mov	r0, r9
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	f7ff fa9a 	bl	8007b66 <quorem>
 8008632:	4639      	mov	r1, r7
 8008634:	9002      	str	r0, [sp, #8]
 8008636:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800863a:	4648      	mov	r0, r9
 800863c:	f000 fc5a 	bl	8008ef4 <__mcmp>
 8008640:	462a      	mov	r2, r5
 8008642:	9008      	str	r0, [sp, #32]
 8008644:	4621      	mov	r1, r4
 8008646:	4658      	mov	r0, fp
 8008648:	f000 fc70 	bl	8008f2c <__mdiff>
 800864c:	68c2      	ldr	r2, [r0, #12]
 800864e:	4606      	mov	r6, r0
 8008650:	bb02      	cbnz	r2, 8008694 <_dtoa_r+0xa1c>
 8008652:	4601      	mov	r1, r0
 8008654:	4648      	mov	r0, r9
 8008656:	f000 fc4d 	bl	8008ef4 <__mcmp>
 800865a:	4602      	mov	r2, r0
 800865c:	4631      	mov	r1, r6
 800865e:	4658      	mov	r0, fp
 8008660:	920e      	str	r2, [sp, #56]	@ 0x38
 8008662:	f000 fa0d 	bl	8008a80 <_Bfree>
 8008666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008668:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800866a:	9e07      	ldr	r6, [sp, #28]
 800866c:	ea43 0102 	orr.w	r1, r3, r2
 8008670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008672:	4319      	orrs	r1, r3
 8008674:	d110      	bne.n	8008698 <_dtoa_r+0xa20>
 8008676:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800867a:	d029      	beq.n	80086d0 <_dtoa_r+0xa58>
 800867c:	9b08      	ldr	r3, [sp, #32]
 800867e:	2b00      	cmp	r3, #0
 8008680:	dd02      	ble.n	8008688 <_dtoa_r+0xa10>
 8008682:	9b02      	ldr	r3, [sp, #8]
 8008684:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008688:	9b00      	ldr	r3, [sp, #0]
 800868a:	f883 8000 	strb.w	r8, [r3]
 800868e:	e63f      	b.n	8008310 <_dtoa_r+0x698>
 8008690:	4628      	mov	r0, r5
 8008692:	e7bb      	b.n	800860c <_dtoa_r+0x994>
 8008694:	2201      	movs	r2, #1
 8008696:	e7e1      	b.n	800865c <_dtoa_r+0x9e4>
 8008698:	9b08      	ldr	r3, [sp, #32]
 800869a:	2b00      	cmp	r3, #0
 800869c:	db04      	blt.n	80086a8 <_dtoa_r+0xa30>
 800869e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086a0:	430b      	orrs	r3, r1
 80086a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086a4:	430b      	orrs	r3, r1
 80086a6:	d120      	bne.n	80086ea <_dtoa_r+0xa72>
 80086a8:	2a00      	cmp	r2, #0
 80086aa:	dded      	ble.n	8008688 <_dtoa_r+0xa10>
 80086ac:	4649      	mov	r1, r9
 80086ae:	2201      	movs	r2, #1
 80086b0:	4658      	mov	r0, fp
 80086b2:	f000 fbb3 	bl	8008e1c <__lshift>
 80086b6:	4621      	mov	r1, r4
 80086b8:	4681      	mov	r9, r0
 80086ba:	f000 fc1b 	bl	8008ef4 <__mcmp>
 80086be:	2800      	cmp	r0, #0
 80086c0:	dc03      	bgt.n	80086ca <_dtoa_r+0xa52>
 80086c2:	d1e1      	bne.n	8008688 <_dtoa_r+0xa10>
 80086c4:	f018 0f01 	tst.w	r8, #1
 80086c8:	d0de      	beq.n	8008688 <_dtoa_r+0xa10>
 80086ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086ce:	d1d8      	bne.n	8008682 <_dtoa_r+0xa0a>
 80086d0:	9a00      	ldr	r2, [sp, #0]
 80086d2:	2339      	movs	r3, #57	@ 0x39
 80086d4:	7013      	strb	r3, [r2, #0]
 80086d6:	4633      	mov	r3, r6
 80086d8:	461e      	mov	r6, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086e0:	2a39      	cmp	r2, #57	@ 0x39
 80086e2:	d052      	beq.n	800878a <_dtoa_r+0xb12>
 80086e4:	3201      	adds	r2, #1
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	e612      	b.n	8008310 <_dtoa_r+0x698>
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	dd07      	ble.n	80086fe <_dtoa_r+0xa86>
 80086ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086f2:	d0ed      	beq.n	80086d0 <_dtoa_r+0xa58>
 80086f4:	9a00      	ldr	r2, [sp, #0]
 80086f6:	f108 0301 	add.w	r3, r8, #1
 80086fa:	7013      	strb	r3, [r2, #0]
 80086fc:	e608      	b.n	8008310 <_dtoa_r+0x698>
 80086fe:	9b07      	ldr	r3, [sp, #28]
 8008700:	9a07      	ldr	r2, [sp, #28]
 8008702:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008708:	4293      	cmp	r3, r2
 800870a:	d028      	beq.n	800875e <_dtoa_r+0xae6>
 800870c:	4649      	mov	r1, r9
 800870e:	2300      	movs	r3, #0
 8008710:	220a      	movs	r2, #10
 8008712:	4658      	mov	r0, fp
 8008714:	f000 f9d6 	bl	8008ac4 <__multadd>
 8008718:	42af      	cmp	r7, r5
 800871a:	4681      	mov	r9, r0
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	f04f 020a 	mov.w	r2, #10
 8008724:	4639      	mov	r1, r7
 8008726:	4658      	mov	r0, fp
 8008728:	d107      	bne.n	800873a <_dtoa_r+0xac2>
 800872a:	f000 f9cb 	bl	8008ac4 <__multadd>
 800872e:	4607      	mov	r7, r0
 8008730:	4605      	mov	r5, r0
 8008732:	9b07      	ldr	r3, [sp, #28]
 8008734:	3301      	adds	r3, #1
 8008736:	9307      	str	r3, [sp, #28]
 8008738:	e774      	b.n	8008624 <_dtoa_r+0x9ac>
 800873a:	f000 f9c3 	bl	8008ac4 <__multadd>
 800873e:	4629      	mov	r1, r5
 8008740:	4607      	mov	r7, r0
 8008742:	2300      	movs	r3, #0
 8008744:	220a      	movs	r2, #10
 8008746:	4658      	mov	r0, fp
 8008748:	f000 f9bc 	bl	8008ac4 <__multadd>
 800874c:	4605      	mov	r5, r0
 800874e:	e7f0      	b.n	8008732 <_dtoa_r+0xaba>
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	bfcc      	ite	gt
 8008756:	461e      	movgt	r6, r3
 8008758:	2601      	movle	r6, #1
 800875a:	4456      	add	r6, sl
 800875c:	2700      	movs	r7, #0
 800875e:	4649      	mov	r1, r9
 8008760:	2201      	movs	r2, #1
 8008762:	4658      	mov	r0, fp
 8008764:	f000 fb5a 	bl	8008e1c <__lshift>
 8008768:	4621      	mov	r1, r4
 800876a:	4681      	mov	r9, r0
 800876c:	f000 fbc2 	bl	8008ef4 <__mcmp>
 8008770:	2800      	cmp	r0, #0
 8008772:	dcb0      	bgt.n	80086d6 <_dtoa_r+0xa5e>
 8008774:	d102      	bne.n	800877c <_dtoa_r+0xb04>
 8008776:	f018 0f01 	tst.w	r8, #1
 800877a:	d1ac      	bne.n	80086d6 <_dtoa_r+0xa5e>
 800877c:	4633      	mov	r3, r6
 800877e:	461e      	mov	r6, r3
 8008780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008784:	2a30      	cmp	r2, #48	@ 0x30
 8008786:	d0fa      	beq.n	800877e <_dtoa_r+0xb06>
 8008788:	e5c2      	b.n	8008310 <_dtoa_r+0x698>
 800878a:	459a      	cmp	sl, r3
 800878c:	d1a4      	bne.n	80086d8 <_dtoa_r+0xa60>
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	3301      	adds	r3, #1
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	2331      	movs	r3, #49	@ 0x31
 8008796:	f88a 3000 	strb.w	r3, [sl]
 800879a:	e5b9      	b.n	8008310 <_dtoa_r+0x698>
 800879c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800879e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80087fc <_dtoa_r+0xb84>
 80087a2:	b11b      	cbz	r3, 80087ac <_dtoa_r+0xb34>
 80087a4:	f10a 0308 	add.w	r3, sl, #8
 80087a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	4650      	mov	r0, sl
 80087ae:	b019      	add	sp, #100	@ 0x64
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	f77f ae37 	ble.w	800842a <_dtoa_r+0x7b2>
 80087bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087be:	930a      	str	r3, [sp, #40]	@ 0x28
 80087c0:	2001      	movs	r0, #1
 80087c2:	e655      	b.n	8008470 <_dtoa_r+0x7f8>
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f77f aed6 	ble.w	8008578 <_dtoa_r+0x900>
 80087cc:	4656      	mov	r6, sl
 80087ce:	4621      	mov	r1, r4
 80087d0:	4648      	mov	r0, r9
 80087d2:	f7ff f9c8 	bl	8007b66 <quorem>
 80087d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087da:	f806 8b01 	strb.w	r8, [r6], #1
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	eba6 020a 	sub.w	r2, r6, sl
 80087e4:	4293      	cmp	r3, r2
 80087e6:	ddb3      	ble.n	8008750 <_dtoa_r+0xad8>
 80087e8:	4649      	mov	r1, r9
 80087ea:	2300      	movs	r3, #0
 80087ec:	220a      	movs	r2, #10
 80087ee:	4658      	mov	r0, fp
 80087f0:	f000 f968 	bl	8008ac4 <__multadd>
 80087f4:	4681      	mov	r9, r0
 80087f6:	e7ea      	b.n	80087ce <_dtoa_r+0xb56>
 80087f8:	0800ab78 	.word	0x0800ab78
 80087fc:	0800aafc 	.word	0x0800aafc

08008800 <_free_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4605      	mov	r5, r0
 8008804:	2900      	cmp	r1, #0
 8008806:	d041      	beq.n	800888c <_free_r+0x8c>
 8008808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880c:	1f0c      	subs	r4, r1, #4
 800880e:	2b00      	cmp	r3, #0
 8008810:	bfb8      	it	lt
 8008812:	18e4      	addlt	r4, r4, r3
 8008814:	f000 f8e8 	bl	80089e8 <__malloc_lock>
 8008818:	4a1d      	ldr	r2, [pc, #116]	@ (8008890 <_free_r+0x90>)
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	b933      	cbnz	r3, 800882c <_free_r+0x2c>
 800881e:	6063      	str	r3, [r4, #4]
 8008820:	6014      	str	r4, [r2, #0]
 8008822:	4628      	mov	r0, r5
 8008824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008828:	f000 b8e4 	b.w	80089f4 <__malloc_unlock>
 800882c:	42a3      	cmp	r3, r4
 800882e:	d908      	bls.n	8008842 <_free_r+0x42>
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	1821      	adds	r1, r4, r0
 8008834:	428b      	cmp	r3, r1
 8008836:	bf01      	itttt	eq
 8008838:	6819      	ldreq	r1, [r3, #0]
 800883a:	685b      	ldreq	r3, [r3, #4]
 800883c:	1809      	addeq	r1, r1, r0
 800883e:	6021      	streq	r1, [r4, #0]
 8008840:	e7ed      	b.n	800881e <_free_r+0x1e>
 8008842:	461a      	mov	r2, r3
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	b10b      	cbz	r3, 800884c <_free_r+0x4c>
 8008848:	42a3      	cmp	r3, r4
 800884a:	d9fa      	bls.n	8008842 <_free_r+0x42>
 800884c:	6811      	ldr	r1, [r2, #0]
 800884e:	1850      	adds	r0, r2, r1
 8008850:	42a0      	cmp	r0, r4
 8008852:	d10b      	bne.n	800886c <_free_r+0x6c>
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	4401      	add	r1, r0
 8008858:	1850      	adds	r0, r2, r1
 800885a:	4283      	cmp	r3, r0
 800885c:	6011      	str	r1, [r2, #0]
 800885e:	d1e0      	bne.n	8008822 <_free_r+0x22>
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	6053      	str	r3, [r2, #4]
 8008866:	4408      	add	r0, r1
 8008868:	6010      	str	r0, [r2, #0]
 800886a:	e7da      	b.n	8008822 <_free_r+0x22>
 800886c:	d902      	bls.n	8008874 <_free_r+0x74>
 800886e:	230c      	movs	r3, #12
 8008870:	602b      	str	r3, [r5, #0]
 8008872:	e7d6      	b.n	8008822 <_free_r+0x22>
 8008874:	6820      	ldr	r0, [r4, #0]
 8008876:	1821      	adds	r1, r4, r0
 8008878:	428b      	cmp	r3, r1
 800887a:	bf04      	itt	eq
 800887c:	6819      	ldreq	r1, [r3, #0]
 800887e:	685b      	ldreq	r3, [r3, #4]
 8008880:	6063      	str	r3, [r4, #4]
 8008882:	bf04      	itt	eq
 8008884:	1809      	addeq	r1, r1, r0
 8008886:	6021      	streq	r1, [r4, #0]
 8008888:	6054      	str	r4, [r2, #4]
 800888a:	e7ca      	b.n	8008822 <_free_r+0x22>
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	bf00      	nop
 8008890:	2000273c 	.word	0x2000273c

08008894 <malloc>:
 8008894:	4b02      	ldr	r3, [pc, #8]	@ (80088a0 <malloc+0xc>)
 8008896:	4601      	mov	r1, r0
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	f000 b825 	b.w	80088e8 <_malloc_r>
 800889e:	bf00      	nop
 80088a0:	20000104 	.word	0x20000104

080088a4 <sbrk_aligned>:
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	4e0f      	ldr	r6, [pc, #60]	@ (80088e4 <sbrk_aligned+0x40>)
 80088a8:	460c      	mov	r4, r1
 80088aa:	6831      	ldr	r1, [r6, #0]
 80088ac:	4605      	mov	r5, r0
 80088ae:	b911      	cbnz	r1, 80088b6 <sbrk_aligned+0x12>
 80088b0:	f001 f9ba 	bl	8009c28 <_sbrk_r>
 80088b4:	6030      	str	r0, [r6, #0]
 80088b6:	4621      	mov	r1, r4
 80088b8:	4628      	mov	r0, r5
 80088ba:	f001 f9b5 	bl	8009c28 <_sbrk_r>
 80088be:	1c43      	adds	r3, r0, #1
 80088c0:	d103      	bne.n	80088ca <sbrk_aligned+0x26>
 80088c2:	f04f 34ff 	mov.w	r4, #4294967295
 80088c6:	4620      	mov	r0, r4
 80088c8:	bd70      	pop	{r4, r5, r6, pc}
 80088ca:	1cc4      	adds	r4, r0, #3
 80088cc:	f024 0403 	bic.w	r4, r4, #3
 80088d0:	42a0      	cmp	r0, r4
 80088d2:	d0f8      	beq.n	80088c6 <sbrk_aligned+0x22>
 80088d4:	1a21      	subs	r1, r4, r0
 80088d6:	4628      	mov	r0, r5
 80088d8:	f001 f9a6 	bl	8009c28 <_sbrk_r>
 80088dc:	3001      	adds	r0, #1
 80088de:	d1f2      	bne.n	80088c6 <sbrk_aligned+0x22>
 80088e0:	e7ef      	b.n	80088c2 <sbrk_aligned+0x1e>
 80088e2:	bf00      	nop
 80088e4:	20002738 	.word	0x20002738

080088e8 <_malloc_r>:
 80088e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ec:	1ccd      	adds	r5, r1, #3
 80088ee:	f025 0503 	bic.w	r5, r5, #3
 80088f2:	3508      	adds	r5, #8
 80088f4:	2d0c      	cmp	r5, #12
 80088f6:	bf38      	it	cc
 80088f8:	250c      	movcc	r5, #12
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	4606      	mov	r6, r0
 80088fe:	db01      	blt.n	8008904 <_malloc_r+0x1c>
 8008900:	42a9      	cmp	r1, r5
 8008902:	d904      	bls.n	800890e <_malloc_r+0x26>
 8008904:	230c      	movs	r3, #12
 8008906:	6033      	str	r3, [r6, #0]
 8008908:	2000      	movs	r0, #0
 800890a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800890e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089e4 <_malloc_r+0xfc>
 8008912:	f000 f869 	bl	80089e8 <__malloc_lock>
 8008916:	f8d8 3000 	ldr.w	r3, [r8]
 800891a:	461c      	mov	r4, r3
 800891c:	bb44      	cbnz	r4, 8008970 <_malloc_r+0x88>
 800891e:	4629      	mov	r1, r5
 8008920:	4630      	mov	r0, r6
 8008922:	f7ff ffbf 	bl	80088a4 <sbrk_aligned>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	4604      	mov	r4, r0
 800892a:	d158      	bne.n	80089de <_malloc_r+0xf6>
 800892c:	f8d8 4000 	ldr.w	r4, [r8]
 8008930:	4627      	mov	r7, r4
 8008932:	2f00      	cmp	r7, #0
 8008934:	d143      	bne.n	80089be <_malloc_r+0xd6>
 8008936:	2c00      	cmp	r4, #0
 8008938:	d04b      	beq.n	80089d2 <_malloc_r+0xea>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	4639      	mov	r1, r7
 800893e:	4630      	mov	r0, r6
 8008940:	eb04 0903 	add.w	r9, r4, r3
 8008944:	f001 f970 	bl	8009c28 <_sbrk_r>
 8008948:	4581      	cmp	r9, r0
 800894a:	d142      	bne.n	80089d2 <_malloc_r+0xea>
 800894c:	6821      	ldr	r1, [r4, #0]
 800894e:	1a6d      	subs	r5, r5, r1
 8008950:	4629      	mov	r1, r5
 8008952:	4630      	mov	r0, r6
 8008954:	f7ff ffa6 	bl	80088a4 <sbrk_aligned>
 8008958:	3001      	adds	r0, #1
 800895a:	d03a      	beq.n	80089d2 <_malloc_r+0xea>
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	442b      	add	r3, r5
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	f8d8 3000 	ldr.w	r3, [r8]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	bb62      	cbnz	r2, 80089c4 <_malloc_r+0xdc>
 800896a:	f8c8 7000 	str.w	r7, [r8]
 800896e:	e00f      	b.n	8008990 <_malloc_r+0xa8>
 8008970:	6822      	ldr	r2, [r4, #0]
 8008972:	1b52      	subs	r2, r2, r5
 8008974:	d420      	bmi.n	80089b8 <_malloc_r+0xd0>
 8008976:	2a0b      	cmp	r2, #11
 8008978:	d917      	bls.n	80089aa <_malloc_r+0xc2>
 800897a:	1961      	adds	r1, r4, r5
 800897c:	42a3      	cmp	r3, r4
 800897e:	6025      	str	r5, [r4, #0]
 8008980:	bf18      	it	ne
 8008982:	6059      	strne	r1, [r3, #4]
 8008984:	6863      	ldr	r3, [r4, #4]
 8008986:	bf08      	it	eq
 8008988:	f8c8 1000 	streq.w	r1, [r8]
 800898c:	5162      	str	r2, [r4, r5]
 800898e:	604b      	str	r3, [r1, #4]
 8008990:	4630      	mov	r0, r6
 8008992:	f000 f82f 	bl	80089f4 <__malloc_unlock>
 8008996:	f104 000b 	add.w	r0, r4, #11
 800899a:	1d23      	adds	r3, r4, #4
 800899c:	f020 0007 	bic.w	r0, r0, #7
 80089a0:	1ac2      	subs	r2, r0, r3
 80089a2:	bf1c      	itt	ne
 80089a4:	1a1b      	subne	r3, r3, r0
 80089a6:	50a3      	strne	r3, [r4, r2]
 80089a8:	e7af      	b.n	800890a <_malloc_r+0x22>
 80089aa:	6862      	ldr	r2, [r4, #4]
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	bf0c      	ite	eq
 80089b0:	f8c8 2000 	streq.w	r2, [r8]
 80089b4:	605a      	strne	r2, [r3, #4]
 80089b6:	e7eb      	b.n	8008990 <_malloc_r+0xa8>
 80089b8:	4623      	mov	r3, r4
 80089ba:	6864      	ldr	r4, [r4, #4]
 80089bc:	e7ae      	b.n	800891c <_malloc_r+0x34>
 80089be:	463c      	mov	r4, r7
 80089c0:	687f      	ldr	r7, [r7, #4]
 80089c2:	e7b6      	b.n	8008932 <_malloc_r+0x4a>
 80089c4:	461a      	mov	r2, r3
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d1fb      	bne.n	80089c4 <_malloc_r+0xdc>
 80089cc:	2300      	movs	r3, #0
 80089ce:	6053      	str	r3, [r2, #4]
 80089d0:	e7de      	b.n	8008990 <_malloc_r+0xa8>
 80089d2:	230c      	movs	r3, #12
 80089d4:	6033      	str	r3, [r6, #0]
 80089d6:	4630      	mov	r0, r6
 80089d8:	f000 f80c 	bl	80089f4 <__malloc_unlock>
 80089dc:	e794      	b.n	8008908 <_malloc_r+0x20>
 80089de:	6005      	str	r5, [r0, #0]
 80089e0:	e7d6      	b.n	8008990 <_malloc_r+0xa8>
 80089e2:	bf00      	nop
 80089e4:	2000273c 	.word	0x2000273c

080089e8 <__malloc_lock>:
 80089e8:	4801      	ldr	r0, [pc, #4]	@ (80089f0 <__malloc_lock+0x8>)
 80089ea:	f7ff b8ac 	b.w	8007b46 <__retarget_lock_acquire_recursive>
 80089ee:	bf00      	nop
 80089f0:	20002734 	.word	0x20002734

080089f4 <__malloc_unlock>:
 80089f4:	4801      	ldr	r0, [pc, #4]	@ (80089fc <__malloc_unlock+0x8>)
 80089f6:	f7ff b8a7 	b.w	8007b48 <__retarget_lock_release_recursive>
 80089fa:	bf00      	nop
 80089fc:	20002734 	.word	0x20002734

08008a00 <_Balloc>:
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	69c6      	ldr	r6, [r0, #28]
 8008a04:	4604      	mov	r4, r0
 8008a06:	460d      	mov	r5, r1
 8008a08:	b976      	cbnz	r6, 8008a28 <_Balloc+0x28>
 8008a0a:	2010      	movs	r0, #16
 8008a0c:	f7ff ff42 	bl	8008894 <malloc>
 8008a10:	4602      	mov	r2, r0
 8008a12:	61e0      	str	r0, [r4, #28]
 8008a14:	b920      	cbnz	r0, 8008a20 <_Balloc+0x20>
 8008a16:	4b18      	ldr	r3, [pc, #96]	@ (8008a78 <_Balloc+0x78>)
 8008a18:	4818      	ldr	r0, [pc, #96]	@ (8008a7c <_Balloc+0x7c>)
 8008a1a:	216b      	movs	r1, #107	@ 0x6b
 8008a1c:	f001 f914 	bl	8009c48 <__assert_func>
 8008a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a24:	6006      	str	r6, [r0, #0]
 8008a26:	60c6      	str	r6, [r0, #12]
 8008a28:	69e6      	ldr	r6, [r4, #28]
 8008a2a:	68f3      	ldr	r3, [r6, #12]
 8008a2c:	b183      	cbz	r3, 8008a50 <_Balloc+0x50>
 8008a2e:	69e3      	ldr	r3, [r4, #28]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a36:	b9b8      	cbnz	r0, 8008a68 <_Balloc+0x68>
 8008a38:	2101      	movs	r1, #1
 8008a3a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a3e:	1d72      	adds	r2, r6, #5
 8008a40:	0092      	lsls	r2, r2, #2
 8008a42:	4620      	mov	r0, r4
 8008a44:	f001 f91e 	bl	8009c84 <_calloc_r>
 8008a48:	b160      	cbz	r0, 8008a64 <_Balloc+0x64>
 8008a4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a4e:	e00e      	b.n	8008a6e <_Balloc+0x6e>
 8008a50:	2221      	movs	r2, #33	@ 0x21
 8008a52:	2104      	movs	r1, #4
 8008a54:	4620      	mov	r0, r4
 8008a56:	f001 f915 	bl	8009c84 <_calloc_r>
 8008a5a:	69e3      	ldr	r3, [r4, #28]
 8008a5c:	60f0      	str	r0, [r6, #12]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1e4      	bne.n	8008a2e <_Balloc+0x2e>
 8008a64:	2000      	movs	r0, #0
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	6802      	ldr	r2, [r0, #0]
 8008a6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a74:	e7f7      	b.n	8008a66 <_Balloc+0x66>
 8008a76:	bf00      	nop
 8008a78:	0800ab09 	.word	0x0800ab09
 8008a7c:	0800ab89 	.word	0x0800ab89

08008a80 <_Bfree>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	69c6      	ldr	r6, [r0, #28]
 8008a84:	4605      	mov	r5, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	b976      	cbnz	r6, 8008aa8 <_Bfree+0x28>
 8008a8a:	2010      	movs	r0, #16
 8008a8c:	f7ff ff02 	bl	8008894 <malloc>
 8008a90:	4602      	mov	r2, r0
 8008a92:	61e8      	str	r0, [r5, #28]
 8008a94:	b920      	cbnz	r0, 8008aa0 <_Bfree+0x20>
 8008a96:	4b09      	ldr	r3, [pc, #36]	@ (8008abc <_Bfree+0x3c>)
 8008a98:	4809      	ldr	r0, [pc, #36]	@ (8008ac0 <_Bfree+0x40>)
 8008a9a:	218f      	movs	r1, #143	@ 0x8f
 8008a9c:	f001 f8d4 	bl	8009c48 <__assert_func>
 8008aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aa4:	6006      	str	r6, [r0, #0]
 8008aa6:	60c6      	str	r6, [r0, #12]
 8008aa8:	b13c      	cbz	r4, 8008aba <_Bfree+0x3a>
 8008aaa:	69eb      	ldr	r3, [r5, #28]
 8008aac:	6862      	ldr	r2, [r4, #4]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ab4:	6021      	str	r1, [r4, #0]
 8008ab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	0800ab09 	.word	0x0800ab09
 8008ac0:	0800ab89 	.word	0x0800ab89

08008ac4 <__multadd>:
 8008ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac8:	690d      	ldr	r5, [r1, #16]
 8008aca:	4607      	mov	r7, r0
 8008acc:	460c      	mov	r4, r1
 8008ace:	461e      	mov	r6, r3
 8008ad0:	f101 0c14 	add.w	ip, r1, #20
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f8dc 3000 	ldr.w	r3, [ip]
 8008ada:	b299      	uxth	r1, r3
 8008adc:	fb02 6101 	mla	r1, r2, r1, r6
 8008ae0:	0c1e      	lsrs	r6, r3, #16
 8008ae2:	0c0b      	lsrs	r3, r1, #16
 8008ae4:	fb02 3306 	mla	r3, r2, r6, r3
 8008ae8:	b289      	uxth	r1, r1
 8008aea:	3001      	adds	r0, #1
 8008aec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008af0:	4285      	cmp	r5, r0
 8008af2:	f84c 1b04 	str.w	r1, [ip], #4
 8008af6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008afa:	dcec      	bgt.n	8008ad6 <__multadd+0x12>
 8008afc:	b30e      	cbz	r6, 8008b42 <__multadd+0x7e>
 8008afe:	68a3      	ldr	r3, [r4, #8]
 8008b00:	42ab      	cmp	r3, r5
 8008b02:	dc19      	bgt.n	8008b38 <__multadd+0x74>
 8008b04:	6861      	ldr	r1, [r4, #4]
 8008b06:	4638      	mov	r0, r7
 8008b08:	3101      	adds	r1, #1
 8008b0a:	f7ff ff79 	bl	8008a00 <_Balloc>
 8008b0e:	4680      	mov	r8, r0
 8008b10:	b928      	cbnz	r0, 8008b1e <__multadd+0x5a>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <__multadd+0x84>)
 8008b16:	480d      	ldr	r0, [pc, #52]	@ (8008b4c <__multadd+0x88>)
 8008b18:	21ba      	movs	r1, #186	@ 0xba
 8008b1a:	f001 f895 	bl	8009c48 <__assert_func>
 8008b1e:	6922      	ldr	r2, [r4, #16]
 8008b20:	3202      	adds	r2, #2
 8008b22:	f104 010c 	add.w	r1, r4, #12
 8008b26:	0092      	lsls	r2, r2, #2
 8008b28:	300c      	adds	r0, #12
 8008b2a:	f7ff f80e 	bl	8007b4a <memcpy>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4638      	mov	r0, r7
 8008b32:	f7ff ffa5 	bl	8008a80 <_Bfree>
 8008b36:	4644      	mov	r4, r8
 8008b38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	615e      	str	r6, [r3, #20]
 8008b40:	6125      	str	r5, [r4, #16]
 8008b42:	4620      	mov	r0, r4
 8008b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b48:	0800ab78 	.word	0x0800ab78
 8008b4c:	0800ab89 	.word	0x0800ab89

08008b50 <__hi0bits>:
 8008b50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b54:	4603      	mov	r3, r0
 8008b56:	bf36      	itet	cc
 8008b58:	0403      	lslcc	r3, r0, #16
 8008b5a:	2000      	movcs	r0, #0
 8008b5c:	2010      	movcc	r0, #16
 8008b5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b62:	bf3c      	itt	cc
 8008b64:	021b      	lslcc	r3, r3, #8
 8008b66:	3008      	addcc	r0, #8
 8008b68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b6c:	bf3c      	itt	cc
 8008b6e:	011b      	lslcc	r3, r3, #4
 8008b70:	3004      	addcc	r0, #4
 8008b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b76:	bf3c      	itt	cc
 8008b78:	009b      	lslcc	r3, r3, #2
 8008b7a:	3002      	addcc	r0, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	db05      	blt.n	8008b8c <__hi0bits+0x3c>
 8008b80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b84:	f100 0001 	add.w	r0, r0, #1
 8008b88:	bf08      	it	eq
 8008b8a:	2020      	moveq	r0, #32
 8008b8c:	4770      	bx	lr

08008b8e <__lo0bits>:
 8008b8e:	6803      	ldr	r3, [r0, #0]
 8008b90:	4602      	mov	r2, r0
 8008b92:	f013 0007 	ands.w	r0, r3, #7
 8008b96:	d00b      	beq.n	8008bb0 <__lo0bits+0x22>
 8008b98:	07d9      	lsls	r1, r3, #31
 8008b9a:	d421      	bmi.n	8008be0 <__lo0bits+0x52>
 8008b9c:	0798      	lsls	r0, r3, #30
 8008b9e:	bf49      	itett	mi
 8008ba0:	085b      	lsrmi	r3, r3, #1
 8008ba2:	089b      	lsrpl	r3, r3, #2
 8008ba4:	2001      	movmi	r0, #1
 8008ba6:	6013      	strmi	r3, [r2, #0]
 8008ba8:	bf5c      	itt	pl
 8008baa:	6013      	strpl	r3, [r2, #0]
 8008bac:	2002      	movpl	r0, #2
 8008bae:	4770      	bx	lr
 8008bb0:	b299      	uxth	r1, r3
 8008bb2:	b909      	cbnz	r1, 8008bb8 <__lo0bits+0x2a>
 8008bb4:	0c1b      	lsrs	r3, r3, #16
 8008bb6:	2010      	movs	r0, #16
 8008bb8:	b2d9      	uxtb	r1, r3
 8008bba:	b909      	cbnz	r1, 8008bc0 <__lo0bits+0x32>
 8008bbc:	3008      	adds	r0, #8
 8008bbe:	0a1b      	lsrs	r3, r3, #8
 8008bc0:	0719      	lsls	r1, r3, #28
 8008bc2:	bf04      	itt	eq
 8008bc4:	091b      	lsreq	r3, r3, #4
 8008bc6:	3004      	addeq	r0, #4
 8008bc8:	0799      	lsls	r1, r3, #30
 8008bca:	bf04      	itt	eq
 8008bcc:	089b      	lsreq	r3, r3, #2
 8008bce:	3002      	addeq	r0, #2
 8008bd0:	07d9      	lsls	r1, r3, #31
 8008bd2:	d403      	bmi.n	8008bdc <__lo0bits+0x4e>
 8008bd4:	085b      	lsrs	r3, r3, #1
 8008bd6:	f100 0001 	add.w	r0, r0, #1
 8008bda:	d003      	beq.n	8008be4 <__lo0bits+0x56>
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	4770      	bx	lr
 8008be0:	2000      	movs	r0, #0
 8008be2:	4770      	bx	lr
 8008be4:	2020      	movs	r0, #32
 8008be6:	4770      	bx	lr

08008be8 <__i2b>:
 8008be8:	b510      	push	{r4, lr}
 8008bea:	460c      	mov	r4, r1
 8008bec:	2101      	movs	r1, #1
 8008bee:	f7ff ff07 	bl	8008a00 <_Balloc>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	b928      	cbnz	r0, 8008c02 <__i2b+0x1a>
 8008bf6:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <__i2b+0x24>)
 8008bf8:	4805      	ldr	r0, [pc, #20]	@ (8008c10 <__i2b+0x28>)
 8008bfa:	f240 1145 	movw	r1, #325	@ 0x145
 8008bfe:	f001 f823 	bl	8009c48 <__assert_func>
 8008c02:	2301      	movs	r3, #1
 8008c04:	6144      	str	r4, [r0, #20]
 8008c06:	6103      	str	r3, [r0, #16]
 8008c08:	bd10      	pop	{r4, pc}
 8008c0a:	bf00      	nop
 8008c0c:	0800ab78 	.word	0x0800ab78
 8008c10:	0800ab89 	.word	0x0800ab89

08008c14 <__multiply>:
 8008c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	4614      	mov	r4, r2
 8008c1a:	690a      	ldr	r2, [r1, #16]
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	bfa8      	it	ge
 8008c22:	4623      	movge	r3, r4
 8008c24:	460f      	mov	r7, r1
 8008c26:	bfa4      	itt	ge
 8008c28:	460c      	movge	r4, r1
 8008c2a:	461f      	movge	r7, r3
 8008c2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c34:	68a3      	ldr	r3, [r4, #8]
 8008c36:	6861      	ldr	r1, [r4, #4]
 8008c38:	eb0a 0609 	add.w	r6, sl, r9
 8008c3c:	42b3      	cmp	r3, r6
 8008c3e:	b085      	sub	sp, #20
 8008c40:	bfb8      	it	lt
 8008c42:	3101      	addlt	r1, #1
 8008c44:	f7ff fedc 	bl	8008a00 <_Balloc>
 8008c48:	b930      	cbnz	r0, 8008c58 <__multiply+0x44>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	4b44      	ldr	r3, [pc, #272]	@ (8008d60 <__multiply+0x14c>)
 8008c4e:	4845      	ldr	r0, [pc, #276]	@ (8008d64 <__multiply+0x150>)
 8008c50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c54:	f000 fff8 	bl	8009c48 <__assert_func>
 8008c58:	f100 0514 	add.w	r5, r0, #20
 8008c5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c60:	462b      	mov	r3, r5
 8008c62:	2200      	movs	r2, #0
 8008c64:	4543      	cmp	r3, r8
 8008c66:	d321      	bcc.n	8008cac <__multiply+0x98>
 8008c68:	f107 0114 	add.w	r1, r7, #20
 8008c6c:	f104 0214 	add.w	r2, r4, #20
 8008c70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c78:	9302      	str	r3, [sp, #8]
 8008c7a:	1b13      	subs	r3, r2, r4
 8008c7c:	3b15      	subs	r3, #21
 8008c7e:	f023 0303 	bic.w	r3, r3, #3
 8008c82:	3304      	adds	r3, #4
 8008c84:	f104 0715 	add.w	r7, r4, #21
 8008c88:	42ba      	cmp	r2, r7
 8008c8a:	bf38      	it	cc
 8008c8c:	2304      	movcc	r3, #4
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	9b02      	ldr	r3, [sp, #8]
 8008c92:	9103      	str	r1, [sp, #12]
 8008c94:	428b      	cmp	r3, r1
 8008c96:	d80c      	bhi.n	8008cb2 <__multiply+0x9e>
 8008c98:	2e00      	cmp	r6, #0
 8008c9a:	dd03      	ble.n	8008ca4 <__multiply+0x90>
 8008c9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d05b      	beq.n	8008d5c <__multiply+0x148>
 8008ca4:	6106      	str	r6, [r0, #16]
 8008ca6:	b005      	add	sp, #20
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cac:	f843 2b04 	str.w	r2, [r3], #4
 8008cb0:	e7d8      	b.n	8008c64 <__multiply+0x50>
 8008cb2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008cb6:	f1ba 0f00 	cmp.w	sl, #0
 8008cba:	d024      	beq.n	8008d06 <__multiply+0xf2>
 8008cbc:	f104 0e14 	add.w	lr, r4, #20
 8008cc0:	46a9      	mov	r9, r5
 8008cc2:	f04f 0c00 	mov.w	ip, #0
 8008cc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cca:	f8d9 3000 	ldr.w	r3, [r9]
 8008cce:	fa1f fb87 	uxth.w	fp, r7
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008cd8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008cdc:	f8d9 7000 	ldr.w	r7, [r9]
 8008ce0:	4463      	add	r3, ip
 8008ce2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ce6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008cea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cf4:	4572      	cmp	r2, lr
 8008cf6:	f849 3b04 	str.w	r3, [r9], #4
 8008cfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cfe:	d8e2      	bhi.n	8008cc6 <__multiply+0xb2>
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	f845 c003 	str.w	ip, [r5, r3]
 8008d06:	9b03      	ldr	r3, [sp, #12]
 8008d08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008d0c:	3104      	adds	r1, #4
 8008d0e:	f1b9 0f00 	cmp.w	r9, #0
 8008d12:	d021      	beq.n	8008d58 <__multiply+0x144>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	f104 0c14 	add.w	ip, r4, #20
 8008d1a:	46ae      	mov	lr, r5
 8008d1c:	f04f 0a00 	mov.w	sl, #0
 8008d20:	f8bc b000 	ldrh.w	fp, [ip]
 8008d24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d28:	fb09 770b 	mla	r7, r9, fp, r7
 8008d2c:	4457      	add	r7, sl
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d34:	f84e 3b04 	str.w	r3, [lr], #4
 8008d38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d40:	f8be 3000 	ldrh.w	r3, [lr]
 8008d44:	fb09 330a 	mla	r3, r9, sl, r3
 8008d48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d4c:	4562      	cmp	r2, ip
 8008d4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d52:	d8e5      	bhi.n	8008d20 <__multiply+0x10c>
 8008d54:	9f01      	ldr	r7, [sp, #4]
 8008d56:	51eb      	str	r3, [r5, r7]
 8008d58:	3504      	adds	r5, #4
 8008d5a:	e799      	b.n	8008c90 <__multiply+0x7c>
 8008d5c:	3e01      	subs	r6, #1
 8008d5e:	e79b      	b.n	8008c98 <__multiply+0x84>
 8008d60:	0800ab78 	.word	0x0800ab78
 8008d64:	0800ab89 	.word	0x0800ab89

08008d68 <__pow5mult>:
 8008d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d6c:	4615      	mov	r5, r2
 8008d6e:	f012 0203 	ands.w	r2, r2, #3
 8008d72:	4607      	mov	r7, r0
 8008d74:	460e      	mov	r6, r1
 8008d76:	d007      	beq.n	8008d88 <__pow5mult+0x20>
 8008d78:	4c25      	ldr	r4, [pc, #148]	@ (8008e10 <__pow5mult+0xa8>)
 8008d7a:	3a01      	subs	r2, #1
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d82:	f7ff fe9f 	bl	8008ac4 <__multadd>
 8008d86:	4606      	mov	r6, r0
 8008d88:	10ad      	asrs	r5, r5, #2
 8008d8a:	d03d      	beq.n	8008e08 <__pow5mult+0xa0>
 8008d8c:	69fc      	ldr	r4, [r7, #28]
 8008d8e:	b97c      	cbnz	r4, 8008db0 <__pow5mult+0x48>
 8008d90:	2010      	movs	r0, #16
 8008d92:	f7ff fd7f 	bl	8008894 <malloc>
 8008d96:	4602      	mov	r2, r0
 8008d98:	61f8      	str	r0, [r7, #28]
 8008d9a:	b928      	cbnz	r0, 8008da8 <__pow5mult+0x40>
 8008d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8008e14 <__pow5mult+0xac>)
 8008d9e:	481e      	ldr	r0, [pc, #120]	@ (8008e18 <__pow5mult+0xb0>)
 8008da0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008da4:	f000 ff50 	bl	8009c48 <__assert_func>
 8008da8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dac:	6004      	str	r4, [r0, #0]
 8008dae:	60c4      	str	r4, [r0, #12]
 8008db0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008db4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008db8:	b94c      	cbnz	r4, 8008dce <__pow5mult+0x66>
 8008dba:	f240 2171 	movw	r1, #625	@ 0x271
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	f7ff ff12 	bl	8008be8 <__i2b>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008dca:	4604      	mov	r4, r0
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	f04f 0900 	mov.w	r9, #0
 8008dd2:	07eb      	lsls	r3, r5, #31
 8008dd4:	d50a      	bpl.n	8008dec <__pow5mult+0x84>
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4638      	mov	r0, r7
 8008ddc:	f7ff ff1a 	bl	8008c14 <__multiply>
 8008de0:	4631      	mov	r1, r6
 8008de2:	4680      	mov	r8, r0
 8008de4:	4638      	mov	r0, r7
 8008de6:	f7ff fe4b 	bl	8008a80 <_Bfree>
 8008dea:	4646      	mov	r6, r8
 8008dec:	106d      	asrs	r5, r5, #1
 8008dee:	d00b      	beq.n	8008e08 <__pow5mult+0xa0>
 8008df0:	6820      	ldr	r0, [r4, #0]
 8008df2:	b938      	cbnz	r0, 8008e04 <__pow5mult+0x9c>
 8008df4:	4622      	mov	r2, r4
 8008df6:	4621      	mov	r1, r4
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f7ff ff0b 	bl	8008c14 <__multiply>
 8008dfe:	6020      	str	r0, [r4, #0]
 8008e00:	f8c0 9000 	str.w	r9, [r0]
 8008e04:	4604      	mov	r4, r0
 8008e06:	e7e4      	b.n	8008dd2 <__pow5mult+0x6a>
 8008e08:	4630      	mov	r0, r6
 8008e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	bf00      	nop
 8008e10:	0800abe4 	.word	0x0800abe4
 8008e14:	0800ab09 	.word	0x0800ab09
 8008e18:	0800ab89 	.word	0x0800ab89

08008e1c <__lshift>:
 8008e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e20:	460c      	mov	r4, r1
 8008e22:	6849      	ldr	r1, [r1, #4]
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	4691      	mov	r9, r2
 8008e30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e34:	f108 0601 	add.w	r6, r8, #1
 8008e38:	42b3      	cmp	r3, r6
 8008e3a:	db0b      	blt.n	8008e54 <__lshift+0x38>
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f7ff fddf 	bl	8008a00 <_Balloc>
 8008e42:	4605      	mov	r5, r0
 8008e44:	b948      	cbnz	r0, 8008e5a <__lshift+0x3e>
 8008e46:	4602      	mov	r2, r0
 8008e48:	4b28      	ldr	r3, [pc, #160]	@ (8008eec <__lshift+0xd0>)
 8008e4a:	4829      	ldr	r0, [pc, #164]	@ (8008ef0 <__lshift+0xd4>)
 8008e4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e50:	f000 fefa 	bl	8009c48 <__assert_func>
 8008e54:	3101      	adds	r1, #1
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	e7ee      	b.n	8008e38 <__lshift+0x1c>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f100 0114 	add.w	r1, r0, #20
 8008e60:	f100 0210 	add.w	r2, r0, #16
 8008e64:	4618      	mov	r0, r3
 8008e66:	4553      	cmp	r3, sl
 8008e68:	db33      	blt.n	8008ed2 <__lshift+0xb6>
 8008e6a:	6920      	ldr	r0, [r4, #16]
 8008e6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e70:	f104 0314 	add.w	r3, r4, #20
 8008e74:	f019 091f 	ands.w	r9, r9, #31
 8008e78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e80:	d02b      	beq.n	8008eda <__lshift+0xbe>
 8008e82:	f1c9 0e20 	rsb	lr, r9, #32
 8008e86:	468a      	mov	sl, r1
 8008e88:	2200      	movs	r2, #0
 8008e8a:	6818      	ldr	r0, [r3, #0]
 8008e8c:	fa00 f009 	lsl.w	r0, r0, r9
 8008e90:	4310      	orrs	r0, r2
 8008e92:	f84a 0b04 	str.w	r0, [sl], #4
 8008e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9a:	459c      	cmp	ip, r3
 8008e9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ea0:	d8f3      	bhi.n	8008e8a <__lshift+0x6e>
 8008ea2:	ebac 0304 	sub.w	r3, ip, r4
 8008ea6:	3b15      	subs	r3, #21
 8008ea8:	f023 0303 	bic.w	r3, r3, #3
 8008eac:	3304      	adds	r3, #4
 8008eae:	f104 0015 	add.w	r0, r4, #21
 8008eb2:	4584      	cmp	ip, r0
 8008eb4:	bf38      	it	cc
 8008eb6:	2304      	movcc	r3, #4
 8008eb8:	50ca      	str	r2, [r1, r3]
 8008eba:	b10a      	cbz	r2, 8008ec0 <__lshift+0xa4>
 8008ebc:	f108 0602 	add.w	r6, r8, #2
 8008ec0:	3e01      	subs	r6, #1
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	612e      	str	r6, [r5, #16]
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	f7ff fdda 	bl	8008a80 <_Bfree>
 8008ecc:	4628      	mov	r0, r5
 8008ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	e7c5      	b.n	8008e66 <__lshift+0x4a>
 8008eda:	3904      	subs	r1, #4
 8008edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ee4:	459c      	cmp	ip, r3
 8008ee6:	d8f9      	bhi.n	8008edc <__lshift+0xc0>
 8008ee8:	e7ea      	b.n	8008ec0 <__lshift+0xa4>
 8008eea:	bf00      	nop
 8008eec:	0800ab78 	.word	0x0800ab78
 8008ef0:	0800ab89 	.word	0x0800ab89

08008ef4 <__mcmp>:
 8008ef4:	690a      	ldr	r2, [r1, #16]
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	6900      	ldr	r0, [r0, #16]
 8008efa:	1a80      	subs	r0, r0, r2
 8008efc:	b530      	push	{r4, r5, lr}
 8008efe:	d10e      	bne.n	8008f1e <__mcmp+0x2a>
 8008f00:	3314      	adds	r3, #20
 8008f02:	3114      	adds	r1, #20
 8008f04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f14:	4295      	cmp	r5, r2
 8008f16:	d003      	beq.n	8008f20 <__mcmp+0x2c>
 8008f18:	d205      	bcs.n	8008f26 <__mcmp+0x32>
 8008f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1e:	bd30      	pop	{r4, r5, pc}
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	d3f3      	bcc.n	8008f0c <__mcmp+0x18>
 8008f24:	e7fb      	b.n	8008f1e <__mcmp+0x2a>
 8008f26:	2001      	movs	r0, #1
 8008f28:	e7f9      	b.n	8008f1e <__mcmp+0x2a>
	...

08008f2c <__mdiff>:
 8008f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	4689      	mov	r9, r1
 8008f32:	4606      	mov	r6, r0
 8008f34:	4611      	mov	r1, r2
 8008f36:	4648      	mov	r0, r9
 8008f38:	4614      	mov	r4, r2
 8008f3a:	f7ff ffdb 	bl	8008ef4 <__mcmp>
 8008f3e:	1e05      	subs	r5, r0, #0
 8008f40:	d112      	bne.n	8008f68 <__mdiff+0x3c>
 8008f42:	4629      	mov	r1, r5
 8008f44:	4630      	mov	r0, r6
 8008f46:	f7ff fd5b 	bl	8008a00 <_Balloc>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	b928      	cbnz	r0, 8008f5a <__mdiff+0x2e>
 8008f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800904c <__mdiff+0x120>)
 8008f50:	f240 2137 	movw	r1, #567	@ 0x237
 8008f54:	483e      	ldr	r0, [pc, #248]	@ (8009050 <__mdiff+0x124>)
 8008f56:	f000 fe77 	bl	8009c48 <__assert_func>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f60:	4610      	mov	r0, r2
 8008f62:	b003      	add	sp, #12
 8008f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f68:	bfbc      	itt	lt
 8008f6a:	464b      	movlt	r3, r9
 8008f6c:	46a1      	movlt	r9, r4
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f74:	bfba      	itte	lt
 8008f76:	461c      	movlt	r4, r3
 8008f78:	2501      	movlt	r5, #1
 8008f7a:	2500      	movge	r5, #0
 8008f7c:	f7ff fd40 	bl	8008a00 <_Balloc>
 8008f80:	4602      	mov	r2, r0
 8008f82:	b918      	cbnz	r0, 8008f8c <__mdiff+0x60>
 8008f84:	4b31      	ldr	r3, [pc, #196]	@ (800904c <__mdiff+0x120>)
 8008f86:	f240 2145 	movw	r1, #581	@ 0x245
 8008f8a:	e7e3      	b.n	8008f54 <__mdiff+0x28>
 8008f8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f90:	6926      	ldr	r6, [r4, #16]
 8008f92:	60c5      	str	r5, [r0, #12]
 8008f94:	f109 0310 	add.w	r3, r9, #16
 8008f98:	f109 0514 	add.w	r5, r9, #20
 8008f9c:	f104 0e14 	add.w	lr, r4, #20
 8008fa0:	f100 0b14 	add.w	fp, r0, #20
 8008fa4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008fa8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	46d9      	mov	r9, fp
 8008fb0:	f04f 0c00 	mov.w	ip, #0
 8008fb4:	9b01      	ldr	r3, [sp, #4]
 8008fb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008fba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	fa1f f38a 	uxth.w	r3, sl
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	b283      	uxth	r3, r0
 8008fc8:	1acb      	subs	r3, r1, r3
 8008fca:	0c00      	lsrs	r0, r0, #16
 8008fcc:	4463      	add	r3, ip
 8008fce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008fd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008fdc:	4576      	cmp	r6, lr
 8008fde:	f849 3b04 	str.w	r3, [r9], #4
 8008fe2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fe6:	d8e5      	bhi.n	8008fb4 <__mdiff+0x88>
 8008fe8:	1b33      	subs	r3, r6, r4
 8008fea:	3b15      	subs	r3, #21
 8008fec:	f023 0303 	bic.w	r3, r3, #3
 8008ff0:	3415      	adds	r4, #21
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	42a6      	cmp	r6, r4
 8008ff6:	bf38      	it	cc
 8008ff8:	2304      	movcc	r3, #4
 8008ffa:	441d      	add	r5, r3
 8008ffc:	445b      	add	r3, fp
 8008ffe:	461e      	mov	r6, r3
 8009000:	462c      	mov	r4, r5
 8009002:	4544      	cmp	r4, r8
 8009004:	d30e      	bcc.n	8009024 <__mdiff+0xf8>
 8009006:	f108 0103 	add.w	r1, r8, #3
 800900a:	1b49      	subs	r1, r1, r5
 800900c:	f021 0103 	bic.w	r1, r1, #3
 8009010:	3d03      	subs	r5, #3
 8009012:	45a8      	cmp	r8, r5
 8009014:	bf38      	it	cc
 8009016:	2100      	movcc	r1, #0
 8009018:	440b      	add	r3, r1
 800901a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800901e:	b191      	cbz	r1, 8009046 <__mdiff+0x11a>
 8009020:	6117      	str	r7, [r2, #16]
 8009022:	e79d      	b.n	8008f60 <__mdiff+0x34>
 8009024:	f854 1b04 	ldr.w	r1, [r4], #4
 8009028:	46e6      	mov	lr, ip
 800902a:	0c08      	lsrs	r0, r1, #16
 800902c:	fa1c fc81 	uxtah	ip, ip, r1
 8009030:	4471      	add	r1, lr
 8009032:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009036:	b289      	uxth	r1, r1
 8009038:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800903c:	f846 1b04 	str.w	r1, [r6], #4
 8009040:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009044:	e7dd      	b.n	8009002 <__mdiff+0xd6>
 8009046:	3f01      	subs	r7, #1
 8009048:	e7e7      	b.n	800901a <__mdiff+0xee>
 800904a:	bf00      	nop
 800904c:	0800ab78 	.word	0x0800ab78
 8009050:	0800ab89 	.word	0x0800ab89

08009054 <__d2b>:
 8009054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009058:	460f      	mov	r7, r1
 800905a:	2101      	movs	r1, #1
 800905c:	ec59 8b10 	vmov	r8, r9, d0
 8009060:	4616      	mov	r6, r2
 8009062:	f7ff fccd 	bl	8008a00 <_Balloc>
 8009066:	4604      	mov	r4, r0
 8009068:	b930      	cbnz	r0, 8009078 <__d2b+0x24>
 800906a:	4602      	mov	r2, r0
 800906c:	4b23      	ldr	r3, [pc, #140]	@ (80090fc <__d2b+0xa8>)
 800906e:	4824      	ldr	r0, [pc, #144]	@ (8009100 <__d2b+0xac>)
 8009070:	f240 310f 	movw	r1, #783	@ 0x30f
 8009074:	f000 fde8 	bl	8009c48 <__assert_func>
 8009078:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800907c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009080:	b10d      	cbz	r5, 8009086 <__d2b+0x32>
 8009082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	f1b8 0300 	subs.w	r3, r8, #0
 800908c:	d023      	beq.n	80090d6 <__d2b+0x82>
 800908e:	4668      	mov	r0, sp
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	f7ff fd7c 	bl	8008b8e <__lo0bits>
 8009096:	e9dd 1200 	ldrd	r1, r2, [sp]
 800909a:	b1d0      	cbz	r0, 80090d2 <__d2b+0x7e>
 800909c:	f1c0 0320 	rsb	r3, r0, #32
 80090a0:	fa02 f303 	lsl.w	r3, r2, r3
 80090a4:	430b      	orrs	r3, r1
 80090a6:	40c2      	lsrs	r2, r0
 80090a8:	6163      	str	r3, [r4, #20]
 80090aa:	9201      	str	r2, [sp, #4]
 80090ac:	9b01      	ldr	r3, [sp, #4]
 80090ae:	61a3      	str	r3, [r4, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bf0c      	ite	eq
 80090b4:	2201      	moveq	r2, #1
 80090b6:	2202      	movne	r2, #2
 80090b8:	6122      	str	r2, [r4, #16]
 80090ba:	b1a5      	cbz	r5, 80090e6 <__d2b+0x92>
 80090bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090c0:	4405      	add	r5, r0
 80090c2:	603d      	str	r5, [r7, #0]
 80090c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80090c8:	6030      	str	r0, [r6, #0]
 80090ca:	4620      	mov	r0, r4
 80090cc:	b003      	add	sp, #12
 80090ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090d2:	6161      	str	r1, [r4, #20]
 80090d4:	e7ea      	b.n	80090ac <__d2b+0x58>
 80090d6:	a801      	add	r0, sp, #4
 80090d8:	f7ff fd59 	bl	8008b8e <__lo0bits>
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	6163      	str	r3, [r4, #20]
 80090e0:	3020      	adds	r0, #32
 80090e2:	2201      	movs	r2, #1
 80090e4:	e7e8      	b.n	80090b8 <__d2b+0x64>
 80090e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090ee:	6038      	str	r0, [r7, #0]
 80090f0:	6918      	ldr	r0, [r3, #16]
 80090f2:	f7ff fd2d 	bl	8008b50 <__hi0bits>
 80090f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090fa:	e7e5      	b.n	80090c8 <__d2b+0x74>
 80090fc:	0800ab78 	.word	0x0800ab78
 8009100:	0800ab89 	.word	0x0800ab89

08009104 <__ssputs_r>:
 8009104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009108:	688e      	ldr	r6, [r1, #8]
 800910a:	461f      	mov	r7, r3
 800910c:	42be      	cmp	r6, r7
 800910e:	680b      	ldr	r3, [r1, #0]
 8009110:	4682      	mov	sl, r0
 8009112:	460c      	mov	r4, r1
 8009114:	4690      	mov	r8, r2
 8009116:	d82d      	bhi.n	8009174 <__ssputs_r+0x70>
 8009118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800911c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009120:	d026      	beq.n	8009170 <__ssputs_r+0x6c>
 8009122:	6965      	ldr	r5, [r4, #20]
 8009124:	6909      	ldr	r1, [r1, #16]
 8009126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800912a:	eba3 0901 	sub.w	r9, r3, r1
 800912e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009132:	1c7b      	adds	r3, r7, #1
 8009134:	444b      	add	r3, r9
 8009136:	106d      	asrs	r5, r5, #1
 8009138:	429d      	cmp	r5, r3
 800913a:	bf38      	it	cc
 800913c:	461d      	movcc	r5, r3
 800913e:	0553      	lsls	r3, r2, #21
 8009140:	d527      	bpl.n	8009192 <__ssputs_r+0x8e>
 8009142:	4629      	mov	r1, r5
 8009144:	f7ff fbd0 	bl	80088e8 <_malloc_r>
 8009148:	4606      	mov	r6, r0
 800914a:	b360      	cbz	r0, 80091a6 <__ssputs_r+0xa2>
 800914c:	6921      	ldr	r1, [r4, #16]
 800914e:	464a      	mov	r2, r9
 8009150:	f7fe fcfb 	bl	8007b4a <memcpy>
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800915a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800915e:	81a3      	strh	r3, [r4, #12]
 8009160:	6126      	str	r6, [r4, #16]
 8009162:	6165      	str	r5, [r4, #20]
 8009164:	444e      	add	r6, r9
 8009166:	eba5 0509 	sub.w	r5, r5, r9
 800916a:	6026      	str	r6, [r4, #0]
 800916c:	60a5      	str	r5, [r4, #8]
 800916e:	463e      	mov	r6, r7
 8009170:	42be      	cmp	r6, r7
 8009172:	d900      	bls.n	8009176 <__ssputs_r+0x72>
 8009174:	463e      	mov	r6, r7
 8009176:	6820      	ldr	r0, [r4, #0]
 8009178:	4632      	mov	r2, r6
 800917a:	4641      	mov	r1, r8
 800917c:	f7fe fc1a 	bl	80079b4 <memmove>
 8009180:	68a3      	ldr	r3, [r4, #8]
 8009182:	1b9b      	subs	r3, r3, r6
 8009184:	60a3      	str	r3, [r4, #8]
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	4433      	add	r3, r6
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	2000      	movs	r0, #0
 800918e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009192:	462a      	mov	r2, r5
 8009194:	f000 fd9c 	bl	8009cd0 <_realloc_r>
 8009198:	4606      	mov	r6, r0
 800919a:	2800      	cmp	r0, #0
 800919c:	d1e0      	bne.n	8009160 <__ssputs_r+0x5c>
 800919e:	6921      	ldr	r1, [r4, #16]
 80091a0:	4650      	mov	r0, sl
 80091a2:	f7ff fb2d 	bl	8008800 <_free_r>
 80091a6:	230c      	movs	r3, #12
 80091a8:	f8ca 3000 	str.w	r3, [sl]
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295
 80091b8:	e7e9      	b.n	800918e <__ssputs_r+0x8a>
	...

080091bc <_svfiprintf_r>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	4698      	mov	r8, r3
 80091c2:	898b      	ldrh	r3, [r1, #12]
 80091c4:	061b      	lsls	r3, r3, #24
 80091c6:	b09d      	sub	sp, #116	@ 0x74
 80091c8:	4607      	mov	r7, r0
 80091ca:	460d      	mov	r5, r1
 80091cc:	4614      	mov	r4, r2
 80091ce:	d510      	bpl.n	80091f2 <_svfiprintf_r+0x36>
 80091d0:	690b      	ldr	r3, [r1, #16]
 80091d2:	b973      	cbnz	r3, 80091f2 <_svfiprintf_r+0x36>
 80091d4:	2140      	movs	r1, #64	@ 0x40
 80091d6:	f7ff fb87 	bl	80088e8 <_malloc_r>
 80091da:	6028      	str	r0, [r5, #0]
 80091dc:	6128      	str	r0, [r5, #16]
 80091de:	b930      	cbnz	r0, 80091ee <_svfiprintf_r+0x32>
 80091e0:	230c      	movs	r3, #12
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	b01d      	add	sp, #116	@ 0x74
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ee:	2340      	movs	r3, #64	@ 0x40
 80091f0:	616b      	str	r3, [r5, #20]
 80091f2:	2300      	movs	r3, #0
 80091f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f6:	2320      	movs	r3, #32
 80091f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009200:	2330      	movs	r3, #48	@ 0x30
 8009202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093a0 <_svfiprintf_r+0x1e4>
 8009206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800920a:	f04f 0901 	mov.w	r9, #1
 800920e:	4623      	mov	r3, r4
 8009210:	469a      	mov	sl, r3
 8009212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009216:	b10a      	cbz	r2, 800921c <_svfiprintf_r+0x60>
 8009218:	2a25      	cmp	r2, #37	@ 0x25
 800921a:	d1f9      	bne.n	8009210 <_svfiprintf_r+0x54>
 800921c:	ebba 0b04 	subs.w	fp, sl, r4
 8009220:	d00b      	beq.n	800923a <_svfiprintf_r+0x7e>
 8009222:	465b      	mov	r3, fp
 8009224:	4622      	mov	r2, r4
 8009226:	4629      	mov	r1, r5
 8009228:	4638      	mov	r0, r7
 800922a:	f7ff ff6b 	bl	8009104 <__ssputs_r>
 800922e:	3001      	adds	r0, #1
 8009230:	f000 80a7 	beq.w	8009382 <_svfiprintf_r+0x1c6>
 8009234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009236:	445a      	add	r2, fp
 8009238:	9209      	str	r2, [sp, #36]	@ 0x24
 800923a:	f89a 3000 	ldrb.w	r3, [sl]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 809f 	beq.w	8009382 <_svfiprintf_r+0x1c6>
 8009244:	2300      	movs	r3, #0
 8009246:	f04f 32ff 	mov.w	r2, #4294967295
 800924a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800924e:	f10a 0a01 	add.w	sl, sl, #1
 8009252:	9304      	str	r3, [sp, #16]
 8009254:	9307      	str	r3, [sp, #28]
 8009256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800925a:	931a      	str	r3, [sp, #104]	@ 0x68
 800925c:	4654      	mov	r4, sl
 800925e:	2205      	movs	r2, #5
 8009260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009264:	484e      	ldr	r0, [pc, #312]	@ (80093a0 <_svfiprintf_r+0x1e4>)
 8009266:	f7f6 ffbb 	bl	80001e0 <memchr>
 800926a:	9a04      	ldr	r2, [sp, #16]
 800926c:	b9d8      	cbnz	r0, 80092a6 <_svfiprintf_r+0xea>
 800926e:	06d0      	lsls	r0, r2, #27
 8009270:	bf44      	itt	mi
 8009272:	2320      	movmi	r3, #32
 8009274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009278:	0711      	lsls	r1, r2, #28
 800927a:	bf44      	itt	mi
 800927c:	232b      	movmi	r3, #43	@ 0x2b
 800927e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009282:	f89a 3000 	ldrb.w	r3, [sl]
 8009286:	2b2a      	cmp	r3, #42	@ 0x2a
 8009288:	d015      	beq.n	80092b6 <_svfiprintf_r+0xfa>
 800928a:	9a07      	ldr	r2, [sp, #28]
 800928c:	4654      	mov	r4, sl
 800928e:	2000      	movs	r0, #0
 8009290:	f04f 0c0a 	mov.w	ip, #10
 8009294:	4621      	mov	r1, r4
 8009296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800929a:	3b30      	subs	r3, #48	@ 0x30
 800929c:	2b09      	cmp	r3, #9
 800929e:	d94b      	bls.n	8009338 <_svfiprintf_r+0x17c>
 80092a0:	b1b0      	cbz	r0, 80092d0 <_svfiprintf_r+0x114>
 80092a2:	9207      	str	r2, [sp, #28]
 80092a4:	e014      	b.n	80092d0 <_svfiprintf_r+0x114>
 80092a6:	eba0 0308 	sub.w	r3, r0, r8
 80092aa:	fa09 f303 	lsl.w	r3, r9, r3
 80092ae:	4313      	orrs	r3, r2
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	46a2      	mov	sl, r4
 80092b4:	e7d2      	b.n	800925c <_svfiprintf_r+0xa0>
 80092b6:	9b03      	ldr	r3, [sp, #12]
 80092b8:	1d19      	adds	r1, r3, #4
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	9103      	str	r1, [sp, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	bfbb      	ittet	lt
 80092c2:	425b      	neglt	r3, r3
 80092c4:	f042 0202 	orrlt.w	r2, r2, #2
 80092c8:	9307      	strge	r3, [sp, #28]
 80092ca:	9307      	strlt	r3, [sp, #28]
 80092cc:	bfb8      	it	lt
 80092ce:	9204      	strlt	r2, [sp, #16]
 80092d0:	7823      	ldrb	r3, [r4, #0]
 80092d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80092d4:	d10a      	bne.n	80092ec <_svfiprintf_r+0x130>
 80092d6:	7863      	ldrb	r3, [r4, #1]
 80092d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80092da:	d132      	bne.n	8009342 <_svfiprintf_r+0x186>
 80092dc:	9b03      	ldr	r3, [sp, #12]
 80092de:	1d1a      	adds	r2, r3, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	9203      	str	r2, [sp, #12]
 80092e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092e8:	3402      	adds	r4, #2
 80092ea:	9305      	str	r3, [sp, #20]
 80092ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093b0 <_svfiprintf_r+0x1f4>
 80092f0:	7821      	ldrb	r1, [r4, #0]
 80092f2:	2203      	movs	r2, #3
 80092f4:	4650      	mov	r0, sl
 80092f6:	f7f6 ff73 	bl	80001e0 <memchr>
 80092fa:	b138      	cbz	r0, 800930c <_svfiprintf_r+0x150>
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	eba0 000a 	sub.w	r0, r0, sl
 8009302:	2240      	movs	r2, #64	@ 0x40
 8009304:	4082      	lsls	r2, r0
 8009306:	4313      	orrs	r3, r2
 8009308:	3401      	adds	r4, #1
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009310:	4824      	ldr	r0, [pc, #144]	@ (80093a4 <_svfiprintf_r+0x1e8>)
 8009312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009316:	2206      	movs	r2, #6
 8009318:	f7f6 ff62 	bl	80001e0 <memchr>
 800931c:	2800      	cmp	r0, #0
 800931e:	d036      	beq.n	800938e <_svfiprintf_r+0x1d2>
 8009320:	4b21      	ldr	r3, [pc, #132]	@ (80093a8 <_svfiprintf_r+0x1ec>)
 8009322:	bb1b      	cbnz	r3, 800936c <_svfiprintf_r+0x1b0>
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	3307      	adds	r3, #7
 8009328:	f023 0307 	bic.w	r3, r3, #7
 800932c:	3308      	adds	r3, #8
 800932e:	9303      	str	r3, [sp, #12]
 8009330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009332:	4433      	add	r3, r6
 8009334:	9309      	str	r3, [sp, #36]	@ 0x24
 8009336:	e76a      	b.n	800920e <_svfiprintf_r+0x52>
 8009338:	fb0c 3202 	mla	r2, ip, r2, r3
 800933c:	460c      	mov	r4, r1
 800933e:	2001      	movs	r0, #1
 8009340:	e7a8      	b.n	8009294 <_svfiprintf_r+0xd8>
 8009342:	2300      	movs	r3, #0
 8009344:	3401      	adds	r4, #1
 8009346:	9305      	str	r3, [sp, #20]
 8009348:	4619      	mov	r1, r3
 800934a:	f04f 0c0a 	mov.w	ip, #10
 800934e:	4620      	mov	r0, r4
 8009350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009354:	3a30      	subs	r2, #48	@ 0x30
 8009356:	2a09      	cmp	r2, #9
 8009358:	d903      	bls.n	8009362 <_svfiprintf_r+0x1a6>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0c6      	beq.n	80092ec <_svfiprintf_r+0x130>
 800935e:	9105      	str	r1, [sp, #20]
 8009360:	e7c4      	b.n	80092ec <_svfiprintf_r+0x130>
 8009362:	fb0c 2101 	mla	r1, ip, r1, r2
 8009366:	4604      	mov	r4, r0
 8009368:	2301      	movs	r3, #1
 800936a:	e7f0      	b.n	800934e <_svfiprintf_r+0x192>
 800936c:	ab03      	add	r3, sp, #12
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	462a      	mov	r2, r5
 8009372:	4b0e      	ldr	r3, [pc, #56]	@ (80093ac <_svfiprintf_r+0x1f0>)
 8009374:	a904      	add	r1, sp, #16
 8009376:	4638      	mov	r0, r7
 8009378:	f7fd fdda 	bl	8006f30 <_printf_float>
 800937c:	1c42      	adds	r2, r0, #1
 800937e:	4606      	mov	r6, r0
 8009380:	d1d6      	bne.n	8009330 <_svfiprintf_r+0x174>
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	065b      	lsls	r3, r3, #25
 8009386:	f53f af2d 	bmi.w	80091e4 <_svfiprintf_r+0x28>
 800938a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800938c:	e72c      	b.n	80091e8 <_svfiprintf_r+0x2c>
 800938e:	ab03      	add	r3, sp, #12
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	462a      	mov	r2, r5
 8009394:	4b05      	ldr	r3, [pc, #20]	@ (80093ac <_svfiprintf_r+0x1f0>)
 8009396:	a904      	add	r1, sp, #16
 8009398:	4638      	mov	r0, r7
 800939a:	f7fe f861 	bl	8007460 <_printf_i>
 800939e:	e7ed      	b.n	800937c <_svfiprintf_r+0x1c0>
 80093a0:	0800ace0 	.word	0x0800ace0
 80093a4:	0800acea 	.word	0x0800acea
 80093a8:	08006f31 	.word	0x08006f31
 80093ac:	08009105 	.word	0x08009105
 80093b0:	0800ace6 	.word	0x0800ace6

080093b4 <_sungetc_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	1c4b      	adds	r3, r1, #1
 80093b8:	4614      	mov	r4, r2
 80093ba:	d103      	bne.n	80093c4 <_sungetc_r+0x10>
 80093bc:	f04f 35ff 	mov.w	r5, #4294967295
 80093c0:	4628      	mov	r0, r5
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	8993      	ldrh	r3, [r2, #12]
 80093c6:	f023 0320 	bic.w	r3, r3, #32
 80093ca:	8193      	strh	r3, [r2, #12]
 80093cc:	6853      	ldr	r3, [r2, #4]
 80093ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80093d0:	b2cd      	uxtb	r5, r1
 80093d2:	b18a      	cbz	r2, 80093f8 <_sungetc_r+0x44>
 80093d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80093d6:	429a      	cmp	r2, r3
 80093d8:	dd08      	ble.n	80093ec <_sungetc_r+0x38>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	1e5a      	subs	r2, r3, #1
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80093e4:	6863      	ldr	r3, [r4, #4]
 80093e6:	3301      	adds	r3, #1
 80093e8:	6063      	str	r3, [r4, #4]
 80093ea:	e7e9      	b.n	80093c0 <_sungetc_r+0xc>
 80093ec:	4621      	mov	r1, r4
 80093ee:	f000 fbe0 	bl	8009bb2 <__submore>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0f1      	beq.n	80093da <_sungetc_r+0x26>
 80093f6:	e7e1      	b.n	80093bc <_sungetc_r+0x8>
 80093f8:	6921      	ldr	r1, [r4, #16]
 80093fa:	6822      	ldr	r2, [r4, #0]
 80093fc:	b141      	cbz	r1, 8009410 <_sungetc_r+0x5c>
 80093fe:	4291      	cmp	r1, r2
 8009400:	d206      	bcs.n	8009410 <_sungetc_r+0x5c>
 8009402:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009406:	42a9      	cmp	r1, r5
 8009408:	d102      	bne.n	8009410 <_sungetc_r+0x5c>
 800940a:	3a01      	subs	r2, #1
 800940c:	6022      	str	r2, [r4, #0]
 800940e:	e7ea      	b.n	80093e6 <_sungetc_r+0x32>
 8009410:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009414:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009418:	6363      	str	r3, [r4, #52]	@ 0x34
 800941a:	2303      	movs	r3, #3
 800941c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800941e:	4623      	mov	r3, r4
 8009420:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	2301      	movs	r3, #1
 8009428:	e7de      	b.n	80093e8 <_sungetc_r+0x34>

0800942a <__ssrefill_r>:
 800942a:	b510      	push	{r4, lr}
 800942c:	460c      	mov	r4, r1
 800942e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009430:	b169      	cbz	r1, 800944e <__ssrefill_r+0x24>
 8009432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009436:	4299      	cmp	r1, r3
 8009438:	d001      	beq.n	800943e <__ssrefill_r+0x14>
 800943a:	f7ff f9e1 	bl	8008800 <_free_r>
 800943e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009440:	6063      	str	r3, [r4, #4]
 8009442:	2000      	movs	r0, #0
 8009444:	6360      	str	r0, [r4, #52]	@ 0x34
 8009446:	b113      	cbz	r3, 800944e <__ssrefill_r+0x24>
 8009448:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800944a:	6023      	str	r3, [r4, #0]
 800944c:	bd10      	pop	{r4, pc}
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	2300      	movs	r3, #0
 8009454:	6063      	str	r3, [r4, #4]
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f043 0320 	orr.w	r3, r3, #32
 800945c:	81a3      	strh	r3, [r4, #12]
 800945e:	f04f 30ff 	mov.w	r0, #4294967295
 8009462:	e7f3      	b.n	800944c <__ssrefill_r+0x22>

08009464 <__ssvfiscanf_r>:
 8009464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009468:	460c      	mov	r4, r1
 800946a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800946e:	2100      	movs	r1, #0
 8009470:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009474:	49a5      	ldr	r1, [pc, #660]	@ (800970c <__ssvfiscanf_r+0x2a8>)
 8009476:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009478:	f10d 0804 	add.w	r8, sp, #4
 800947c:	49a4      	ldr	r1, [pc, #656]	@ (8009710 <__ssvfiscanf_r+0x2ac>)
 800947e:	4fa5      	ldr	r7, [pc, #660]	@ (8009714 <__ssvfiscanf_r+0x2b0>)
 8009480:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009484:	4606      	mov	r6, r0
 8009486:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	7813      	ldrb	r3, [r2, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 8158 	beq.w	8009742 <__ssvfiscanf_r+0x2de>
 8009492:	5cf9      	ldrb	r1, [r7, r3]
 8009494:	f011 0108 	ands.w	r1, r1, #8
 8009498:	f102 0501 	add.w	r5, r2, #1
 800949c:	d019      	beq.n	80094d2 <__ssvfiscanf_r+0x6e>
 800949e:	6863      	ldr	r3, [r4, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dd0f      	ble.n	80094c4 <__ssvfiscanf_r+0x60>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	781a      	ldrb	r2, [r3, #0]
 80094a8:	5cba      	ldrb	r2, [r7, r2]
 80094aa:	0712      	lsls	r2, r2, #28
 80094ac:	d401      	bmi.n	80094b2 <__ssvfiscanf_r+0x4e>
 80094ae:	462a      	mov	r2, r5
 80094b0:	e7eb      	b.n	800948a <__ssvfiscanf_r+0x26>
 80094b2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80094b4:	3201      	adds	r2, #1
 80094b6:	9245      	str	r2, [sp, #276]	@ 0x114
 80094b8:	6862      	ldr	r2, [r4, #4]
 80094ba:	3301      	adds	r3, #1
 80094bc:	3a01      	subs	r2, #1
 80094be:	6062      	str	r2, [r4, #4]
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	e7ec      	b.n	800949e <__ssvfiscanf_r+0x3a>
 80094c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80094c6:	4621      	mov	r1, r4
 80094c8:	4630      	mov	r0, r6
 80094ca:	4798      	blx	r3
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d0e9      	beq.n	80094a4 <__ssvfiscanf_r+0x40>
 80094d0:	e7ed      	b.n	80094ae <__ssvfiscanf_r+0x4a>
 80094d2:	2b25      	cmp	r3, #37	@ 0x25
 80094d4:	d012      	beq.n	80094fc <__ssvfiscanf_r+0x98>
 80094d6:	4699      	mov	r9, r3
 80094d8:	6863      	ldr	r3, [r4, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f340 8093 	ble.w	8009606 <__ssvfiscanf_r+0x1a2>
 80094e0:	6822      	ldr	r2, [r4, #0]
 80094e2:	7813      	ldrb	r3, [r2, #0]
 80094e4:	454b      	cmp	r3, r9
 80094e6:	f040 812c 	bne.w	8009742 <__ssvfiscanf_r+0x2de>
 80094ea:	6863      	ldr	r3, [r4, #4]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	6063      	str	r3, [r4, #4]
 80094f0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80094f2:	3201      	adds	r2, #1
 80094f4:	3301      	adds	r3, #1
 80094f6:	6022      	str	r2, [r4, #0]
 80094f8:	9345      	str	r3, [sp, #276]	@ 0x114
 80094fa:	e7d8      	b.n	80094ae <__ssvfiscanf_r+0x4a>
 80094fc:	9141      	str	r1, [sp, #260]	@ 0x104
 80094fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009500:	7853      	ldrb	r3, [r2, #1]
 8009502:	2b2a      	cmp	r3, #42	@ 0x2a
 8009504:	bf02      	ittt	eq
 8009506:	2310      	moveq	r3, #16
 8009508:	1c95      	addeq	r5, r2, #2
 800950a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800950c:	220a      	movs	r2, #10
 800950e:	46a9      	mov	r9, r5
 8009510:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009514:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009518:	2b09      	cmp	r3, #9
 800951a:	d91e      	bls.n	800955a <__ssvfiscanf_r+0xf6>
 800951c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009718 <__ssvfiscanf_r+0x2b4>
 8009520:	2203      	movs	r2, #3
 8009522:	4650      	mov	r0, sl
 8009524:	f7f6 fe5c 	bl	80001e0 <memchr>
 8009528:	b138      	cbz	r0, 800953a <__ssvfiscanf_r+0xd6>
 800952a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800952c:	eba0 000a 	sub.w	r0, r0, sl
 8009530:	2301      	movs	r3, #1
 8009532:	4083      	lsls	r3, r0
 8009534:	4313      	orrs	r3, r2
 8009536:	9341      	str	r3, [sp, #260]	@ 0x104
 8009538:	464d      	mov	r5, r9
 800953a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800953e:	2b78      	cmp	r3, #120	@ 0x78
 8009540:	d806      	bhi.n	8009550 <__ssvfiscanf_r+0xec>
 8009542:	2b57      	cmp	r3, #87	@ 0x57
 8009544:	d810      	bhi.n	8009568 <__ssvfiscanf_r+0x104>
 8009546:	2b25      	cmp	r3, #37	@ 0x25
 8009548:	d0c5      	beq.n	80094d6 <__ssvfiscanf_r+0x72>
 800954a:	d857      	bhi.n	80095fc <__ssvfiscanf_r+0x198>
 800954c:	2b00      	cmp	r3, #0
 800954e:	d065      	beq.n	800961c <__ssvfiscanf_r+0x1b8>
 8009550:	2303      	movs	r3, #3
 8009552:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009554:	230a      	movs	r3, #10
 8009556:	9342      	str	r3, [sp, #264]	@ 0x108
 8009558:	e078      	b.n	800964c <__ssvfiscanf_r+0x1e8>
 800955a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800955c:	fb02 1103 	mla	r1, r2, r3, r1
 8009560:	3930      	subs	r1, #48	@ 0x30
 8009562:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009564:	464d      	mov	r5, r9
 8009566:	e7d2      	b.n	800950e <__ssvfiscanf_r+0xaa>
 8009568:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800956c:	2a20      	cmp	r2, #32
 800956e:	d8ef      	bhi.n	8009550 <__ssvfiscanf_r+0xec>
 8009570:	a101      	add	r1, pc, #4	@ (adr r1, 8009578 <__ssvfiscanf_r+0x114>)
 8009572:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009576:	bf00      	nop
 8009578:	0800962b 	.word	0x0800962b
 800957c:	08009551 	.word	0x08009551
 8009580:	08009551 	.word	0x08009551
 8009584:	08009685 	.word	0x08009685
 8009588:	08009551 	.word	0x08009551
 800958c:	08009551 	.word	0x08009551
 8009590:	08009551 	.word	0x08009551
 8009594:	08009551 	.word	0x08009551
 8009598:	08009551 	.word	0x08009551
 800959c:	08009551 	.word	0x08009551
 80095a0:	08009551 	.word	0x08009551
 80095a4:	0800969b 	.word	0x0800969b
 80095a8:	08009681 	.word	0x08009681
 80095ac:	08009603 	.word	0x08009603
 80095b0:	08009603 	.word	0x08009603
 80095b4:	08009603 	.word	0x08009603
 80095b8:	08009551 	.word	0x08009551
 80095bc:	0800963d 	.word	0x0800963d
 80095c0:	08009551 	.word	0x08009551
 80095c4:	08009551 	.word	0x08009551
 80095c8:	08009551 	.word	0x08009551
 80095cc:	08009551 	.word	0x08009551
 80095d0:	080096ab 	.word	0x080096ab
 80095d4:	08009645 	.word	0x08009645
 80095d8:	08009623 	.word	0x08009623
 80095dc:	08009551 	.word	0x08009551
 80095e0:	08009551 	.word	0x08009551
 80095e4:	080096a7 	.word	0x080096a7
 80095e8:	08009551 	.word	0x08009551
 80095ec:	08009681 	.word	0x08009681
 80095f0:	08009551 	.word	0x08009551
 80095f4:	08009551 	.word	0x08009551
 80095f8:	0800962b 	.word	0x0800962b
 80095fc:	3b45      	subs	r3, #69	@ 0x45
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d8a6      	bhi.n	8009550 <__ssvfiscanf_r+0xec>
 8009602:	2305      	movs	r3, #5
 8009604:	e021      	b.n	800964a <__ssvfiscanf_r+0x1e6>
 8009606:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009608:	4621      	mov	r1, r4
 800960a:	4630      	mov	r0, r6
 800960c:	4798      	blx	r3
 800960e:	2800      	cmp	r0, #0
 8009610:	f43f af66 	beq.w	80094e0 <__ssvfiscanf_r+0x7c>
 8009614:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009616:	2800      	cmp	r0, #0
 8009618:	f040 808b 	bne.w	8009732 <__ssvfiscanf_r+0x2ce>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	e08b      	b.n	800973a <__ssvfiscanf_r+0x2d6>
 8009622:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009624:	f042 0220 	orr.w	r2, r2, #32
 8009628:	9241      	str	r2, [sp, #260]	@ 0x104
 800962a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800962c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009630:	9241      	str	r2, [sp, #260]	@ 0x104
 8009632:	2210      	movs	r2, #16
 8009634:	2b6e      	cmp	r3, #110	@ 0x6e
 8009636:	9242      	str	r2, [sp, #264]	@ 0x108
 8009638:	d902      	bls.n	8009640 <__ssvfiscanf_r+0x1dc>
 800963a:	e005      	b.n	8009648 <__ssvfiscanf_r+0x1e4>
 800963c:	2300      	movs	r3, #0
 800963e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009640:	2303      	movs	r3, #3
 8009642:	e002      	b.n	800964a <__ssvfiscanf_r+0x1e6>
 8009644:	2308      	movs	r3, #8
 8009646:	9342      	str	r3, [sp, #264]	@ 0x108
 8009648:	2304      	movs	r3, #4
 800964a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	dd39      	ble.n	80096c6 <__ssvfiscanf_r+0x262>
 8009652:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009654:	0659      	lsls	r1, r3, #25
 8009656:	d404      	bmi.n	8009662 <__ssvfiscanf_r+0x1fe>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	781a      	ldrb	r2, [r3, #0]
 800965c:	5cba      	ldrb	r2, [r7, r2]
 800965e:	0712      	lsls	r2, r2, #28
 8009660:	d438      	bmi.n	80096d4 <__ssvfiscanf_r+0x270>
 8009662:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009664:	2b02      	cmp	r3, #2
 8009666:	dc47      	bgt.n	80096f8 <__ssvfiscanf_r+0x294>
 8009668:	466b      	mov	r3, sp
 800966a:	4622      	mov	r2, r4
 800966c:	a941      	add	r1, sp, #260	@ 0x104
 800966e:	4630      	mov	r0, r6
 8009670:	f000 f86c 	bl	800974c <_scanf_chars>
 8009674:	2801      	cmp	r0, #1
 8009676:	d064      	beq.n	8009742 <__ssvfiscanf_r+0x2de>
 8009678:	2802      	cmp	r0, #2
 800967a:	f47f af18 	bne.w	80094ae <__ssvfiscanf_r+0x4a>
 800967e:	e7c9      	b.n	8009614 <__ssvfiscanf_r+0x1b0>
 8009680:	220a      	movs	r2, #10
 8009682:	e7d7      	b.n	8009634 <__ssvfiscanf_r+0x1d0>
 8009684:	4629      	mov	r1, r5
 8009686:	4640      	mov	r0, r8
 8009688:	f000 fa5a 	bl	8009b40 <__sccl>
 800968c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800968e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009692:	9341      	str	r3, [sp, #260]	@ 0x104
 8009694:	4605      	mov	r5, r0
 8009696:	2301      	movs	r3, #1
 8009698:	e7d7      	b.n	800964a <__ssvfiscanf_r+0x1e6>
 800969a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800969c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a0:	9341      	str	r3, [sp, #260]	@ 0x104
 80096a2:	2300      	movs	r3, #0
 80096a4:	e7d1      	b.n	800964a <__ssvfiscanf_r+0x1e6>
 80096a6:	2302      	movs	r3, #2
 80096a8:	e7cf      	b.n	800964a <__ssvfiscanf_r+0x1e6>
 80096aa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80096ac:	06c3      	lsls	r3, r0, #27
 80096ae:	f53f aefe 	bmi.w	80094ae <__ssvfiscanf_r+0x4a>
 80096b2:	9b00      	ldr	r3, [sp, #0]
 80096b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80096b6:	1d19      	adds	r1, r3, #4
 80096b8:	9100      	str	r1, [sp, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	07c0      	lsls	r0, r0, #31
 80096be:	bf4c      	ite	mi
 80096c0:	801a      	strhmi	r2, [r3, #0]
 80096c2:	601a      	strpl	r2, [r3, #0]
 80096c4:	e6f3      	b.n	80094ae <__ssvfiscanf_r+0x4a>
 80096c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80096c8:	4621      	mov	r1, r4
 80096ca:	4630      	mov	r0, r6
 80096cc:	4798      	blx	r3
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d0bf      	beq.n	8009652 <__ssvfiscanf_r+0x1ee>
 80096d2:	e79f      	b.n	8009614 <__ssvfiscanf_r+0x1b0>
 80096d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80096d6:	3201      	adds	r2, #1
 80096d8:	9245      	str	r2, [sp, #276]	@ 0x114
 80096da:	6862      	ldr	r2, [r4, #4]
 80096dc:	3a01      	subs	r2, #1
 80096de:	2a00      	cmp	r2, #0
 80096e0:	6062      	str	r2, [r4, #4]
 80096e2:	dd02      	ble.n	80096ea <__ssvfiscanf_r+0x286>
 80096e4:	3301      	adds	r3, #1
 80096e6:	6023      	str	r3, [r4, #0]
 80096e8:	e7b6      	b.n	8009658 <__ssvfiscanf_r+0x1f4>
 80096ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80096ec:	4621      	mov	r1, r4
 80096ee:	4630      	mov	r0, r6
 80096f0:	4798      	blx	r3
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d0b0      	beq.n	8009658 <__ssvfiscanf_r+0x1f4>
 80096f6:	e78d      	b.n	8009614 <__ssvfiscanf_r+0x1b0>
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	dc0f      	bgt.n	800971c <__ssvfiscanf_r+0x2b8>
 80096fc:	466b      	mov	r3, sp
 80096fe:	4622      	mov	r2, r4
 8009700:	a941      	add	r1, sp, #260	@ 0x104
 8009702:	4630      	mov	r0, r6
 8009704:	f000 f87c 	bl	8009800 <_scanf_i>
 8009708:	e7b4      	b.n	8009674 <__ssvfiscanf_r+0x210>
 800970a:	bf00      	nop
 800970c:	080093b5 	.word	0x080093b5
 8009710:	0800942b 	.word	0x0800942b
 8009714:	0800ad53 	.word	0x0800ad53
 8009718:	0800ace6 	.word	0x0800ace6
 800971c:	4b0a      	ldr	r3, [pc, #40]	@ (8009748 <__ssvfiscanf_r+0x2e4>)
 800971e:	2b00      	cmp	r3, #0
 8009720:	f43f aec5 	beq.w	80094ae <__ssvfiscanf_r+0x4a>
 8009724:	466b      	mov	r3, sp
 8009726:	4622      	mov	r2, r4
 8009728:	a941      	add	r1, sp, #260	@ 0x104
 800972a:	4630      	mov	r0, r6
 800972c:	f3af 8000 	nop.w
 8009730:	e7a0      	b.n	8009674 <__ssvfiscanf_r+0x210>
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	065b      	lsls	r3, r3, #25
 8009736:	f53f af71 	bmi.w	800961c <__ssvfiscanf_r+0x1b8>
 800973a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800973e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009742:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009744:	e7f9      	b.n	800973a <__ssvfiscanf_r+0x2d6>
 8009746:	bf00      	nop
 8009748:	00000000 	.word	0x00000000

0800974c <_scanf_chars>:
 800974c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009750:	4615      	mov	r5, r2
 8009752:	688a      	ldr	r2, [r1, #8]
 8009754:	4680      	mov	r8, r0
 8009756:	460c      	mov	r4, r1
 8009758:	b932      	cbnz	r2, 8009768 <_scanf_chars+0x1c>
 800975a:	698a      	ldr	r2, [r1, #24]
 800975c:	2a00      	cmp	r2, #0
 800975e:	bf14      	ite	ne
 8009760:	f04f 32ff 	movne.w	r2, #4294967295
 8009764:	2201      	moveq	r2, #1
 8009766:	608a      	str	r2, [r1, #8]
 8009768:	6822      	ldr	r2, [r4, #0]
 800976a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80097fc <_scanf_chars+0xb0>
 800976e:	06d1      	lsls	r1, r2, #27
 8009770:	bf5f      	itttt	pl
 8009772:	681a      	ldrpl	r2, [r3, #0]
 8009774:	1d11      	addpl	r1, r2, #4
 8009776:	6019      	strpl	r1, [r3, #0]
 8009778:	6816      	ldrpl	r6, [r2, #0]
 800977a:	2700      	movs	r7, #0
 800977c:	69a0      	ldr	r0, [r4, #24]
 800977e:	b188      	cbz	r0, 80097a4 <_scanf_chars+0x58>
 8009780:	2801      	cmp	r0, #1
 8009782:	d107      	bne.n	8009794 <_scanf_chars+0x48>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	6963      	ldr	r3, [r4, #20]
 800978a:	5c9b      	ldrb	r3, [r3, r2]
 800978c:	b953      	cbnz	r3, 80097a4 <_scanf_chars+0x58>
 800978e:	2f00      	cmp	r7, #0
 8009790:	d031      	beq.n	80097f6 <_scanf_chars+0xaa>
 8009792:	e022      	b.n	80097da <_scanf_chars+0x8e>
 8009794:	2802      	cmp	r0, #2
 8009796:	d120      	bne.n	80097da <_scanf_chars+0x8e>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	f819 3003 	ldrb.w	r3, [r9, r3]
 80097a0:	071b      	lsls	r3, r3, #28
 80097a2:	d41a      	bmi.n	80097da <_scanf_chars+0x8e>
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	06da      	lsls	r2, r3, #27
 80097a8:	bf5e      	ittt	pl
 80097aa:	682b      	ldrpl	r3, [r5, #0]
 80097ac:	781b      	ldrbpl	r3, [r3, #0]
 80097ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80097b2:	682a      	ldr	r2, [r5, #0]
 80097b4:	686b      	ldr	r3, [r5, #4]
 80097b6:	3201      	adds	r2, #1
 80097b8:	602a      	str	r2, [r5, #0]
 80097ba:	68a2      	ldr	r2, [r4, #8]
 80097bc:	3b01      	subs	r3, #1
 80097be:	3a01      	subs	r2, #1
 80097c0:	606b      	str	r3, [r5, #4]
 80097c2:	3701      	adds	r7, #1
 80097c4:	60a2      	str	r2, [r4, #8]
 80097c6:	b142      	cbz	r2, 80097da <_scanf_chars+0x8e>
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	dcd7      	bgt.n	800977c <_scanf_chars+0x30>
 80097cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80097d0:	4629      	mov	r1, r5
 80097d2:	4640      	mov	r0, r8
 80097d4:	4798      	blx	r3
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d0d0      	beq.n	800977c <_scanf_chars+0x30>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	f013 0310 	ands.w	r3, r3, #16
 80097e0:	d105      	bne.n	80097ee <_scanf_chars+0xa2>
 80097e2:	68e2      	ldr	r2, [r4, #12]
 80097e4:	3201      	adds	r2, #1
 80097e6:	60e2      	str	r2, [r4, #12]
 80097e8:	69a2      	ldr	r2, [r4, #24]
 80097ea:	b102      	cbz	r2, 80097ee <_scanf_chars+0xa2>
 80097ec:	7033      	strb	r3, [r6, #0]
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	443b      	add	r3, r7
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	2000      	movs	r0, #0
 80097f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fa:	bf00      	nop
 80097fc:	0800ad53 	.word	0x0800ad53

08009800 <_scanf_i>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	4698      	mov	r8, r3
 8009806:	4b74      	ldr	r3, [pc, #464]	@ (80099d8 <_scanf_i+0x1d8>)
 8009808:	460c      	mov	r4, r1
 800980a:	4682      	mov	sl, r0
 800980c:	4616      	mov	r6, r2
 800980e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009812:	b087      	sub	sp, #28
 8009814:	ab03      	add	r3, sp, #12
 8009816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800981a:	4b70      	ldr	r3, [pc, #448]	@ (80099dc <_scanf_i+0x1dc>)
 800981c:	69a1      	ldr	r1, [r4, #24]
 800981e:	4a70      	ldr	r2, [pc, #448]	@ (80099e0 <_scanf_i+0x1e0>)
 8009820:	2903      	cmp	r1, #3
 8009822:	bf08      	it	eq
 8009824:	461a      	moveq	r2, r3
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	9201      	str	r2, [sp, #4]
 800982a:	1e5a      	subs	r2, r3, #1
 800982c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009830:	bf88      	it	hi
 8009832:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009836:	4627      	mov	r7, r4
 8009838:	bf82      	ittt	hi
 800983a:	eb03 0905 	addhi.w	r9, r3, r5
 800983e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009842:	60a3      	strhi	r3, [r4, #8]
 8009844:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009848:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800984c:	bf98      	it	ls
 800984e:	f04f 0900 	movls.w	r9, #0
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	463d      	mov	r5, r7
 8009856:	f04f 0b00 	mov.w	fp, #0
 800985a:	6831      	ldr	r1, [r6, #0]
 800985c:	ab03      	add	r3, sp, #12
 800985e:	7809      	ldrb	r1, [r1, #0]
 8009860:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009864:	2202      	movs	r2, #2
 8009866:	f7f6 fcbb 	bl	80001e0 <memchr>
 800986a:	b328      	cbz	r0, 80098b8 <_scanf_i+0xb8>
 800986c:	f1bb 0f01 	cmp.w	fp, #1
 8009870:	d159      	bne.n	8009926 <_scanf_i+0x126>
 8009872:	6862      	ldr	r2, [r4, #4]
 8009874:	b92a      	cbnz	r2, 8009882 <_scanf_i+0x82>
 8009876:	6822      	ldr	r2, [r4, #0]
 8009878:	2108      	movs	r1, #8
 800987a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800987e:	6061      	str	r1, [r4, #4]
 8009880:	6022      	str	r2, [r4, #0]
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009888:	6022      	str	r2, [r4, #0]
 800988a:	68a2      	ldr	r2, [r4, #8]
 800988c:	1e51      	subs	r1, r2, #1
 800988e:	60a1      	str	r1, [r4, #8]
 8009890:	b192      	cbz	r2, 80098b8 <_scanf_i+0xb8>
 8009892:	6832      	ldr	r2, [r6, #0]
 8009894:	1c51      	adds	r1, r2, #1
 8009896:	6031      	str	r1, [r6, #0]
 8009898:	7812      	ldrb	r2, [r2, #0]
 800989a:	f805 2b01 	strb.w	r2, [r5], #1
 800989e:	6872      	ldr	r2, [r6, #4]
 80098a0:	3a01      	subs	r2, #1
 80098a2:	2a00      	cmp	r2, #0
 80098a4:	6072      	str	r2, [r6, #4]
 80098a6:	dc07      	bgt.n	80098b8 <_scanf_i+0xb8>
 80098a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80098ac:	4631      	mov	r1, r6
 80098ae:	4650      	mov	r0, sl
 80098b0:	4790      	blx	r2
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f040 8085 	bne.w	80099c2 <_scanf_i+0x1c2>
 80098b8:	f10b 0b01 	add.w	fp, fp, #1
 80098bc:	f1bb 0f03 	cmp.w	fp, #3
 80098c0:	d1cb      	bne.n	800985a <_scanf_i+0x5a>
 80098c2:	6863      	ldr	r3, [r4, #4]
 80098c4:	b90b      	cbnz	r3, 80098ca <_scanf_i+0xca>
 80098c6:	230a      	movs	r3, #10
 80098c8:	6063      	str	r3, [r4, #4]
 80098ca:	6863      	ldr	r3, [r4, #4]
 80098cc:	4945      	ldr	r1, [pc, #276]	@ (80099e4 <_scanf_i+0x1e4>)
 80098ce:	6960      	ldr	r0, [r4, #20]
 80098d0:	1ac9      	subs	r1, r1, r3
 80098d2:	f000 f935 	bl	8009b40 <__sccl>
 80098d6:	f04f 0b00 	mov.w	fp, #0
 80098da:	68a3      	ldr	r3, [r4, #8]
 80098dc:	6822      	ldr	r2, [r4, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d03d      	beq.n	800995e <_scanf_i+0x15e>
 80098e2:	6831      	ldr	r1, [r6, #0]
 80098e4:	6960      	ldr	r0, [r4, #20]
 80098e6:	f891 c000 	ldrb.w	ip, [r1]
 80098ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d035      	beq.n	800995e <_scanf_i+0x15e>
 80098f2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80098f6:	d124      	bne.n	8009942 <_scanf_i+0x142>
 80098f8:	0510      	lsls	r0, r2, #20
 80098fa:	d522      	bpl.n	8009942 <_scanf_i+0x142>
 80098fc:	f10b 0b01 	add.w	fp, fp, #1
 8009900:	f1b9 0f00 	cmp.w	r9, #0
 8009904:	d003      	beq.n	800990e <_scanf_i+0x10e>
 8009906:	3301      	adds	r3, #1
 8009908:	f109 39ff 	add.w	r9, r9, #4294967295
 800990c:	60a3      	str	r3, [r4, #8]
 800990e:	6873      	ldr	r3, [r6, #4]
 8009910:	3b01      	subs	r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	6073      	str	r3, [r6, #4]
 8009916:	dd1b      	ble.n	8009950 <_scanf_i+0x150>
 8009918:	6833      	ldr	r3, [r6, #0]
 800991a:	3301      	adds	r3, #1
 800991c:	6033      	str	r3, [r6, #0]
 800991e:	68a3      	ldr	r3, [r4, #8]
 8009920:	3b01      	subs	r3, #1
 8009922:	60a3      	str	r3, [r4, #8]
 8009924:	e7d9      	b.n	80098da <_scanf_i+0xda>
 8009926:	f1bb 0f02 	cmp.w	fp, #2
 800992a:	d1ae      	bne.n	800988a <_scanf_i+0x8a>
 800992c:	6822      	ldr	r2, [r4, #0]
 800992e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009932:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009936:	d1bf      	bne.n	80098b8 <_scanf_i+0xb8>
 8009938:	2110      	movs	r1, #16
 800993a:	6061      	str	r1, [r4, #4]
 800993c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009940:	e7a2      	b.n	8009888 <_scanf_i+0x88>
 8009942:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009946:	6022      	str	r2, [r4, #0]
 8009948:	780b      	ldrb	r3, [r1, #0]
 800994a:	f805 3b01 	strb.w	r3, [r5], #1
 800994e:	e7de      	b.n	800990e <_scanf_i+0x10e>
 8009950:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009954:	4631      	mov	r1, r6
 8009956:	4650      	mov	r0, sl
 8009958:	4798      	blx	r3
 800995a:	2800      	cmp	r0, #0
 800995c:	d0df      	beq.n	800991e <_scanf_i+0x11e>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	05d9      	lsls	r1, r3, #23
 8009962:	d50d      	bpl.n	8009980 <_scanf_i+0x180>
 8009964:	42bd      	cmp	r5, r7
 8009966:	d909      	bls.n	800997c <_scanf_i+0x17c>
 8009968:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800996c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009970:	4632      	mov	r2, r6
 8009972:	4650      	mov	r0, sl
 8009974:	4798      	blx	r3
 8009976:	f105 39ff 	add.w	r9, r5, #4294967295
 800997a:	464d      	mov	r5, r9
 800997c:	42bd      	cmp	r5, r7
 800997e:	d028      	beq.n	80099d2 <_scanf_i+0x1d2>
 8009980:	6822      	ldr	r2, [r4, #0]
 8009982:	f012 0210 	ands.w	r2, r2, #16
 8009986:	d113      	bne.n	80099b0 <_scanf_i+0x1b0>
 8009988:	702a      	strb	r2, [r5, #0]
 800998a:	6863      	ldr	r3, [r4, #4]
 800998c:	9e01      	ldr	r6, [sp, #4]
 800998e:	4639      	mov	r1, r7
 8009990:	4650      	mov	r0, sl
 8009992:	47b0      	blx	r6
 8009994:	f8d8 3000 	ldr.w	r3, [r8]
 8009998:	6821      	ldr	r1, [r4, #0]
 800999a:	1d1a      	adds	r2, r3, #4
 800999c:	f8c8 2000 	str.w	r2, [r8]
 80099a0:	f011 0f20 	tst.w	r1, #32
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	d00f      	beq.n	80099c8 <_scanf_i+0x1c8>
 80099a8:	6018      	str	r0, [r3, #0]
 80099aa:	68e3      	ldr	r3, [r4, #12]
 80099ac:	3301      	adds	r3, #1
 80099ae:	60e3      	str	r3, [r4, #12]
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	1bed      	subs	r5, r5, r7
 80099b4:	445d      	add	r5, fp
 80099b6:	442b      	add	r3, r5
 80099b8:	6123      	str	r3, [r4, #16]
 80099ba:	2000      	movs	r0, #0
 80099bc:	b007      	add	sp, #28
 80099be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c2:	f04f 0b00 	mov.w	fp, #0
 80099c6:	e7ca      	b.n	800995e <_scanf_i+0x15e>
 80099c8:	07ca      	lsls	r2, r1, #31
 80099ca:	bf4c      	ite	mi
 80099cc:	8018      	strhmi	r0, [r3, #0]
 80099ce:	6018      	strpl	r0, [r3, #0]
 80099d0:	e7eb      	b.n	80099aa <_scanf_i+0x1aa>
 80099d2:	2001      	movs	r0, #1
 80099d4:	e7f2      	b.n	80099bc <_scanf_i+0x1bc>
 80099d6:	bf00      	nop
 80099d8:	0800a4b8 	.word	0x0800a4b8
 80099dc:	08009e21 	.word	0x08009e21
 80099e0:	08009f01 	.word	0x08009f01
 80099e4:	0800ad01 	.word	0x0800ad01

080099e8 <__sflush_r>:
 80099e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f0:	0716      	lsls	r6, r2, #28
 80099f2:	4605      	mov	r5, r0
 80099f4:	460c      	mov	r4, r1
 80099f6:	d454      	bmi.n	8009aa2 <__sflush_r+0xba>
 80099f8:	684b      	ldr	r3, [r1, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	dc02      	bgt.n	8009a04 <__sflush_r+0x1c>
 80099fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dd48      	ble.n	8009a96 <__sflush_r+0xae>
 8009a04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	d045      	beq.n	8009a96 <__sflush_r+0xae>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a10:	682f      	ldr	r7, [r5, #0]
 8009a12:	6a21      	ldr	r1, [r4, #32]
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	d030      	beq.n	8009a7a <__sflush_r+0x92>
 8009a18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	0759      	lsls	r1, r3, #29
 8009a1e:	d505      	bpl.n	8009a2c <__sflush_r+0x44>
 8009a20:	6863      	ldr	r3, [r4, #4]
 8009a22:	1ad2      	subs	r2, r2, r3
 8009a24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a26:	b10b      	cbz	r3, 8009a2c <__sflush_r+0x44>
 8009a28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a2a:	1ad2      	subs	r2, r2, r3
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a30:	6a21      	ldr	r1, [r4, #32]
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b0      	blx	r6
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	d106      	bne.n	8009a4a <__sflush_r+0x62>
 8009a3c:	6829      	ldr	r1, [r5, #0]
 8009a3e:	291d      	cmp	r1, #29
 8009a40:	d82b      	bhi.n	8009a9a <__sflush_r+0xb2>
 8009a42:	4a2a      	ldr	r2, [pc, #168]	@ (8009aec <__sflush_r+0x104>)
 8009a44:	410a      	asrs	r2, r1
 8009a46:	07d6      	lsls	r6, r2, #31
 8009a48:	d427      	bmi.n	8009a9a <__sflush_r+0xb2>
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	6062      	str	r2, [r4, #4]
 8009a4e:	04d9      	lsls	r1, r3, #19
 8009a50:	6922      	ldr	r2, [r4, #16]
 8009a52:	6022      	str	r2, [r4, #0]
 8009a54:	d504      	bpl.n	8009a60 <__sflush_r+0x78>
 8009a56:	1c42      	adds	r2, r0, #1
 8009a58:	d101      	bne.n	8009a5e <__sflush_r+0x76>
 8009a5a:	682b      	ldr	r3, [r5, #0]
 8009a5c:	b903      	cbnz	r3, 8009a60 <__sflush_r+0x78>
 8009a5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a62:	602f      	str	r7, [r5, #0]
 8009a64:	b1b9      	cbz	r1, 8009a96 <__sflush_r+0xae>
 8009a66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a6a:	4299      	cmp	r1, r3
 8009a6c:	d002      	beq.n	8009a74 <__sflush_r+0x8c>
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f7fe fec6 	bl	8008800 <_free_r>
 8009a74:	2300      	movs	r3, #0
 8009a76:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a78:	e00d      	b.n	8009a96 <__sflush_r+0xae>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	47b0      	blx	r6
 8009a80:	4602      	mov	r2, r0
 8009a82:	1c50      	adds	r0, r2, #1
 8009a84:	d1c9      	bne.n	8009a1a <__sflush_r+0x32>
 8009a86:	682b      	ldr	r3, [r5, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0c6      	beq.n	8009a1a <__sflush_r+0x32>
 8009a8c:	2b1d      	cmp	r3, #29
 8009a8e:	d001      	beq.n	8009a94 <__sflush_r+0xac>
 8009a90:	2b16      	cmp	r3, #22
 8009a92:	d11e      	bne.n	8009ad2 <__sflush_r+0xea>
 8009a94:	602f      	str	r7, [r5, #0]
 8009a96:	2000      	movs	r0, #0
 8009a98:	e022      	b.n	8009ae0 <__sflush_r+0xf8>
 8009a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a9e:	b21b      	sxth	r3, r3
 8009aa0:	e01b      	b.n	8009ada <__sflush_r+0xf2>
 8009aa2:	690f      	ldr	r7, [r1, #16]
 8009aa4:	2f00      	cmp	r7, #0
 8009aa6:	d0f6      	beq.n	8009a96 <__sflush_r+0xae>
 8009aa8:	0793      	lsls	r3, r2, #30
 8009aaa:	680e      	ldr	r6, [r1, #0]
 8009aac:	bf08      	it	eq
 8009aae:	694b      	ldreq	r3, [r1, #20]
 8009ab0:	600f      	str	r7, [r1, #0]
 8009ab2:	bf18      	it	ne
 8009ab4:	2300      	movne	r3, #0
 8009ab6:	eba6 0807 	sub.w	r8, r6, r7
 8009aba:	608b      	str	r3, [r1, #8]
 8009abc:	f1b8 0f00 	cmp.w	r8, #0
 8009ac0:	dde9      	ble.n	8009a96 <__sflush_r+0xae>
 8009ac2:	6a21      	ldr	r1, [r4, #32]
 8009ac4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ac6:	4643      	mov	r3, r8
 8009ac8:	463a      	mov	r2, r7
 8009aca:	4628      	mov	r0, r5
 8009acc:	47b0      	blx	r6
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	dc08      	bgt.n	8009ae4 <__sflush_r+0xfc>
 8009ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ada:	81a3      	strh	r3, [r4, #12]
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae4:	4407      	add	r7, r0
 8009ae6:	eba8 0800 	sub.w	r8, r8, r0
 8009aea:	e7e7      	b.n	8009abc <__sflush_r+0xd4>
 8009aec:	dfbffffe 	.word	0xdfbffffe

08009af0 <_fflush_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	690b      	ldr	r3, [r1, #16]
 8009af4:	4605      	mov	r5, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	b913      	cbnz	r3, 8009b00 <_fflush_r+0x10>
 8009afa:	2500      	movs	r5, #0
 8009afc:	4628      	mov	r0, r5
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	b118      	cbz	r0, 8009b0a <_fflush_r+0x1a>
 8009b02:	6a03      	ldr	r3, [r0, #32]
 8009b04:	b90b      	cbnz	r3, 8009b0a <_fflush_r+0x1a>
 8009b06:	f7fd fe57 	bl	80077b8 <__sinit>
 8009b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0f3      	beq.n	8009afa <_fflush_r+0xa>
 8009b12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b14:	07d0      	lsls	r0, r2, #31
 8009b16:	d404      	bmi.n	8009b22 <_fflush_r+0x32>
 8009b18:	0599      	lsls	r1, r3, #22
 8009b1a:	d402      	bmi.n	8009b22 <_fflush_r+0x32>
 8009b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b1e:	f7fe f812 	bl	8007b46 <__retarget_lock_acquire_recursive>
 8009b22:	4628      	mov	r0, r5
 8009b24:	4621      	mov	r1, r4
 8009b26:	f7ff ff5f 	bl	80099e8 <__sflush_r>
 8009b2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b2c:	07da      	lsls	r2, r3, #31
 8009b2e:	4605      	mov	r5, r0
 8009b30:	d4e4      	bmi.n	8009afc <_fflush_r+0xc>
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	059b      	lsls	r3, r3, #22
 8009b36:	d4e1      	bmi.n	8009afc <_fflush_r+0xc>
 8009b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b3a:	f7fe f805 	bl	8007b48 <__retarget_lock_release_recursive>
 8009b3e:	e7dd      	b.n	8009afc <_fflush_r+0xc>

08009b40 <__sccl>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	780b      	ldrb	r3, [r1, #0]
 8009b44:	4604      	mov	r4, r0
 8009b46:	2b5e      	cmp	r3, #94	@ 0x5e
 8009b48:	bf0b      	itete	eq
 8009b4a:	784b      	ldrbeq	r3, [r1, #1]
 8009b4c:	1c4a      	addne	r2, r1, #1
 8009b4e:	1c8a      	addeq	r2, r1, #2
 8009b50:	2100      	movne	r1, #0
 8009b52:	bf08      	it	eq
 8009b54:	2101      	moveq	r1, #1
 8009b56:	3801      	subs	r0, #1
 8009b58:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009b5c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009b60:	42a8      	cmp	r0, r5
 8009b62:	d1fb      	bne.n	8009b5c <__sccl+0x1c>
 8009b64:	b90b      	cbnz	r3, 8009b6a <__sccl+0x2a>
 8009b66:	1e50      	subs	r0, r2, #1
 8009b68:	bd70      	pop	{r4, r5, r6, pc}
 8009b6a:	f081 0101 	eor.w	r1, r1, #1
 8009b6e:	54e1      	strb	r1, [r4, r3]
 8009b70:	4610      	mov	r0, r2
 8009b72:	4602      	mov	r2, r0
 8009b74:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009b78:	2d2d      	cmp	r5, #45	@ 0x2d
 8009b7a:	d005      	beq.n	8009b88 <__sccl+0x48>
 8009b7c:	2d5d      	cmp	r5, #93	@ 0x5d
 8009b7e:	d016      	beq.n	8009bae <__sccl+0x6e>
 8009b80:	2d00      	cmp	r5, #0
 8009b82:	d0f1      	beq.n	8009b68 <__sccl+0x28>
 8009b84:	462b      	mov	r3, r5
 8009b86:	e7f2      	b.n	8009b6e <__sccl+0x2e>
 8009b88:	7846      	ldrb	r6, [r0, #1]
 8009b8a:	2e5d      	cmp	r6, #93	@ 0x5d
 8009b8c:	d0fa      	beq.n	8009b84 <__sccl+0x44>
 8009b8e:	42b3      	cmp	r3, r6
 8009b90:	dcf8      	bgt.n	8009b84 <__sccl+0x44>
 8009b92:	3002      	adds	r0, #2
 8009b94:	461a      	mov	r2, r3
 8009b96:	3201      	adds	r2, #1
 8009b98:	4296      	cmp	r6, r2
 8009b9a:	54a1      	strb	r1, [r4, r2]
 8009b9c:	dcfb      	bgt.n	8009b96 <__sccl+0x56>
 8009b9e:	1af2      	subs	r2, r6, r3
 8009ba0:	3a01      	subs	r2, #1
 8009ba2:	1c5d      	adds	r5, r3, #1
 8009ba4:	42b3      	cmp	r3, r6
 8009ba6:	bfa8      	it	ge
 8009ba8:	2200      	movge	r2, #0
 8009baa:	18ab      	adds	r3, r5, r2
 8009bac:	e7e1      	b.n	8009b72 <__sccl+0x32>
 8009bae:	4610      	mov	r0, r2
 8009bb0:	e7da      	b.n	8009b68 <__sccl+0x28>

08009bb2 <__submore>:
 8009bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bbe:	4299      	cmp	r1, r3
 8009bc0:	d11d      	bne.n	8009bfe <__submore+0x4c>
 8009bc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009bc6:	f7fe fe8f 	bl	80088e8 <_malloc_r>
 8009bca:	b918      	cbnz	r0, 8009bd4 <__submore+0x22>
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bd8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009bda:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009bde:	6360      	str	r0, [r4, #52]	@ 0x34
 8009be0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009be4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009be8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009bec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009bf0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009bf4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009bf8:	6020      	str	r0, [r4, #0]
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	e7e8      	b.n	8009bd0 <__submore+0x1e>
 8009bfe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009c00:	0077      	lsls	r7, r6, #1
 8009c02:	463a      	mov	r2, r7
 8009c04:	f000 f864 	bl	8009cd0 <_realloc_r>
 8009c08:	4605      	mov	r5, r0
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0de      	beq.n	8009bcc <__submore+0x1a>
 8009c0e:	eb00 0806 	add.w	r8, r0, r6
 8009c12:	4601      	mov	r1, r0
 8009c14:	4632      	mov	r2, r6
 8009c16:	4640      	mov	r0, r8
 8009c18:	f7fd ff97 	bl	8007b4a <memcpy>
 8009c1c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009c20:	f8c4 8000 	str.w	r8, [r4]
 8009c24:	e7e9      	b.n	8009bfa <__submore+0x48>
	...

08009c28 <_sbrk_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d06      	ldr	r5, [pc, #24]	@ (8009c44 <_sbrk_r+0x1c>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	f7f7 fbc8 	bl	80013c8 <_sbrk>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_sbrk_r+0x1a>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_sbrk_r+0x1a>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20002730 	.word	0x20002730

08009c48 <__assert_func>:
 8009c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c4a:	4614      	mov	r4, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4b09      	ldr	r3, [pc, #36]	@ (8009c74 <__assert_func+0x2c>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4605      	mov	r5, r0
 8009c54:	68d8      	ldr	r0, [r3, #12]
 8009c56:	b954      	cbnz	r4, 8009c6e <__assert_func+0x26>
 8009c58:	4b07      	ldr	r3, [pc, #28]	@ (8009c78 <__assert_func+0x30>)
 8009c5a:	461c      	mov	r4, r3
 8009c5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c60:	9100      	str	r1, [sp, #0]
 8009c62:	462b      	mov	r3, r5
 8009c64:	4905      	ldr	r1, [pc, #20]	@ (8009c7c <__assert_func+0x34>)
 8009c66:	f000 f95b 	bl	8009f20 <fiprintf>
 8009c6a:	f000 f96b 	bl	8009f44 <abort>
 8009c6e:	4b04      	ldr	r3, [pc, #16]	@ (8009c80 <__assert_func+0x38>)
 8009c70:	e7f4      	b.n	8009c5c <__assert_func+0x14>
 8009c72:	bf00      	nop
 8009c74:	20000104 	.word	0x20000104
 8009c78:	0800ad51 	.word	0x0800ad51
 8009c7c:	0800ad23 	.word	0x0800ad23
 8009c80:	0800ad16 	.word	0x0800ad16

08009c84 <_calloc_r>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	fba1 5402 	umull	r5, r4, r1, r2
 8009c8a:	b93c      	cbnz	r4, 8009c9c <_calloc_r+0x18>
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	f7fe fe2b 	bl	80088e8 <_malloc_r>
 8009c92:	4606      	mov	r6, r0
 8009c94:	b928      	cbnz	r0, 8009ca2 <_calloc_r+0x1e>
 8009c96:	2600      	movs	r6, #0
 8009c98:	4630      	mov	r0, r6
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	220c      	movs	r2, #12
 8009c9e:	6002      	str	r2, [r0, #0]
 8009ca0:	e7f9      	b.n	8009c96 <_calloc_r+0x12>
 8009ca2:	462a      	mov	r2, r5
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	f7fd fe9f 	bl	80079e8 <memset>
 8009caa:	e7f5      	b.n	8009c98 <_calloc_r+0x14>

08009cac <__ascii_mbtowc>:
 8009cac:	b082      	sub	sp, #8
 8009cae:	b901      	cbnz	r1, 8009cb2 <__ascii_mbtowc+0x6>
 8009cb0:	a901      	add	r1, sp, #4
 8009cb2:	b142      	cbz	r2, 8009cc6 <__ascii_mbtowc+0x1a>
 8009cb4:	b14b      	cbz	r3, 8009cca <__ascii_mbtowc+0x1e>
 8009cb6:	7813      	ldrb	r3, [r2, #0]
 8009cb8:	600b      	str	r3, [r1, #0]
 8009cba:	7812      	ldrb	r2, [r2, #0]
 8009cbc:	1e10      	subs	r0, r2, #0
 8009cbe:	bf18      	it	ne
 8009cc0:	2001      	movne	r0, #1
 8009cc2:	b002      	add	sp, #8
 8009cc4:	4770      	bx	lr
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	e7fb      	b.n	8009cc2 <__ascii_mbtowc+0x16>
 8009cca:	f06f 0001 	mvn.w	r0, #1
 8009cce:	e7f8      	b.n	8009cc2 <__ascii_mbtowc+0x16>

08009cd0 <_realloc_r>:
 8009cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	4615      	mov	r5, r2
 8009cd8:	460c      	mov	r4, r1
 8009cda:	b921      	cbnz	r1, 8009ce6 <_realloc_r+0x16>
 8009cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	f7fe be01 	b.w	80088e8 <_malloc_r>
 8009ce6:	b92a      	cbnz	r2, 8009cf4 <_realloc_r+0x24>
 8009ce8:	f7fe fd8a 	bl	8008800 <_free_r>
 8009cec:	2400      	movs	r4, #0
 8009cee:	4620      	mov	r0, r4
 8009cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf4:	f000 f92d 	bl	8009f52 <_malloc_usable_size_r>
 8009cf8:	4285      	cmp	r5, r0
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	d802      	bhi.n	8009d04 <_realloc_r+0x34>
 8009cfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d02:	d8f4      	bhi.n	8009cee <_realloc_r+0x1e>
 8009d04:	4629      	mov	r1, r5
 8009d06:	4640      	mov	r0, r8
 8009d08:	f7fe fdee 	bl	80088e8 <_malloc_r>
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d0ec      	beq.n	8009cec <_realloc_r+0x1c>
 8009d12:	42b5      	cmp	r5, r6
 8009d14:	462a      	mov	r2, r5
 8009d16:	4621      	mov	r1, r4
 8009d18:	bf28      	it	cs
 8009d1a:	4632      	movcs	r2, r6
 8009d1c:	f7fd ff15 	bl	8007b4a <memcpy>
 8009d20:	4621      	mov	r1, r4
 8009d22:	4640      	mov	r0, r8
 8009d24:	f7fe fd6c 	bl	8008800 <_free_r>
 8009d28:	463c      	mov	r4, r7
 8009d2a:	e7e0      	b.n	8009cee <_realloc_r+0x1e>

08009d2c <_strtol_l.constprop.0>:
 8009d2c:	2b24      	cmp	r3, #36	@ 0x24
 8009d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d32:	4686      	mov	lr, r0
 8009d34:	4690      	mov	r8, r2
 8009d36:	d801      	bhi.n	8009d3c <_strtol_l.constprop.0+0x10>
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d106      	bne.n	8009d4a <_strtol_l.constprop.0+0x1e>
 8009d3c:	f7fd fed8 	bl	8007af0 <__errno>
 8009d40:	2316      	movs	r3, #22
 8009d42:	6003      	str	r3, [r0, #0]
 8009d44:	2000      	movs	r0, #0
 8009d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4a:	4834      	ldr	r0, [pc, #208]	@ (8009e1c <_strtol_l.constprop.0+0xf0>)
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	462a      	mov	r2, r5
 8009d50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d54:	5d06      	ldrb	r6, [r0, r4]
 8009d56:	f016 0608 	ands.w	r6, r6, #8
 8009d5a:	d1f8      	bne.n	8009d4e <_strtol_l.constprop.0+0x22>
 8009d5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d5e:	d12d      	bne.n	8009dbc <_strtol_l.constprop.0+0x90>
 8009d60:	782c      	ldrb	r4, [r5, #0]
 8009d62:	2601      	movs	r6, #1
 8009d64:	1c95      	adds	r5, r2, #2
 8009d66:	f033 0210 	bics.w	r2, r3, #16
 8009d6a:	d109      	bne.n	8009d80 <_strtol_l.constprop.0+0x54>
 8009d6c:	2c30      	cmp	r4, #48	@ 0x30
 8009d6e:	d12a      	bne.n	8009dc6 <_strtol_l.constprop.0+0x9a>
 8009d70:	782a      	ldrb	r2, [r5, #0]
 8009d72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d76:	2a58      	cmp	r2, #88	@ 0x58
 8009d78:	d125      	bne.n	8009dc6 <_strtol_l.constprop.0+0x9a>
 8009d7a:	786c      	ldrb	r4, [r5, #1]
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	3502      	adds	r5, #2
 8009d80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d88:	2200      	movs	r2, #0
 8009d8a:	fbbc f9f3 	udiv	r9, ip, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d98:	2f09      	cmp	r7, #9
 8009d9a:	d81b      	bhi.n	8009dd4 <_strtol_l.constprop.0+0xa8>
 8009d9c:	463c      	mov	r4, r7
 8009d9e:	42a3      	cmp	r3, r4
 8009da0:	dd27      	ble.n	8009df2 <_strtol_l.constprop.0+0xc6>
 8009da2:	1c57      	adds	r7, r2, #1
 8009da4:	d007      	beq.n	8009db6 <_strtol_l.constprop.0+0x8a>
 8009da6:	4581      	cmp	r9, r0
 8009da8:	d320      	bcc.n	8009dec <_strtol_l.constprop.0+0xc0>
 8009daa:	d101      	bne.n	8009db0 <_strtol_l.constprop.0+0x84>
 8009dac:	45a2      	cmp	sl, r4
 8009dae:	db1d      	blt.n	8009dec <_strtol_l.constprop.0+0xc0>
 8009db0:	fb00 4003 	mla	r0, r0, r3, r4
 8009db4:	2201      	movs	r2, #1
 8009db6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dba:	e7eb      	b.n	8009d94 <_strtol_l.constprop.0+0x68>
 8009dbc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009dbe:	bf04      	itt	eq
 8009dc0:	782c      	ldrbeq	r4, [r5, #0]
 8009dc2:	1c95      	addeq	r5, r2, #2
 8009dc4:	e7cf      	b.n	8009d66 <_strtol_l.constprop.0+0x3a>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1da      	bne.n	8009d80 <_strtol_l.constprop.0+0x54>
 8009dca:	2c30      	cmp	r4, #48	@ 0x30
 8009dcc:	bf0c      	ite	eq
 8009dce:	2308      	moveq	r3, #8
 8009dd0:	230a      	movne	r3, #10
 8009dd2:	e7d5      	b.n	8009d80 <_strtol_l.constprop.0+0x54>
 8009dd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009dd8:	2f19      	cmp	r7, #25
 8009dda:	d801      	bhi.n	8009de0 <_strtol_l.constprop.0+0xb4>
 8009ddc:	3c37      	subs	r4, #55	@ 0x37
 8009dde:	e7de      	b.n	8009d9e <_strtol_l.constprop.0+0x72>
 8009de0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009de4:	2f19      	cmp	r7, #25
 8009de6:	d804      	bhi.n	8009df2 <_strtol_l.constprop.0+0xc6>
 8009de8:	3c57      	subs	r4, #87	@ 0x57
 8009dea:	e7d8      	b.n	8009d9e <_strtol_l.constprop.0+0x72>
 8009dec:	f04f 32ff 	mov.w	r2, #4294967295
 8009df0:	e7e1      	b.n	8009db6 <_strtol_l.constprop.0+0x8a>
 8009df2:	1c53      	adds	r3, r2, #1
 8009df4:	d108      	bne.n	8009e08 <_strtol_l.constprop.0+0xdc>
 8009df6:	2322      	movs	r3, #34	@ 0x22
 8009df8:	f8ce 3000 	str.w	r3, [lr]
 8009dfc:	4660      	mov	r0, ip
 8009dfe:	f1b8 0f00 	cmp.w	r8, #0
 8009e02:	d0a0      	beq.n	8009d46 <_strtol_l.constprop.0+0x1a>
 8009e04:	1e69      	subs	r1, r5, #1
 8009e06:	e006      	b.n	8009e16 <_strtol_l.constprop.0+0xea>
 8009e08:	b106      	cbz	r6, 8009e0c <_strtol_l.constprop.0+0xe0>
 8009e0a:	4240      	negs	r0, r0
 8009e0c:	f1b8 0f00 	cmp.w	r8, #0
 8009e10:	d099      	beq.n	8009d46 <_strtol_l.constprop.0+0x1a>
 8009e12:	2a00      	cmp	r2, #0
 8009e14:	d1f6      	bne.n	8009e04 <_strtol_l.constprop.0+0xd8>
 8009e16:	f8c8 1000 	str.w	r1, [r8]
 8009e1a:	e794      	b.n	8009d46 <_strtol_l.constprop.0+0x1a>
 8009e1c:	0800ad53 	.word	0x0800ad53

08009e20 <_strtol_r>:
 8009e20:	f7ff bf84 	b.w	8009d2c <_strtol_l.constprop.0>

08009e24 <_strtoul_l.constprop.0>:
 8009e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e28:	4e34      	ldr	r6, [pc, #208]	@ (8009efc <_strtoul_l.constprop.0+0xd8>)
 8009e2a:	4686      	mov	lr, r0
 8009e2c:	460d      	mov	r5, r1
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e34:	5d37      	ldrb	r7, [r6, r4]
 8009e36:	f017 0708 	ands.w	r7, r7, #8
 8009e3a:	d1f8      	bne.n	8009e2e <_strtoul_l.constprop.0+0xa>
 8009e3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e3e:	d12f      	bne.n	8009ea0 <_strtoul_l.constprop.0+0x7c>
 8009e40:	782c      	ldrb	r4, [r5, #0]
 8009e42:	2701      	movs	r7, #1
 8009e44:	1c85      	adds	r5, r0, #2
 8009e46:	f033 0010 	bics.w	r0, r3, #16
 8009e4a:	d109      	bne.n	8009e60 <_strtoul_l.constprop.0+0x3c>
 8009e4c:	2c30      	cmp	r4, #48	@ 0x30
 8009e4e:	d12c      	bne.n	8009eaa <_strtoul_l.constprop.0+0x86>
 8009e50:	7828      	ldrb	r0, [r5, #0]
 8009e52:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009e56:	2858      	cmp	r0, #88	@ 0x58
 8009e58:	d127      	bne.n	8009eaa <_strtoul_l.constprop.0+0x86>
 8009e5a:	786c      	ldrb	r4, [r5, #1]
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	3502      	adds	r5, #2
 8009e60:	f04f 38ff 	mov.w	r8, #4294967295
 8009e64:	2600      	movs	r6, #0
 8009e66:	fbb8 f8f3 	udiv	r8, r8, r3
 8009e6a:	fb03 f908 	mul.w	r9, r3, r8
 8009e6e:	ea6f 0909 	mvn.w	r9, r9
 8009e72:	4630      	mov	r0, r6
 8009e74:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009e78:	f1bc 0f09 	cmp.w	ip, #9
 8009e7c:	d81c      	bhi.n	8009eb8 <_strtoul_l.constprop.0+0x94>
 8009e7e:	4664      	mov	r4, ip
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	dd2a      	ble.n	8009eda <_strtoul_l.constprop.0+0xb6>
 8009e84:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009e88:	d007      	beq.n	8009e9a <_strtoul_l.constprop.0+0x76>
 8009e8a:	4580      	cmp	r8, r0
 8009e8c:	d322      	bcc.n	8009ed4 <_strtoul_l.constprop.0+0xb0>
 8009e8e:	d101      	bne.n	8009e94 <_strtoul_l.constprop.0+0x70>
 8009e90:	45a1      	cmp	r9, r4
 8009e92:	db1f      	blt.n	8009ed4 <_strtoul_l.constprop.0+0xb0>
 8009e94:	fb00 4003 	mla	r0, r0, r3, r4
 8009e98:	2601      	movs	r6, #1
 8009e9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e9e:	e7e9      	b.n	8009e74 <_strtoul_l.constprop.0+0x50>
 8009ea0:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ea2:	bf04      	itt	eq
 8009ea4:	782c      	ldrbeq	r4, [r5, #0]
 8009ea6:	1c85      	addeq	r5, r0, #2
 8009ea8:	e7cd      	b.n	8009e46 <_strtoul_l.constprop.0+0x22>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1d8      	bne.n	8009e60 <_strtoul_l.constprop.0+0x3c>
 8009eae:	2c30      	cmp	r4, #48	@ 0x30
 8009eb0:	bf0c      	ite	eq
 8009eb2:	2308      	moveq	r3, #8
 8009eb4:	230a      	movne	r3, #10
 8009eb6:	e7d3      	b.n	8009e60 <_strtoul_l.constprop.0+0x3c>
 8009eb8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009ebc:	f1bc 0f19 	cmp.w	ip, #25
 8009ec0:	d801      	bhi.n	8009ec6 <_strtoul_l.constprop.0+0xa2>
 8009ec2:	3c37      	subs	r4, #55	@ 0x37
 8009ec4:	e7dc      	b.n	8009e80 <_strtoul_l.constprop.0+0x5c>
 8009ec6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009eca:	f1bc 0f19 	cmp.w	ip, #25
 8009ece:	d804      	bhi.n	8009eda <_strtoul_l.constprop.0+0xb6>
 8009ed0:	3c57      	subs	r4, #87	@ 0x57
 8009ed2:	e7d5      	b.n	8009e80 <_strtoul_l.constprop.0+0x5c>
 8009ed4:	f04f 36ff 	mov.w	r6, #4294967295
 8009ed8:	e7df      	b.n	8009e9a <_strtoul_l.constprop.0+0x76>
 8009eda:	1c73      	adds	r3, r6, #1
 8009edc:	d106      	bne.n	8009eec <_strtoul_l.constprop.0+0xc8>
 8009ede:	2322      	movs	r3, #34	@ 0x22
 8009ee0:	f8ce 3000 	str.w	r3, [lr]
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	b932      	cbnz	r2, 8009ef6 <_strtoul_l.constprop.0+0xd2>
 8009ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eec:	b107      	cbz	r7, 8009ef0 <_strtoul_l.constprop.0+0xcc>
 8009eee:	4240      	negs	r0, r0
 8009ef0:	2a00      	cmp	r2, #0
 8009ef2:	d0f9      	beq.n	8009ee8 <_strtoul_l.constprop.0+0xc4>
 8009ef4:	b106      	cbz	r6, 8009ef8 <_strtoul_l.constprop.0+0xd4>
 8009ef6:	1e69      	subs	r1, r5, #1
 8009ef8:	6011      	str	r1, [r2, #0]
 8009efa:	e7f5      	b.n	8009ee8 <_strtoul_l.constprop.0+0xc4>
 8009efc:	0800ad53 	.word	0x0800ad53

08009f00 <_strtoul_r>:
 8009f00:	f7ff bf90 	b.w	8009e24 <_strtoul_l.constprop.0>

08009f04 <__ascii_wctomb>:
 8009f04:	4603      	mov	r3, r0
 8009f06:	4608      	mov	r0, r1
 8009f08:	b141      	cbz	r1, 8009f1c <__ascii_wctomb+0x18>
 8009f0a:	2aff      	cmp	r2, #255	@ 0xff
 8009f0c:	d904      	bls.n	8009f18 <__ascii_wctomb+0x14>
 8009f0e:	228a      	movs	r2, #138	@ 0x8a
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	f04f 30ff 	mov.w	r0, #4294967295
 8009f16:	4770      	bx	lr
 8009f18:	700a      	strb	r2, [r1, #0]
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	4770      	bx	lr
	...

08009f20 <fiprintf>:
 8009f20:	b40e      	push	{r1, r2, r3}
 8009f22:	b503      	push	{r0, r1, lr}
 8009f24:	4601      	mov	r1, r0
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	4805      	ldr	r0, [pc, #20]	@ (8009f40 <fiprintf+0x20>)
 8009f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2e:	6800      	ldr	r0, [r0, #0]
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	f000 f83f 	bl	8009fb4 <_vfiprintf_r>
 8009f36:	b002      	add	sp, #8
 8009f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f3c:	b003      	add	sp, #12
 8009f3e:	4770      	bx	lr
 8009f40:	20000104 	.word	0x20000104

08009f44 <abort>:
 8009f44:	b508      	push	{r3, lr}
 8009f46:	2006      	movs	r0, #6
 8009f48:	f000 fa08 	bl	800a35c <raise>
 8009f4c:	2001      	movs	r0, #1
 8009f4e:	f7f7 fa0b 	bl	8001368 <_exit>

08009f52 <_malloc_usable_size_r>:
 8009f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f56:	1f18      	subs	r0, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bfbc      	itt	lt
 8009f5c:	580b      	ldrlt	r3, [r1, r0]
 8009f5e:	18c0      	addlt	r0, r0, r3
 8009f60:	4770      	bx	lr

08009f62 <__sfputc_r>:
 8009f62:	6893      	ldr	r3, [r2, #8]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	b410      	push	{r4}
 8009f6a:	6093      	str	r3, [r2, #8]
 8009f6c:	da08      	bge.n	8009f80 <__sfputc_r+0x1e>
 8009f6e:	6994      	ldr	r4, [r2, #24]
 8009f70:	42a3      	cmp	r3, r4
 8009f72:	db01      	blt.n	8009f78 <__sfputc_r+0x16>
 8009f74:	290a      	cmp	r1, #10
 8009f76:	d103      	bne.n	8009f80 <__sfputc_r+0x1e>
 8009f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f7c:	f000 b932 	b.w	800a1e4 <__swbuf_r>
 8009f80:	6813      	ldr	r3, [r2, #0]
 8009f82:	1c58      	adds	r0, r3, #1
 8009f84:	6010      	str	r0, [r2, #0]
 8009f86:	7019      	strb	r1, [r3, #0]
 8009f88:	4608      	mov	r0, r1
 8009f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <__sfputs_r>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	4606      	mov	r6, r0
 8009f94:	460f      	mov	r7, r1
 8009f96:	4614      	mov	r4, r2
 8009f98:	18d5      	adds	r5, r2, r3
 8009f9a:	42ac      	cmp	r4, r5
 8009f9c:	d101      	bne.n	8009fa2 <__sfputs_r+0x12>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e007      	b.n	8009fb2 <__sfputs_r+0x22>
 8009fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa6:	463a      	mov	r2, r7
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff ffda 	bl	8009f62 <__sfputc_r>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d1f3      	bne.n	8009f9a <__sfputs_r+0xa>
 8009fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fb4 <_vfiprintf_r>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	460d      	mov	r5, r1
 8009fba:	b09d      	sub	sp, #116	@ 0x74
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	4698      	mov	r8, r3
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	b118      	cbz	r0, 8009fcc <_vfiprintf_r+0x18>
 8009fc4:	6a03      	ldr	r3, [r0, #32]
 8009fc6:	b90b      	cbnz	r3, 8009fcc <_vfiprintf_r+0x18>
 8009fc8:	f7fd fbf6 	bl	80077b8 <__sinit>
 8009fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fce:	07d9      	lsls	r1, r3, #31
 8009fd0:	d405      	bmi.n	8009fde <_vfiprintf_r+0x2a>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	059a      	lsls	r2, r3, #22
 8009fd6:	d402      	bmi.n	8009fde <_vfiprintf_r+0x2a>
 8009fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fda:	f7fd fdb4 	bl	8007b46 <__retarget_lock_acquire_recursive>
 8009fde:	89ab      	ldrh	r3, [r5, #12]
 8009fe0:	071b      	lsls	r3, r3, #28
 8009fe2:	d501      	bpl.n	8009fe8 <_vfiprintf_r+0x34>
 8009fe4:	692b      	ldr	r3, [r5, #16]
 8009fe6:	b99b      	cbnz	r3, 800a010 <_vfiprintf_r+0x5c>
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4630      	mov	r0, r6
 8009fec:	f000 f938 	bl	800a260 <__swsetup_r>
 8009ff0:	b170      	cbz	r0, 800a010 <_vfiprintf_r+0x5c>
 8009ff2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ff4:	07dc      	lsls	r4, r3, #31
 8009ff6:	d504      	bpl.n	800a002 <_vfiprintf_r+0x4e>
 8009ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffc:	b01d      	add	sp, #116	@ 0x74
 8009ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a002:	89ab      	ldrh	r3, [r5, #12]
 800a004:	0598      	lsls	r0, r3, #22
 800a006:	d4f7      	bmi.n	8009ff8 <_vfiprintf_r+0x44>
 800a008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a00a:	f7fd fd9d 	bl	8007b48 <__retarget_lock_release_recursive>
 800a00e:	e7f3      	b.n	8009ff8 <_vfiprintf_r+0x44>
 800a010:	2300      	movs	r3, #0
 800a012:	9309      	str	r3, [sp, #36]	@ 0x24
 800a014:	2320      	movs	r3, #32
 800a016:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a01a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a01e:	2330      	movs	r3, #48	@ 0x30
 800a020:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a1d0 <_vfiprintf_r+0x21c>
 800a024:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a028:	f04f 0901 	mov.w	r9, #1
 800a02c:	4623      	mov	r3, r4
 800a02e:	469a      	mov	sl, r3
 800a030:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a034:	b10a      	cbz	r2, 800a03a <_vfiprintf_r+0x86>
 800a036:	2a25      	cmp	r2, #37	@ 0x25
 800a038:	d1f9      	bne.n	800a02e <_vfiprintf_r+0x7a>
 800a03a:	ebba 0b04 	subs.w	fp, sl, r4
 800a03e:	d00b      	beq.n	800a058 <_vfiprintf_r+0xa4>
 800a040:	465b      	mov	r3, fp
 800a042:	4622      	mov	r2, r4
 800a044:	4629      	mov	r1, r5
 800a046:	4630      	mov	r0, r6
 800a048:	f7ff ffa2 	bl	8009f90 <__sfputs_r>
 800a04c:	3001      	adds	r0, #1
 800a04e:	f000 80a7 	beq.w	800a1a0 <_vfiprintf_r+0x1ec>
 800a052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a054:	445a      	add	r2, fp
 800a056:	9209      	str	r2, [sp, #36]	@ 0x24
 800a058:	f89a 3000 	ldrb.w	r3, [sl]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 809f 	beq.w	800a1a0 <_vfiprintf_r+0x1ec>
 800a062:	2300      	movs	r3, #0
 800a064:	f04f 32ff 	mov.w	r2, #4294967295
 800a068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a06c:	f10a 0a01 	add.w	sl, sl, #1
 800a070:	9304      	str	r3, [sp, #16]
 800a072:	9307      	str	r3, [sp, #28]
 800a074:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a078:	931a      	str	r3, [sp, #104]	@ 0x68
 800a07a:	4654      	mov	r4, sl
 800a07c:	2205      	movs	r2, #5
 800a07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a082:	4853      	ldr	r0, [pc, #332]	@ (800a1d0 <_vfiprintf_r+0x21c>)
 800a084:	f7f6 f8ac 	bl	80001e0 <memchr>
 800a088:	9a04      	ldr	r2, [sp, #16]
 800a08a:	b9d8      	cbnz	r0, 800a0c4 <_vfiprintf_r+0x110>
 800a08c:	06d1      	lsls	r1, r2, #27
 800a08e:	bf44      	itt	mi
 800a090:	2320      	movmi	r3, #32
 800a092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a096:	0713      	lsls	r3, r2, #28
 800a098:	bf44      	itt	mi
 800a09a:	232b      	movmi	r3, #43	@ 0x2b
 800a09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0a6:	d015      	beq.n	800a0d4 <_vfiprintf_r+0x120>
 800a0a8:	9a07      	ldr	r2, [sp, #28]
 800a0aa:	4654      	mov	r4, sl
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	f04f 0c0a 	mov.w	ip, #10
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0b8:	3b30      	subs	r3, #48	@ 0x30
 800a0ba:	2b09      	cmp	r3, #9
 800a0bc:	d94b      	bls.n	800a156 <_vfiprintf_r+0x1a2>
 800a0be:	b1b0      	cbz	r0, 800a0ee <_vfiprintf_r+0x13a>
 800a0c0:	9207      	str	r2, [sp, #28]
 800a0c2:	e014      	b.n	800a0ee <_vfiprintf_r+0x13a>
 800a0c4:	eba0 0308 	sub.w	r3, r0, r8
 800a0c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	9304      	str	r3, [sp, #16]
 800a0d0:	46a2      	mov	sl, r4
 800a0d2:	e7d2      	b.n	800a07a <_vfiprintf_r+0xc6>
 800a0d4:	9b03      	ldr	r3, [sp, #12]
 800a0d6:	1d19      	adds	r1, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	9103      	str	r1, [sp, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfbb      	ittet	lt
 800a0e0:	425b      	neglt	r3, r3
 800a0e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a0e6:	9307      	strge	r3, [sp, #28]
 800a0e8:	9307      	strlt	r3, [sp, #28]
 800a0ea:	bfb8      	it	lt
 800a0ec:	9204      	strlt	r2, [sp, #16]
 800a0ee:	7823      	ldrb	r3, [r4, #0]
 800a0f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0f2:	d10a      	bne.n	800a10a <_vfiprintf_r+0x156>
 800a0f4:	7863      	ldrb	r3, [r4, #1]
 800a0f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0f8:	d132      	bne.n	800a160 <_vfiprintf_r+0x1ac>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	1d1a      	adds	r2, r3, #4
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	9203      	str	r2, [sp, #12]
 800a102:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a106:	3402      	adds	r4, #2
 800a108:	9305      	str	r3, [sp, #20]
 800a10a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a1e0 <_vfiprintf_r+0x22c>
 800a10e:	7821      	ldrb	r1, [r4, #0]
 800a110:	2203      	movs	r2, #3
 800a112:	4650      	mov	r0, sl
 800a114:	f7f6 f864 	bl	80001e0 <memchr>
 800a118:	b138      	cbz	r0, 800a12a <_vfiprintf_r+0x176>
 800a11a:	9b04      	ldr	r3, [sp, #16]
 800a11c:	eba0 000a 	sub.w	r0, r0, sl
 800a120:	2240      	movs	r2, #64	@ 0x40
 800a122:	4082      	lsls	r2, r0
 800a124:	4313      	orrs	r3, r2
 800a126:	3401      	adds	r4, #1
 800a128:	9304      	str	r3, [sp, #16]
 800a12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a12e:	4829      	ldr	r0, [pc, #164]	@ (800a1d4 <_vfiprintf_r+0x220>)
 800a130:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a134:	2206      	movs	r2, #6
 800a136:	f7f6 f853 	bl	80001e0 <memchr>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d03f      	beq.n	800a1be <_vfiprintf_r+0x20a>
 800a13e:	4b26      	ldr	r3, [pc, #152]	@ (800a1d8 <_vfiprintf_r+0x224>)
 800a140:	bb1b      	cbnz	r3, 800a18a <_vfiprintf_r+0x1d6>
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	3307      	adds	r3, #7
 800a146:	f023 0307 	bic.w	r3, r3, #7
 800a14a:	3308      	adds	r3, #8
 800a14c:	9303      	str	r3, [sp, #12]
 800a14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a150:	443b      	add	r3, r7
 800a152:	9309      	str	r3, [sp, #36]	@ 0x24
 800a154:	e76a      	b.n	800a02c <_vfiprintf_r+0x78>
 800a156:	fb0c 3202 	mla	r2, ip, r2, r3
 800a15a:	460c      	mov	r4, r1
 800a15c:	2001      	movs	r0, #1
 800a15e:	e7a8      	b.n	800a0b2 <_vfiprintf_r+0xfe>
 800a160:	2300      	movs	r3, #0
 800a162:	3401      	adds	r4, #1
 800a164:	9305      	str	r3, [sp, #20]
 800a166:	4619      	mov	r1, r3
 800a168:	f04f 0c0a 	mov.w	ip, #10
 800a16c:	4620      	mov	r0, r4
 800a16e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a172:	3a30      	subs	r2, #48	@ 0x30
 800a174:	2a09      	cmp	r2, #9
 800a176:	d903      	bls.n	800a180 <_vfiprintf_r+0x1cc>
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d0c6      	beq.n	800a10a <_vfiprintf_r+0x156>
 800a17c:	9105      	str	r1, [sp, #20]
 800a17e:	e7c4      	b.n	800a10a <_vfiprintf_r+0x156>
 800a180:	fb0c 2101 	mla	r1, ip, r1, r2
 800a184:	4604      	mov	r4, r0
 800a186:	2301      	movs	r3, #1
 800a188:	e7f0      	b.n	800a16c <_vfiprintf_r+0x1b8>
 800a18a:	ab03      	add	r3, sp, #12
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	462a      	mov	r2, r5
 800a190:	4b12      	ldr	r3, [pc, #72]	@ (800a1dc <_vfiprintf_r+0x228>)
 800a192:	a904      	add	r1, sp, #16
 800a194:	4630      	mov	r0, r6
 800a196:	f7fc fecb 	bl	8006f30 <_printf_float>
 800a19a:	4607      	mov	r7, r0
 800a19c:	1c78      	adds	r0, r7, #1
 800a19e:	d1d6      	bne.n	800a14e <_vfiprintf_r+0x19a>
 800a1a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1a2:	07d9      	lsls	r1, r3, #31
 800a1a4:	d405      	bmi.n	800a1b2 <_vfiprintf_r+0x1fe>
 800a1a6:	89ab      	ldrh	r3, [r5, #12]
 800a1a8:	059a      	lsls	r2, r3, #22
 800a1aa:	d402      	bmi.n	800a1b2 <_vfiprintf_r+0x1fe>
 800a1ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1ae:	f7fd fccb 	bl	8007b48 <__retarget_lock_release_recursive>
 800a1b2:	89ab      	ldrh	r3, [r5, #12]
 800a1b4:	065b      	lsls	r3, r3, #25
 800a1b6:	f53f af1f 	bmi.w	8009ff8 <_vfiprintf_r+0x44>
 800a1ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1bc:	e71e      	b.n	8009ffc <_vfiprintf_r+0x48>
 800a1be:	ab03      	add	r3, sp, #12
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	462a      	mov	r2, r5
 800a1c4:	4b05      	ldr	r3, [pc, #20]	@ (800a1dc <_vfiprintf_r+0x228>)
 800a1c6:	a904      	add	r1, sp, #16
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f7fd f949 	bl	8007460 <_printf_i>
 800a1ce:	e7e4      	b.n	800a19a <_vfiprintf_r+0x1e6>
 800a1d0:	0800ace0 	.word	0x0800ace0
 800a1d4:	0800acea 	.word	0x0800acea
 800a1d8:	08006f31 	.word	0x08006f31
 800a1dc:	08009f91 	.word	0x08009f91
 800a1e0:	0800ace6 	.word	0x0800ace6

0800a1e4 <__swbuf_r>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	460e      	mov	r6, r1
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	b118      	cbz	r0, 800a1f6 <__swbuf_r+0x12>
 800a1ee:	6a03      	ldr	r3, [r0, #32]
 800a1f0:	b90b      	cbnz	r3, 800a1f6 <__swbuf_r+0x12>
 800a1f2:	f7fd fae1 	bl	80077b8 <__sinit>
 800a1f6:	69a3      	ldr	r3, [r4, #24]
 800a1f8:	60a3      	str	r3, [r4, #8]
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	071a      	lsls	r2, r3, #28
 800a1fe:	d501      	bpl.n	800a204 <__swbuf_r+0x20>
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	b943      	cbnz	r3, 800a216 <__swbuf_r+0x32>
 800a204:	4621      	mov	r1, r4
 800a206:	4628      	mov	r0, r5
 800a208:	f000 f82a 	bl	800a260 <__swsetup_r>
 800a20c:	b118      	cbz	r0, 800a216 <__swbuf_r+0x32>
 800a20e:	f04f 37ff 	mov.w	r7, #4294967295
 800a212:	4638      	mov	r0, r7
 800a214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	6922      	ldr	r2, [r4, #16]
 800a21a:	1a98      	subs	r0, r3, r2
 800a21c:	6963      	ldr	r3, [r4, #20]
 800a21e:	b2f6      	uxtb	r6, r6
 800a220:	4283      	cmp	r3, r0
 800a222:	4637      	mov	r7, r6
 800a224:	dc05      	bgt.n	800a232 <__swbuf_r+0x4e>
 800a226:	4621      	mov	r1, r4
 800a228:	4628      	mov	r0, r5
 800a22a:	f7ff fc61 	bl	8009af0 <_fflush_r>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d1ed      	bne.n	800a20e <__swbuf_r+0x2a>
 800a232:	68a3      	ldr	r3, [r4, #8]
 800a234:	3b01      	subs	r3, #1
 800a236:	60a3      	str	r3, [r4, #8]
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	6022      	str	r2, [r4, #0]
 800a23e:	701e      	strb	r6, [r3, #0]
 800a240:	6962      	ldr	r2, [r4, #20]
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	429a      	cmp	r2, r3
 800a246:	d004      	beq.n	800a252 <__swbuf_r+0x6e>
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	07db      	lsls	r3, r3, #31
 800a24c:	d5e1      	bpl.n	800a212 <__swbuf_r+0x2e>
 800a24e:	2e0a      	cmp	r6, #10
 800a250:	d1df      	bne.n	800a212 <__swbuf_r+0x2e>
 800a252:	4621      	mov	r1, r4
 800a254:	4628      	mov	r0, r5
 800a256:	f7ff fc4b 	bl	8009af0 <_fflush_r>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d0d9      	beq.n	800a212 <__swbuf_r+0x2e>
 800a25e:	e7d6      	b.n	800a20e <__swbuf_r+0x2a>

0800a260 <__swsetup_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4b29      	ldr	r3, [pc, #164]	@ (800a308 <__swsetup_r+0xa8>)
 800a264:	4605      	mov	r5, r0
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	460c      	mov	r4, r1
 800a26a:	b118      	cbz	r0, 800a274 <__swsetup_r+0x14>
 800a26c:	6a03      	ldr	r3, [r0, #32]
 800a26e:	b90b      	cbnz	r3, 800a274 <__swsetup_r+0x14>
 800a270:	f7fd faa2 	bl	80077b8 <__sinit>
 800a274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a278:	0719      	lsls	r1, r3, #28
 800a27a:	d422      	bmi.n	800a2c2 <__swsetup_r+0x62>
 800a27c:	06da      	lsls	r2, r3, #27
 800a27e:	d407      	bmi.n	800a290 <__swsetup_r+0x30>
 800a280:	2209      	movs	r2, #9
 800a282:	602a      	str	r2, [r5, #0]
 800a284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a288:	81a3      	strh	r3, [r4, #12]
 800a28a:	f04f 30ff 	mov.w	r0, #4294967295
 800a28e:	e033      	b.n	800a2f8 <__swsetup_r+0x98>
 800a290:	0758      	lsls	r0, r3, #29
 800a292:	d512      	bpl.n	800a2ba <__swsetup_r+0x5a>
 800a294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a296:	b141      	cbz	r1, 800a2aa <__swsetup_r+0x4a>
 800a298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a29c:	4299      	cmp	r1, r3
 800a29e:	d002      	beq.n	800a2a6 <__swsetup_r+0x46>
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f7fe faad 	bl	8008800 <_free_r>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2b0:	81a3      	strh	r3, [r4, #12]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	6063      	str	r3, [r4, #4]
 800a2b6:	6923      	ldr	r3, [r4, #16]
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	f043 0308 	orr.w	r3, r3, #8
 800a2c0:	81a3      	strh	r3, [r4, #12]
 800a2c2:	6923      	ldr	r3, [r4, #16]
 800a2c4:	b94b      	cbnz	r3, 800a2da <__swsetup_r+0x7a>
 800a2c6:	89a3      	ldrh	r3, [r4, #12]
 800a2c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2d0:	d003      	beq.n	800a2da <__swsetup_r+0x7a>
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 f883 	bl	800a3e0 <__smakebuf_r>
 800a2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2de:	f013 0201 	ands.w	r2, r3, #1
 800a2e2:	d00a      	beq.n	800a2fa <__swsetup_r+0x9a>
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	60a2      	str	r2, [r4, #8]
 800a2e8:	6962      	ldr	r2, [r4, #20]
 800a2ea:	4252      	negs	r2, r2
 800a2ec:	61a2      	str	r2, [r4, #24]
 800a2ee:	6922      	ldr	r2, [r4, #16]
 800a2f0:	b942      	cbnz	r2, 800a304 <__swsetup_r+0xa4>
 800a2f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2f6:	d1c5      	bne.n	800a284 <__swsetup_r+0x24>
 800a2f8:	bd38      	pop	{r3, r4, r5, pc}
 800a2fa:	0799      	lsls	r1, r3, #30
 800a2fc:	bf58      	it	pl
 800a2fe:	6962      	ldrpl	r2, [r4, #20]
 800a300:	60a2      	str	r2, [r4, #8]
 800a302:	e7f4      	b.n	800a2ee <__swsetup_r+0x8e>
 800a304:	2000      	movs	r0, #0
 800a306:	e7f7      	b.n	800a2f8 <__swsetup_r+0x98>
 800a308:	20000104 	.word	0x20000104

0800a30c <_raise_r>:
 800a30c:	291f      	cmp	r1, #31
 800a30e:	b538      	push	{r3, r4, r5, lr}
 800a310:	4605      	mov	r5, r0
 800a312:	460c      	mov	r4, r1
 800a314:	d904      	bls.n	800a320 <_raise_r+0x14>
 800a316:	2316      	movs	r3, #22
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	f04f 30ff 	mov.w	r0, #4294967295
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a322:	b112      	cbz	r2, 800a32a <_raise_r+0x1e>
 800a324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a328:	b94b      	cbnz	r3, 800a33e <_raise_r+0x32>
 800a32a:	4628      	mov	r0, r5
 800a32c:	f000 f830 	bl	800a390 <_getpid_r>
 800a330:	4622      	mov	r2, r4
 800a332:	4601      	mov	r1, r0
 800a334:	4628      	mov	r0, r5
 800a336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a33a:	f000 b817 	b.w	800a36c <_kill_r>
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d00a      	beq.n	800a358 <_raise_r+0x4c>
 800a342:	1c59      	adds	r1, r3, #1
 800a344:	d103      	bne.n	800a34e <_raise_r+0x42>
 800a346:	2316      	movs	r3, #22
 800a348:	6003      	str	r3, [r0, #0]
 800a34a:	2001      	movs	r0, #1
 800a34c:	e7e7      	b.n	800a31e <_raise_r+0x12>
 800a34e:	2100      	movs	r1, #0
 800a350:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a354:	4620      	mov	r0, r4
 800a356:	4798      	blx	r3
 800a358:	2000      	movs	r0, #0
 800a35a:	e7e0      	b.n	800a31e <_raise_r+0x12>

0800a35c <raise>:
 800a35c:	4b02      	ldr	r3, [pc, #8]	@ (800a368 <raise+0xc>)
 800a35e:	4601      	mov	r1, r0
 800a360:	6818      	ldr	r0, [r3, #0]
 800a362:	f7ff bfd3 	b.w	800a30c <_raise_r>
 800a366:	bf00      	nop
 800a368:	20000104 	.word	0x20000104

0800a36c <_kill_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4d07      	ldr	r5, [pc, #28]	@ (800a38c <_kill_r+0x20>)
 800a370:	2300      	movs	r3, #0
 800a372:	4604      	mov	r4, r0
 800a374:	4608      	mov	r0, r1
 800a376:	4611      	mov	r1, r2
 800a378:	602b      	str	r3, [r5, #0]
 800a37a:	f7f6 ffed 	bl	8001358 <_kill>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	d102      	bne.n	800a388 <_kill_r+0x1c>
 800a382:	682b      	ldr	r3, [r5, #0]
 800a384:	b103      	cbz	r3, 800a388 <_kill_r+0x1c>
 800a386:	6023      	str	r3, [r4, #0]
 800a388:	bd38      	pop	{r3, r4, r5, pc}
 800a38a:	bf00      	nop
 800a38c:	20002730 	.word	0x20002730

0800a390 <_getpid_r>:
 800a390:	f7f6 bfe0 	b.w	8001354 <_getpid>

0800a394 <__swhatbuf_r>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	460c      	mov	r4, r1
 800a398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a39c:	2900      	cmp	r1, #0
 800a39e:	b096      	sub	sp, #88	@ 0x58
 800a3a0:	4615      	mov	r5, r2
 800a3a2:	461e      	mov	r6, r3
 800a3a4:	da0d      	bge.n	800a3c2 <__swhatbuf_r+0x2e>
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3ac:	f04f 0100 	mov.w	r1, #0
 800a3b0:	bf14      	ite	ne
 800a3b2:	2340      	movne	r3, #64	@ 0x40
 800a3b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	6031      	str	r1, [r6, #0]
 800a3bc:	602b      	str	r3, [r5, #0]
 800a3be:	b016      	add	sp, #88	@ 0x58
 800a3c0:	bd70      	pop	{r4, r5, r6, pc}
 800a3c2:	466a      	mov	r2, sp
 800a3c4:	f000 f848 	bl	800a458 <_fstat_r>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	dbec      	blt.n	800a3a6 <__swhatbuf_r+0x12>
 800a3cc:	9901      	ldr	r1, [sp, #4]
 800a3ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3d6:	4259      	negs	r1, r3
 800a3d8:	4159      	adcs	r1, r3
 800a3da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3de:	e7eb      	b.n	800a3b8 <__swhatbuf_r+0x24>

0800a3e0 <__smakebuf_r>:
 800a3e0:	898b      	ldrh	r3, [r1, #12]
 800a3e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e4:	079d      	lsls	r5, r3, #30
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	d507      	bpl.n	800a3fc <__smakebuf_r+0x1c>
 800a3ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	6123      	str	r3, [r4, #16]
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	6163      	str	r3, [r4, #20]
 800a3f8:	b003      	add	sp, #12
 800a3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3fc:	ab01      	add	r3, sp, #4
 800a3fe:	466a      	mov	r2, sp
 800a400:	f7ff ffc8 	bl	800a394 <__swhatbuf_r>
 800a404:	9f00      	ldr	r7, [sp, #0]
 800a406:	4605      	mov	r5, r0
 800a408:	4639      	mov	r1, r7
 800a40a:	4630      	mov	r0, r6
 800a40c:	f7fe fa6c 	bl	80088e8 <_malloc_r>
 800a410:	b948      	cbnz	r0, 800a426 <__smakebuf_r+0x46>
 800a412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a416:	059a      	lsls	r2, r3, #22
 800a418:	d4ee      	bmi.n	800a3f8 <__smakebuf_r+0x18>
 800a41a:	f023 0303 	bic.w	r3, r3, #3
 800a41e:	f043 0302 	orr.w	r3, r3, #2
 800a422:	81a3      	strh	r3, [r4, #12]
 800a424:	e7e2      	b.n	800a3ec <__smakebuf_r+0xc>
 800a426:	89a3      	ldrh	r3, [r4, #12]
 800a428:	6020      	str	r0, [r4, #0]
 800a42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	9b01      	ldr	r3, [sp, #4]
 800a432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a436:	b15b      	cbz	r3, 800a450 <__smakebuf_r+0x70>
 800a438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a43c:	4630      	mov	r0, r6
 800a43e:	f000 f81d 	bl	800a47c <_isatty_r>
 800a442:	b128      	cbz	r0, 800a450 <__smakebuf_r+0x70>
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	f023 0303 	bic.w	r3, r3, #3
 800a44a:	f043 0301 	orr.w	r3, r3, #1
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	431d      	orrs	r5, r3
 800a454:	81a5      	strh	r5, [r4, #12]
 800a456:	e7cf      	b.n	800a3f8 <__smakebuf_r+0x18>

0800a458 <_fstat_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4d07      	ldr	r5, [pc, #28]	@ (800a478 <_fstat_r+0x20>)
 800a45c:	2300      	movs	r3, #0
 800a45e:	4604      	mov	r4, r0
 800a460:	4608      	mov	r0, r1
 800a462:	4611      	mov	r1, r2
 800a464:	602b      	str	r3, [r5, #0]
 800a466:	f7f6 ffa5 	bl	80013b4 <_fstat>
 800a46a:	1c43      	adds	r3, r0, #1
 800a46c:	d102      	bne.n	800a474 <_fstat_r+0x1c>
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	b103      	cbz	r3, 800a474 <_fstat_r+0x1c>
 800a472:	6023      	str	r3, [r4, #0]
 800a474:	bd38      	pop	{r3, r4, r5, pc}
 800a476:	bf00      	nop
 800a478:	20002730 	.word	0x20002730

0800a47c <_isatty_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d06      	ldr	r5, [pc, #24]	@ (800a498 <_isatty_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	f7f6 ff9a 	bl	80013c0 <_isatty>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_isatty_r+0x1a>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_isatty_r+0x1a>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20002730 	.word	0x20002730

0800a49c <_init>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr

0800a4a8 <_fini>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	bf00      	nop
 800a4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ae:	bc08      	pop	{r3}
 800a4b0:	469e      	mov	lr, r3
 800a4b2:	4770      	bx	lr
