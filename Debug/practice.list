
practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b634  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800b7d8  0800b7d8  0001b7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c130  0800c130  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c130  0800c130  0001c130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c138  0800c138  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c138  0800c138  0001c138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c13c  0800c13c  0001c13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0800c140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002640  200002c0  0800c400  000202c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002900  0800c400  00022900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a68a  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061fa  00000000  00000000  0004a9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00050bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002436  00000000  00000000  00052018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001beca  00000000  00000000  0005444e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d34d  00000000  00000000  00070318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096e87  00000000  00000000  0009d665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005748  00000000  00000000  001344ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00016566  00000000  00000000  00139c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0015019a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b7bc 	.word	0x0800b7bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	0800b7bc 	.word	0x0800b7bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8000eb4:	b530      	push	{r4, r5, lr}
 8000eb6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <MX_DMA_Init+0xd4>)
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000eba:	4834      	ldr	r0, [pc, #208]	; (8000f8c <MX_DMA_Init+0xd8>)
 8000ebc:	4d34      	ldr	r5, [pc, #208]	; (8000f90 <MX_DMA_Init+0xdc>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	9200      	str	r2, [sp, #0]
 8000ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ec4:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000ec8:	6319      	str	r1, [r3, #48]	; 0x30
 8000eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ecc:	f401 1100 	and.w	r1, r1, #2097152	; 0x200000
 8000ed0:	9100      	str	r1, [sp, #0]
 8000ed2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ed4:	9201      	str	r2, [sp, #4]
 8000ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000ed8:	6042      	str	r2, [r0, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eda:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8000ede:	6319      	str	r1, [r3, #48]	; 0x30
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000ee2:	61c2      	str	r2, [r0, #28]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee8:	9301      	str	r3, [sp, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000eea:	2280      	movs	r2, #128	; 0x80
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000eec:	f44f 7400 	mov.w	r4, #512	; 0x200
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef4:	e9c0 4303 	strd	r4, r3, [r0, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ef8:	9901      	ldr	r1, [sp, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000efa:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f04:	2304      	movs	r3, #4
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f06:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f0a:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f0e:	e9c0 4308 	strd	r4, r3, [r0, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f12:	2103      	movs	r1, #3
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_INC4;
 8000f14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_INC4;
 8000f1c:	e9c0 120a 	strd	r1, r2, [r0, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000f20:	6005      	str	r5, [r0, #0]
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f22:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000f24:	f000 fc96 	bl	8001854 <HAL_DMA_Init>
 8000f28:	bb50      	cbnz	r0, 8000f80 <MX_DMA_Init+0xcc>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	200b      	movs	r0, #11
 8000f30:	f000 fc44 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f34:	200b      	movs	r0, #11
 8000f36:	f000 fc7f 	bl	8001838 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	200c      	movs	r0, #12
 8000f40:	f000 fc3c 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f44:	200c      	movs	r0, #12
 8000f46:	f000 fc77 	bl	8001838 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	2010      	movs	r0, #16
 8000f50:	f000 fc34 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f54:	2010      	movs	r0, #16
 8000f56:	f000 fc6f 	bl	8001838 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	2011      	movs	r0, #17
 8000f60:	f000 fc2c 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f64:	2011      	movs	r0, #17
 8000f66:	f000 fc67 	bl	8001838 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2038      	movs	r0, #56	; 0x38
 8000f6e:	4611      	mov	r1, r2
 8000f70:	f000 fc24 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f74:	2038      	movs	r0, #56	; 0x38

}
 8000f76:	b003      	add	sp, #12
 8000f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f7c:	f000 bc5c 	b.w	8001838 <HAL_NVIC_EnableIRQ>
    Error_Handler();
 8000f80:	f000 f9e8 	bl	8001354 <Error_Handler>
 8000f84:	e7d1      	b.n	8000f2a <MX_DMA_Init+0x76>
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	200002dc 	.word	0x200002dc
 8000f90:	40026410 	.word	0x40026410

08000f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f94:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	2400      	movs	r4, #0
{
 8000f98:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000f9e:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <MX_GPIO_Init+0x9c>)
 8000fa4:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000faa:	4d22      	ldr	r5, [pc, #136]	; (8001034 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	f042 0204 	orr.w	r2, r2, #4
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	f002 0204 	and.w	r2, r2, #4
 8000fb8:	9200      	str	r2, [sp, #0]
 8000fba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbc:	9401      	str	r4, [sp, #4]
 8000fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fcc:	9201      	str	r2, [sp, #4]
 8000fce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	9402      	str	r4, [sp, #8]
 8000fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fdc:	f002 0201 	and.w	r2, r2, #1
 8000fe0:	9202      	str	r2, [sp, #8]
 8000fe2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	9403      	str	r4, [sp, #12]
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe8:	f042 0202 	orr.w	r2, r2, #2
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff6:	4622      	mov	r2, r4
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ffe:	f000 ff2b 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001006:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100a:	a904      	add	r1, sp, #16
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8001010:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001014:	f000 fe2c 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001018:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800101c:	a904      	add	r1, sp, #16
 800101e:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001028:	f000 fe22 	bl	8001c70 <HAL_GPIO_Init>

}
 800102c:	b00b      	add	sp, #44	; 0x2c
 800102e:	bd30      	pop	{r4, r5, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020800 	.word	0x40020800

0800103c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800103c:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <MX_I2C1_Init+0x30>)
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8001042:	490c      	ldr	r1, [pc, #48]	; (8001074 <MX_I2C1_Init+0x38>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001044:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800104a:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 800104e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001052:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001056:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105c:	f000 ff00 	bl	8001e60 <HAL_I2C_Init>
 8001060:	b900      	cbnz	r0, 8001064 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001062:	bd10      	pop	{r4, pc}
 8001064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001068:	f000 b974 	b.w	8001354 <Error_Handler>
 800106c:	200003fc 	.word	0x200003fc
 8001070:	40005400 	.word	0x40005400
 8001074:	000186a0 	.word	0x000186a0

08001078 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <HAL_I2C_MspInit+0xe4>)
 800107c:	6802      	ldr	r2, [r0, #0]
{
 800107e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 8001082:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001088:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800108c:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 800108e:	d001      	beq.n	8001094 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001090:	b009      	add	sp, #36	; 0x24
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4f32      	ldr	r7, [pc, #200]	; (8001160 <HAL_I2C_MspInit+0xe8>)
 8001096:	9400      	str	r4, [sp, #0]
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800109a:	4e32      	ldr	r6, [pc, #200]	; (8001164 <HAL_I2C_MspInit+0xec>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
 80010a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ac:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010b0:	2312      	movs	r3, #18
 80010b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b8:	2203      	movs	r2, #3
 80010ba:	2304      	movs	r3, #4
 80010bc:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	482a      	ldr	r0, [pc, #168]	; (8001168 <HAL_I2C_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f000 fdd4 	bl	8001c70 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c8:	9401      	str	r4, [sp, #4]
 80010ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80010cc:	4a27      	ldr	r2, [pc, #156]	; (800116c <HAL_I2C_MspInit+0xf4>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
 80010d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d6:	60b4      	str	r4, [r6, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010dc:	9301      	str	r3, [sp, #4]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80010de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010e2:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010e6:	4630      	mov	r0, r6
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010ec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	e9c6 4203 	strd	r4, r2, [r6, #12]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f4:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010f8:	e9c6 4307 	strd	r4, r3, [r6, #28]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fc:	9901      	ldr	r1, [sp, #4]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fe:	6274      	str	r4, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001100:	f000 fba8 	bl	8001854 <HAL_DMA_Init>
 8001104:	bb18      	cbnz	r0, 800114e <HAL_I2C_MspInit+0xd6>
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001106:	4c1a      	ldr	r4, [pc, #104]	; (8001170 <HAL_I2C_MspInit+0xf8>)
 8001108:	491a      	ldr	r1, [pc, #104]	; (8001174 <HAL_I2C_MspInit+0xfc>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800110a:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800110c:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800110e:	2240      	movs	r2, #64	; 0x40
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001110:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001114:	60a2      	str	r2, [r4, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001116:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800111a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800111e:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001120:	e9c4 3103 	strd	r3, r1, [r4, #12]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001124:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001128:	e9c4 3207 	strd	r3, r2, [r4, #28]
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800112c:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001130:	f000 fb90 	bl	8001854 <HAL_DMA_Init>
 8001134:	b970      	cbnz	r0, 8001154 <HAL_I2C_MspInit+0xdc>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001138:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800113a:	4611      	mov	r1, r2
 800113c:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800113e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001140:	f000 fb3c 	bl	80017bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001144:	201f      	movs	r0, #31
 8001146:	f000 fb77 	bl	8001838 <HAL_NVIC_EnableIRQ>
}
 800114a:	b009      	add	sp, #36	; 0x24
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800114e:	f000 f901 	bl	8001354 <Error_Handler>
 8001152:	e7d8      	b.n	8001106 <HAL_I2C_MspInit+0x8e>
      Error_Handler();
 8001154:	f000 f8fe 	bl	8001354 <Error_Handler>
 8001158:	e7ed      	b.n	8001136 <HAL_I2C_MspInit+0xbe>
 800115a:	bf00      	nop
 800115c:	40005400 	.word	0x40005400
 8001160:	40023800 	.word	0x40023800
 8001164:	2000033c 	.word	0x2000033c
 8001168:	40020400 	.word	0x40020400
 800116c:	40026010 	.word	0x40026010
 8001170:	2000039c 	.word	0x2000039c
 8001174:	40026028 	.word	0x40026028

08001178 <usart_printf>:
#include <stdio.h>

#define USART_TxBufSize 255
static char USART_TxBuffer[USART_TxBufSize];

HAL_StatusTypeDef usart_printf(const char *format, ...) {
 8001178:	b40f      	push	{r0, r1, r2, r3}
 800117a:	b510      	push	{r4, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	ab04      	add	r3, sp, #16
    va_list args;
    uint32_t length = 0;

    va_start(args, format);

    length = vsnprintf((char *)USART_TxBuffer, USART_TxBufSize, (char *)format, args);
 8001180:	4c08      	ldr	r4, [pc, #32]	; (80011a4 <usart_printf+0x2c>)
HAL_StatusTypeDef usart_printf(const char *format, ...) {
 8001182:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8001186:	9301      	str	r3, [sp, #4]
    length = vsnprintf((char *)USART_TxBuffer, USART_TxBufSize, (char *)format, args);
 8001188:	21ff      	movs	r1, #255	; 0xff
 800118a:	4620      	mov	r0, r4
 800118c:	f007 fd4e 	bl	8008c2c <vsniprintf>
    va_end(args);
    return HAL_UART_Transmit_DMA(&huart2, USART_TxBuffer, length);
 8001190:	4621      	mov	r1, r4
 8001192:	b282      	uxth	r2, r0
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <usart_printf+0x30>)
 8001196:	f003 fa4b 	bl	8004630 <HAL_UART_Transmit_DMA>
}
 800119a:	b002      	add	sp, #8
 800119c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011a0:	b004      	add	sp, #16
 80011a2:	4770      	bx	lr
 80011a4:	20000450 	.word	0x20000450
 80011a8:	20000b5c 	.word	0x20000b5c

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	2300      	movs	r3, #0
{
 80011b0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80011b6:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ba:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80011be:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4920      	ldr	r1, [pc, #128]	; (8001244 <SystemClock_Config+0x98>)
 80011c4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c6:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ca:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80011cc:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80011d0:	6408      	str	r0, [r1, #64]	; 0x40
 80011d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80011d4:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80011d8:	9101      	str	r1, [sp, #4]
 80011da:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	6813      	ldr	r3, [r2, #0]
 80011e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e8:	2001      	movs	r0, #1
 80011ea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f6:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fe:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001202:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001204:	2104      	movs	r1, #4
 8001206:	2002      	movs	r0, #2
 8001208:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800120c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 96;
 800120e:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001212:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001214:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f002 fd09 	bl	8003c2c <HAL_RCC_OscConfig>
 800121a:	b108      	cbz	r0, 8001220 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800121e:	e7fe      	b.n	800121e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001220:	210f      	movs	r1, #15
 8001222:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001224:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800122c:	a803      	add	r0, sp, #12
 800122e:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001230:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001234:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001236:	f002 ff11 	bl	800405c <HAL_RCC_ClockConfig>
 800123a:	b108      	cbz	r0, 8001240 <SystemClock_Config+0x94>
 800123c:	b672      	cpsid	i
	while (1) {
 800123e:	e7fe      	b.n	800123e <SystemClock_Config+0x92>
}
 8001240:	b014      	add	sp, #80	; 0x50
 8001242:	bd10      	pop	{r4, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <main>:
{
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
  HAL_Init();
 8001252:	f000 fa63 	bl	800171c <HAL_Init>
  SystemClock_Config();
 8001256:	f7ff ffa9 	bl	80011ac <SystemClock_Config>
  MX_GPIO_Init();
 800125a:	f7ff fe9b 	bl	8000f94 <MX_GPIO_Init>
  MX_DMA_Init();
 800125e:	f7ff fe29 	bl	8000eb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001262:	f000 f995 	bl	8001590 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001266:	f7ff fee9 	bl	800103c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800126a:	f006 fc59 	bl	8007b20 <MX_USB_DEVICE_Init>
  import_pub_key(&pub_key, pub_data);
 800126e:	492e      	ldr	r1, [pc, #184]	; (8001328 <main+0xdc>)
 8001270:	482e      	ldr	r0, [pc, #184]	; (800132c <main+0xe0>)
 8001272:	f005 fb47 	bl	8006904 <import_pub_key>
  import_pvt_key(&pvt_key, pvt_data);
 8001276:	492e      	ldr	r1, [pc, #184]	; (8001330 <main+0xe4>)
 8001278:	482e      	ldr	r0, [pc, #184]	; (8001334 <main+0xe8>)
 800127a:	f005 fbc1 	bl	8006a00 <import_pvt_key>
  montg_init(&montg_domain_n, &pub_key.mod);
 800127e:	492b      	ldr	r1, [pc, #172]	; (800132c <main+0xe0>)
 8001280:	a868      	add	r0, sp, #416	; 0x1a0
 8001282:	f005 fa19 	bl	80066b8 <montg_init>
  montg_init(&montg_domain_p, &pvt_key.p);
 8001286:	492c      	ldr	r1, [pc, #176]	; (8001338 <main+0xec>)
 8001288:	a8cc      	add	r0, sp, #816	; 0x330
  const char test_msg[BN_MSG_LEN + 1] = "";
 800128a:	2500      	movs	r5, #0
  montg_init(&montg_domain_p, &pvt_key.p);
 800128c:	f005 fa14 	bl	80066b8 <montg_init>
  montg_init(&montg_domain_q, &pvt_key.q);
 8001290:	492a      	ldr	r1, [pc, #168]	; (800133c <main+0xf0>)
 8001292:	f50d 6098 	add.w	r0, sp, #1216	; 0x4c0
 8001296:	f005 fa0f 	bl	80066b8 <montg_init>
  const char test_msg[BN_MSG_LEN + 1] = "";
 800129a:	4629      	mov	r1, r5
 800129c:	223d      	movs	r2, #61	; 0x3d
 800129e:	a806      	add	r0, sp, #24
 80012a0:	9505      	str	r5, [sp, #20]
 80012a2:	f007 fceb 	bl	8008c7c <memset>
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 80012a6:	4629      	mov	r1, r5
 80012a8:	22fd      	movs	r2, #253	; 0xfd
 80012aa:	a828      	add	r0, sp, #160	; 0xa0
  usart_printf("%u) %02u:%02u:%02u\n", test_enc_packet.plc_number, test_enc_packet.time.hours, test_enc_packet.time.minutes, test_enc_packet.time.seconds);
 80012ac:	273b      	movs	r7, #59	; 0x3b
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 80012ae:	9527      	str	r5, [sp, #156]	; 0x9c
 80012b0:	f007 fce4 	bl	8008c7c <memset>
 80012b4:	4629      	mov	r1, r5
 80012b6:	223d      	movs	r2, #61	; 0x3d
 80012b8:	a817      	add	r0, sp, #92	; 0x5c
 80012ba:	9516      	str	r5, [sp, #88]	; 0x58
 80012bc:	f007 fcde 	bl	8008c7c <memset>
  usart_printf("%u) %02u:%02u:%02u\n", test_enc_packet.plc_number, test_enc_packet.time.hours, test_enc_packet.time.minutes, test_enc_packet.time.seconds);
 80012c0:	9700      	str	r7, [sp, #0]
 80012c2:	2316      	movs	r3, #22
 80012c4:	220b      	movs	r2, #11
 80012c6:	2115      	movs	r1, #21
 80012c8:	481d      	ldr	r0, [pc, #116]	; (8001340 <main+0xf4>)
 80012ca:	f7ff ff55 	bl	8001178 <usart_printf>
  encrypt_buf(&pub_key, &montg_domain_n, test_msg, sizeof(test_msg), out_enc, out_enc_len);
 80012ce:	f240 1501 	movw	r5, #257	; 0x101
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 80012d2:	ae27      	add	r6, sp, #156	; 0x9c
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 80012d4:	f88d 701a 	strb.w	r7, [sp, #26]
 80012d8:	2715      	movs	r7, #21
  encrypt_buf(&pub_key, &montg_domain_n, test_msg, sizeof(test_msg), out_enc, out_enc_len);
 80012da:	e9cd 6500 	strd	r6, r5, [sp]
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <main+0xe0>)
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 80012e0:	9705      	str	r7, [sp, #20]
  encrypt_buf(&pub_key, &montg_domain_n, test_msg, sizeof(test_msg), out_enc, out_enc_len);
 80012e2:	2341      	movs	r3, #65	; 0x41
 80012e4:	aa05      	add	r2, sp, #20
 80012e6:	a968      	add	r1, sp, #416	; 0x1a0
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 80012e8:	f241 670b 	movw	r7, #5643	; 0x160b
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 80012ec:	ac16      	add	r4, sp, #88	; 0x58
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 80012ee:	f8ad 7018 	strh.w	r7, [sp, #24]
  encrypt_buf(&pub_key, &montg_domain_n, test_msg, sizeof(test_msg), out_enc, out_enc_len);
 80012f2:	f005 fc25 	bl	8006b40 <encrypt_buf>
  decrypt_buf(&pvt_key, &montg_domain_n, &montg_domain_p, &montg_domain_q, out_enc, out_enc_len, out_dec, out_dec_len);
 80012f6:	9501      	str	r5, [sp, #4]
 80012f8:	2541      	movs	r5, #65	; 0x41
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <main+0xe8>)
 80012fc:	9402      	str	r4, [sp, #8]
 80012fe:	f50d 6398 	add.w	r3, sp, #1216	; 0x4c0
 8001302:	aacc      	add	r2, sp, #816	; 0x330
 8001304:	a968      	add	r1, sp, #416	; 0x1a0
 8001306:	9600      	str	r6, [sp, #0]
 8001308:	9503      	str	r5, [sp, #12]
 800130a:	f005 fcab 	bl	8006c64 <decrypt_buf>
  usart_printf("%u) %02u:%02u:%02u\n", test_dec_packet.plc_number, test_dec_packet.time.hours, test_dec_packet.time.minutes, test_dec_packet.time.seconds);
 800130e:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
 8001312:	9000      	str	r0, [sp, #0]
 8001314:	f89d 305d 	ldrb.w	r3, [sp, #93]	; 0x5d
 8001318:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 800131c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800131e:	4808      	ldr	r0, [pc, #32]	; (8001340 <main+0xf4>)
 8001320:	f7ff ff2a 	bl	8001178 <usart_printf>
  while (1) {
 8001324:	e7fe      	b.n	8001324 <main+0xd8>
 8001326:	bf00      	nop
 8001328:	0800b7f8 	.word	0x0800b7f8
 800132c:	20000550 	.word	0x20000550
 8001330:	0800b8b0 	.word	0x0800b8b0
 8001334:	20000650 	.word	0x20000650
 8001338:	200007d0 	.word	0x200007d0
 800133c:	20000850 	.word	0x20000850
 8001340:	0800b7e4 	.word	0x0800b7e4

08001344 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8001344:	6803      	ldr	r3, [r0, #0]
 8001346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134a:	d000      	beq.n	800134e <HAL_TIM_PeriodElapsedCallback+0xa>
}
 800134c:	4770      	bx	lr
    HAL_IncTick();
 800134e:	f000 b9ff 	b.w	8001750 <HAL_IncTick>
 8001352:	bf00      	nop

08001354 <Error_Handler>:
 8001354:	b672      	cpsid	i
	while (1) {
 8001356:	e7fe      	b.n	8001356 <Error_Handler+0x2>

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_MspInit+0x34>)
 800135c:	2100      	movs	r1, #0
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001366:	645a      	str	r2, [r3, #68]	; 0x44
 8001368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800136a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800136e:	9200      	str	r2, [sp, #0]
 8001370:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	9101      	str	r1, [sp, #4]
 8001374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001376:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	b002      	add	sp, #8
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001394:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_InitTick+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	9202      	str	r2, [sp, #8]
 800139a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139c:	f042 0201 	orr.w	r2, r2, #1
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	9302      	str	r3, [sp, #8]
{
 80013aa:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ac:	a901      	add	r1, sp, #4
 80013ae:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 80013b0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b2:	f002 ff17 	bl	80041e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013b6:	9b06      	ldr	r3, [sp, #24]
 80013b8:	b9db      	cbnz	r3, 80013f2 <HAL_InitTick+0x62>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013ba:	f002 fef3 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 80013be:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_InitTick+0x98>)

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80013c2:	4c1a      	ldr	r4, [pc, #104]	; (800142c <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	3b01      	subs	r3, #1
  htim2.Instance = TIM2;
 80013cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 80013d0:	2200      	movs	r2, #0
  htim2.Init.Prescaler = uwPrescalerValue;
 80013d2:	e9c4 1300 	strd	r1, r3, [r4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 80013d6:	4620      	mov	r0, r4
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80013d8:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim2.Init.ClockDivision = 0;
 80013dc:	6122      	str	r2, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	60a2      	str	r2, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	61a2      	str	r2, [r4, #24]
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80013e2:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim2);
 80013e4:	f002 ff22 	bl	800422c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80013e8:	4606      	mov	r6, r0
 80013ea:	b130      	cbz	r0, 80013fa <HAL_InitTick+0x6a>
    }
  }

 /* Return function status */
  return status;
}
 80013ec:	4630      	mov	r0, r6
 80013ee:	b008      	add	sp, #32
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013f2:	f002 fed7 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 80013f6:	0043      	lsls	r3, r0, #1
 80013f8:	e7e2      	b.n	80013c0 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim2);
 80013fa:	4620      	mov	r0, r4
 80013fc:	f002 ff94 	bl	8004328 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001400:	4606      	mov	r6, r0
 8001402:	2800      	cmp	r0, #0
 8001404:	d1f2      	bne.n	80013ec <HAL_InitTick+0x5c>
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001406:	201c      	movs	r0, #28
 8001408:	f000 fa16 	bl	8001838 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140c:	2d0f      	cmp	r5, #15
 800140e:	d901      	bls.n	8001414 <HAL_InitTick+0x84>
        status = HAL_ERROR;
 8001410:	2601      	movs	r6, #1
 8001412:	e7eb      	b.n	80013ec <HAL_InitTick+0x5c>
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001414:	4632      	mov	r2, r6
 8001416:	4629      	mov	r1, r5
 8001418:	201c      	movs	r0, #28
 800141a:	f000 f9cf 	bl	80017bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_InitTick+0xa0>)
 8001420:	601d      	str	r5, [r3, #0]
 8001422:	e7e3      	b.n	80013ec <HAL_InitTick+0x5c>
 8001424:	40023800 	.word	0x40023800
 8001428:	431bde83 	.word	0x431bde83
 800142c:	20000a50 	.word	0x20000a50
 8001430:	20000008 	.word	0x20000008

08001434 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler>
 8001436:	bf00      	nop

08001438 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <HardFault_Handler>
 800143a:	bf00      	nop

0800143c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler>
 800143e:	bf00      	nop

08001440 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <BusFault_Handler>
 8001442:	bf00      	nop

08001444 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler>
 8001446:	bf00      	nop

08001448 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop

0800144c <DebugMon_Handler>:
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <PendSV_Handler>:
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <SysTick_Handler>:
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop

08001458 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001458:	4801      	ldr	r0, [pc, #4]	; (8001460 <DMA1_Stream0_IRQHandler+0x8>)
 800145a:	f000 bb2f 	b.w	8001abc <HAL_DMA_IRQHandler>
 800145e:	bf00      	nop
 8001460:	2000033c 	.word	0x2000033c

08001464 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001464:	4801      	ldr	r0, [pc, #4]	; (800146c <DMA1_Stream1_IRQHandler+0x8>)
 8001466:	f000 bb29 	b.w	8001abc <HAL_DMA_IRQHandler>
 800146a:	bf00      	nop
 800146c:	2000039c 	.word	0x2000039c

08001470 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001470:	4801      	ldr	r0, [pc, #4]	; (8001478 <DMA1_Stream5_IRQHandler+0x8>)
 8001472:	f000 bb23 	b.w	8001abc <HAL_DMA_IRQHandler>
 8001476:	bf00      	nop
 8001478:	20000a9c 	.word	0x20000a9c

0800147c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800147c:	4801      	ldr	r0, [pc, #4]	; (8001484 <DMA1_Stream6_IRQHandler+0x8>)
 800147e:	f000 bb1d 	b.w	8001abc <HAL_DMA_IRQHandler>
 8001482:	bf00      	nop
 8001484:	20000afc 	.word	0x20000afc

08001488 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001488:	4801      	ldr	r0, [pc, #4]	; (8001490 <TIM2_IRQHandler+0x8>)
 800148a:	f002 bf89 	b.w	80043a0 <HAL_TIM_IRQHandler>
 800148e:	bf00      	nop
 8001490:	20000a50 	.word	0x20000a50

08001494 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001494:	4801      	ldr	r0, [pc, #4]	; (800149c <I2C1_EV_IRQHandler+0x8>)
 8001496:	f000 bf4d 	b.w	8002334 <HAL_I2C_EV_IRQHandler>
 800149a:	bf00      	nop
 800149c:	200003fc 	.word	0x200003fc

080014a0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014a0:	4801      	ldr	r0, [pc, #4]	; (80014a8 <USART2_IRQHandler+0x8>)
 80014a2:	f003 ba0b 	b.w	80048bc <HAL_UART_IRQHandler>
 80014a6:	bf00      	nop
 80014a8:	20000b5c 	.word	0x20000b5c

080014ac <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80014ac:	4801      	ldr	r0, [pc, #4]	; (80014b4 <DMA2_Stream0_IRQHandler+0x8>)
 80014ae:	f000 bb05 	b.w	8001abc <HAL_DMA_IRQHandler>
 80014b2:	bf00      	nop
 80014b4:	200002dc 	.word	0x200002dc

080014b8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <OTG_FS_IRQHandler+0x8>)
 80014ba:	f001 bcab 	b.w	8002e14 <HAL_PCD_IRQHandler>
 80014be:	bf00      	nop
 80014c0:	20002088 	.word	0x20002088

080014c4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80014c4:	2001      	movs	r0, #1
 80014c6:	4770      	bx	lr

080014c8 <_kill>:

int _kill(int pid, int sig)
{
 80014c8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ca:	f007 fc5b 	bl	8008d84 <__errno>
 80014ce:	2316      	movs	r3, #22
 80014d0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d6:	bd08      	pop	{r3, pc}

080014d8 <_exit>:

void _exit (int status)
{
 80014d8:	b508      	push	{r3, lr}
  errno = EINVAL;
 80014da:	f007 fc53 	bl	8008d84 <__errno>
 80014de:	2316      	movs	r3, #22
 80014e0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80014e2:	e7fe      	b.n	80014e2 <_exit+0xa>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	1e16      	subs	r6, r2, #0
 80014e8:	dd07      	ble.n	80014fa <_read+0x16>
 80014ea:	460c      	mov	r4, r1
 80014ec:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80014ee:	f3af 8000 	nop.w
 80014f2:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	42a5      	cmp	r5, r4
 80014f8:	d1f9      	bne.n	80014ee <_read+0xa>
  }

  return len;
}
 80014fa:	4630      	mov	r0, r6
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
 80014fe:	bf00      	nop

08001500 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001500:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	1e16      	subs	r6, r2, #0
 8001504:	dd07      	ble.n	8001516 <_write+0x16>
 8001506:	460c      	mov	r4, r1
 8001508:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800150a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800150e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	42ac      	cmp	r4, r5
 8001514:	d1f9      	bne.n	800150a <_write+0xa>
  }
  return len;
}
 8001516:	4630      	mov	r0, r6
 8001518:	bd70      	pop	{r4, r5, r6, pc}
 800151a:	bf00      	nop

0800151c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800151c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001528:	604b      	str	r3, [r1, #4]
  return 0;
}
 800152a:	2000      	movs	r0, #0
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001530:	2001      	movs	r0, #1
 8001532:	4770      	bx	lr

08001534 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001534:	2000      	movs	r0, #0
 8001536:	4770      	bx	lr

08001538 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153a:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800153c:	680b      	ldr	r3, [r1, #0]
{
 800153e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001540:	4c0c      	ldr	r4, [pc, #48]	; (8001574 <_sbrk+0x3c>)
 8001542:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001544:	b12b      	cbz	r3, 8001552 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4418      	add	r0, r3
 8001548:	4290      	cmp	r0, r2
 800154a:	d807      	bhi.n	800155c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800154c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <_sbrk+0x40>)
 8001554:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4418      	add	r0, r3
 8001558:	4290      	cmp	r0, r2
 800155a:	d9f7      	bls.n	800154c <_sbrk+0x14>
    errno = ENOMEM;
 800155c:	f007 fc12 	bl	8008d84 <__errno>
 8001560:	230c      	movs	r3, #12
 8001562:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd10      	pop	{r4, pc}
 800156c:	20000a98 	.word	0x20000a98
 8001570:	20020000 	.word	0x20020000
 8001574:	00000400 	.word	0x00000400
 8001578:	20002900 	.word	0x20002900

0800157c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <SystemInit+0x10>)
 800157e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001582:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001586:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001590:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <MX_USART2_UART_Init+0x30>)
 8001594:	4c0b      	ldr	r4, [pc, #44]	; (80015c4 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001598:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 800159e:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ae:	f002 ffa5 	bl	80044fc <HAL_UART_Init>
 80015b2:	b900      	cbnz	r0, 80015b6 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b4:	bd10      	pop	{r4, pc}
 80015b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80015ba:	f7ff becb 	b.w	8001354 <Error_Handler>
 80015be:	bf00      	nop
 80015c0:	20000b5c 	.word	0x20000b5c
 80015c4:	40004400 	.word	0x40004400

080015c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_UART_MspInit+0xe8>)
 80015cc:	6802      	ldr	r2, [r0, #0]
{
 80015ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 80015d2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80015d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80015dc:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 80015de:	d001      	beq.n	80015e4 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015e0:	b008      	add	sp, #32
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80015e8:	9400      	str	r4, [sp, #0]
 80015ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015ec:	4e31      	ldr	r6, [pc, #196]	; (80016b4 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40
 80015f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80015fa:	9200      	str	r2, [sp, #0]
 80015fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	9401      	str	r4, [sp, #4]
 8001600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001610:	220c      	movs	r2, #12
 8001612:	2302      	movs	r3, #2
 8001614:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	9305      	str	r3, [sp, #20]
 800161c:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	4825      	ldr	r0, [pc, #148]	; (80016b8 <HAL_UART_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001622:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001626:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f000 fb22 	bl	8001c70 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_UART_MspInit+0xf4>)
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162e:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001630:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001634:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001638:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800163e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001642:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001646:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800164a:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800164e:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001650:	f000 f900 	bl	8001854 <HAL_DMA_Init>
 8001654:	bb28      	cbnz	r0, 80016a2 <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001656:	4c1a      	ldr	r4, [pc, #104]	; (80016c0 <HAL_UART_MspInit+0xf8>)
 8001658:	491a      	ldr	r1, [pc, #104]	; (80016c4 <HAL_UART_MspInit+0xfc>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800165a:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800165c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001660:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001664:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001668:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166a:	2140      	movs	r1, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800166c:	6122      	str	r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800166e:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001670:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001674:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001678:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800167c:	e9c4 3207 	strd	r3, r2, [r4, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001680:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001682:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001684:	f000 f8e6 	bl	8001854 <HAL_DMA_Init>
 8001688:	b970      	cbnz	r0, 80016a8 <HAL_UART_MspInit+0xe0>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800168c:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800168e:	4611      	mov	r1, r2
 8001690:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001692:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001694:	f000 f892 	bl	80017bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001698:	2026      	movs	r0, #38	; 0x26
 800169a:	f000 f8cd 	bl	8001838 <HAL_NVIC_EnableIRQ>
}
 800169e:	b008      	add	sp, #32
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80016a2:	f7ff fe57 	bl	8001354 <Error_Handler>
 80016a6:	e7d6      	b.n	8001656 <HAL_UART_MspInit+0x8e>
      Error_Handler();
 80016a8:	f7ff fe54 	bl	8001354 <Error_Handler>
 80016ac:	e7ed      	b.n	800168a <HAL_UART_MspInit+0xc2>
 80016ae:	bf00      	nop
 80016b0:	40004400 	.word	0x40004400
 80016b4:	20000a9c 	.word	0x20000a9c
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40026088 	.word	0x40026088
 80016c0:	20000afc 	.word	0x20000afc
 80016c4:	400260a0 	.word	0x400260a0

080016c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e4:	4c0b      	ldr	r4, [pc, #44]	; (8001714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f2:	f7ff ff43 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f007 fb4b 	bl	8008d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fa:	f7ff fda7 	bl	800124c <main>
  bx  lr    
 80016fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 800170c:	0800c140 	.word	0x0800c140
  ldr r2, =_sbss
 8001710:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8001714:	20002900 	.word	0x20002900

08001718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC_IRQHandler>
	...

0800171c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x30>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001726:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800172e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001736:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001738:	2003      	movs	r0, #3
 800173a:	f000 f82d 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173e:	200f      	movs	r0, #15
 8001740:	f7ff fe26 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001744:	f7ff fe08 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001748:	2000      	movs	r0, #0
 800174a:	bd08      	pop	{r3, pc}
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001750:	4a03      	ldr	r2, [pc, #12]	; (8001760 <HAL_IncTick+0x10>)
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <HAL_IncTick+0x14>)
 8001754:	6811      	ldr	r1, [r2, #0]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	440b      	add	r3, r1
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000ba0 	.word	0x20000ba0
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001768:	4b01      	ldr	r3, [pc, #4]	; (8001770 <HAL_GetTick+0x8>)
 800176a:	6818      	ldr	r0, [r3, #0]
}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000ba0 	.word	0x20000ba0

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b538      	push	{r3, r4, r5, lr}
 8001776:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fff6 	bl	8001768 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800177e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001780:	d002      	beq.n	8001788 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <HAL_Delay+0x20>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	1b43      	subs	r3, r0, r5
 800178e:	42a3      	cmp	r3, r4
 8001790:	d3fa      	bcc.n	8001788 <HAL_Delay+0x14>
  {
  }
}
 8001792:	bd38      	pop	{r3, r4, r5, pc}
 8001794:	20000004 	.word	0x20000004

08001798 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800179a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017b2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_NVIC_SetPriority+0x74>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c6:	f1c3 0e07 	rsb	lr, r3, #7
 80017ca:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d2:	bf28      	it	cs
 80017d4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d8:	f1bc 0f06 	cmp.w	ip, #6
 80017dc:	d91b      	bls.n	8001816 <HAL_NVIC_SetPriority+0x5a>
 80017de:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80017e4:	fa0c fc03 	lsl.w	ip, ip, r3
 80017e8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80017f0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80017f4:	ea21 010c 	bic.w	r1, r1, ip
 80017f8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80017fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001800:	db0c      	blt.n	800181c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001806:	0109      	lsls	r1, r1, #4
 8001808:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800180c:	b2c9      	uxtb	r1, r1
 800180e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001812:	f85d fb04 	ldr.w	pc, [sp], #4
 8001816:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001818:	4613      	mov	r3, r2
 800181a:	e7e7      	b.n	80017ec <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_NVIC_SetPriority+0x78>)
 800181e:	f000 000f 	and.w	r0, r0, #15
 8001822:	0109      	lsls	r1, r1, #4
 8001824:	4403      	add	r3, r0
 8001826:	b2c9      	uxtb	r1, r1
 8001828:	7619      	strb	r1, [r3, #24]
 800182a:	f85d fb04 	ldr.w	pc, [sp], #4
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	e000ecfc 	.word	0xe000ecfc

08001838 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001838:	2800      	cmp	r0, #0
 800183a:	db07      	blt.n	800184c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183c:	0941      	lsrs	r1, r0, #5
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_NVIC_EnableIRQ+0x18>)
 8001840:	f000 001f 	and.w	r0, r0, #31
 8001844:	2301      	movs	r3, #1
 8001846:	4083      	lsls	r3, r0
 8001848:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100

08001854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001854:	b538      	push	{r3, r4, r5, lr}
 8001856:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ff86 	bl	8001768 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800185c:	2c00      	cmp	r4, #0
 800185e:	d052      	beq.n	8001906 <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001860:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001862:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001864:	2102      	movs	r1, #2
 8001866:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800186a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	4605      	mov	r5, r0
 8001876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001878:	e005      	b.n	8001886 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800187a:	f7ff ff75 	bl	8001768 <HAL_GetTick>
 800187e:	1b43      	subs	r3, r0, r5
 8001880:	2b05      	cmp	r3, #5
 8001882:	d839      	bhi.n	80018f8 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	07d1      	lsls	r1, r2, #31
 800188a:	d4f6      	bmi.n	800187a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800188c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001890:	68e1      	ldr	r1, [r4, #12]
 8001892:	4302      	orrs	r2, r0
 8001894:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001896:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189c:	432a      	orrs	r2, r5
 800189e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a0:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80018a2:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a4:	4302      	orrs	r2, r0
 80018a6:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018a8:	4933      	ldr	r1, [pc, #204]	; (8001978 <HAL_DMA_Init+0x124>)
 80018aa:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ac:	6a25      	ldr	r5, [r4, #32]
 80018ae:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b0:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018b4:	2904      	cmp	r1, #4
 80018b6:	d028      	beq.n	800190a <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018b8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018ba:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018bc:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018c0:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018c2:	b2d8      	uxtb	r0, r3
 80018c4:	4a2d      	ldr	r2, [pc, #180]	; (800197c <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 80018c6:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018c8:	3810      	subs	r0, #16
 80018ca:	fba2 5200 	umull	r5, r2, r2, r0
 80018ce:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018d0:	492b      	ldr	r1, [pc, #172]	; (8001980 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018d6:	5c89      	ldrb	r1, [r1, r2]
 80018d8:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018da:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80018de:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018e0:	bf88      	it	hi
 80018e2:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e4:	223f      	movs	r2, #63	; 0x3f
 80018e6:	408a      	lsls	r2, r1
 80018e8:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ea:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ec:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80018ee:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80018f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80018f6:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018fa:	2220      	movs	r2, #32
 80018fc:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8001902:	4618      	mov	r0, r3
}
 8001904:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001906:	2001      	movs	r0, #1
}
 8001908:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800190a:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 800190e:	4329      	orrs	r1, r5
 8001910:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8001912:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001914:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8001916:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001918:	f021 0107 	bic.w	r1, r1, #7
 800191c:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800191e:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001922:	2d00      	cmp	r5, #0
 8001924:	d0cd      	beq.n	80018c2 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001926:	b178      	cbz	r0, 8001948 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001928:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800192c:	d016      	beq.n	800195c <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800192e:	2a02      	cmp	r2, #2
 8001930:	d903      	bls.n	800193a <HAL_DMA_Init+0xe6>
 8001932:	2a03      	cmp	r2, #3
 8001934:	d1c5      	bne.n	80018c2 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001936:	01ea      	lsls	r2, r5, #7
 8001938:	d5c3      	bpl.n	80018c2 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 800193a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800193c:	2240      	movs	r2, #64	; 0x40
 800193e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001944:	4618      	mov	r0, r3
}
 8001946:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8001948:	2a01      	cmp	r2, #1
 800194a:	d003      	beq.n	8001954 <HAL_DMA_Init+0x100>
 800194c:	f032 0202 	bics.w	r2, r2, #2
 8001950:	d1b7      	bne.n	80018c2 <HAL_DMA_Init+0x6e>
 8001952:	e7f0      	b.n	8001936 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001954:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001958:	d1b3      	bne.n	80018c2 <HAL_DMA_Init+0x6e>
 800195a:	e7ee      	b.n	800193a <HAL_DMA_Init+0xe6>
    switch (tmp)
 800195c:	2a03      	cmp	r2, #3
 800195e:	d8b0      	bhi.n	80018c2 <HAL_DMA_Init+0x6e>
 8001960:	a001      	add	r0, pc, #4	; (adr r0, 8001968 <HAL_DMA_Init+0x114>)
 8001962:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001966:	bf00      	nop
 8001968:	0800193b 	.word	0x0800193b
 800196c:	08001937 	.word	0x08001937
 8001970:	0800193b 	.word	0x0800193b
 8001974:	08001955 	.word	0x08001955
 8001978:	f010803f 	.word	0xf010803f
 800197c:	aaaaaaab 	.word	0xaaaaaaab
 8001980:	0800bad0 	.word	0x0800bad0

08001984 <HAL_DMA_Start_IT>:
{
 8001984:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8001986:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800198c:	2c01      	cmp	r4, #1
 800198e:	d035      	beq.n	80019fc <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001990:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8001994:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001998:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 800199a:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800199e:	d005      	beq.n	80019ac <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80019a0:	2300      	movs	r3, #0
 80019a2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80019a6:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 80019a8:	2002      	movs	r0, #2
}
 80019aa:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ac:	2602      	movs	r6, #2
 80019ae:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019b2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b4:	2600      	movs	r6, #0
 80019b6:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019b8:	6826      	ldr	r6, [r4, #0]
 80019ba:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 80019be:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80019c0:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c2:	6883      	ldr	r3, [r0, #8]
 80019c4:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80019c6:	bf0e      	itee	eq
 80019c8:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80019ca:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80019cc:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ce:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80019d0:	bf08      	it	eq
 80019d2:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d4:	233f      	movs	r3, #63	; 0x3f
 80019d6:	4093      	lsls	r3, r2
 80019d8:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019da:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80019dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019de:	f043 0316 	orr.w	r3, r3, #22
 80019e2:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80019e4:	b11a      	cbz	r2, 80019ee <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80019f6:	6023      	str	r3, [r4, #0]
}
 80019f8:	bc70      	pop	{r4, r5, r6}
 80019fa:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80019fc:	2002      	movs	r0, #2
}
 80019fe:	bc70      	pop	{r4, r5, r6}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <HAL_DMA_Abort>:
{
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a08:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001a0a:	f7ff fead 	bl	8001768 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a0e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d006      	beq.n	8001a24 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
}
 8001a22:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f022 0216 	bic.w	r2, r2, #22
 8001a2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a34:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a38:	4605      	mov	r5, r0
 8001a3a:	b342      	cbz	r2, 8001a8e <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f022 0208 	bic.w	r2, r2, #8
 8001a42:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4c:	e005      	b.n	8001a5a <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4e:	f7ff fe8b 	bl	8001768 <HAL_GetTick>
 8001a52:	1b43      	subs	r3, r0, r5
 8001a54:	2b05      	cmp	r3, #5
 8001a56:	d810      	bhi.n	8001a7a <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f013 0301 	ands.w	r3, r3, #1
 8001a60:	d1f5      	bne.n	8001a4e <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a62:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001a64:	223f      	movs	r2, #63	; 0x3f
 8001a66:	408a      	lsls	r2, r1
  return HAL_OK;
 8001a68:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001a6c:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a6e:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001a70:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001a74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001a78:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001a80:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001a86:	2300      	movs	r3, #0
 8001a88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d1d3      	bne.n	8001a3c <HAL_DMA_Abort+0x38>
 8001a94:	e7d6      	b.n	8001a44 <HAL_DMA_Abort+0x40>
 8001a96:	bf00      	nop

08001a98 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a98:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001aa8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aaa:	2305      	movs	r3, #5
 8001aac:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8001ab6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001ab8:	6013      	str	r3, [r2, #0]
}
 8001aba:	4770      	bx	lr

08001abc <HAL_DMA_IRQHandler>:
{
 8001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abe:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac0:	4a67      	ldr	r2, [pc, #412]	; (8001c60 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac4:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001acc:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ace:	2208      	movs	r2, #8
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	422a      	tst	r2, r5
{
 8001ad4:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad6:	d003      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ad8:	6801      	ldr	r1, [r0, #0]
 8001ada:	6808      	ldr	r0, [r1, #0]
 8001adc:	0740      	lsls	r0, r0, #29
 8001ade:	d478      	bmi.n	8001bd2 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	422a      	tst	r2, r5
 8001ae6:	d003      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ae8:	6821      	ldr	r1, [r4, #0]
 8001aea:	6949      	ldr	r1, [r1, #20]
 8001aec:	0608      	lsls	r0, r1, #24
 8001aee:	d46a      	bmi.n	8001bc6 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	2204      	movs	r2, #4
 8001af2:	409a      	lsls	r2, r3
 8001af4:	422a      	tst	r2, r5
 8001af6:	d003      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001af8:	6821      	ldr	r1, [r4, #0]
 8001afa:	6809      	ldr	r1, [r1, #0]
 8001afc:	0789      	lsls	r1, r1, #30
 8001afe:	d45c      	bmi.n	8001bba <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b00:	2210      	movs	r2, #16
 8001b02:	409a      	lsls	r2, r3
 8001b04:	422a      	tst	r2, r5
 8001b06:	d003      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b08:	6821      	ldr	r1, [r4, #0]
 8001b0a:	6808      	ldr	r0, [r1, #0]
 8001b0c:	0700      	lsls	r0, r0, #28
 8001b0e:	d441      	bmi.n	8001b94 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b10:	2220      	movs	r2, #32
 8001b12:	409a      	lsls	r2, r3
 8001b14:	422a      	tst	r2, r5
 8001b16:	d014      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b18:	6821      	ldr	r1, [r4, #0]
 8001b1a:	6808      	ldr	r0, [r1, #0]
 8001b1c:	06c0      	lsls	r0, r0, #27
 8001b1e:	d510      	bpl.n	8001b42 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b20:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b22:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001b26:	2a05      	cmp	r2, #5
 8001b28:	d063      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b2a:	680b      	ldr	r3, [r1, #0]
 8001b2c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b30:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b32:	d07e      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b34:	0319      	lsls	r1, r3, #12
 8001b36:	f140 8089 	bpl.w	8001c4c <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001b3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b3c:	b10b      	cbz	r3, 8001b42 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b44:	b323      	cbz	r3, 8001b90 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b48:	07da      	lsls	r2, r3, #31
 8001b4a:	d51a      	bpl.n	8001b82 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8001b4c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b4e:	4945      	ldr	r1, [pc, #276]	; (8001c64 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b50:	2305      	movs	r3, #5
 8001b52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001b56:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b58:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b60:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e002      	b.n	8001b6c <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b66:	6813      	ldr	r3, [r2, #0]
 8001b68:	07db      	lsls	r3, r3, #31
 8001b6a:	d504      	bpl.n	8001b76 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001b6c:	9b01      	ldr	r3, [sp, #4]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	42b3      	cmp	r3, r6
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	d9f7      	bls.n	8001b66 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8001b76:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001b78:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001b7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001b82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b84:	b123      	cbz	r3, 8001b90 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001b86:	4620      	mov	r0, r4
}
 8001b88:	b003      	add	sp, #12
 8001b8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001b8e:	4718      	bx	r3
}
 8001b90:	b003      	add	sp, #12
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b94:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b96:	680a      	ldr	r2, [r1, #0]
 8001b98:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b9c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b9e:	d122      	bne.n	8001be6 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ba0:	05d2      	lsls	r2, r2, #23
 8001ba2:	d403      	bmi.n	8001bac <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba4:	680a      	ldr	r2, [r1, #0]
 8001ba6:	f022 0208 	bic.w	r2, r2, #8
 8001baa:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001bac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d0ae      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001bb8:	e7aa      	b.n	8001b10 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bba:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bbc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001bbe:	f042 0204 	orr.w	r2, r2, #4
 8001bc2:	6562      	str	r2, [r4, #84]	; 0x54
 8001bc4:	e79c      	b.n	8001b00 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bc6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bc8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001bca:	f042 0202 	orr.w	r2, r2, #2
 8001bce:	6562      	str	r2, [r4, #84]	; 0x54
 8001bd0:	e78e      	b.n	8001af0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bd2:	6808      	ldr	r0, [r1, #0]
 8001bd4:	f020 0004 	bic.w	r0, r0, #4
 8001bd8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bda:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bdc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	6562      	str	r2, [r4, #84]	; 0x54
 8001be4:	e77c      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be6:	0311      	lsls	r1, r2, #12
 8001be8:	d5e0      	bpl.n	8001bac <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001bec:	2a00      	cmp	r2, #0
 8001bee:	d1e0      	bne.n	8001bb2 <HAL_DMA_IRQHandler+0xf6>
 8001bf0:	e78e      	b.n	8001b10 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf2:	680a      	ldr	r2, [r1, #0]
 8001bf4:	f022 0216 	bic.w	r2, r2, #22
 8001bf8:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bfa:	694a      	ldr	r2, [r1, #20]
 8001bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c00:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c04:	b33a      	cbz	r2, 8001c56 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c06:	680a      	ldr	r2, [r1, #0]
 8001c08:	f022 0208 	bic.w	r2, r2, #8
 8001c0c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0e:	223f      	movs	r2, #63	; 0x3f
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8001c14:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c16:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001c18:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001c1a:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001c20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001c24:	2900      	cmp	r1, #0
 8001c26:	d0b3      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001c28:	4620      	mov	r0, r4
}
 8001c2a:	b003      	add	sp, #12
 8001c2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8001c30:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c32:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001c36:	d180      	bne.n	8001b3a <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c38:	680a      	ldr	r2, [r1, #0]
 8001c3a:	f022 0210 	bic.w	r2, r2, #16
 8001c3e:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001c40:	2201      	movs	r2, #1
 8001c42:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001c46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001c4a:	e776      	b.n	8001b3a <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001c4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f47f af75 	bne.w	8001b3e <HAL_DMA_IRQHandler+0x82>
 8001c54:	e775      	b.n	8001b42 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c56:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	d1d4      	bne.n	8001c06 <HAL_DMA_IRQHandler+0x14a>
 8001c5c:	e7d7      	b.n	8001c0e <HAL_DMA_IRQHandler+0x152>
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000
 8001c64:	1b4e81b5 	.word	0x1b4e81b5

08001c68 <HAL_DMA_GetState>:
  return hdma->State;
 8001c68:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c74:	2200      	movs	r2, #0
 8001c76:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c78:	4e71      	ldr	r6, [pc, #452]	; (8001e40 <HAL_GPIO_Init+0x1d0>)
{
 8001c7a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7c:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8001c7e:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4689      	mov	r9, r1
 8001c84:	e004      	b.n	8001c90 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	3301      	adds	r3, #1
 8001c88:	2b10      	cmp	r3, #16
 8001c8a:	f102 0202 	add.w	r2, r2, #2
 8001c8e:	d079      	beq.n	8001d84 <HAL_GPIO_Init+0x114>
    ioposition = 0x01U << position;
 8001c90:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c94:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001c98:	43a1      	bics	r1, r4
 8001c9a:	d1f4      	bne.n	8001c86 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001ca0:	f00c 0103 	and.w	r1, ip, #3
 8001ca4:	1e4d      	subs	r5, r1, #1
 8001ca6:	2d01      	cmp	r5, #1
 8001ca8:	d96f      	bls.n	8001d8a <HAL_GPIO_Init+0x11a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001caa:	2903      	cmp	r1, #3
 8001cac:	f040 80b0 	bne.w	8001e10 <HAL_GPIO_Init+0x1a0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb0:	4091      	lsls	r1, r2
 8001cb2:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001cb4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb8:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cba:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001cbe:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc0:	d0e1      	beq.n	8001c86 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4d60      	ldr	r5, [pc, #384]	; (8001e44 <HAL_GPIO_Init+0x1d4>)
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	9103      	str	r1, [sp, #12]
 8001cc8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001cca:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001cce:	6469      	str	r1, [r5, #68]	; 0x44
 8001cd0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001cd2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001cd6:	9103      	str	r1, [sp, #12]
 8001cd8:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cda:	f023 0103 	bic.w	r1, r3, #3
 8001cde:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001ce2:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce6:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cea:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cec:	00bf      	lsls	r7, r7, #2
 8001cee:	f04f 0e0f 	mov.w	lr, #15
 8001cf2:	fa0e fe07 	lsl.w	lr, lr, r7
 8001cf6:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	4d53      	ldr	r5, [pc, #332]	; (8001e48 <HAL_GPIO_Init+0x1d8>)
 8001cfc:	42a8      	cmp	r0, r5
 8001cfe:	d017      	beq.n	8001d30 <HAL_GPIO_Init+0xc0>
 8001d00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d04:	42a8      	cmp	r0, r5
 8001d06:	f000 8087 	beq.w	8001e18 <HAL_GPIO_Init+0x1a8>
 8001d0a:	4d50      	ldr	r5, [pc, #320]	; (8001e4c <HAL_GPIO_Init+0x1dc>)
 8001d0c:	42a8      	cmp	r0, r5
 8001d0e:	f000 8088 	beq.w	8001e22 <HAL_GPIO_Init+0x1b2>
 8001d12:	4d4f      	ldr	r5, [pc, #316]	; (8001e50 <HAL_GPIO_Init+0x1e0>)
 8001d14:	42a8      	cmp	r0, r5
 8001d16:	f000 808b 	beq.w	8001e30 <HAL_GPIO_Init+0x1c0>
 8001d1a:	4d4e      	ldr	r5, [pc, #312]	; (8001e54 <HAL_GPIO_Init+0x1e4>)
 8001d1c:	42a8      	cmp	r0, r5
 8001d1e:	bf0c      	ite	eq
 8001d20:	f04f 0e04 	moveq.w	lr, #4
 8001d24:	f04f 0e07 	movne.w	lr, #7
 8001d28:	fa0e f707 	lsl.w	r7, lr, r7
 8001d2c:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d30:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8001d34:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3a:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	bf0c      	ite	eq
 8001d40:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8001d42:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8001d46:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001d48:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d4a:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	bf0c      	ite	eq
 8001d50:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8001d52:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 8001d56:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 8001d58:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5a:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	bf0c      	ite	eq
 8001d60:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8001d62:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 8001d66:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d68:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d6a:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001d72:	bf0c      	ite	eq
 8001d74:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8001d76:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8001d7c:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	f102 0202 	add.w	r2, r2, #2
 8001d82:	d185      	bne.n	8001c90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d84:	b005      	add	sp, #20
 8001d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8a:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8001d8e:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d92:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d96:	2503      	movs	r5, #3
 8001d98:	fa05 f802 	lsl.w	r8, r5, r2
 8001d9c:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001da4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001da6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dac:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001db0:	409f      	lsls	r7, r3
 8001db2:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db6:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 8001dba:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001dbc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dbe:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc2:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001dc6:	4097      	lsls	r7, r2
 8001dc8:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dcc:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8001dce:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd0:	fa01 f102 	lsl.w	r1, r1, r2
 8001dd4:	f47f af6e 	bne.w	8001cb4 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8001dd8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001ddc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de0:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001de4:	f8de 7020 	ldr.w	r7, [lr, #32]
 8001de8:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dea:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dee:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df2:	fa07 f708 	lsl.w	r7, r7, r8
 8001df6:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df8:	270f      	movs	r7, #15
 8001dfa:	fa07 f808 	lsl.w	r8, r7, r8
 8001dfe:	9f00      	ldr	r7, [sp, #0]
 8001e00:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e04:	9f01      	ldr	r7, [sp, #4]
 8001e06:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8001e0a:	f8ce 7020 	str.w	r7, [lr, #32]
 8001e0e:	e751      	b.n	8001cb4 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e10:	2503      	movs	r5, #3
 8001e12:	4095      	lsls	r5, r2
 8001e14:	43ed      	mvns	r5, r5
 8001e16:	e7d1      	b.n	8001dbc <HAL_GPIO_Init+0x14c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e18:	fa0a f707 	lsl.w	r7, sl, r7
 8001e1c:	ea48 0807 	orr.w	r8, r8, r7
 8001e20:	e786      	b.n	8001d30 <HAL_GPIO_Init+0xc0>
 8001e22:	f04f 0e02 	mov.w	lr, #2
 8001e26:	fa0e f707 	lsl.w	r7, lr, r7
 8001e2a:	ea48 0807 	orr.w	r8, r8, r7
 8001e2e:	e77f      	b.n	8001d30 <HAL_GPIO_Init+0xc0>
 8001e30:	f04f 0e03 	mov.w	lr, #3
 8001e34:	fa0e f707 	lsl.w	r7, lr, r7
 8001e38:	ea48 0807 	orr.w	r8, r8, r7
 8001e3c:	e778      	b.n	8001d30 <HAL_GPIO_Init+0xc0>
 8001e3e:	bf00      	nop
 8001e40:	40013c00 	.word	0x40013c00
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	b902      	cbnz	r2, 8001e5c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	0409      	lsls	r1, r1, #16
 8001e5c:	6181      	str	r1, [r0, #24]
  }
}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e60:	2800      	cmp	r0, #0
 8001e62:	f000 80b9 	beq.w	8001fd8 <HAL_I2C_Init+0x178>
{
 8001e66:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8098 	beq.w	8001fa8 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e78:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7a:	2224      	movs	r2, #36	; 0x24
 8001e7c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e98:	f002 f984 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e9c:	6865      	ldr	r5, [r4, #4]
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_I2C_Init+0x17c>)
 8001ea0:	429d      	cmp	r5, r3
 8001ea2:	d84f      	bhi.n	8001f44 <HAL_I2C_Init+0xe4>
 8001ea4:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <HAL_I2C_Init+0x180>)
 8001ea6:	4298      	cmp	r0, r3
 8001ea8:	d97c      	bls.n	8001fa4 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eaa:	4b4e      	ldr	r3, [pc, #312]	; (8001fe4 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eac:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8001eae:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eb2:	1e43      	subs	r3, r0, #1
 8001eb4:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eb8:	6822      	ldr	r2, [r4, #0]
 8001eba:	6851      	ldr	r1, [r2, #4]
 8001ebc:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001ec0:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8001ec4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ec6:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8001ec8:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ecc:	f10c 0c01 	add.w	ip, ip, #1
 8001ed0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001ed4:	ea41 010c 	orr.w	r1, r1, ip
 8001ed8:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eda:	69d1      	ldr	r1, [r2, #28]
 8001edc:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001ee6:	4203      	tst	r3, r0
 8001ee8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001eec:	d161      	bne.n	8001fb2 <HAL_I2C_Init+0x152>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ef4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001ef8:	6811      	ldr	r1, [r2, #0]
 8001efa:	4303      	orrs	r3, r0
 8001efc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f04:	6891      	ldr	r1, [r2, #8]
 8001f06:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001f0a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001f0e:	4303      	orrs	r3, r0
 8001f10:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001f14:	430b      	orrs	r3, r1
 8001f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f18:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001f1c:	68d1      	ldr	r1, [r2, #12]
 8001f1e:	4303      	orrs	r3, r0
 8001f20:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001f24:	430b      	orrs	r3, r1
 8001f26:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2a:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8001f2c:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8001f32:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f34:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 8001f40:	4618      	mov	r0, r3
}
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <HAL_I2C_Init+0x188>)
 8001f46:	4298      	cmp	r0, r3
 8001f48:	d92c      	bls.n	8001fa4 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f4a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f4e:	6851      	ldr	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f50:	4e26      	ldr	r6, [pc, #152]	; (8001fec <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001f52:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f56:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001f5a:	ea41 419c 	orr.w	r1, r1, ip, lsr #18
 8001f5e:	6051      	str	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001f60:	ea4f 439c 	mov.w	r3, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	fba6 6303 	umull	r6, r3, r6, r3
 8001f70:	6a11      	ldr	r1, [r2, #32]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001f78:	3301      	adds	r3, #1
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f7e:	69d1      	ldr	r1, [r2, #28]
 8001f80:	68a3      	ldr	r3, [r4, #8]
 8001f82:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001f86:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001f8a:	b9ab      	cbnz	r3, 8001fb8 <HAL_I2C_Init+0x158>
 8001f8c:	1e43      	subs	r3, r0, #1
 8001f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f92:	fbb3 f3f5 	udiv	r3, r3, r5
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	b1d3      	cbz	r3, 8001fd4 <HAL_I2C_Init+0x174>
 8001f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa2:	e7a5      	b.n	8001ef0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001fa4:	2001      	movs	r0, #1
}
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001fa8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001fac:	f7ff f864 	bl	8001078 <HAL_I2C_MspInit>
 8001fb0:	e762      	b.n	8001e78 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb6:	e79b      	b.n	8001ef0 <HAL_I2C_Init+0x90>
 8001fb8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001fbc:	1e43      	subs	r3, r0, #1
 8001fbe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001fc2:	fbb3 f3f5 	udiv	r3, r3, r5
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	b113      	cbz	r3, 8001fd4 <HAL_I2C_Init+0x174>
 8001fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fd2:	e78d      	b.n	8001ef0 <HAL_I2C_Init+0x90>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e78b      	b.n	8001ef0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
}
 8001fda:	4770      	bx	lr
 8001fdc:	000186a0 	.word	0x000186a0
 8001fe0:	001e847f 	.word	0x001e847f
 8001fe4:	431bde83 	.word	0x431bde83
 8001fe8:	003d08ff 	.word	0x003d08ff
 8001fec:	10624dd3 	.word	0x10624dd3

08001ff0 <HAL_I2C_MasterTxCpltCallback>:
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <HAL_I2C_MasterRxCpltCallback>:
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <HAL_I2C_SlaveTxCpltCallback>:
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop

08001ffc <HAL_I2C_SlaveRxCpltCallback>:
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop

08002004 <HAL_I2C_ListenCpltCallback>:
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop

08002008 <HAL_I2C_MemTxCpltCallback>:
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <I2C_MemoryTransmit_TXE_BTF>:
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800200c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d

  if (hi2c->EventCount == 0U)
 8002010:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002012:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8002014:	b959      	cbnz	r1, 800202e <I2C_MemoryTransmit_TXE_BTF+0x22>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002016:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002018:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800201a:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800201c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800201e:	d00d      	beq.n	800203c <I2C_MemoryTransmit_TXE_BTF+0x30>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002020:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002024:	610a      	str	r2, [r1, #16]

      hi2c->EventCount++;
 8002026:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002028:	3201      	adds	r2, #1
 800202a:	6502      	str	r2, [r0, #80]	; 0x50
 800202c:	4770      	bx	lr
    }
  }
  else if (hi2c->EventCount == 1U)
 800202e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002030:	2901      	cmp	r1, #1
 8002032:	d009      	beq.n	8002048 <I2C_MemoryTransmit_TXE_BTF+0x3c>
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8002034:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002036:	2902      	cmp	r1, #2
 8002038:	d00e      	beq.n	8002058 <I2C_MemoryTransmit_TXE_BTF+0x4c>
 800203a:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8002040:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002042:	3202      	adds	r2, #2
 8002044:	6502      	str	r2, [r0, #80]	; 0x50
 8002046:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002048:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800204a:	6801      	ldr	r1, [r0, #0]
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8002050:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002052:	3201      	adds	r2, #1
 8002054:	6502      	str	r2, [r0, #80]	; 0x50
 8002056:	4770      	bx	lr
 8002058:	b2d2      	uxtb	r2, r2
  {
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800205a:	2a22      	cmp	r2, #34	; 0x22
 800205c:	d01f      	beq.n	800209e <I2C_MemoryTransmit_TXE_BTF+0x92>
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;

      hi2c->EventCount++;
    }
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800205e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002060:	b289      	uxth	r1, r1
 8002062:	b9c1      	cbnz	r1, 8002096 <I2C_MemoryTransmit_TXE_BTF+0x8a>
      hi2c->pBuffPtr++;

      /* Update counter */
      hi2c->XferCount--;
    }
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002064:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002066:	b289      	uxth	r1, r1
 8002068:	2900      	cmp	r1, #0
 800206a:	d1e6      	bne.n	800203a <I2C_MemoryTransmit_TXE_BTF+0x2e>
 800206c:	2a21      	cmp	r2, #33	; 0x21
 800206e:	d1e4      	bne.n	800203a <I2C_MemoryTransmit_TXE_BTF+0x2e>
    {
      /* Generate Stop condition then Call TxCpltCallback() */
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002070:	6802      	ldr	r2, [r0, #0]
{
 8002072:	b510      	push	{r4, lr}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002074:	6854      	ldr	r4, [r2, #4]
 8002076:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800207a:	6054      	str	r4, [r2, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207c:	6814      	ldr	r4, [r2, #0]
 800207e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8002082:	6014      	str	r4, [r2, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;
 8002084:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002086:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002088:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MemTxCpltCallback(hi2c);
#else
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002090:	f7ff ffba 	bl	8002008 <HAL_I2C_MemTxCpltCallback>
  }
  else
  {
    /* Do nothing */
  }
}
 8002094:	bd10      	pop	{r4, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002096:	2a21      	cmp	r2, #33	; 0x21
 8002098:	d00a      	beq.n	80020b0 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	4770      	bx	lr
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800209e:	6801      	ldr	r1, [r0, #0]
 80020a0:	680a      	ldr	r2, [r1, #0]
 80020a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a6:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 80020a8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80020aa:	3201      	adds	r2, #1
 80020ac:	6502      	str	r2, [r0, #80]	; 0x50
 80020ae:	4770      	bx	lr
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80020b2:	6802      	ldr	r2, [r0, #0]
 80020b4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80020b8:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 80020ba:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80020bc:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80020be:	3a01      	subs	r2, #1
 80020c0:	b292      	uxth	r2, r2
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop

080020c8 <HAL_I2C_MemRxCpltCallback>:
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop

080020cc <HAL_I2C_ErrorCallback>:
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop

080020d0 <HAL_I2C_AbortCpltCallback>:
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop

080020d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80020d4:	b570      	push	{r4, r5, r6, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80020d6:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <I2C_DMAAbort+0xec>)
 80020d8:	4a3a      	ldr	r2, [pc, #232]	; (80021c4 <I2C_DMAAbort+0xf0>)
 80020da:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80020dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80020de:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80020e0:	08db      	lsrs	r3, r3, #3
  __IO uint32_t count = 0U;
 80020e2:	2100      	movs	r1, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
  __IO uint32_t count = 0U;
 80020e8:	9101      	str	r1, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80020ea:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020ec:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80020f0:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80020f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020fa:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	e005      	b.n	800210c <I2C_DMAAbort+0x38>
    count--;
 8002100:	9b01      	ldr	r3, [sp, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002106:	6813      	ldr	r3, [r2, #0]
 8002108:	059b      	lsls	r3, r3, #22
 800210a:	d506      	bpl.n	800211a <I2C_DMAAbort+0x46>
    if (count == 0U)
 800210c:	9b01      	ldr	r3, [sp, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f6      	bne.n	8002100 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002112:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002114:	f043 0320 	orr.w	r3, r3, #32
 8002118:	6403      	str	r3, [r0, #64]	; 0x40

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800211a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800211c:	b34c      	cbz	r4, 8002172 <I2C_DMAAbort+0x9e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
  }
  if (hi2c->hdmarx != NULL)
 800211e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002120:	2500      	movs	r5, #0
 8002122:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8002124:	b1f3      	cbz	r3, 8002164 <I2C_DMAAbort+0x90>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002126:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002128:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212a:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 800212e:	6016      	str	r6, [r2, #0]

  hi2c->XferCount = 0U;
 8002130:	8545      	strh	r5, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002132:	6525      	str	r5, [r4, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002134:	2400      	movs	r4, #0
 8002136:	651c      	str	r4, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6013      	str	r3, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002140:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002144:	2b60      	cmp	r3, #96	; 0x60
 8002146:	d02a      	beq.n	800219e <I2C_DMAAbort+0xca>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002148:	f001 0128 	and.w	r1, r1, #40	; 0x28
 800214c:	2928      	cmp	r1, #40	; 0x28
 800214e:	d019      	beq.n	8002184 <I2C_DMAAbort+0xb0>
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002150:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002152:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002154:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800215c:	f7ff ffb6 	bl	80020cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002160:	b002      	add	sp, #8
 8002162:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002164:	6815      	ldr	r5, [r2, #0]
 8002166:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800216a:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 800216c:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 800216e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8002170:	e7e2      	b.n	8002138 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8002172:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002174:	b1f3      	cbz	r3, 80021b4 <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002176:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002178:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800217e:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8002180:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8002182:	e7d7      	b.n	8002134 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8002184:	6813      	ldr	r3, [r2, #0]
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218c:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800218e:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002194:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002196:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002198:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 800219c:	e7de      	b.n	800215c <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800219e:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80021a0:	2220      	movs	r2, #32
 80021a2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80021a6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80021aa:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80021ac:	f7ff ff90 	bl	80020d0 <HAL_I2C_AbortCpltCallback>
}
 80021b0:	b002      	add	sp, #8
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b4:	6814      	ldr	r4, [r2, #0]
 80021b6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80021ba:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 80021bc:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80021be:	e7bb      	b.n	8002138 <I2C_DMAAbort+0x64>
 80021c0:	20000000 	.word	0x20000000
 80021c4:	14f8b589 	.word	0x14f8b589

080021c8 <I2C_ITError>:
{
 80021c8:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021ca:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80021ce:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80021d2:	2b10      	cmp	r3, #16
{
 80021d4:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021d6:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80021d8:	d039      	beq.n	800224e <I2C_ITError+0x86>
 80021da:	b2d9      	uxtb	r1, r3
 80021dc:	2940      	cmp	r1, #64	; 0x40
 80021de:	d036      	beq.n	800224e <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021e0:	f002 0128 	and.w	r1, r2, #40	; 0x28
 80021e4:	2928      	cmp	r1, #40	; 0x28
 80021e6:	d03d      	beq.n	8002264 <I2C_ITError+0x9c>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80021e8:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	0508      	lsls	r0, r1, #20
 80021ee:	d407      	bmi.n	8002200 <I2C_ITError+0x38>
 80021f0:	2a60      	cmp	r2, #96	; 0x60
 80021f2:	d005      	beq.n	8002200 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f6:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002200:	2200      	movs	r2, #0
 8002202:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800220a:	d134      	bne.n	8002276 <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800220c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002210:	2960      	cmp	r1, #96	; 0x60
 8002212:	d075      	beq.n	8002300 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	0650      	lsls	r0, r2, #25
 8002218:	d505      	bpl.n	8002226 <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800221a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002222:	3301      	adds	r3, #1
 8002224:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002226:	4620      	mov	r0, r4
 8002228:	f7ff ff50 	bl	80020cc <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 800222c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800222e:	0719      	lsls	r1, r3, #28
 8002230:	d004      	beq.n	800223c <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	6853      	ldr	r3, [r2, #4]
 8002236:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800223a:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 800223c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002240:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002242:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8002244:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002246:	d501      	bpl.n	800224c <I2C_ITError+0x84>
 8002248:	2b28      	cmp	r3, #40	; 0x28
 800224a:	d02f      	beq.n	80022ac <I2C_ITError+0xe4>
}
 800224c:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800224e:	2a22      	cmp	r2, #34	; 0x22
 8002250:	d1c6      	bne.n	80021e0 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225a:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	0512      	lsls	r2, r2, #20
 8002260:	d5c8      	bpl.n	80021f4 <I2C_ITError+0x2c>
 8002262:	e7cd      	b.n	8002200 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002264:	2300      	movs	r3, #0
 8002266:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002268:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800226a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002274:	d0ca      	beq.n	800220c <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002276:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002278:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800227a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002280:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002284:	2b01      	cmp	r3, #1
 8002286:	d01e      	beq.n	80022c6 <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <I2C_ITError+0x164>)
 800228a:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800228c:	f7ff fc04 	bl	8001a98 <HAL_DMA_Abort_IT>
 8002290:	2800      	cmp	r0, #0
 8002292:	d0cb      	beq.n	800222c <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 8002294:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002296:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002298:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800229a:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80022a8:	4798      	blx	r3
 80022aa:	e7bf      	b.n	800222c <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 80022ac:	2300      	movs	r3, #0
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80022ae:	4920      	ldr	r1, [pc, #128]	; (8002330 <I2C_ITError+0x168>)
 80022b0:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80022b2:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80022b4:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80022b6:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80022b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80022bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80022c0:	f7ff fea0 	bl	8002004 <HAL_I2C_ListenCpltCallback>
}
 80022c4:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <I2C_ITError+0x164>)
 80022ca:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022cc:	f7ff fbe4 	bl	8001a98 <HAL_DMA_Abort_IT>
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d0ab      	beq.n	800222c <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	0651      	lsls	r1, r2, #25
 80022da:	d506      	bpl.n	80022ea <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80022e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80022e4:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 80022e6:	3201      	adds	r2, #1
 80022e8:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80022ea:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80022ee:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80022f4:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80022fc:	4798      	blx	r3
 80022fe:	e795      	b.n	800222c <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8002300:	2120      	movs	r1, #32
 8002302:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002306:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	0652      	lsls	r2, r2, #25
 800230c:	d506      	bpl.n	800231c <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002314:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002316:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 8002318:	3201      	adds	r2, #1
 800231a:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
    HAL_I2C_AbortCpltCallback(hi2c);
 8002322:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8002324:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002326:	f7ff fed3 	bl	80020d0 <HAL_I2C_AbortCpltCallback>
 800232a:	e77f      	b.n	800222c <I2C_ITError+0x64>
 800232c:	080020d5 	.word	0x080020d5
 8002330:	ffff0000 	.word	0xffff0000

08002334 <HAL_I2C_EV_IRQHandler>:
{
 8002334:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002336:	6803      	ldr	r3, [r0, #0]
{
 8002338:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800233a:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800233c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800233e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002342:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002346:	2910      	cmp	r1, #16
{
 8002348:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800234a:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800234c:	fa5f fc81 	uxtb.w	ip, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002350:	d022      	beq.n	8002398 <HAL_I2C_EV_IRQHandler+0x64>
 8002352:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8002356:	d01f      	beq.n	8002398 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002358:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800235a:	2900      	cmp	r1, #0
 800235c:	f000 8094 	beq.w	8002488 <HAL_I2C_EV_IRQHandler+0x154>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002360:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8002362:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002364:	f011 0602 	ands.w	r6, r1, #2
 8002368:	d059      	beq.n	800241e <HAL_I2C_EV_IRQHandler+0xea>
 800236a:	0586      	lsls	r6, r0, #22
 800236c:	d559      	bpl.n	8002422 <HAL_I2C_EV_IRQHandler+0xee>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800236e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002370:	b102      	cbz	r2, 8002374 <HAL_I2C_EV_IRQHandler+0x40>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002372:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002374:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002378:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800237c:	2a28      	cmp	r2, #40	; 0x28
 800237e:	f000 821e 	beq.w	80027be <HAL_I2C_EV_IRQHandler+0x48a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002382:	2200      	movs	r2, #0
 8002384:	920c      	str	r2, [sp, #48]	; 0x30
 8002386:	6959      	ldr	r1, [r3, #20]
 8002388:	910c      	str	r1, [sp, #48]	; 0x30
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	930c      	str	r3, [sp, #48]	; 0x30
 800238e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002390:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8002394:	b00e      	add	sp, #56	; 0x38
 8002396:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002398:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800239a:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800239c:	f011 0f01 	tst.w	r1, #1
 80023a0:	d11a      	bne.n	80023d8 <HAL_I2C_EV_IRQHandler+0xa4>
 80023a2:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 80023a6:	d0f5      	beq.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 80023a8:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 80023ac:	d0f2      	beq.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ae:	070d      	lsls	r5, r1, #28
 80023b0:	d56d      	bpl.n	800248e <HAL_I2C_EV_IRQHandler+0x15a>
 80023b2:	0585      	lsls	r5, r0, #22
 80023b4:	f140 8083 	bpl.w	80024be <HAL_I2C_EV_IRQHandler+0x18a>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80023b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023bc:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80023be:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023c0:	2900      	cmp	r1, #0
 80023c2:	f000 81e3 	beq.w	800278c <HAL_I2C_EV_IRQHandler+0x458>
 80023c6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	f000 81df 	beq.w	800278c <HAL_I2C_EV_IRQHandler+0x458>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	e7dd      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023d8:	0585      	lsls	r5, r0, #22
 80023da:	d56e      	bpl.n	80024ba <HAL_I2C_EV_IRQHandler+0x186>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80023dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023de:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 80023e2:	f000 81e9 	beq.w	80027b8 <HAL_I2C_EV_IRQHandler+0x484>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80023e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023e8:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80023ec:	bf04      	itt	eq
 80023ee:	2208      	moveq	r2, #8
 80023f0:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023f2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80023f6:	2a40      	cmp	r2, #64	; 0x40
 80023f8:	f000 81d7 	beq.w	80027aa <HAL_I2C_EV_IRQHandler+0x476>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023fc:	6922      	ldr	r2, [r4, #16]
 80023fe:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002402:	f000 81b2 	beq.w	800276a <HAL_I2C_EV_IRQHandler+0x436>
      if (hi2c->EventCount == 0U)
 8002406:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002408:	2a00      	cmp	r2, #0
 800240a:	f040 81ef 	bne.w	80027ec <HAL_I2C_EV_IRQHandler+0x4b8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800240e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002410:	11d2      	asrs	r2, r2, #7
 8002412:	f002 0206 	and.w	r2, r2, #6
 8002416:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	e7ba      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800241e:	06cd      	lsls	r5, r1, #27
 8002420:	d47c      	bmi.n	800251c <HAL_I2C_EV_IRQHandler+0x1e8>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002422:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8002426:	2a21      	cmp	r2, #33	; 0x21
 8002428:	f000 80f5 	beq.w	8002616 <HAL_I2C_EV_IRQHandler+0x2e2>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800242c:	064e      	lsls	r6, r1, #25
 800242e:	f140 8132 	bpl.w	8002696 <HAL_I2C_EV_IRQHandler+0x362>
 8002432:	0545      	lsls	r5, r0, #21
 8002434:	f140 812f 	bpl.w	8002696 <HAL_I2C_EV_IRQHandler+0x362>
 8002438:	0749      	lsls	r1, r1, #29
 800243a:	f100 812f 	bmi.w	800269c <HAL_I2C_EV_IRQHandler+0x368>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800243e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002442:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002444:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002446:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8002448:	2a00      	cmp	r2, #0
 800244a:	d0a3      	beq.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8002452:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002454:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002456:	3b01      	subs	r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800245c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800245e:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002460:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8002462:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002464:	2b00      	cmp	r3, #0
 8002466:	d195      	bne.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 8002468:	292a      	cmp	r1, #42	; 0x2a
 800246a:	d193      	bne.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800246c:	6822      	ldr	r2, [r4, #0]
 800246e:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002470:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002472:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002478:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800247a:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800247c:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800247e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002482:	f7ff fdbb 	bl	8001ffc <HAL_I2C_SlaveRxCpltCallback>
 8002486:	e785      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002488:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800248a:	6959      	ldr	r1, [r3, #20]
 800248c:	e76a      	b.n	8002364 <HAL_I2C_EV_IRQHandler+0x30>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800248e:	078d      	lsls	r5, r1, #30
 8002490:	d515      	bpl.n	80024be <HAL_I2C_EV_IRQHandler+0x18a>
 8002492:	0585      	lsls	r5, r0, #22
 8002494:	d513      	bpl.n	80024be <HAL_I2C_EV_IRQHandler+0x18a>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002496:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800249a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800249c:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800249e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80024a2:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80024a4:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024a6:	f000 81b3 	beq.w	8002810 <HAL_I2C_EV_IRQHandler+0x4dc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024aa:	2200      	movs	r2, #0
 80024ac:	920a      	str	r2, [sp, #40]	; 0x28
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	920a      	str	r2, [sp, #40]	; 0x28
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	930a      	str	r3, [sp, #40]	; 0x28
 80024b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024b8:	e76c      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ba:	070d      	lsls	r5, r1, #28
 80024bc:	d5e7      	bpl.n	800248e <HAL_I2C_EV_IRQHandler+0x15a>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80024be:	0776      	lsls	r6, r6, #29
 80024c0:	f140 80f5 	bpl.w	80026ae <HAL_I2C_EV_IRQHandler+0x37a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024c4:	685d      	ldr	r5, [r3, #4]
 80024c6:	052d      	lsls	r5, r5, #20
 80024c8:	f53f af64 	bmi.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024cc:	060e      	lsls	r6, r1, #24
 80024ce:	f140 8115 	bpl.w	80026fc <HAL_I2C_EV_IRQHandler+0x3c8>
 80024d2:	0545      	lsls	r5, r0, #21
 80024d4:	f140 8112 	bpl.w	80026fc <HAL_I2C_EV_IRQHandler+0x3c8>
 80024d8:	074e      	lsls	r6, r1, #29
 80024da:	f100 8112 	bmi.w	8002702 <HAL_I2C_EV_IRQHandler+0x3ce>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024de:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024e2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024e4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024e8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024ea:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024ec:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024ee:	2800      	cmp	r0, #0
 80024f0:	f040 8235 	bne.w	800295e <HAL_I2C_EV_IRQHandler+0x62a>
 80024f4:	2a21      	cmp	r2, #33	; 0x21
 80024f6:	f000 8347 	beq.w	8002b88 <HAL_I2C_EV_IRQHandler+0x854>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80024fa:	2940      	cmp	r1, #64	; 0x40
 80024fc:	f47f af4a 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002500:	2a22      	cmp	r2, #34	; 0x22
 8002502:	f47f af47 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->XferCount == 0U)
 8002506:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002508:	b292      	uxth	r2, r2
 800250a:	2a00      	cmp	r2, #0
 800250c:	f000 8268 	beq.w	80029e0 <HAL_I2C_EV_IRQHandler+0x6ac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002510:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002514:	2a40      	cmp	r2, #64	; 0x40
 8002516:	f040 80b4 	bne.w	8002682 <HAL_I2C_EV_IRQHandler+0x34e>
 800251a:	e0fc      	b.n	8002716 <HAL_I2C_EV_IRQHandler+0x3e2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800251c:	0585      	lsls	r5, r0, #22
 800251e:	d580      	bpl.n	8002422 <HAL_I2C_EV_IRQHandler+0xee>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002520:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800252a:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800252c:	960d      	str	r6, [sp, #52]	; 0x34
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	920d      	str	r2, [sp, #52]	; 0x34
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002548:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800254a:	d521      	bpl.n	8002590 <HAL_I2C_EV_IRQHandler+0x25c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800254c:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002550:	2a22      	cmp	r2, #34	; 0x22
 8002552:	f000 817a 	beq.w	800284a <HAL_I2C_EV_IRQHandler+0x516>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002556:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002558:	6802      	ldr	r2, [r0, #0]
 800255a:	6852      	ldr	r2, [r2, #4]
 800255c:	b292      	uxth	r2, r2
 800255e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002560:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002562:	b292      	uxth	r2, r2
 8002564:	b11a      	cbz	r2, 800256e <HAL_I2C_EV_IRQHandler+0x23a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002566:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002568:	f042 0204 	orr.w	r2, r2, #4
 800256c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002574:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002576:	f7ff fb77 	bl	8001c68 <HAL_DMA_GetState>
 800257a:	2801      	cmp	r0, #1
 800257c:	d008      	beq.n	8002590 <HAL_I2C_EV_IRQHandler+0x25c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800257e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002580:	4b99      	ldr	r3, [pc, #612]	; (80027e8 <HAL_I2C_EV_IRQHandler+0x4b4>)
 8002582:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002584:	f7ff fa88 	bl	8001a98 <HAL_DMA_Abort_IT>
 8002588:	b110      	cbz	r0, 8002590 <HAL_I2C_EV_IRQHandler+0x25c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800258a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800258c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800258e:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8002590:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	b313      	cbz	r3, 80025dc <HAL_I2C_EV_IRQHandler+0x2a8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	0752      	lsls	r2, r2, #29
 800259c:	d50a      	bpl.n	80025b4 <HAL_I2C_EV_IRQHandler+0x280>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80025a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80025a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025a8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80025aa:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 80025ac:	b292      	uxth	r2, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025ae:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 80025b0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025b2:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	0656      	lsls	r6, r2, #25
 80025b8:	d509      	bpl.n	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80025c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80025c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025c4:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80025c6:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80025c8:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80025ca:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80025ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	b11b      	cbz	r3, 80025dc <HAL_I2C_EV_IRQHandler+0x2a8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 80dd 	bne.w	800279e <HAL_I2C_EV_IRQHandler+0x46a>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025e4:	2d2a      	cmp	r5, #42	; 0x2a
 80025e6:	f000 8151 	beq.w	800288c <HAL_I2C_EV_IRQHandler+0x558>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80025ea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80025ee:	2b28      	cmp	r3, #40	; 0x28
 80025f0:	f000 8154 	beq.w	800289c <HAL_I2C_EV_IRQHandler+0x568>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80025f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025f6:	2b22      	cmp	r3, #34	; 0x22
 80025f8:	d002      	beq.n	8002600 <HAL_I2C_EV_IRQHandler+0x2cc>
 80025fa:	2d22      	cmp	r5, #34	; 0x22
 80025fc:	f47f aeca 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002600:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002602:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002604:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002606:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002608:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002610:	f7ff fcf4 	bl	8001ffc <HAL_I2C_SlaveRxCpltCallback>
 8002614:	e6be      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002616:	060d      	lsls	r5, r1, #24
 8002618:	d528      	bpl.n	800266c <HAL_I2C_EV_IRQHandler+0x338>
 800261a:	0546      	lsls	r6, r0, #21
 800261c:	d526      	bpl.n	800266c <HAL_I2C_EV_IRQHandler+0x338>
 800261e:	074d      	lsls	r5, r1, #29
 8002620:	d427      	bmi.n	8002672 <HAL_I2C_EV_IRQHandler+0x33e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002622:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002626:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002628:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800262a:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 800262c:	2900      	cmp	r1, #0
 800262e:	f43f aeb1 	beq.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002632:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002634:	f811 5b01 	ldrb.w	r5, [r1], #1
 8002638:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 800263a:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800263c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800263e:	3901      	subs	r1, #1
 8002640:	b289      	uxth	r1, r1
 8002642:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002644:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002646:	b289      	uxth	r1, r1
 8002648:	2900      	cmp	r1, #0
 800264a:	f47f aea3 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 800264e:	2829      	cmp	r0, #41	; 0x29
 8002650:	f47f aea0 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002654:	6859      	ldr	r1, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002656:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002658:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800265c:	6059      	str	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800265e:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002660:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002662:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002666:	f7ff fcc7 	bl	8001ff8 <HAL_I2C_SlaveTxCpltCallback>
 800266a:	e693      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800266c:	0749      	lsls	r1, r1, #29
 800266e:	f57f ae91 	bpl.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 8002672:	0582      	lsls	r2, r0, #22
 8002674:	f57f ae8e 	bpl.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
  if (hi2c->XferCount != 0U)
 8002678:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800267a:	b292      	uxth	r2, r2
 800267c:	2a00      	cmp	r2, #0
 800267e:	f43f ae89 	beq.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002682:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002684:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002688:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 800268a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800268c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800268e:	3b01      	subs	r3, #1
 8002690:	b29b      	uxth	r3, r3
 8002692:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002694:	e67e      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002696:	074a      	lsls	r2, r1, #29
 8002698:	f57f ae7c 	bpl.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 800269c:	0586      	lsls	r6, r0, #22
 800269e:	f57f ae79 	bpl.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
  if (hi2c->XferCount != 0U)
 80026a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026a4:	b292      	uxth	r2, r2
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	f43f ae74 	beq.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 80026ac:	e01b      	b.n	80026e6 <HAL_I2C_EV_IRQHandler+0x3b2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	0512      	lsls	r2, r2, #20
 80026b2:	f53f ae6f 	bmi.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026b6:	064e      	lsls	r6, r1, #25
 80026b8:	d433      	bmi.n	8002722 <HAL_I2C_EV_IRQHandler+0x3ee>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ba:	0749      	lsls	r1, r1, #29
 80026bc:	f57f ae6a 	bpl.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 80026c0:	0582      	lsls	r2, r0, #22
 80026c2:	f57f ae67 	bpl.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80026c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026ca:	b292      	uxth	r2, r2
 80026cc:	2a04      	cmp	r2, #4
 80026ce:	f000 8113 	beq.w	80028f8 <HAL_I2C_EV_IRQHandler+0x5c4>
  else if (hi2c->XferCount == 3U)
 80026d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026d4:	b292      	uxth	r2, r2
 80026d6:	2a03      	cmp	r2, #3
 80026d8:	f000 8153 	beq.w	8002982 <HAL_I2C_EV_IRQHandler+0x64e>
  else if (hi2c->XferCount == 2U)
 80026dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026de:	b292      	uxth	r2, r2
 80026e0:	2a02      	cmp	r2, #2
 80026e2:	f000 8182 	beq.w	80029ea <HAL_I2C_EV_IRQHandler+0x6b6>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80026ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80026ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80026f0:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 80026f2:	3201      	adds	r2, #1
    hi2c->XferCount--;
 80026f4:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80026f6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80026f8:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 80026fa:	e64b      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026fc:	074d      	lsls	r5, r1, #29
 80026fe:	f57f ae49 	bpl.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 8002702:	0581      	lsls	r1, r0, #22
 8002704:	f57f ae46 	bpl.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002708:	2a21      	cmp	r2, #33	; 0x21
 800270a:	f000 80fd 	beq.w	8002908 <HAL_I2C_EV_IRQHandler+0x5d4>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800270e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8002712:	f47f ae3f 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002716:	4620      	mov	r0, r4
}
 8002718:	b00e      	add	sp, #56	; 0x38
 800271a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800271e:	f7ff bc75 	b.w	800200c <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002722:	0545      	lsls	r5, r0, #21
 8002724:	d5c9      	bpl.n	80026ba <HAL_I2C_EV_IRQHandler+0x386>
 8002726:	f011 0104 	ands.w	r1, r1, #4
 800272a:	d1c9      	bne.n	80026c0 <HAL_I2C_EV_IRQHandler+0x38c>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800272c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002730:	2a22      	cmp	r2, #34	; 0x22
 8002732:	f47f ae2f 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    tmp = hi2c->XferCount;
 8002736:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002738:	b292      	uxth	r2, r2
    if (tmp > 3U)
 800273a:	2a03      	cmp	r2, #3
 800273c:	f240 81ec 	bls.w	8002b18 <HAL_I2C_EV_IRQHandler+0x7e4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002740:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002746:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002748:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800274a:	3b01      	subs	r3, #1
 800274c:	b29b      	uxth	r3, r3
 800274e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002750:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002754:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8002756:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8002758:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 800275a:	f47f ae1b 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800275e:	6822      	ldr	r2, [r4, #0]
 8002760:	6853      	ldr	r3, [r2, #4]
 8002762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002766:	6053      	str	r3, [r2, #4]
 8002768:	e614      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800276a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800276e:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002770:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002772:	bf16      	itet	ne
 8002774:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002778:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800277c:	b2d2      	uxtbne	r2, r2
 800277e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002780:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002782:	b11a      	cbz	r2, 800278c <HAL_I2C_EV_IRQHandler+0x458>
 8002784:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002786:	2a00      	cmp	r2, #0
 8002788:	f47f ae21 	bne.w	80023ce <HAL_I2C_EV_IRQHandler+0x9a>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800278c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800278e:	2a00      	cmp	r2, #0
 8002790:	f43f ae00 	beq.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 8002794:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002796:	2a00      	cmp	r2, #0
 8002798:	f47f ae19 	bne.w	80023ce <HAL_I2C_EV_IRQHandler+0x9a>
 800279c:	e5fa      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    I2C_ITError(hi2c);
 800279e:	4620      	mov	r0, r4
}
 80027a0:	b00e      	add	sp, #56	; 0x38
 80027a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 80027a6:	f7ff bd0f 	b.w	80021c8 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 80027aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80027ac:	bb52      	cbnz	r2, 8002804 <HAL_I2C_EV_IRQHandler+0x4d0>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80027b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	e5ed      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80027b8:	2201      	movs	r2, #1
 80027ba:	62e2      	str	r2, [r4, #44]	; 0x2c
 80027bc:	e619      	b.n	80023f2 <HAL_I2C_EV_IRQHandler+0xbe>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c4:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80027c6:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80027c8:	f085 0104 	eor.w	r1, r5, #4
    __HAL_UNLOCK(hi2c);
 80027cc:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80027d0:	bf54      	ite	pl
 80027d2:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80027d4:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80027d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80027da:	f3c1 0180 	ubfx	r1, r1, #2, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80027de:	4620      	mov	r0, r4
 80027e0:	f7ff fc0e 	bl	8002000 <HAL_I2C_AddrCallback>
 80027e4:	e5d6      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 80027e6:	bf00      	nop
 80027e8:	080020d5 	.word	0x080020d5
      else if (hi2c->EventCount == 1U)
 80027ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	f47f add0 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80027f6:	11d2      	asrs	r2, r2, #7
 80027f8:	f002 0206 	and.w	r2, r2, #6
 80027fc:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	e5c7      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002804:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	611a      	str	r2, [r3, #16]
 800280e:	e5c1      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002810:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002812:	b911      	cbnz	r1, 800281a <HAL_I2C_EV_IRQHandler+0x4e6>
 8002814:	2a40      	cmp	r2, #64	; 0x40
 8002816:	f000 809b 	beq.w	8002950 <HAL_I2C_EV_IRQHandler+0x61c>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800281a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800281c:	b922      	cbnz	r2, 8002828 <HAL_I2C_EV_IRQHandler+0x4f4>
 800281e:	6921      	ldr	r1, [r4, #16]
 8002820:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8002824:	f000 809f 	beq.w	8002966 <HAL_I2C_EV_IRQHandler+0x632>
      if (hi2c->XferCount == 0U)
 8002828:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800282a:	b292      	uxth	r2, r2
 800282c:	2a00      	cmp	r2, #0
 800282e:	d142      	bne.n	80028b6 <HAL_I2C_EV_IRQHandler+0x582>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002830:	9203      	str	r2, [sp, #12]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	9203      	str	r2, [sp, #12]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	9203      	str	r2, [sp, #12]
 800283a:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	6523      	str	r3, [r4, #80]	; 0x50
 8002848:	e5a4      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800284a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800284c:	6802      	ldr	r2, [r0, #0]
 800284e:	6852      	ldr	r2, [r2, #4]
 8002850:	b292      	uxth	r2, r2
 8002852:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002854:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002856:	b292      	uxth	r2, r2
 8002858:	b11a      	cbz	r2, 8002862 <HAL_I2C_EV_IRQHandler+0x52e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800285a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800285c:	f042 0204 	orr.w	r2, r2, #4
 8002860:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002868:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800286a:	f7ff f9fd 	bl	8001c68 <HAL_DMA_GetState>
 800286e:	2801      	cmp	r0, #1
 8002870:	f43f ae8e 	beq.w	8002590 <HAL_I2C_EV_IRQHandler+0x25c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002874:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002876:	4b98      	ldr	r3, [pc, #608]	; (8002ad8 <HAL_I2C_EV_IRQHandler+0x7a4>)
 8002878:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800287a:	f7ff f90d 	bl	8001a98 <HAL_DMA_Abort_IT>
 800287e:	2800      	cmp	r0, #0
 8002880:	f43f ae86 	beq.w	8002590 <HAL_I2C_EV_IRQHandler+0x25c>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002884:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002886:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002888:	4798      	blx	r3
 800288a:	e681      	b.n	8002590 <HAL_I2C_EV_IRQHandler+0x25c>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800288c:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 800288e:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002890:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002892:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002896:	f7ff fbb1 	bl	8001ffc <HAL_I2C_SlaveRxCpltCallback>
 800289a:	e6a6      	b.n	80025ea <HAL_I2C_EV_IRQHandler+0x2b6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800289c:	2300      	movs	r3, #0
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800289e:	498f      	ldr	r1, [pc, #572]	; (8002adc <HAL_I2C_EV_IRQHandler+0x7a8>)
 80028a0:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80028a4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 80028a6:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 80028a8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80028b0:	f7ff fba8 	bl	8002004 <HAL_I2C_ListenCpltCallback>
 80028b4:	e56e      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      else if (hi2c->XferCount == 1U)
 80028b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028b8:	b292      	uxth	r2, r2
 80028ba:	2a01      	cmp	r2, #1
 80028bc:	d070      	beq.n	80029a0 <HAL_I2C_EV_IRQHandler+0x66c>
      else if (hi2c->XferCount == 2U)
 80028be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028c0:	b292      	uxth	r2, r2
 80028c2:	2a02      	cmp	r2, #2
 80028c4:	f000 80d6 	beq.w	8002a74 <HAL_I2C_EV_IRQHandler+0x740>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028ce:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	0511      	lsls	r1, r2, #20
 80028d4:	d508      	bpl.n	80028e8 <HAL_I2C_EV_IRQHandler+0x5b4>
 80028d6:	2820      	cmp	r0, #32
 80028d8:	f200 80f8 	bhi.w	8002acc <HAL_I2C_EV_IRQHandler+0x798>
 80028dc:	2807      	cmp	r0, #7
 80028de:	f200 80ea 	bhi.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x782>
 80028e2:	2801      	cmp	r0, #1
 80028e4:	f000 80ed 	beq.w	8002ac2 <HAL_I2C_EV_IRQHandler+0x78e>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e8:	2200      	movs	r2, #0
 80028ea:	9209      	str	r2, [sp, #36]	; 0x24
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	9209      	str	r2, [sp, #36]	; 0x24
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	9309      	str	r3, [sp, #36]	; 0x24
 80028f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028f6:	e7a5      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x510>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028f8:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002900:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002906:	e6f1      	b.n	80026ec <HAL_I2C_EV_IRQHandler+0x3b8>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002908:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800290a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800290e:	2a21      	cmp	r2, #33	; 0x21
 8002910:	f47f ad40 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->XferCount != 0U)
 8002914:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002916:	b292      	uxth	r2, r2
 8002918:	2a00      	cmp	r2, #0
 800291a:	f47f aeb2 	bne.w	8002682 <HAL_I2C_EV_IRQHandler+0x34e>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800291e:	2908      	cmp	r1, #8
 8002920:	f000 80e2 	beq.w	8002ae8 <HAL_I2C_EV_IRQHandler+0x7b4>
 8002924:	2920      	cmp	r1, #32
 8002926:	f000 80df 	beq.w	8002ae8 <HAL_I2C_EV_IRQHandler+0x7b4>
 800292a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800292e:	f000 80db 	beq.w	8002ae8 <HAL_I2C_EV_IRQHandler+0x7b4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002938:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800293a:	2011      	movs	r0, #17
        hi2c->State = HAL_I2C_STATE_READY;
 800293c:	2320      	movs	r3, #32
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800293e:	6320      	str	r0, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002944:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002946:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800294a:	f7ff fb51 	bl	8001ff0 <HAL_I2C_MasterTxCpltCallback>
 800294e:	e521      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	9101      	str	r1, [sp, #4]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	9201      	str	r2, [sp, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	9b01      	ldr	r3, [sp, #4]
 800295c:	e51a      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800295e:	2a21      	cmp	r2, #33	; 0x21
 8002960:	f43f add1 	beq.w	8002506 <HAL_I2C_EV_IRQHandler+0x1d2>
 8002964:	e5c9      	b.n	80024fa <HAL_I2C_EV_IRQHandler+0x1c6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	9202      	str	r2, [sp, #8]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	9202      	str	r2, [sp, #8]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	9202      	str	r2, [sp, #8]
 8002970:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002978:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800297a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800297c:	3301      	adds	r3, #1
 800297e:	6523      	str	r3, [r4, #80]	; 0x50
 8002980:	e508      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002982:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002984:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800298c:	f43f aeab 	beq.w	80026e6 <HAL_I2C_EV_IRQHandler+0x3b2>
 8002990:	2902      	cmp	r1, #2
 8002992:	f43f aea8 	beq.w	80026e6 <HAL_I2C_EV_IRQHandler+0x3b2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e6a2      	b.n	80026e6 <HAL_I2C_EV_IRQHandler+0x3b2>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80029a0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80029a4:	f000 811b 	beq.w	8002bde <HAL_I2C_EV_IRQHandler+0x8aa>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029a8:	2808      	cmp	r0, #8
 80029aa:	f000 8108 	beq.w	8002bbe <HAL_I2C_EV_IRQHandler+0x88a>
 80029ae:	2820      	cmp	r0, #32
 80029b0:	f000 8105 	beq.w	8002bbe <HAL_I2C_EV_IRQHandler+0x88a>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80029b4:	2d12      	cmp	r5, #18
 80029b6:	f000 80ff 	beq.w	8002bb8 <HAL_I2C_EV_IRQHandler+0x884>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029ba:	2810      	cmp	r0, #16
 80029bc:	d804      	bhi.n	80029c8 <HAL_I2C_EV_IRQHandler+0x694>
 80029be:	4a48      	ldr	r2, [pc, #288]	; (8002ae0 <HAL_I2C_EV_IRQHandler+0x7ac>)
 80029c0:	40c2      	lsrs	r2, r0
 80029c2:	07d1      	lsls	r1, r2, #31
 80029c4:	f100 814c 	bmi.w	8002c60 <HAL_I2C_EV_IRQHandler+0x92c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ce:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d0:	2200      	movs	r2, #0
 80029d2:	9206      	str	r2, [sp, #24]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	9206      	str	r2, [sp, #24]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	9306      	str	r3, [sp, #24]
 80029dc:	9b06      	ldr	r3, [sp, #24]
 80029de:	e731      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x510>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	e4d4      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029ea:	3901      	subs	r1, #1
 80029ec:	290f      	cmp	r1, #15
 80029ee:	d809      	bhi.n	8002a04 <HAL_I2C_EV_IRQHandler+0x6d0>
 80029f0:	e8df f001 	tbb	[pc, r1]
 80029f4:	3608363b 	.word	0x3608363b
 80029f8:	08080808 	.word	0x08080808
 80029fc:	08080808 	.word	0x08080808
 8002a00:	3b080808 	.word	0x3b080808
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8002a12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002a14:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a16:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8002a20:	1c51      	adds	r1, r2, #1
 8002a22:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a24:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8002a26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a28:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8002a2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a32:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8002a34:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 8002a3c:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a3e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a44:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002a48:	2b40      	cmp	r3, #64	; 0x40
 8002a4a:	f000 80f5 	beq.w	8002c38 <HAL_I2C_EV_IRQHandler+0x904>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4e:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a50:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a52:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a56:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a58:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a5a:	f7ff facb 	bl	8001ff4 <HAL_I2C_MasterRxCpltCallback>
 8002a5e:	e499      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e7d0      	b.n	8002a0c <HAL_I2C_EV_IRQHandler+0x6d8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e7cb      	b.n	8002a0c <HAL_I2C_EV_IRQHandler+0x6d8>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a74:	2810      	cmp	r0, #16
 8002a76:	d804      	bhi.n	8002a82 <HAL_I2C_EV_IRQHandler+0x74e>
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <HAL_I2C_EV_IRQHandler+0x7ac>)
 8002a7a:	40c2      	lsrs	r2, r0
 8002a7c:	07d2      	lsls	r2, r2, #31
 8002a7e:	f100 80c2 	bmi.w	8002c06 <HAL_I2C_EV_IRQHandler+0x8d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a88:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a90:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	0516      	lsls	r6, r2, #20
 8002a96:	d506      	bpl.n	8002aa6 <HAL_I2C_EV_IRQHandler+0x772>
 8002a98:	2820      	cmp	r0, #32
 8002a9a:	f240 80bc 	bls.w	8002c16 <HAL_I2C_EV_IRQHandler+0x8e2>
 8002a9e:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002aa2:	f000 80bd 	beq.w	8002c20 <HAL_I2C_EV_IRQHandler+0x8ec>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	9208      	str	r2, [sp, #32]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	9208      	str	r2, [sp, #32]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	9308      	str	r3, [sp, #32]
 8002ab2:	9b08      	ldr	r3, [sp, #32]
 8002ab4:	e6c6      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x510>
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <HAL_I2C_EV_IRQHandler+0x7b0>)
 8002ab8:	3808      	subs	r0, #8
 8002aba:	40c2      	lsrs	r2, r0
 8002abc:	07d2      	lsls	r2, r2, #31
 8002abe:	f57f af13 	bpl.w	80028e8 <HAL_I2C_EV_IRQHandler+0x5b4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	e70d      	b.n	80028e8 <HAL_I2C_EV_IRQHandler+0x5b4>
 8002acc:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002ad0:	f47f af0a 	bne.w	80028e8 <HAL_I2C_EV_IRQHandler+0x5b4>
 8002ad4:	e7f5      	b.n	8002ac2 <HAL_I2C_EV_IRQHandler+0x78e>
 8002ad6:	bf00      	nop
 8002ad8:	080020d5 	.word	0x080020d5
 8002adc:	ffff0000 	.word	0xffff0000
 8002ae0:	00010014 	.word	0x00010014
 8002ae4:	01000101 	.word	0x01000101
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002aee:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af0:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002af2:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002afa:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002afc:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b02:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b0c:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b0e:	f47f af1c 	bne.w	800294a <HAL_I2C_EV_IRQHandler+0x616>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b12:	f7ff fa79 	bl	8002008 <HAL_I2C_MemTxCpltCallback>
 8002b16:	e43d      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002b18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002b1a:	2802      	cmp	r0, #2
 8002b1c:	f43f af60 	beq.w	80029e0 <HAL_I2C_EV_IRQHandler+0x6ac>
 8002b20:	2a01      	cmp	r2, #1
 8002b22:	f63f af5d 	bhi.w	80029e0 <HAL_I2C_EV_IRQHandler+0x6ac>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b26:	4a62      	ldr	r2, [pc, #392]	; (8002cb0 <HAL_I2C_EV_IRQHandler+0x97c>)
  __IO uint32_t count = 0U;
 8002b28:	910b      	str	r1, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8002b30:	fbb2 f2f0 	udiv	r2, r2, r0
 8002b34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b38:	920b      	str	r2, [sp, #44]	; 0x2c
 8002b3a:	e004      	b.n	8002b46 <HAL_I2C_EV_IRQHandler+0x812>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8002b42:	f000 8092 	beq.w	8002c6a <HAL_I2C_EV_IRQHandler+0x936>
    count--;
 8002b46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8002b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b4e:	2900      	cmp	r1, #0
 8002b50:	d1f4      	bne.n	8002b3c <HAL_I2C_EV_IRQHandler+0x808>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b52:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b54:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b62:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8002b68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8002b6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002b6c:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8002b6e:	3201      	adds	r2, #1
        hi2c->XferCount--;
 8002b70:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8002b74:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8002b76:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8002b7c:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002b82:	f7ff faa3 	bl	80020cc <HAL_I2C_ErrorCallback>
 8002b86:	e405      	b.n	8002394 <HAL_I2C_EV_IRQHandler+0x60>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b88:	2d08      	cmp	r5, #8
 8002b8a:	d0ad      	beq.n	8002ae8 <HAL_I2C_EV_IRQHandler+0x7b4>
 8002b8c:	2d20      	cmp	r5, #32
 8002b8e:	d0ab      	beq.n	8002ae8 <HAL_I2C_EV_IRQHandler+0x7b4>
 8002b90:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8002b94:	d0a8      	beq.n	8002ae8 <HAL_I2C_EV_IRQHandler+0x7b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b9c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b9e:	2011      	movs	r0, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	2100      	movs	r1, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	2320      	movs	r3, #32
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ba4:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002baa:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bb0:	f7ff fa1e 	bl	8001ff0 <HAL_I2C_MasterTxCpltCallback>
 8002bb4:	f7ff bbee 	b.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002bb8:	2801      	cmp	r0, #1
 8002bba:	f43f af05 	beq.w	80029c8 <HAL_I2C_EV_IRQHandler+0x694>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbe:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc0:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc6:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc8:	9107      	str	r1, [sp, #28]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	9207      	str	r2, [sp, #28]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	9207      	str	r2, [sp, #28]
 8002bd2:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e632      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x510>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be4:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002bec:	d02d      	beq.n	8002c4a <HAL_I2C_EV_IRQHandler+0x916>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf0:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf6:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf8:	9104      	str	r1, [sp, #16]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	9204      	str	r2, [sp, #16]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	9304      	str	r3, [sp, #16]
 8002c02:	9b04      	ldr	r3, [sp, #16]
 8002c04:	e61e      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x510>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	0515      	lsls	r5, r2, #20
 8002c12:	f57f af48 	bpl.w	8002aa6 <HAL_I2C_EV_IRQHandler+0x772>
 8002c16:	2807      	cmp	r0, #7
 8002c18:	d807      	bhi.n	8002c2a <HAL_I2C_EV_IRQHandler+0x8f6>
 8002c1a:	2801      	cmp	r0, #1
 8002c1c:	f47f af43 	bne.w	8002aa6 <HAL_I2C_EV_IRQHandler+0x772>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	e73d      	b.n	8002aa6 <HAL_I2C_EV_IRQHandler+0x772>
 8002c2a:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <HAL_I2C_EV_IRQHandler+0x980>)
 8002c2c:	3808      	subs	r0, #8
 8002c2e:	40c2      	lsrs	r2, r0
 8002c30:	07d0      	lsls	r0, r2, #31
 8002c32:	f57f af38 	bpl.w	8002aa6 <HAL_I2C_EV_IRQHandler+0x772>
 8002c36:	e7f3      	b.n	8002c20 <HAL_I2C_EV_IRQHandler+0x8ec>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c3e:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c40:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c42:	f7ff fa41 	bl	80020c8 <HAL_I2C_MemRxCpltCallback>
 8002c46:	f7ff bba5 	b.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4a:	9205      	str	r2, [sp, #20]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	9205      	str	r2, [sp, #20]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	9205      	str	r2, [sp, #20]
 8002c54:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e5f1      	b.n	8002844 <HAL_I2C_EV_IRQHandler+0x510>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e6b2      	b.n	80029d0 <HAL_I2C_EV_IRQHandler+0x69c>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002c72:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002c7a:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8002c80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c82:	3b01      	subs	r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	2120      	movs	r1, #32
        hi2c->XferCount--;
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->pBuffPtr++;
 8002c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c90:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8002c94:	3301      	adds	r3, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c96:	2940      	cmp	r1, #64	; 0x40
        hi2c->pBuffPtr++;
 8002c98:	6263      	str	r3, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c9a:	f47f aed9 	bne.w	8002a50 <HAL_I2C_EV_IRQHandler+0x71c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002ca2:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ca4:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002ca6:	f7ff fa0f 	bl	80020c8 <HAL_I2C_MemRxCpltCallback>
 8002caa:	f7ff bb73 	b.w	8002394 <HAL_I2C_EV_IRQHandler+0x60>
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	01000101 	.word	0x01000101

08002cb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cba:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	f000 8085 	beq.w	8002dcc <HAL_PCD_Init+0x114>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cc2:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8002cc6:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cc8:	4605      	mov	r5, r0
 8002cca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d076      	beq.n	8002dc0 <HAL_PCD_Init+0x108>
 8002cd2:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cda:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cdc:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cde:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8002ce2:	bf08      	it	eq
 8002ce4:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002ce6:	f002 f879 	bl	8004ddc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cea:	f856 eb10 	ldr.w	lr, [r6], #16
 8002cee:	46b4      	mov	ip, r6
 8002cf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002cf4:	466c      	mov	r4, sp
 8002cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfe:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002d02:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d06:	1d2f      	adds	r7, r5, #4
 8002d08:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002d0c:	4670      	mov	r0, lr
 8002d0e:	f001 ff61 	bl	8004bd4 <USB_CoreInit>
 8002d12:	4604      	mov	r4, r0
 8002d14:	b130      	cbz	r0, 8002d24 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8002d16:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d18:	2302      	movs	r3, #2
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002d1a:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d1c:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8002d20:	b00b      	add	sp, #44	; 0x2c
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d24:	4601      	mov	r1, r0
 8002d26:	6828      	ldr	r0, [r5, #0]
 8002d28:	f002 f860 	bl	8004dec <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2c:	6868      	ldr	r0, [r5, #4]
 8002d2e:	b358      	cbz	r0, 8002d88 <HAL_PCD_Init+0xd0>
 8002d30:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002d32:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d36:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002d38:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002d3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d40:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4c:	fa5f f28c 	uxtb.w	r2, ip
 8002d50:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d52:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 8002d56:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d5a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d5e:	6559      	str	r1, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	d3ea      	bcc.n	8002d38 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8002d62:	2200      	movs	r2, #0
 8002d64:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002d68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6c:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8002d6e:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d72:	b2cc      	uxtb	r4, r1
 8002d74:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d76:	e9c3 22a2 	strd	r2, r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8002d7a:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d7e:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d86:	d3ed      	bcc.n	8002d64 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d8a:	466c      	mov	r4, sp
 8002d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d92:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002d96:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d9a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002d9e:	6828      	ldr	r0, [r5, #0]
 8002da0:	f002 f85c 	bl	8004e5c <USB_DevInit>
 8002da4:	4604      	mov	r4, r0
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d1b5      	bne.n	8002d16 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 8002daa:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8002dac:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 8002db0:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8002db2:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002db6:	f002 fd01 	bl	80057bc <USB_DevDisconnect>
}
 8002dba:	4620      	mov	r0, r4
 8002dbc:	b00b      	add	sp, #44	; 0x2c
 8002dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002dc0:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8002dc4:	f004 ffe2 	bl	8007d8c <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8002dc8:	6828      	ldr	r0, [r5, #0]
 8002dca:	e783      	b.n	8002cd4 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8002dcc:	2401      	movs	r4, #1
}
 8002dce:	4620      	mov	r0, r4
 8002dd0:	b00b      	add	sp, #44	; 0x2c
 8002dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dd4:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8002dd6:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
 8002dda:	2b01      	cmp	r3, #1
{
 8002ddc:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dde:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002de0:	d016      	beq.n	8002e10 <HAL_PCD_Start+0x3c>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  __HAL_LOCK(hpcd);
 8002de4:	2201      	movs	r2, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002de6:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8002de8:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dec:	d008      	beq.n	8002e00 <HAL_PCD_Start+0x2c>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8002dee:	f001 ffed 	bl	8004dcc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	f002 fcd2 	bl	800579c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc

  return HAL_OK;
}
 8002dfe:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e00:	69a3      	ldr	r3, [r4, #24]
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d0f3      	beq.n	8002dee <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e06:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6383      	str	r3, [r0, #56]	; 0x38
 8002e0e:	e7ee      	b.n	8002dee <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8002e10:	2002      	movs	r0, #2
}
 8002e12:	bd10      	pop	{r4, pc}

08002e14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e18:	6805      	ldr	r5, [r0, #0]
{
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f002 fd0a 	bl	8005838 <USB_GetMode>
 8002e24:	b110      	cbz	r0, 8002e2c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 8002e26:	b009      	add	sp, #36	; 0x24
 8002e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e2c:	4683      	mov	fp, r0
 8002e2e:	6820      	ldr	r0, [r4, #0]
 8002e30:	f002 fcd4 	bl	80057dc <USB_ReadInterrupts>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d0f6      	beq.n	8002e26 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e38:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e3c:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e3e:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002e42:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e46:	f002 fcc9 	bl	80057dc <USB_ReadInterrupts>
 8002e4a:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e4e:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e50:	f505 6300 	add.w	r3, r5, #2048	; 0x800
 8002e54:	9303      	str	r3, [sp, #12]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e56:	bf1e      	ittt	ne
 8002e58:	6943      	ldrne	r3, [r0, #20]
 8002e5a:	f003 0302 	andne.w	r3, r3, #2
 8002e5e:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e60:	f002 fcbc 	bl	80057dc <USB_ReadInterrupts>
 8002e64:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e68:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e6a:	d012      	beq.n	8002e92 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e6c:	6983      	ldr	r3, [r0, #24]
 8002e6e:	f023 0310 	bic.w	r3, r3, #16
 8002e72:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8002e74:	6a2e      	ldr	r6, [r5, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e76:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8002e7a:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e7c:	f006 070f 	and.w	r7, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e80:	f000 83ca 	beq.w	8003618 <HAL_PCD_IRQHandler+0x804>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e84:	2b06      	cmp	r3, #6
 8002e86:	f000 8307 	beq.w	8003498 <HAL_PCD_IRQHandler+0x684>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e8a:	6983      	ldr	r3, [r0, #24]
 8002e8c:	f043 0310 	orr.w	r3, r3, #16
 8002e90:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e92:	f002 fca3 	bl	80057dc <USB_ReadInterrupts>
 8002e96:	0307      	lsls	r7, r0, #12
 8002e98:	f100 8269 	bmi.w	800336e <HAL_PCD_IRQHandler+0x55a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e9c:	6820      	ldr	r0, [r4, #0]
 8002e9e:	f002 fc9d 	bl	80057dc <USB_ReadInterrupts>
 8002ea2:	0346      	lsls	r6, r0, #13
 8002ea4:	f100 8211 	bmi.w	80032ca <HAL_PCD_IRQHandler+0x4b6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ea8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002eaa:	f002 fc97 	bl	80057dc <USB_ReadInterrupts>
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	f2c0 8182 	blt.w	80031b8 <HAL_PCD_IRQHandler+0x3a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002eb4:	6820      	ldr	r0, [r4, #0]
 8002eb6:	f002 fc91 	bl	80057dc <USB_ReadInterrupts>
 8002eba:	0507      	lsls	r7, r0, #20
 8002ebc:	f100 813d 	bmi.w	800313a <HAL_PCD_IRQHandler+0x326>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ec0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ec2:	f002 fc8b 	bl	80057dc <USB_ReadInterrupts>
 8002ec6:	04c0      	lsls	r0, r0, #19
 8002ec8:	f100 81a0 	bmi.w	800320c <HAL_PCD_IRQHandler+0x3f8>
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ecc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ece:	f002 fc85 	bl	80057dc <USB_ReadInterrupts>
 8002ed2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ed6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ed8:	f040 8181 	bne.w	80031de <HAL_PCD_IRQHandler+0x3ca>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002edc:	f002 fc7e 	bl	80057dc <USB_ReadInterrupts>
 8002ee0:	0701      	lsls	r1, r0, #28
 8002ee2:	f100 81e9 	bmi.w	80032b8 <HAL_PCD_IRQHandler+0x4a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ee6:	6820      	ldr	r0, [r4, #0]
 8002ee8:	f002 fc78 	bl	80057dc <USB_ReadInterrupts>
 8002eec:	0602      	lsls	r2, r0, #24
 8002eee:	d571      	bpl.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ef0:	69aa      	ldr	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef2:	6863      	ldr	r3, [r4, #4]
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef8:	2b01      	cmp	r3, #1
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002efa:	61aa      	str	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002efc:	d96a      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002efe:	f894 22a3 	ldrb.w	r2, [r4, #675]	; 0x2a3
 8002f02:	2a01      	cmp	r2, #1
 8002f04:	f000 83e9 	beq.w	80036da <HAL_PCD_IRQHandler+0x8c6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d963      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f0c:	f894 22c7 	ldrb.w	r2, [r4, #711]	; 0x2c7
 8002f10:	2a01      	cmp	r2, #1
 8002f12:	f000 83fd 	beq.w	8003710 <HAL_PCD_IRQHandler+0x8fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d95c      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f1a:	f894 22eb 	ldrb.w	r2, [r4, #747]	; 0x2eb
 8002f1e:	2a01      	cmp	r2, #1
 8002f20:	f000 82b3 	beq.w	800348a <HAL_PCD_IRQHandler+0x676>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d955      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f28:	f894 230f 	ldrb.w	r2, [r4, #783]	; 0x30f
 8002f2c:	2a01      	cmp	r2, #1
 8002f2e:	f000 82c6 	beq.w	80034be <HAL_PCD_IRQHandler+0x6aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d94e      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f36:	f894 2333 	ldrb.w	r2, [r4, #819]	; 0x333
 8002f3a:	2a01      	cmp	r2, #1
 8002f3c:	f000 8425 	beq.w	800378a <HAL_PCD_IRQHandler+0x976>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d947      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f44:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
 8002f48:	2a01      	cmp	r2, #1
 8002f4a:	f000 8432 	beq.w	80037b2 <HAL_PCD_IRQHandler+0x99e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f4e:	2b07      	cmp	r3, #7
 8002f50:	d940      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f52:	f894 237b 	ldrb.w	r2, [r4, #891]	; 0x37b
 8002f56:	2a01      	cmp	r2, #1
 8002f58:	f000 8448 	beq.w	80037ec <HAL_PCD_IRQHandler+0x9d8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d939      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f60:	f894 239f 	ldrb.w	r2, [r4, #927]	; 0x39f
 8002f64:	2a01      	cmp	r2, #1
 8002f66:	f000 8455 	beq.w	8003814 <HAL_PCD_IRQHandler+0xa00>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f6a:	2b09      	cmp	r3, #9
 8002f6c:	d932      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f6e:	f894 23c3 	ldrb.w	r2, [r4, #963]	; 0x3c3
 8002f72:	2a01      	cmp	r2, #1
 8002f74:	f000 8462 	beq.w	800383c <HAL_PCD_IRQHandler+0xa28>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f78:	2b0a      	cmp	r3, #10
 8002f7a:	d92b      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f7c:	f894 23e7 	ldrb.w	r2, [r4, #999]	; 0x3e7
 8002f80:	2a01      	cmp	r2, #1
 8002f82:	f000 846f 	beq.w	8003864 <HAL_PCD_IRQHandler+0xa50>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f86:	2b0b      	cmp	r3, #11
 8002f88:	d924      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f8a:	f894 240b 	ldrb.w	r2, [r4, #1035]	; 0x40b
 8002f8e:	2a01      	cmp	r2, #1
 8002f90:	f000 847c 	beq.w	800388c <HAL_PCD_IRQHandler+0xa78>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d91d      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f98:	f894 242f 	ldrb.w	r2, [r4, #1071]	; 0x42f
 8002f9c:	2a01      	cmp	r2, #1
 8002f9e:	f000 847d 	beq.w	800389c <HAL_PCD_IRQHandler+0xa88>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa2:	2b0d      	cmp	r3, #13
 8002fa4:	d916      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fa6:	f894 2453 	ldrb.w	r2, [r4, #1107]	; 0x453
 8002faa:	2a01      	cmp	r2, #1
 8002fac:	f000 849d 	beq.w	80038ea <HAL_PCD_IRQHandler+0xad6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fb0:	2b0e      	cmp	r3, #14
 8002fb2:	d90f      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fb4:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 8002fb8:	2a01      	cmp	r2, #1
 8002fba:	f000 84a4 	beq.w	8003906 <HAL_PCD_IRQHandler+0xaf2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	d908      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fc2:	f894 349b 	ldrb.w	r3, [r4, #1179]	; 0x49b
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d104      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x1c0>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fca:	6820      	ldr	r0, [r4, #0]
 8002fcc:	f504 6193 	add.w	r1, r4, #1176	; 0x498
 8002fd0:	f002 fafa 	bl	80055c8 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fd4:	6820      	ldr	r0, [r4, #0]
 8002fd6:	f002 fc01 	bl	80057dc <USB_ReadInterrupts>
 8002fda:	02c3      	lsls	r3, r0, #11
 8002fdc:	f140 80ab 	bpl.w	8003136 <HAL_PCD_IRQHandler+0x322>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe0:	6863      	ldr	r3, [r4, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	f240 8089 	bls.w	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fe8:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fec:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ff0:	2a01      	cmp	r2, #1
 8002ff2:	f000 8213 	beq.w	800341c <HAL_PCD_IRQHandler+0x608>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d97f      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ffa:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ffe:	f8d5 1940 	ldr.w	r1, [r5, #2368]	; 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003002:	2a01      	cmp	r2, #1
 8003004:	f000 821d 	beq.w	8003442 <HAL_PCD_IRQHandler+0x62e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003008:	2b03      	cmp	r3, #3
 800300a:	d976      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800300c:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003010:	f8d5 1960 	ldr.w	r1, [r5, #2400]	; 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003014:	2a01      	cmp	r2, #1
 8003016:	f000 8220 	beq.w	800345a <HAL_PCD_IRQHandler+0x646>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800301a:	2b04      	cmp	r3, #4
 800301c:	d96d      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800301e:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003022:	f8d5 1980 	ldr.w	r1, [r5, #2432]	; 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003026:	2a01      	cmp	r2, #1
 8003028:	f000 8223 	beq.w	8003472 <HAL_PCD_IRQHandler+0x65e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800302c:	2b05      	cmp	r3, #5
 800302e:	d964      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003030:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003034:	f8d5 19a0 	ldr.w	r1, [r5, #2464]	; 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003038:	2a01      	cmp	r2, #1
 800303a:	f000 8342 	beq.w	80036c2 <HAL_PCD_IRQHandler+0x8ae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800303e:	2b06      	cmp	r3, #6
 8003040:	d95b      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003042:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003046:	f8d5 19c0 	ldr.w	r1, [r5, #2496]	; 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800304a:	2a01      	cmp	r2, #1
 800304c:	f000 8354 	beq.w	80036f8 <HAL_PCD_IRQHandler+0x8e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003050:	2b07      	cmp	r3, #7
 8003052:	d952      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003054:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003058:	f8d5 19e0 	ldr.w	r1, [r5, #2528]	; 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800305c:	2a01      	cmp	r2, #1
 800305e:	f000 835f 	beq.w	8003720 <HAL_PCD_IRQHandler+0x90c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003062:	2b08      	cmp	r3, #8
 8003064:	d949      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003066:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800306a:	f8d5 1a00 	ldr.w	r1, [r5, #2560]	; 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800306e:	2a01      	cmp	r2, #1
 8003070:	f000 8362 	beq.w	8003738 <HAL_PCD_IRQHandler+0x924>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003074:	2b09      	cmp	r3, #9
 8003076:	d940      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003078:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800307c:	f8d5 1a20 	ldr.w	r1, [r5, #2592]	; 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003080:	2a01      	cmp	r2, #1
 8003082:	f000 8376 	beq.w	8003772 <HAL_PCD_IRQHandler+0x95e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003086:	2b0a      	cmp	r3, #10
 8003088:	d937      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800308a:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800308e:	f8d5 1a40 	ldr.w	r1, [r5, #2624]	; 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003092:	2a01      	cmp	r2, #1
 8003094:	f000 8381 	beq.w	800379a <HAL_PCD_IRQHandler+0x986>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003098:	2b0b      	cmp	r3, #11
 800309a:	d92e      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800309c:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030a0:	f8d5 1a60 	ldr.w	r1, [r5, #2656]	; 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030a4:	2a01      	cmp	r2, #1
 80030a6:	f000 8395 	beq.w	80037d4 <HAL_PCD_IRQHandler+0x9c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d925      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ae:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030b2:	f8d5 1a80 	ldr.w	r1, [r5, #2688]	; 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030b6:	2a01      	cmp	r2, #1
 80030b8:	f000 83a0 	beq.w	80037fc <HAL_PCD_IRQHandler+0x9e8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030bc:	2b0d      	cmp	r3, #13
 80030be:	d91c      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c0:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030c4:	f8d5 1aa0 	ldr.w	r1, [r5, #2720]	; 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c8:	2a01      	cmp	r2, #1
 80030ca:	f000 83ab 	beq.w	8003824 <HAL_PCD_IRQHandler+0xa10>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ce:	2b0e      	cmp	r3, #14
 80030d0:	d913      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030d2:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030d6:	f8d5 1ac0 	ldr.w	r1, [r5, #2752]	; 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030da:	2a01      	cmp	r2, #1
 80030dc:	f000 83b6 	beq.w	800384c <HAL_PCD_IRQHandler+0xa38>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d90a      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e4:	f894 225c 	ldrb.w	r2, [r4, #604]	; 0x25c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030e8:	f8d5 1ae0 	ldr.w	r1, [r5, #2784]	; 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ec:	2a01      	cmp	r2, #1
 80030ee:	f000 83c1 	beq.w	8003874 <HAL_PCD_IRQHandler+0xa60>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d901      	bls.n	80030fa <HAL_PCD_IRQHandler+0x2e6>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030f6:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030fa:	6820      	ldr	r0, [r4, #0]
 80030fc:	6943      	ldr	r3, [r0, #20]
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003102:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003104:	f002 fb6a 	bl	80057dc <USB_ReadInterrupts>
 8003108:	0287      	lsls	r7, r0, #10
 800310a:	d421      	bmi.n	8003150 <HAL_PCD_IRQHandler+0x33c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800310c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800310e:	f002 fb65 	bl	80057dc <USB_ReadInterrupts>
 8003112:	0040      	lsls	r0, r0, #1
 8003114:	f100 80c7 	bmi.w	80032a6 <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	f002 fb5f 	bl	80057dc <USB_ReadInterrupts>
 800311e:	0741      	lsls	r1, r0, #29
 8003120:	f57f ae81 	bpl.w	8002e26 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003128:	076a      	lsls	r2, r5, #29
 800312a:	f100 8296 	bmi.w	800365a <HAL_PCD_IRQHandler+0x846>
      hpcd->Instance->GOTGINT |= RegVal;
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	432a      	orrs	r2, r5
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	e677      	b.n	8002e26 <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003136:	6820      	ldr	r0, [r4, #0]
 8003138:	e7e4      	b.n	8003104 <HAL_PCD_IRQHandler+0x2f0>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800313a:	9b03      	ldr	r3, [sp, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	07de      	lsls	r6, r3, #31
 8003140:	f100 8287 	bmi.w	8003652 <HAL_PCD_IRQHandler+0x83e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	6943      	ldr	r3, [r0, #20]
 8003148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314c:	6143      	str	r3, [r0, #20]
 800314e:	e6b8      	b.n	8002ec2 <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003150:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003154:	f1bc 0f01 	cmp.w	ip, #1
 8003158:	d928      	bls.n	80031ac <HAL_PCD_IRQHandler+0x398>
 800315a:	f505 6232 	add.w	r2, r5, #2848	; 0xb20
 800315e:	4623      	mov	r3, r4
 8003160:	2101      	movs	r1, #1
 8003162:	e006      	b.n	8003172 <HAL_PCD_IRQHandler+0x35e>
 8003164:	3101      	adds	r1, #1
 8003166:	4561      	cmp	r1, ip
 8003168:	f102 0220 	add.w	r2, r2, #32
 800316c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003170:	d01c      	beq.n	80031ac <HAL_PCD_IRQHandler+0x398>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003172:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003176:	6816      	ldr	r6, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003178:	2801      	cmp	r0, #1
 800317a:	d1f3      	bne.n	8003164 <HAL_PCD_IRQHandler+0x350>
 800317c:	2e00      	cmp	r6, #0
 800317e:	daf1      	bge.n	8003164 <HAL_PCD_IRQHandler+0x350>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003180:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 8003184:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 8003188:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800318c:	42be      	cmp	r6, r7
 800318e:	d1e9      	bne.n	8003164 <HAL_PCD_IRQHandler+0x350>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003190:	f883 02a3 	strb.w	r0, [r3, #675]	; 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003194:	69a8      	ldr	r0, [r5, #24]
 8003196:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800319a:	61a8      	str	r0, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800319c:	6968      	ldr	r0, [r5, #20]
 800319e:	0606      	lsls	r6, r0, #24
 80031a0:	d4e0      	bmi.n	8003164 <HAL_PCD_IRQHandler+0x350>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031a2:	9a03      	ldr	r2, [sp, #12]
 80031a4:	6853      	ldr	r3, [r2, #4]
 80031a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031aa:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031ac:	6820      	ldr	r0, [r4, #0]
 80031ae:	6943      	ldr	r3, [r0, #20]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	6143      	str	r3, [r0, #20]
 80031b6:	e7aa      	b.n	800310e <HAL_PCD_IRQHandler+0x2fa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031b8:	9a03      	ldr	r2, [sp, #12]
 80031ba:	6853      	ldr	r3, [r2, #4]
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 80031c2:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	f000 8134 	beq.w	8003434 <HAL_PCD_IRQHandler+0x620>
        HAL_PCD_ResumeCallback(hpcd);
 80031cc:	4620      	mov	r0, r4
 80031ce:	f004 fe67 	bl	8007ea0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	6943      	ldr	r3, [r0, #20]
 80031d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031da:	6143      	str	r3, [r0, #20]
 80031dc:	e66b      	b.n	8002eb6 <HAL_PCD_IRQHandler+0xa2>
      (void)USB_ActivateSetup(hpcd->Instance);
 80031de:	f002 fb2f 	bl	8005840 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031e2:	6820      	ldr	r0, [r4, #0]
 80031e4:	f001 ff7e 	bl	80050e4 <USB_GetDevSpeed>
 80031e8:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ea:	6826      	ldr	r6, [r4, #0]
 80031ec:	f000 ffd4 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80031f0:	7b22      	ldrb	r2, [r4, #12]
 80031f2:	4601      	mov	r1, r0
 80031f4:	4630      	mov	r0, r6
 80031f6:	f001 fd6f 	bl	8004cd8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80031fa:	4620      	mov	r0, r4
 80031fc:	f004 fe26 	bl	8007e4c <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003200:	6820      	ldr	r0, [r4, #0]
 8003202:	6943      	ldr	r3, [r0, #20]
 8003204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003208:	6143      	str	r3, [r0, #20]
 800320a:	e667      	b.n	8002edc <HAL_PCD_IRQHandler+0xc8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800320c:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800320e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003210:	6853      	ldr	r3, [r2, #4]
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003218:	2110      	movs	r1, #16
 800321a:	f001 ff39 	bl	8005090 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321e:	6860      	ldr	r0, [r4, #4]
 8003220:	b1e0      	cbz	r0, 800325c <HAL_PCD_IRQHandler+0x448>
 8003222:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003226:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800322a:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003232:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003234:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003238:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800323c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003240:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003244:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003248:	f10b 0b01 	add.w	fp, fp, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800324c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003250:	4583      	cmp	fp, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003252:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003256:	f103 0320 	add.w	r3, r3, #32
 800325a:	d1e6      	bne.n	800322a <HAL_PCD_IRQHandler+0x416>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800325c:	9903      	ldr	r1, [sp, #12]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800325e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003260:	69cb      	ldr	r3, [r1, #28]
 8003262:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003266:	61cb      	str	r3, [r1, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003268:	2a00      	cmp	r2, #0
 800326a:	f040 80cc 	bne.w	8003406 <HAL_PCD_IRQHandler+0x5f2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800326e:	694b      	ldr	r3, [r1, #20]
 8003270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003274:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003278:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800327a:	690b      	ldr	r3, [r1, #16]
 800327c:	f043 030b 	orr.w	r3, r3, #11
 8003280:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003282:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003286:	7c21      	ldrb	r1, [r4, #16]
 8003288:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800328a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800328e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003292:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003296:	f002 fae5 	bl	8005864 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800329a:	6820      	ldr	r0, [r4, #0]
 800329c:	6943      	ldr	r3, [r0, #20]
 800329e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a2:	6143      	str	r3, [r0, #20]
 80032a4:	e613      	b.n	8002ece <HAL_PCD_IRQHandler+0xba>
      HAL_PCD_ConnectCallback(hpcd);
 80032a6:	4620      	mov	r0, r4
 80032a8:	f004 fe06 	bl	8007eb8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	6943      	ldr	r3, [r0, #20]
 80032b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032b4:	6143      	str	r3, [r0, #20]
 80032b6:	e730      	b.n	800311a <HAL_PCD_IRQHandler+0x306>
      HAL_PCD_SOFCallback(hpcd);
 80032b8:	4620      	mov	r0, r4
 80032ba:	f004 fdc3 	bl	8007e44 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032be:	6820      	ldr	r0, [r4, #0]
 80032c0:	6943      	ldr	r3, [r0, #20]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	6143      	str	r3, [r0, #20]
 80032c8:	e60e      	b.n	8002ee8 <HAL_PCD_IRQHandler+0xd4>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032ca:	6820      	ldr	r0, [r4, #0]
 80032cc:	f002 fa92 	bl	80057f4 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80032d0:	4680      	mov	r8, r0
 80032d2:	2800      	cmp	r0, #0
 80032d4:	f43f ade8 	beq.w	8002ea8 <HAL_PCD_IRQHandler+0x94>
      epnum = 0U;
 80032d8:	f04f 0a00 	mov.w	sl, #0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032dc:	6820      	ldr	r0, [r4, #0]
              ep->is_iso_incomplete = 0U;
 80032de:	9504      	str	r5, [sp, #16]
 80032e0:	4627      	mov	r7, r4
 80032e2:	f505 6910 	add.w	r9, r5, #2304	; 0x900
 80032e6:	4656      	mov	r6, sl
 80032e8:	f8cd b014 	str.w	fp, [sp, #20]
 80032ec:	e009      	b.n	8003302 <HAL_PCD_IRQHandler+0x4ee>
      while (ep_intr != 0U)
 80032ee:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 80032f2:	f106 0601 	add.w	r6, r6, #1
      while (ep_intr != 0U)
 80032f6:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80032fa:	f109 0920 	add.w	r9, r9, #32
 80032fe:	f000 80e5 	beq.w	80034cc <HAL_PCD_IRQHandler+0x6b8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003302:	f018 0f01 	tst.w	r8, #1
 8003306:	d0f2      	beq.n	80032ee <HAL_PCD_IRQHandler+0x4da>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003308:	fa5f fa86 	uxtb.w	sl, r6
 800330c:	4651      	mov	r1, sl
 800330e:	f002 fa83 	bl	8005818 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003312:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003314:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003316:	d513      	bpl.n	8003340 <HAL_PCD_IRQHandler+0x52c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003318:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800331a:	2001      	movs	r0, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800331c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800331e:	f006 020f 	and.w	r2, r6, #15
 8003322:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003326:	ea23 0302 	bic.w	r3, r3, r2
 800332a:	634b      	str	r3, [r1, #52]	; 0x34
            if (hpcd->Init.dma_enable == 1U)
 800332c:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800332e:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8003332:	4281      	cmp	r1, r0
 8003334:	f000 8196 	beq.w	8003664 <HAL_PCD_IRQHandler+0x850>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003338:	4651      	mov	r1, sl
 800333a:	4620      	mov	r0, r4
 800333c:	f004 fd78 	bl	8007e30 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003340:	072b      	lsls	r3, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003342:	bf44      	itt	mi
 8003344:	2308      	movmi	r3, #8
 8003346:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800334a:	06e8      	lsls	r0, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800334c:	bf44      	itt	mi
 800334e:	2310      	movmi	r3, #16
 8003350:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003354:	0669      	lsls	r1, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003356:	bf44      	itt	mi
 8003358:	2340      	movmi	r3, #64	; 0x40
 800335a:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800335e:	07aa      	lsls	r2, r5, #30
 8003360:	f100 814d 	bmi.w	80035fe <HAL_PCD_IRQHandler+0x7ea>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003364:	062b      	lsls	r3, r5, #24
 8003366:	f100 80f5 	bmi.w	8003554 <HAL_PCD_IRQHandler+0x740>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800336a:	6820      	ldr	r0, [r4, #0]
 800336c:	e7bf      	b.n	80032ee <HAL_PCD_IRQHandler+0x4da>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	f002 fa38 	bl	80057e4 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8003374:	4606      	mov	r6, r0
 8003376:	2800      	cmp	r0, #0
 8003378:	f43f ad90 	beq.w	8002e9c <HAL_PCD_IRQHandler+0x88>
 800337c:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 8003380:	46a2      	mov	sl, r4
      epnum = 0U;
 8003382:	f04f 0900 	mov.w	r9, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003386:	f8cd b010 	str.w	fp, [sp, #16]
 800338a:	e008      	b.n	800339e <HAL_PCD_IRQHandler+0x58a>
      while (ep_intr != 0U)
 800338c:	0876      	lsrs	r6, r6, #1
        epnum++;
 800338e:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8003392:	f107 0720 	add.w	r7, r7, #32
 8003396:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 800339a:	f000 809a 	beq.w	80034d2 <HAL_PCD_IRQHandler+0x6be>
        if ((ep_intr & 0x1U) != 0U)
 800339e:	07f0      	lsls	r0, r6, #31
 80033a0:	d5f4      	bpl.n	800338c <HAL_PCD_IRQHandler+0x578>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033a2:	fa5f fb89 	uxtb.w	fp, r9
 80033a6:	6820      	ldr	r0, [r4, #0]
 80033a8:	4659      	mov	r1, fp
 80033aa:	f002 fa2b 	bl	8005804 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033ae:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033b2:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033b4:	f040 80af 	bne.w	8003516 <HAL_PCD_IRQHandler+0x702>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033b8:	f018 0f08 	tst.w	r8, #8
 80033bc:	f040 808c 	bne.w	80034d8 <HAL_PCD_IRQHandler+0x6c4>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033c0:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033c4:	bf1c      	itt	ne
 80033c6:	2210      	movne	r2, #16
 80033c8:	60ba      	strne	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033ca:	f018 0f02 	tst.w	r8, #2
 80033ce:	d00e      	beq.n	80033ee <HAL_PCD_IRQHandler+0x5da>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033d0:	696a      	ldr	r2, [r5, #20]
 80033d2:	0611      	lsls	r1, r2, #24
 80033d4:	d504      	bpl.n	80033e0 <HAL_PCD_IRQHandler+0x5cc>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033d6:	9b03      	ldr	r3, [sp, #12]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033de:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 80033e0:	f89a 227f 	ldrb.w	r2, [sl, #639]	; 0x27f
 80033e4:	2a01      	cmp	r2, #1
 80033e6:	f000 817f 	beq.w	80036e8 <HAL_PCD_IRQHandler+0x8d4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033ea:	2302      	movs	r3, #2
 80033ec:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033ee:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033f2:	bf1c      	itt	ne
 80033f4:	2320      	movne	r3, #32
 80033f6:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033f8:	f418 5f00 	tst.w	r8, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033fc:	bf1c      	itt	ne
 80033fe:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8003402:	60bb      	strne	r3, [r7, #8]
 8003404:	e7c2      	b.n	800338c <HAL_PCD_IRQHandler+0x578>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003406:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 800340a:	f043 030b 	orr.w	r3, r3, #11
 800340e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003412:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8003414:	f043 030b 	orr.w	r3, r3, #11
 8003418:	644b      	str	r3, [r1, #68]	; 0x44
 800341a:	e732      	b.n	8003282 <HAL_PCD_IRQHandler+0x46e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800341c:	2900      	cmp	r1, #0
 800341e:	f6bf adea 	bge.w	8002ff6 <HAL_PCD_IRQHandler+0x1e2>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003422:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003424:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003428:	f851 0b60 	ldr.w	r0, [r1], #96
 800342c:	f002 f8cc 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003430:	6863      	ldr	r3, [r4, #4]
 8003432:	e5e0      	b.n	8002ff6 <HAL_PCD_IRQHandler+0x1e2>
        hpcd->LPM_State = LPM_L0;
 8003434:	2100      	movs	r1, #0
 8003436:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800343a:	4620      	mov	r0, r4
 800343c:	f000 fbf4 	bl	8003c28 <HAL_PCDEx_LPM_Callback>
 8003440:	e6c7      	b.n	80031d2 <HAL_PCD_IRQHandler+0x3be>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003442:	2900      	cmp	r1, #0
 8003444:	f6bf ade0 	bge.w	8003008 <HAL_PCD_IRQHandler+0x1f4>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003448:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800344a:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800344e:	f851 0b84 	ldr.w	r0, [r1], #132
 8003452:	f002 f8b9 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003456:	6863      	ldr	r3, [r4, #4]
 8003458:	e5d6      	b.n	8003008 <HAL_PCD_IRQHandler+0x1f4>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800345a:	2900      	cmp	r1, #0
 800345c:	f6bf addd 	bge.w	800301a <HAL_PCD_IRQHandler+0x206>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003460:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003462:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003466:	f851 0ba8 	ldr.w	r0, [r1], #168
 800346a:	f002 f8ad 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800346e:	6863      	ldr	r3, [r4, #4]
 8003470:	e5d3      	b.n	800301a <HAL_PCD_IRQHandler+0x206>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003472:	2900      	cmp	r1, #0
 8003474:	f6bf adda 	bge.w	800302c <HAL_PCD_IRQHandler+0x218>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003478:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800347a:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800347e:	f851 0bcc 	ldr.w	r0, [r1], #204
 8003482:	f002 f8a1 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003486:	6863      	ldr	r3, [r4, #4]
 8003488:	e5d0      	b.n	800302c <HAL_PCD_IRQHandler+0x218>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	f504 713a 	add.w	r1, r4, #744	; 0x2e8
 8003490:	f002 f89a 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003494:	6863      	ldr	r3, [r4, #4]
 8003496:	e545      	b.n	8002f24 <HAL_PCD_IRQHandler+0x110>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003498:	2208      	movs	r2, #8
 800349a:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 800349e:	4628      	mov	r0, r5
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a0:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034a4:	f002 f8ea 	bl	800567c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a8:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 80034ac:	f3c6 130a 	ubfx	r3, r6, #4, #11
 80034b0:	f8d2 129c 	ldr.w	r1, [r2, #668]	; 0x29c
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034b4:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034b6:	440b      	add	r3, r1
 80034b8:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 80034bc:	e4e5      	b.n	8002e8a <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	f504 7143 	add.w	r1, r4, #780	; 0x30c
 80034c4:	f002 f880 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	e532      	b.n	8002f32 <HAL_PCD_IRQHandler+0x11e>
 80034cc:	e9dd 5b04 	ldrd	r5, fp, [sp, #16]
 80034d0:	e4eb      	b.n	8002eaa <HAL_PCD_IRQHandler+0x96>
 80034d2:	f8dd b010 	ldr.w	fp, [sp, #16]
 80034d6:	e4e1      	b.n	8002e9c <HAL_PCD_IRQHandler+0x88>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034d8:	6821      	ldr	r1, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034da:	4bbc      	ldr	r3, [pc, #752]	; (80037cc <HAL_PCD_IRQHandler+0x9b8>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034dc:	2208      	movs	r2, #8
 80034de:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034e0:	f501 6230 	add.w	r2, r1, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034e6:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ea:	4299      	cmp	r1, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034ec:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ee:	f240 80ca 	bls.w	8003686 <HAL_PCD_IRQHandler+0x872>
 80034f2:	0400      	lsls	r0, r0, #16
 80034f4:	d502      	bpl.n	80034fc <HAL_PCD_IRQHandler+0x6e8>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034fa:	6091      	str	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034fc:	4620      	mov	r0, r4
 80034fe:	f004 fc87 	bl	8007e10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003502:	6921      	ldr	r1, [r4, #16]
 8003504:	2901      	cmp	r1, #1
 8003506:	f47f af5b 	bne.w	80033c0 <HAL_PCD_IRQHandler+0x5ac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800350a:	6820      	ldr	r0, [r4, #0]
 800350c:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003510:	f002 f9a8 	bl	8005864 <USB_EP0_OutStart>
 8003514:	e754      	b.n	80033c0 <HAL_PCD_IRQHandler+0x5ac>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003516:	6820      	ldr	r0, [r4, #0]
  if (hpcd->Init.dma_enable == 1U)
 8003518:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800351a:	2201      	movs	r2, #1
 800351c:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800351e:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8003522:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8003526:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003528:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800352c:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800352e:	f000 80ae 	beq.w	800368e <HAL_PCD_IRQHandler+0x87a>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003532:	49a7      	ldr	r1, [pc, #668]	; (80037d0 <HAL_PCD_IRQHandler+0x9bc>)
 8003534:	458c      	cmp	ip, r1
 8003536:	f000 810b 	beq.w	8003750 <HAL_PCD_IRQHandler+0x93c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800353a:	f1b9 0f00 	cmp.w	r9, #0
 800353e:	d104      	bne.n	800354a <HAL_PCD_IRQHandler+0x736>
 8003540:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
 8003544:	2a00      	cmp	r2, #0
 8003546:	f000 81d8 	beq.w	80038fa <HAL_PCD_IRQHandler+0xae6>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800354a:	4659      	mov	r1, fp
 800354c:	4620      	mov	r0, r4
 800354e:	f004 fc65 	bl	8007e1c <HAL_PCD_DataOutStageCallback>
 8003552:	e731      	b.n	80033b8 <HAL_PCD_IRQHandler+0x5a4>
  if (ep->xfer_count > ep->xfer_len)
 8003554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003556:	6d7d      	ldr	r5, [r7, #84]	; 0x54
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003558:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800355c:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355e:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8003560:	f63f aec5 	bhi.w	80032ee <HAL_PCD_IRQHandler+0x4da>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003564:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
 8003568:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 800356c:	4696      	mov	lr, r2
 800356e:	6992      	ldr	r2, [r2, #24]
  len32b = (len + 3U) / 4U;
 8003570:	6cb9      	ldr	r1, [r7, #72]	; 0x48
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003572:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003576:	fa1f fc82 	uxth.w	ip, r2
  len = ep->xfer_len - ep->xfer_count;
 800357a:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800357c:	428a      	cmp	r2, r1
 800357e:	bf28      	it	cs
 8003580:	460a      	movcs	r2, r1
 8003582:	3203      	adds	r2, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003584:	ebbc 0f92 	cmp.w	ip, r2, lsr #2
 8003588:	f0c0 8097 	bcc.w	80036ba <HAL_PCD_IRQHandler+0x8a6>
 800358c:	4652      	mov	r2, sl
 800358e:	9606      	str	r6, [sp, #24]
 8003590:	46ca      	mov	sl, r9
 8003592:	4626      	mov	r6, r4
 8003594:	46c1      	mov	r9, r8
 8003596:	4674      	mov	r4, lr
 8003598:	4690      	mov	r8, r2
 800359a:	e019      	b.n	80035d0 <HAL_PCD_IRQHandler+0x7bc>
    len = ep->xfer_len - ep->xfer_count;
 800359c:	1aed      	subs	r5, r5, r3
 800359e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80035a2:	429d      	cmp	r5, r3
 80035a4:	bf28      	it	cs
 80035a6:	461d      	movcs	r5, r3
 80035a8:	7c33      	ldrb	r3, [r6, #16]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4642      	mov	r2, r8
 80035ae:	b2ab      	uxth	r3, r5
 80035b0:	4658      	mov	r0, fp
 80035b2:	f002 f84d 	bl	8005650 <USB_WritePacket>
    ep->xfer_buff  += len;
 80035b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035b8:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 80035ba:	442b      	add	r3, r5
 80035bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    ep->xfer_count += len;
 80035be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c0:	b289      	uxth	r1, r1
    ep->xfer_count += len;
 80035c2:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 80035c4:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035c6:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 80035ca:	65fb      	str	r3, [r7, #92]	; 0x5c
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035cc:	d36d      	bcc.n	80036aa <HAL_PCD_IRQHandler+0x896>
  if (ep->xfer_len <= ep->xfer_count)
 80035ce:	6d7d      	ldr	r5, [r7, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d0:	42ab      	cmp	r3, r5
 80035d2:	d3e3      	bcc.n	800359c <HAL_PCD_IRQHandler+0x788>
 80035d4:	4634      	mov	r4, r6
 80035d6:	9e06      	ldr	r6, [sp, #24]
 80035d8:	f8d4 b000 	ldr.w	fp, [r4]
 80035dc:	46c8      	mov	r8, r9
 80035de:	46d1      	mov	r9, sl
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035e0:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e2:	f006 020f 	and.w	r2, r6, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035e6:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035ea:	2501      	movs	r5, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ec:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035f0:	fa05 f202 	lsl.w	r2, r5, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035f4:	ea23 0302 	bic.w	r3, r3, r2
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035f8:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035fa:	634b      	str	r3, [r1, #52]	; 0x34
 80035fc:	e677      	b.n	80032ee <HAL_PCD_IRQHandler+0x4da>
            (void)USB_FlushTxFifo(USBx, epnum);
 80035fe:	9804      	ldr	r0, [sp, #16]
 8003600:	4631      	mov	r1, r6
 8003602:	f001 fd45 	bl	8005090 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8003606:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800360a:	2b01      	cmp	r3, #1
 800360c:	f000 80a8 	beq.w	8003760 <HAL_PCD_IRQHandler+0x94c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003610:	2302      	movs	r3, #2
 8003612:	f8c9 3008 	str.w	r3, [r9, #8]
 8003616:	e6a5      	b.n	8003364 <HAL_PCD_IRQHandler+0x550>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003618:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800361c:	421e      	tst	r6, r3
 800361e:	f43f ac34 	beq.w	8002e8a <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003622:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8003626:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800362a:	f3c6 120a 	ubfx	r2, r6, #4, #11
 800362e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8003632:	4628      	mov	r0, r5
 8003634:	4616      	mov	r6, r2
 8003636:	f002 f821 	bl	800567c <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800363a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800363e:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003640:	4433      	add	r3, r6
 8003642:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003646:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800364a:	4433      	add	r3, r6
 800364c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8003650:	e41b      	b.n	8002e8a <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 8003652:	4620      	mov	r0, r4
 8003654:	f004 fc0c 	bl	8007e70 <HAL_PCD_SuspendCallback>
 8003658:	e574      	b.n	8003144 <HAL_PCD_IRQHandler+0x330>
        HAL_PCD_DisconnectCallback(hpcd);
 800365a:	4620      	mov	r0, r4
 800365c:	f004 fc30 	bl	8007ec0 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	e564      	b.n	800312e <HAL_PCD_IRQHandler+0x31a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003668:	4413      	add	r3, r2
 800366a:	64fb      	str	r3, [r7, #76]	; 0x4c
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800366c:	2e00      	cmp	r6, #0
 800366e:	f47f ae63 	bne.w	8003338 <HAL_PCD_IRQHandler+0x524>
 8003672:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003674:	2b00      	cmp	r3, #0
 8003676:	f47f ae5f 	bne.w	8003338 <HAL_PCD_IRQHandler+0x524>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003680:	f002 f8f0 	bl	8005864 <USB_EP0_OutStart>
 8003684:	e658      	b.n	8003338 <HAL_PCD_IRQHandler+0x524>
  HAL_PCD_SetupStageCallback(hpcd);
 8003686:	4620      	mov	r0, r4
 8003688:	f004 fbc2 	bl	8007e10 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800368c:	e698      	b.n	80033c0 <HAL_PCD_IRQHandler+0x5ac>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800368e:	0719      	lsls	r1, r3, #28
 8003690:	f140 8097 	bpl.w	80037c2 <HAL_PCD_IRQHandler+0x9ae>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003694:	494d      	ldr	r1, [pc, #308]	; (80037cc <HAL_PCD_IRQHandler+0x9b8>)
 8003696:	458c      	cmp	ip, r1
 8003698:	f67f ae8e 	bls.w	80033b8 <HAL_PCD_IRQHandler+0x5a4>
 800369c:	0418      	lsls	r0, r3, #16
 800369e:	f57f ae8b 	bpl.w	80033b8 <HAL_PCD_IRQHandler+0x5a4>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036a6:	6091      	str	r1, [r2, #8]
 80036a8:	e686      	b.n	80033b8 <HAL_PCD_IRQHandler+0x5a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036aa:	4634      	mov	r4, r6
  if (ep->xfer_len <= ep->xfer_count)
 80036ac:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036ae:	f8d4 b000 	ldr.w	fp, [r4]
 80036b2:	9e06      	ldr	r6, [sp, #24]
 80036b4:	46c8      	mov	r8, r9
 80036b6:	4658      	mov	r0, fp
 80036b8:	46d1      	mov	r9, sl
  if (ep->xfer_len <= ep->xfer_count)
 80036ba:	429d      	cmp	r5, r3
 80036bc:	f63f ae17 	bhi.w	80032ee <HAL_PCD_IRQHandler+0x4da>
 80036c0:	e78e      	b.n	80035e0 <HAL_PCD_IRQHandler+0x7cc>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036c2:	2900      	cmp	r1, #0
 80036c4:	f6bf acbb 	bge.w	800303e <HAL_PCD_IRQHandler+0x22a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c8:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80036ca:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036ce:	f851 0bf0 	ldr.w	r0, [r1], #240
 80036d2:	f001 ff79 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036d6:	6863      	ldr	r3, [r4, #4]
 80036d8:	e4b1      	b.n	800303e <HAL_PCD_IRQHandler+0x22a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036da:	6820      	ldr	r0, [r4, #0]
 80036dc:	f504 7128 	add.w	r1, r4, #672	; 0x2a0
 80036e0:	f001 ff72 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	e40f      	b.n	8002f08 <HAL_PCD_IRQHandler+0xf4>
              ep->is_iso_incomplete = 0U;
 80036e8:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036ea:	4659      	mov	r1, fp
              ep->is_iso_incomplete = 0U;
 80036ec:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036f0:	4620      	mov	r0, r4
 80036f2:	f004 fbd9 	bl	8007ea8 <HAL_PCD_ISOOUTIncompleteCallback>
 80036f6:	e678      	b.n	80033ea <HAL_PCD_IRQHandler+0x5d6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036f8:	2900      	cmp	r1, #0
 80036fa:	f6bf aca9 	bge.w	8003050 <HAL_PCD_IRQHandler+0x23c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036fe:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003700:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003704:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8003708:	f001 ff5e 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800370c:	6863      	ldr	r3, [r4, #4]
 800370e:	e49f      	b.n	8003050 <HAL_PCD_IRQHandler+0x23c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003710:	6820      	ldr	r0, [r4, #0]
 8003712:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 8003716:	f001 ff57 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800371a:	6863      	ldr	r3, [r4, #4]
 800371c:	f7ff bbfb 	b.w	8002f16 <HAL_PCD_IRQHandler+0x102>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003720:	2900      	cmp	r1, #0
 8003722:	f6bf ac9e 	bge.w	8003062 <HAL_PCD_IRQHandler+0x24e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003726:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003728:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800372c:	f504 719c 	add.w	r1, r4, #312	; 0x138
 8003730:	f001 ff4a 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003734:	6863      	ldr	r3, [r4, #4]
 8003736:	e494      	b.n	8003062 <HAL_PCD_IRQHandler+0x24e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003738:	2900      	cmp	r1, #0
 800373a:	f6bf ac9b 	bge.w	8003074 <HAL_PCD_IRQHandler+0x260>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800373e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003740:	f884 215f 	strb.w	r2, [r4, #351]	; 0x15f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003744:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 8003748:	f001 ff3e 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800374c:	6863      	ldr	r3, [r4, #4]
 800374e:	e491      	b.n	8003074 <HAL_PCD_IRQHandler+0x260>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003750:	0419      	lsls	r1, r3, #16
 8003752:	d4a6      	bmi.n	80036a2 <HAL_PCD_IRQHandler+0x88e>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003754:	069b      	lsls	r3, r3, #26
 8003756:	f57f aef8 	bpl.w	800354a <HAL_PCD_IRQHandler+0x736>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800375a:	2120      	movs	r1, #32
 800375c:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800375e:	e6f4      	b.n	800354a <HAL_PCD_IRQHandler+0x736>
              ep->is_iso_incomplete = 0U;
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003768:	4651      	mov	r1, sl
 800376a:	4620      	mov	r0, r4
 800376c:	f004 fba0 	bl	8007eb0 <HAL_PCD_ISOINIncompleteCallback>
 8003770:	e74e      	b.n	8003610 <HAL_PCD_IRQHandler+0x7fc>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003772:	2900      	cmp	r1, #0
 8003774:	f6bf ac87 	bge.w	8003086 <HAL_PCD_IRQHandler+0x272>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003778:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800377a:	f884 2183 	strb.w	r2, [r4, #387]	; 0x183
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800377e:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 8003782:	f001 ff21 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003786:	6863      	ldr	r3, [r4, #4]
 8003788:	e47d      	b.n	8003086 <HAL_PCD_IRQHandler+0x272>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800378a:	6820      	ldr	r0, [r4, #0]
 800378c:	f504 714c 	add.w	r1, r4, #816	; 0x330
 8003790:	f001 ff1a 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003794:	6863      	ldr	r3, [r4, #4]
 8003796:	f7ff bbd3 	b.w	8002f40 <HAL_PCD_IRQHandler+0x12c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800379a:	2900      	cmp	r1, #0
 800379c:	f6bf ac7c 	bge.w	8003098 <HAL_PCD_IRQHandler+0x284>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037a0:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037a2:	f884 21a7 	strb.w	r2, [r4, #423]	; 0x1a7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037a6:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 80037aa:	f001 ff0d 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ae:	6863      	ldr	r3, [r4, #4]
 80037b0:	e472      	b.n	8003098 <HAL_PCD_IRQHandler+0x284>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	f504 7155 	add.w	r1, r4, #852	; 0x354
 80037b8:	f001 ff06 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	f7ff bbc6 	b.w	8002f4e <HAL_PCD_IRQHandler+0x13a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037c2:	0699      	lsls	r1, r3, #26
 80037c4:	d572      	bpl.n	80038ac <HAL_PCD_IRQHandler+0xa98>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037c6:	2120      	movs	r1, #32
 80037c8:	6091      	str	r1, [r2, #8]
 80037ca:	e5f5      	b.n	80033b8 <HAL_PCD_IRQHandler+0x5a4>
 80037cc:	4f54300a 	.word	0x4f54300a
 80037d0:	4f54310a 	.word	0x4f54310a
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037d4:	2900      	cmp	r1, #0
 80037d6:	f6bf ac68 	bge.w	80030aa <HAL_PCD_IRQHandler+0x296>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037da:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037dc:	f884 21cb 	strb.w	r2, [r4, #459]	; 0x1cb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037e0:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 80037e4:	f001 fef0 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e8:	6863      	ldr	r3, [r4, #4]
 80037ea:	e45e      	b.n	80030aa <HAL_PCD_IRQHandler+0x296>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037ec:	6820      	ldr	r0, [r4, #0]
 80037ee:	f504 715e 	add.w	r1, r4, #888	; 0x378
 80037f2:	f001 fee9 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037f6:	6863      	ldr	r3, [r4, #4]
 80037f8:	f7ff bbb0 	b.w	8002f5c <HAL_PCD_IRQHandler+0x148>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037fc:	2900      	cmp	r1, #0
 80037fe:	f6bf ac5d 	bge.w	80030bc <HAL_PCD_IRQHandler+0x2a8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003802:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003804:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003808:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 800380c:	f001 fedc 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003810:	6863      	ldr	r3, [r4, #4]
 8003812:	e453      	b.n	80030bc <HAL_PCD_IRQHandler+0x2a8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003814:	6820      	ldr	r0, [r4, #0]
 8003816:	f504 7167 	add.w	r1, r4, #924	; 0x39c
 800381a:	f001 fed5 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800381e:	6863      	ldr	r3, [r4, #4]
 8003820:	f7ff bba3 	b.w	8002f6a <HAL_PCD_IRQHandler+0x156>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003824:	2900      	cmp	r1, #0
 8003826:	f6bf ac52 	bge.w	80030ce <HAL_PCD_IRQHandler+0x2ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800382a:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800382c:	f884 2213 	strb.w	r2, [r4, #531]	; 0x213
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003830:	f504 7104 	add.w	r1, r4, #528	; 0x210
 8003834:	f001 fec8 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	e448      	b.n	80030ce <HAL_PCD_IRQHandler+0x2ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 8003842:	f001 fec1 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003846:	6863      	ldr	r3, [r4, #4]
 8003848:	f7ff bb96 	b.w	8002f78 <HAL_PCD_IRQHandler+0x164>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800384c:	2900      	cmp	r1, #0
 800384e:	f6bf ac47 	bge.w	80030e0 <HAL_PCD_IRQHandler+0x2cc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003852:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003854:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003858:	f504 710d 	add.w	r1, r4, #564	; 0x234
 800385c:	f001 feb4 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003860:	6863      	ldr	r3, [r4, #4]
 8003862:	e43d      	b.n	80030e0 <HAL_PCD_IRQHandler+0x2cc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 800386a:	f001 fead 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800386e:	6863      	ldr	r3, [r4, #4]
 8003870:	f7ff bb89 	b.w	8002f86 <HAL_PCD_IRQHandler+0x172>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003874:	2900      	cmp	r1, #0
 8003876:	f6bf ac3c 	bge.w	80030f2 <HAL_PCD_IRQHandler+0x2de>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800387a:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800387c:	f884 225b 	strb.w	r2, [r4, #603]	; 0x25b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003880:	f504 7116 	add.w	r1, r4, #600	; 0x258
 8003884:	f001 fea0 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003888:	6863      	ldr	r3, [r4, #4]
 800388a:	e432      	b.n	80030f2 <HAL_PCD_IRQHandler+0x2de>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	f504 6181 	add.w	r1, r4, #1032	; 0x408
 8003892:	f001 fe99 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003896:	6863      	ldr	r3, [r4, #4]
 8003898:	f7ff bb7c 	b.w	8002f94 <HAL_PCD_IRQHandler+0x180>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800389c:	6820      	ldr	r0, [r4, #0]
 800389e:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80038a2:	f001 fe91 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a6:	6863      	ldr	r3, [r4, #4]
 80038a8:	f7ff bb7b 	b.w	8002fa2 <HAL_PCD_IRQHandler+0x18e>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038ac:	f013 0f28 	tst.w	r3, #40	; 0x28
 80038b0:	f47f ad82 	bne.w	80033b8 <HAL_PCD_IRQHandler+0x5a4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b4:	491b      	ldr	r1, [pc, #108]	; (8003924 <HAL_PCD_IRQHandler+0xb10>)
 80038b6:	458c      	cmp	ip, r1
 80038b8:	d902      	bls.n	80038c0 <HAL_PCD_IRQHandler+0xaac>
 80038ba:	041b      	lsls	r3, r3, #16
 80038bc:	f53f aef1 	bmi.w	80036a2 <HAL_PCD_IRQHandler+0x88e>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038c0:	6911      	ldr	r1, [r2, #16]
 80038c2:	f8da 2298 	ldr.w	r2, [sl, #664]	; 0x298
 80038c6:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80038ca:	1a52      	subs	r2, r2, r1
 80038cc:	f8ca 229c 	str.w	r2, [sl, #668]	; 0x29c
        if (epnum == 0U)
 80038d0:	f1b9 0f00 	cmp.w	r9, #0
 80038d4:	f47f ae39 	bne.w	800354a <HAL_PCD_IRQHandler+0x736>
          if (ep->xfer_len == 0U)
 80038d8:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
 80038dc:	b1d9      	cbz	r1, 8003916 <HAL_PCD_IRQHandler+0xb02>
            ep->xfer_buff += ep->xfer_count;
 80038de:	f8d4 128c 	ldr.w	r1, [r4, #652]	; 0x28c
 80038e2:	4411      	add	r1, r2
 80038e4:	f8c4 128c 	str.w	r1, [r4, #652]	; 0x28c
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038e8:	e62f      	b.n	800354a <HAL_PCD_IRQHandler+0x736>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038ea:	6820      	ldr	r0, [r4, #0]
 80038ec:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 80038f0:	f001 fe6a 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f4:	6863      	ldr	r3, [r4, #4]
 80038f6:	f7ff bb5b 	b.w	8002fb0 <HAL_PCD_IRQHandler+0x19c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038fa:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80038fe:	4649      	mov	r1, r9
 8003900:	f001 ffb0 	bl	8005864 <USB_EP0_OutStart>
 8003904:	e621      	b.n	800354a <HAL_PCD_IRQHandler+0x736>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	f204 4174 	addw	r1, r4, #1140	; 0x474
 800390c:	f001 fe5c 	bl	80055c8 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003910:	6863      	ldr	r3, [r4, #4]
 8003912:	f7ff bb54 	b.w	8002fbe <HAL_PCD_IRQHandler+0x1aa>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003916:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800391a:	2101      	movs	r1, #1
 800391c:	f001 ffa2 	bl	8005864 <USB_EP0_OutStart>
 8003920:	e613      	b.n	800354a <HAL_PCD_IRQHandler+0x736>
 8003922:	bf00      	nop
 8003924:	4f54300a 	.word	0x4f54300a

08003928 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003928:	f890 24bc 	ldrb.w	r2, [r0, #1212]	; 0x4bc
 800392c:	2a01      	cmp	r2, #1
 800392e:	d00d      	beq.n	800394c <HAL_PCD_SetAddress+0x24>
{
 8003930:	b510      	push	{r4, lr}
 8003932:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003934:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003936:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003938:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800393c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003940:	f001 ff1c 	bl	800577c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003944:	2000      	movs	r0, #0
 8003946:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 800394a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800394c:	2002      	movs	r0, #2
}
 800394e:	4770      	bx	lr

08003950 <HAL_PCD_EP_Open>:
{
 8003950:	b510      	push	{r4, lr}
 8003952:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003956:	0609      	lsls	r1, r1, #24
{
 8003958:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800395a:	d427      	bmi.n	80039ac <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800395c:	f04f 0c24 	mov.w	ip, #36	; 0x24
 8003960:	fb0c 0c0e 	mla	ip, ip, lr, r0
 8003964:	f50c 711f 	add.w	r1, ip, #636	; 0x27c
    ep->is_in = 0U;
 8003968:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 800396c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8003970:	2000      	movs	r0, #0
 8003972:	f88c 027d 	strb.w	r0, [ip, #637]	; 0x27d
  ep->maxpacket = ep_mps;
 8003976:	60ca      	str	r2, [r1, #12]
  if (ep->is_in != 0U)
 8003978:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800397a:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800397e:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8003980:	b10a      	cbz	r2, 8003986 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8003982:	f8a1 e008 	strh.w	lr, [r1, #8]
  if (ep_type == EP_TYPE_BULK)
 8003986:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003988:	bf04      	itt	eq
 800398a:	2300      	moveq	r3, #0
 800398c:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 800398e:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8003992:	2b01      	cmp	r3, #1
 8003994:	d018      	beq.n	80039c8 <HAL_PCD_EP_Open+0x78>
 8003996:	2301      	movs	r3, #1
 8003998:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	f001 fbad 	bl	80050fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039a2:	2300      	movs	r3, #0
 80039a4:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  return ret;
 80039a8:	4618      	mov	r0, r3
}
 80039aa:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ac:	2024      	movs	r0, #36	; 0x24
 80039ae:	fb00 400e 	mla	r0, r0, lr, r4
 80039b2:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 80039b6:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 80039ba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80039be:	f04f 0c01 	mov.w	ip, #1
 80039c2:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 80039c6:	e7d6      	b.n	8003976 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 80039c8:	2002      	movs	r0, #2
}
 80039ca:	bd10      	pop	{r4, pc}

080039cc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80039cc:	f001 030f 	and.w	r3, r1, #15
    ep->is_in = 1U;
 80039d0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80039d4:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d8:	f04f 0124 	mov.w	r1, #36	; 0x24
{
 80039dc:	b510      	push	{r4, lr}
    ep->is_in = 1U;
 80039de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 80039e2:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e4:	fb01 0103 	mla	r1, r1, r3, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80039e8:	d113      	bne.n	8003a12 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ea:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 80039ee:	2000      	movs	r0, #0
 80039f0:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039f4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80039f6:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d012      	beq.n	8003a24 <HAL_PCD_EP_Close+0x58>
 80039fe:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a00:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003a02:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a06:	f001 fbc5 	bl	8005194 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8003a10:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a12:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003a14:	2001      	movs	r0, #1
 8003a16:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a1a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003a1c:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d1ec      	bne.n	80039fe <HAL_PCD_EP_Close+0x32>
 8003a24:	2002      	movs	r0, #2
}
 8003a26:	bd10      	pop	{r4, pc}

08003a28 <HAL_PCD_EP_Receive>:
{
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8003a2e:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8003a32:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a36:	2124      	movs	r1, #36	; 0x24
  ep->xfer_len = len;
 8003a38:	f8cc 3294 	str.w	r3, [ip, #660]	; 0x294
  ep->xfer_count = 0U;
 8003a3c:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003a3e:	f8cc 228c 	str.w	r2, [ip, #652]	; 0x28c
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a42:	f88c 427c 	strb.w	r4, [ip, #636]	; 0x27c
  ep->xfer_count = 0U;
 8003a46:	f8cc 329c 	str.w	r3, [ip, #668]	; 0x29c
  ep->is_in = 0U;
 8003a4a:	f88c 327d 	strb.w	r3, [ip, #637]	; 0x27d
  if (hpcd->Init.dma_enable == 1U)
 8003a4e:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	fb01 0104 	mla	r1, r1, r4, r0
  if (hpcd->Init.dma_enable == 1U)
 8003a54:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8003a56:	bf08      	it	eq
 8003a58:	f8cc 2290 	streq.w	r2, [ip, #656]	; 0x290
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a5c:	6800      	ldr	r0, [r0, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a5e:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a62:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a64:	b91c      	cbnz	r4, 8003a6e <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a66:	f001 fd03 	bl	8005470 <USB_EP0StartXfer>
}
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a6e:	f001 fbf3 	bl	8005258 <USB_EPStartXfer>
}
 8003a72:	2000      	movs	r0, #0
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	bf00      	nop

08003a78 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a78:	f001 010f 	and.w	r1, r1, #15
 8003a7c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003a80:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8003a84:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop

08003a8c <HAL_PCD_EP_Transmit>:
{
 8003a8c:	b510      	push	{r4, lr}
 8003a8e:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8003a92:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8003a96:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9a:	2124      	movs	r1, #36	; 0x24
  ep->xfer_len = len;
 8003a9c:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->xfer_count = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  ep->is_in = 1U;
 8003aa6:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003aa8:	f8cc 204c 	str.w	r2, [ip, #76]	; 0x4c
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aac:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 8003ab0:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8003ab4:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab6:	fb01 0104 	mla	r1, r1, r4, r0
  if (hpcd->Init.dma_enable == 1U)
 8003aba:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8003abc:	bf08      	it	eq
 8003abe:	f8cc 2050 	streq.w	r2, [ip, #80]	; 0x50
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ac2:	6800      	ldr	r0, [r0, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac4:	313c      	adds	r1, #60	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ac6:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ac8:	b91c      	cbnz	r4, 8003ad2 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aca:	f001 fcd1 	bl	8005470 <USB_EP0StartXfer>
}
 8003ace:	2000      	movs	r0, #0
 8003ad0:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad2:	f001 fbc1 	bl	8005258 <USB_EPStartXfer>
}
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	bf00      	nop

08003adc <HAL_PCD_EP_SetStall>:
{
 8003adc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ade:	6843      	ldr	r3, [r0, #4]
 8003ae0:	f001 050f 	and.w	r5, r1, #15
 8003ae4:	429d      	cmp	r5, r3
 8003ae6:	d833      	bhi.n	8003b50 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8003ae8:	060b      	lsls	r3, r1, #24
 8003aea:	4604      	mov	r4, r0
 8003aec:	d41c      	bmi.n	8003b28 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8003aee:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8003af8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8003afc:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  ep->is_stall = 1U;
 8003b06:	2301      	movs	r3, #1
 8003b08:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b0a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003b0c:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d01b      	beq.n	8003b4c <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b14:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003b16:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b1a:	f001 fdd5 	bl	80056c8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b1e:	b1cd      	cbz	r5, 8003b54 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003b28:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2c:	2124      	movs	r1, #36	; 0x24
 8003b2e:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8003b32:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003b36:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b38:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b42:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003b44:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1e3      	bne.n	8003b14 <HAL_PCD_EP_SetStall+0x38>
 8003b4c:	2002      	movs	r0, #2
}
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b50:	2001      	movs	r0, #1
}
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b54:	7c21      	ldrb	r1, [r4, #16]
 8003b56:	6820      	ldr	r0, [r4, #0]
 8003b58:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003b5c:	f001 fe82 	bl	8005864 <USB_EP0_OutStart>
 8003b60:	e7de      	b.n	8003b20 <HAL_PCD_EP_SetStall+0x44>
 8003b62:	bf00      	nop

08003b64 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b64:	6842      	ldr	r2, [r0, #4]
{
 8003b66:	b538      	push	{r3, r4, r5, lr}
 8003b68:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d82e      	bhi.n	8003bce <HAL_PCD_EP_ClrStall+0x6a>
    ep->is_in = 1U;
 8003b70:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8003b74:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b78:	f04f 0124 	mov.w	r1, #36	; 0x24
 8003b7c:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8003b7e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b82:	fb01 0103 	mla	r1, r1, r3, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003b86:	d115      	bne.n	8003bb4 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b88:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8003b8c:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8003b8e:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8003b90:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->is_stall = 0U;
 8003b94:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b96:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003b98:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d014      	beq.n	8003bca <HAL_PCD_EP_ClrStall+0x66>
 8003ba0:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ba2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003ba4:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ba8:	f001 fdbc 	bl	8005724 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bac:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
  return HAL_OK;
 8003bb0:	4628      	mov	r0, r5
}
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003bb6:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 8003bb8:	2500      	movs	r5, #0
    ep->is_in = 1U;
 8003bba:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->is_stall = 0U;
 8003bbe:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003bc2:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d1ea      	bne.n	8003ba0 <HAL_PCD_EP_ClrStall+0x3c>
 8003bca:	2002      	movs	r0, #2
}
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003bce:	2001      	movs	r0, #1
}
 8003bd0:	bd38      	pop	{r3, r4, r5, pc}
 8003bd2:	bf00      	nop

08003bd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bd4:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bd6:	6804      	ldr	r4, [r0, #0]
 8003bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003bda:	b931      	cbnz	r1, 8003bea <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bdc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8003be0:	62a2      	str	r2, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003be2:	2000      	movs	r0, #0
 8003be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003be8:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003bec:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bee:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003bf2:	d00b      	beq.n	8003c0c <HAL_PCDEx_SetTxFiFo+0x38>
 8003bf4:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bf6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8003bfa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8003bfe:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c00:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c06:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003c0a:	d3f4      	bcc.n	8003bf6 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c0c:	3140      	adds	r1, #64	; 0x40
 8003c0e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003c12:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 8003c16:	6062      	str	r2, [r4, #4]
}
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003c20:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003c22:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003c24:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003c26:	4770      	bx	lr

08003c28 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop

08003c2c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	f000 81a2 	beq.w	8003f76 <HAL_RCC_OscConfig+0x34a>
{
 8003c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c36:	6803      	ldr	r3, [r0, #0]
 8003c38:	07dd      	lsls	r5, r3, #31
{
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3e:	d52f      	bpl.n	8003ca0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c40:	499e      	ldr	r1, [pc, #632]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003c42:	688a      	ldr	r2, [r1, #8]
 8003c44:	f002 020c 	and.w	r2, r2, #12
 8003c48:	2a04      	cmp	r2, #4
 8003c4a:	f000 80ed 	beq.w	8003e28 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4e:	688a      	ldr	r2, [r1, #8]
 8003c50:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c54:	2a08      	cmp	r2, #8
 8003c56:	f000 80e3 	beq.w	8003e20 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5a:	6863      	ldr	r3, [r4, #4]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c60:	f000 80ec 	beq.w	8003e3c <HAL_RCC_OscConfig+0x210>
 8003c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c68:	f000 8175 	beq.w	8003f56 <HAL_RCC_OscConfig+0x32a>
 8003c6c:	4d93      	ldr	r5, [pc, #588]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003c6e:	682a      	ldr	r2, [r5, #0]
 8003c70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c74:	602a      	str	r2, [r5, #0]
 8003c76:	682a      	ldr	r2, [r5, #0]
 8003c78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c7c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 80e1 	bne.w	8003e46 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fd fd70 	bl	8001768 <HAL_GetTick>
 8003c88:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	e005      	b.n	8003c98 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7fd fd6c 	bl	8001768 <HAL_GetTick>
 8003c90:	1b80      	subs	r0, r0, r6
 8003c92:	2864      	cmp	r0, #100	; 0x64
 8003c94:	f200 8101 	bhi.w	8003e9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	039b      	lsls	r3, r3, #14
 8003c9c:	d4f6      	bmi.n	8003c8c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	079f      	lsls	r7, r3, #30
 8003ca2:	d528      	bpl.n	8003cf6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca4:	4a85      	ldr	r2, [pc, #532]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003ca6:	6891      	ldr	r1, [r2, #8]
 8003ca8:	f011 0f0c 	tst.w	r1, #12
 8003cac:	f000 8090 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb0:	6891      	ldr	r1, [r2, #8]
 8003cb2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb6:	2908      	cmp	r1, #8
 8003cb8:	f000 8086 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cbc:	68e3      	ldr	r3, [r4, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 810e 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc4:	4b7e      	ldr	r3, [pc, #504]	; (8003ec0 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	4e7d      	ldr	r6, [pc, #500]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fd4c 	bl	8001768 <HAL_GetTick>
 8003cd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd4:	f7fd fd48 	bl	8001768 <HAL_GetTick>
 8003cd8:	1b40      	subs	r0, r0, r5
 8003cda:	2802      	cmp	r0, #2
 8003cdc:	f200 80dd 	bhi.w	8003e9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce0:	6833      	ldr	r3, [r6, #0]
 8003ce2:	0798      	lsls	r0, r3, #30
 8003ce4:	d5f6      	bpl.n	8003cd4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	6833      	ldr	r3, [r6, #0]
 8003ce8:	6922      	ldr	r2, [r4, #16]
 8003cea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003cee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003cf2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	071a      	lsls	r2, r3, #28
 8003cf8:	d451      	bmi.n	8003d9e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfa:	0758      	lsls	r0, r3, #29
 8003cfc:	d52f      	bpl.n	8003d5e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfe:	4a6f      	ldr	r2, [pc, #444]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003d00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003d02:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003d06:	d07f      	beq.n	8003e08 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8003d08:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4e6e      	ldr	r6, [pc, #440]	; (8003ec4 <HAL_RCC_OscConfig+0x298>)
 8003d0c:	6833      	ldr	r3, [r6, #0]
 8003d0e:	05d9      	lsls	r1, r3, #23
 8003d10:	f140 80b3 	bpl.w	8003e7a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d14:	68a3      	ldr	r3, [r4, #8]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	f000 80c3 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x276>
 8003d1c:	2b05      	cmp	r3, #5
 8003d1e:	f000 812c 	beq.w	8003f7a <HAL_RCC_OscConfig+0x34e>
 8003d22:	4e66      	ldr	r6, [pc, #408]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003d24:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	6732      	str	r2, [r6, #112]	; 0x70
 8003d2c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003d2e:	f022 0204 	bic.w	r2, r2, #4
 8003d32:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f040 80b9 	bne.w	8003eac <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fd15 	bl	8001768 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003d42:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d44:	e005      	b.n	8003d52 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fd fd0f 	bl	8001768 <HAL_GetTick>
 8003d4a:	1bc0      	subs	r0, r0, r7
 8003d4c:	4540      	cmp	r0, r8
 8003d4e:	f200 80a4 	bhi.w	8003e9a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d52:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003d54:	0798      	lsls	r0, r3, #30
 8003d56:	d4f6      	bmi.n	8003d46 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d58:	2d00      	cmp	r5, #0
 8003d5a:	f040 8106 	bne.w	8003f6a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5e:	69a0      	ldr	r0, [r4, #24]
 8003d60:	b1c8      	cbz	r0, 8003d96 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d62:	4d56      	ldr	r5, [pc, #344]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003d64:	68ab      	ldr	r3, [r5, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	f000 80c9 	beq.w	8003f02 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <HAL_RCC_OscConfig+0x294>)
 8003d72:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d74:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003d76:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d78:	f000 8109 	beq.w	8003f8e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fcf4 	bl	8001768 <HAL_GetTick>
 8003d80:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	e005      	b.n	8003d90 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd fcf0 	bl	8001768 <HAL_GetTick>
 8003d88:	1b00      	subs	r0, r0, r4
 8003d8a:	2802      	cmp	r0, #2
 8003d8c:	f200 8085 	bhi.w	8003e9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d90:	682b      	ldr	r3, [r5, #0]
 8003d92:	019b      	lsls	r3, r3, #6
 8003d94:	d4f6      	bmi.n	8003d84 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003d96:	2000      	movs	r0, #0
}
 8003d98:	b002      	add	sp, #8
 8003d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9e:	6963      	ldr	r3, [r4, #20]
 8003da0:	b30b      	cbz	r3, 8003de6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8003da2:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da4:	4e45      	ldr	r6, [pc, #276]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8003da6:	2201      	movs	r2, #1
 8003da8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003dac:	f7fd fcdc 	bl	8001768 <HAL_GetTick>
 8003db0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	e004      	b.n	8003dbe <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fd fcd8 	bl	8001768 <HAL_GetTick>
 8003db8:	1b40      	subs	r0, r0, r5
 8003dba:	2802      	cmp	r0, #2
 8003dbc:	d86d      	bhi.n	8003e9a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbe:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003dc0:	079b      	lsls	r3, r3, #30
 8003dc2:	d5f7      	bpl.n	8003db4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	e798      	b.n	8003cfa <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc8:	6852      	ldr	r2, [r2, #4]
 8003dca:	0256      	lsls	r6, r2, #9
 8003dcc:	f53f af76 	bmi.w	8003cbc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd0:	4a3a      	ldr	r2, [pc, #232]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	0795      	lsls	r5, r2, #30
 8003dd6:	d544      	bpl.n	8003e62 <HAL_RCC_OscConfig+0x236>
 8003dd8:	68e2      	ldr	r2, [r4, #12]
 8003dda:	2a01      	cmp	r2, #1
 8003ddc:	d041      	beq.n	8003e62 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8003dde:	2001      	movs	r0, #1
}
 8003de0:	b002      	add	sp, #8
 8003de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003de6:	4a36      	ldr	r2, [pc, #216]	; (8003ec0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	4e34      	ldr	r6, [pc, #208]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8003dea:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003dee:	f7fd fcbb 	bl	8001768 <HAL_GetTick>
 8003df2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df4:	e004      	b.n	8003e00 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df6:	f7fd fcb7 	bl	8001768 <HAL_GetTick>
 8003dfa:	1b40      	subs	r0, r0, r5
 8003dfc:	2802      	cmp	r0, #2
 8003dfe:	d84c      	bhi.n	8003e9a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003e02:	079f      	lsls	r7, r3, #30
 8003e04:	d4f7      	bmi.n	8003df6 <HAL_RCC_OscConfig+0x1ca>
 8003e06:	e7dd      	b.n	8003dc4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
 8003e12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003e1c:	2501      	movs	r5, #1
 8003e1e:	e774      	b.n	8003d0a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e20:	684a      	ldr	r2, [r1, #4]
 8003e22:	0250      	lsls	r0, r2, #9
 8003e24:	f57f af19 	bpl.w	8003c5a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	4a24      	ldr	r2, [pc, #144]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	0391      	lsls	r1, r2, #14
 8003e2e:	f57f af37 	bpl.w	8003ca0 <HAL_RCC_OscConfig+0x74>
 8003e32:	6862      	ldr	r2, [r4, #4]
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	f47f af33 	bne.w	8003ca0 <HAL_RCC_OscConfig+0x74>
 8003e3a:	e7d0      	b.n	8003dde <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3c:	4a1f      	ldr	r2, [pc, #124]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003e3e:	6813      	ldr	r3, [r2, #0]
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e46:	f7fd fc8f 	bl	8001768 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4e1c      	ldr	r6, [pc, #112]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003e4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	e004      	b.n	8003e5a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e50:	f7fd fc8a 	bl	8001768 <HAL_GetTick>
 8003e54:	1b40      	subs	r0, r0, r5
 8003e56:	2864      	cmp	r0, #100	; 0x64
 8003e58:	d81f      	bhi.n	8003e9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	6833      	ldr	r3, [r6, #0]
 8003e5c:	039a      	lsls	r2, r3, #14
 8003e5e:	d5f7      	bpl.n	8003e50 <HAL_RCC_OscConfig+0x224>
 8003e60:	e71d      	b.n	8003c9e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e62:	4916      	ldr	r1, [pc, #88]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003e64:	6920      	ldr	r0, [r4, #16]
 8003e66:	680a      	ldr	r2, [r1, #0]
 8003e68:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003e6c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003e70:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e72:	071a      	lsls	r2, r3, #28
 8003e74:	f57f af41 	bpl.w	8003cfa <HAL_RCC_OscConfig+0xce>
 8003e78:	e791      	b.n	8003d9e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7a:	6833      	ldr	r3, [r6, #0]
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e80:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003e82:	f7fd fc71 	bl	8001768 <HAL_GetTick>
 8003e86:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	6833      	ldr	r3, [r6, #0]
 8003e8a:	05da      	lsls	r2, r3, #23
 8003e8c:	f53f af42 	bmi.w	8003d14 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e90:	f7fd fc6a 	bl	8001768 <HAL_GetTick>
 8003e94:	1bc0      	subs	r0, r0, r7
 8003e96:	2802      	cmp	r0, #2
 8003e98:	d9f6      	bls.n	8003e88 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8003e9a:	2003      	movs	r0, #3
}
 8003e9c:	b002      	add	sp, #8
 8003e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea2:	4a06      	ldr	r2, [pc, #24]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
 8003ea4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003eac:	f7fd fc5c 	bl	8001768 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	4f02      	ldr	r7, [pc, #8]	; (8003ebc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8003eb2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x2a6>
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	42470000 	.word	0x42470000
 8003ec4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd fc4e 	bl	8001768 <HAL_GetTick>
 8003ecc:	1b80      	subs	r0, r0, r6
 8003ece:	4540      	cmp	r0, r8
 8003ed0:	d8e3      	bhi.n	8003e9a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed4:	079b      	lsls	r3, r3, #30
 8003ed6:	d5f7      	bpl.n	8003ec8 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8003ed8:	2d00      	cmp	r5, #0
 8003eda:	f43f af40 	beq.w	8003d5e <HAL_RCC_OscConfig+0x132>
 8003ede:	e044      	b.n	8003f6a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8003ee0:	4a42      	ldr	r2, [pc, #264]	; (8003fec <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	4e43      	ldr	r6, [pc, #268]	; (8003ff0 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8003ee4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ee6:	f7fd fc3f 	bl	8001768 <HAL_GetTick>
 8003eea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eec:	e004      	b.n	8003ef8 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fd fc3b 	bl	8001768 <HAL_GetTick>
 8003ef2:	1b40      	subs	r0, r0, r5
 8003ef4:	2802      	cmp	r0, #2
 8003ef6:	d8d0      	bhi.n	8003e9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef8:	6833      	ldr	r3, [r6, #0]
 8003efa:	0799      	lsls	r1, r3, #30
 8003efc:	d4f7      	bmi.n	8003eee <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	e6f9      	b.n	8003cf6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f02:	2801      	cmp	r0, #1
 8003f04:	f43f af48 	beq.w	8003d98 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8003f08:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f10:	4291      	cmp	r1, r2
 8003f12:	f47f af64 	bne.w	8003dde <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f18:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1c:	4291      	cmp	r1, r2
 8003f1e:	f47f af5e 	bne.w	8003dde <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f24:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003f28:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f2a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003f2e:	f47f af56 	bne.w	8003dde <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003f34:	0852      	lsrs	r2, r2, #1
 8003f36:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003f3a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f3c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003f40:	f47f af4d 	bne.w	8003dde <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f46:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f4a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8003f4e:	bf14      	ite	ne
 8003f50:	2001      	movne	r0, #1
 8003f52:	2000      	moveq	r0, #0
 8003f54:	e720      	b.n	8003d98 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f56:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <HAL_RCC_OscConfig+0x3c4>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f66:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f68:	e76d      	b.n	8003e46 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6a:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <HAL_RCC_OscConfig+0x3c4>)
 8003f6c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f72:	6413      	str	r3, [r2, #64]	; 0x40
 8003f74:	e6f3      	b.n	8003d5e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8003f76:	2001      	movs	r0, #1
}
 8003f78:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_RCC_OscConfig+0x3c4>)
 8003f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f7e:	f042 0204 	orr.w	r2, r2, #4
 8003f82:	671a      	str	r2, [r3, #112]	; 0x70
 8003f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8c:	e78e      	b.n	8003eac <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8003f8e:	f7fd fbeb 	bl	8001768 <HAL_GetTick>
 8003f92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f94:	e005      	b.n	8003fa2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fd fbe7 	bl	8001768 <HAL_GetTick>
 8003f9a:	1b80      	subs	r0, r0, r6
 8003f9c:	2802      	cmp	r0, #2
 8003f9e:	f63f af7c 	bhi.w	8003e9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	682b      	ldr	r3, [r5, #0]
 8003fa4:	0199      	lsls	r1, r3, #6
 8003fa6:	d4f6      	bmi.n	8003f96 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003fac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003fb4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8003fb8:	0852      	lsrs	r2, r2, #1
 8003fba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003fbe:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	490a      	ldr	r1, [pc, #40]	; (8003fec <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003fc6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fc8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003fca:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fbcc 	bl	8001768 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd0:	4d07      	ldr	r5, [pc, #28]	; (8003ff0 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8003fd2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd4:	e005      	b.n	8003fe2 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fd fbc7 	bl	8001768 <HAL_GetTick>
 8003fda:	1b00      	subs	r0, r0, r4
 8003fdc:	2802      	cmp	r0, #2
 8003fde:	f63f af5c 	bhi.w	8003e9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	682b      	ldr	r3, [r5, #0]
 8003fe4:	019a      	lsls	r2, r3, #6
 8003fe6:	d5f6      	bpl.n	8003fd6 <HAL_RCC_OscConfig+0x3aa>
 8003fe8:	e6d5      	b.n	8003d96 <HAL_RCC_OscConfig+0x16a>
 8003fea:	bf00      	nop
 8003fec:	42470000 	.word	0x42470000
 8003ff0:	40023800 	.word	0x40023800

08003ff4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff4:	4916      	ldr	r1, [pc, #88]	; (8004050 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003ff6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff8:	688b      	ldr	r3, [r1, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d01b      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x46>
 8004002:	2b08      	cmp	r3, #8
 8004004:	d117      	bne.n	8004036 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004006:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004008:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004010:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004014:	d113      	bne.n	800403e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004016:	480f      	ldr	r0, [pc, #60]	; (8004054 <HAL_RCC_GetSysClockFreq+0x60>)
 8004018:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800401c:	fba1 0100 	umull	r0, r1, r1, r0
 8004020:	f7fc fdca 	bl	8000bb8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <HAL_RCC_GetSysClockFreq+0x5c>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800402c:	3301      	adds	r3, #1
 800402e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004030:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004034:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004036:	4807      	ldr	r0, [pc, #28]	; (8004054 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8004038:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800403a:	4807      	ldr	r0, [pc, #28]	; (8004058 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800403c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403e:	4806      	ldr	r0, [pc, #24]	; (8004058 <HAL_RCC_GetSysClockFreq+0x64>)
 8004040:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004044:	2300      	movs	r3, #0
 8004046:	fba1 0100 	umull	r0, r1, r1, r0
 800404a:	f7fc fdb5 	bl	8000bb8 <__aeabi_uldivmod>
 800404e:	e7e9      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x30>
 8004050:	40023800 	.word	0x40023800
 8004054:	00f42400 	.word	0x00f42400
 8004058:	007a1200 	.word	0x007a1200

0800405c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800405c:	2800      	cmp	r0, #0
 800405e:	f000 8087 	beq.w	8004170 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004062:	4a48      	ldr	r2, [pc, #288]	; (8004184 <HAL_RCC_ClockConfig+0x128>)
 8004064:	6813      	ldr	r3, [r2, #0]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	428b      	cmp	r3, r1
{
 800406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004070:	460d      	mov	r5, r1
 8004072:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	d209      	bcs.n	800408a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	b2cb      	uxtb	r3, r1
 8004078:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	6813      	ldr	r3, [r2, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	428b      	cmp	r3, r1
 8004082:	d002      	beq.n	800408a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004084:	2001      	movs	r0, #1
}
 8004086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	0798      	lsls	r0, r3, #30
 800408e:	d514      	bpl.n	80040ba <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	0759      	lsls	r1, r3, #29
 8004092:	d504      	bpl.n	800409e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004094:	493c      	ldr	r1, [pc, #240]	; (8004188 <HAL_RCC_ClockConfig+0x12c>)
 8004096:	688a      	ldr	r2, [r1, #8]
 8004098:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800409c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409e:	071a      	lsls	r2, r3, #28
 80040a0:	d504      	bpl.n	80040ac <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a2:	4939      	ldr	r1, [pc, #228]	; (8004188 <HAL_RCC_ClockConfig+0x12c>)
 80040a4:	688a      	ldr	r2, [r1, #8]
 80040a6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80040aa:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ac:	4936      	ldr	r1, [pc, #216]	; (8004188 <HAL_RCC_ClockConfig+0x12c>)
 80040ae:	68a0      	ldr	r0, [r4, #8]
 80040b0:	688a      	ldr	r2, [r1, #8]
 80040b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80040b6:	4302      	orrs	r2, r0
 80040b8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ba:	07df      	lsls	r7, r3, #31
 80040bc:	d521      	bpl.n	8004102 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040be:	6862      	ldr	r2, [r4, #4]
 80040c0:	2a01      	cmp	r2, #1
 80040c2:	d057      	beq.n	8004174 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c4:	1e93      	subs	r3, r2, #2
 80040c6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c8:	4b2f      	ldr	r3, [pc, #188]	; (8004188 <HAL_RCC_ClockConfig+0x12c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040cc:	d94d      	bls.n	800416a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ce:	0799      	lsls	r1, r3, #30
 80040d0:	d5d8      	bpl.n	8004084 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d2:	4e2d      	ldr	r6, [pc, #180]	; (8004188 <HAL_RCC_ClockConfig+0x12c>)
 80040d4:	68b3      	ldr	r3, [r6, #8]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	4313      	orrs	r3, r2
 80040dc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80040de:	f7fd fb43 	bl	8001768 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80040e6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e8:	e004      	b.n	80040f4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ea:	f7fd fb3d 	bl	8001768 <HAL_GetTick>
 80040ee:	1bc0      	subs	r0, r0, r7
 80040f0:	4540      	cmp	r0, r8
 80040f2:	d844      	bhi.n	800417e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f4:	68b3      	ldr	r3, [r6, #8]
 80040f6:	6862      	ldr	r2, [r4, #4]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004100:	d1f3      	bne.n	80040ea <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004102:	4a20      	ldr	r2, [pc, #128]	; (8004184 <HAL_RCC_ClockConfig+0x128>)
 8004104:	6813      	ldr	r3, [r2, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	42ab      	cmp	r3, r5
 800410c:	d906      	bls.n	800411c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	b2eb      	uxtb	r3, r5
 8004110:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	6813      	ldr	r3, [r2, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	42ab      	cmp	r3, r5
 800411a:	d1b3      	bne.n	8004084 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	075a      	lsls	r2, r3, #29
 8004120:	d506      	bpl.n	8004130 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004122:	4919      	ldr	r1, [pc, #100]	; (8004188 <HAL_RCC_ClockConfig+0x12c>)
 8004124:	68e0      	ldr	r0, [r4, #12]
 8004126:	688a      	ldr	r2, [r1, #8]
 8004128:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800412c:	4302      	orrs	r2, r0
 800412e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	d507      	bpl.n	8004144 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004134:	4a14      	ldr	r2, [pc, #80]	; (8004188 <HAL_RCC_ClockConfig+0x12c>)
 8004136:	6921      	ldr	r1, [r4, #16]
 8004138:	6893      	ldr	r3, [r2, #8]
 800413a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800413e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004142:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004144:	f7ff ff56 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8004148:	4a0f      	ldr	r2, [pc, #60]	; (8004188 <HAL_RCC_ClockConfig+0x12c>)
 800414a:	4c10      	ldr	r4, [pc, #64]	; (800418c <HAL_RCC_ClockConfig+0x130>)
 800414c:	6892      	ldr	r2, [r2, #8]
 800414e:	4910      	ldr	r1, [pc, #64]	; (8004190 <HAL_RCC_ClockConfig+0x134>)
 8004150:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004154:	4603      	mov	r3, r0
 8004156:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004158:	480e      	ldr	r0, [pc, #56]	; (8004194 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800415a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800415c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800415e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004160:	f7fd f916 	bl	8001390 <HAL_InitTick>
  return HAL_OK;
 8004164:	2000      	movs	r0, #0
}
 8004166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	0198      	lsls	r0, r3, #6
 800416c:	d4b1      	bmi.n	80040d2 <HAL_RCC_ClockConfig+0x76>
 800416e:	e789      	b.n	8004084 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004170:	2001      	movs	r0, #1
}
 8004172:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_RCC_ClockConfig+0x12c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	039e      	lsls	r6, r3, #14
 800417a:	d4aa      	bmi.n	80040d2 <HAL_RCC_ClockConfig+0x76>
 800417c:	e782      	b.n	8004084 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800417e:	2003      	movs	r0, #3
 8004180:	e781      	b.n	8004086 <HAL_RCC_ClockConfig+0x2a>
 8004182:	bf00      	nop
 8004184:	40023c00 	.word	0x40023c00
 8004188:	40023800 	.word	0x40023800
 800418c:	0800bab8 	.word	0x0800bab8
 8004190:	20000000 	.word	0x20000000
 8004194:	20000008 	.word	0x20000008

08004198 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004198:	4b01      	ldr	r3, [pc, #4]	; (80041a0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000000 	.word	0x20000000

080041a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80041a6:	4905      	ldr	r1, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	4a05      	ldr	r2, [pc, #20]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80041ac:	6808      	ldr	r0, [r1, #0]
 80041ae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
}
 80041b4:	40d8      	lsrs	r0, r3
 80041b6:	4770      	bx	lr
 80041b8:	40023800 	.word	0x40023800
 80041bc:	20000000 	.word	0x20000000
 80041c0:	0800bac8 	.word	0x0800bac8

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80041c6:	4905      	ldr	r1, [pc, #20]	; (80041dc <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80041cc:	6808      	ldr	r0, [r1, #0]
 80041ce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80041d2:	5cd3      	ldrb	r3, [r2, r3]
}
 80041d4:	40d8      	lsrs	r0, r3
 80041d6:	4770      	bx	lr
 80041d8:	40023800 	.word	0x40023800
 80041dc:	20000000 	.word	0x20000000
 80041e0:	0800bac8 	.word	0x0800bac8

080041e4 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041e4:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041e6:	220f      	movs	r2, #15
 80041e8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	f002 0203 	and.w	r2, r2, #3
 80041f0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80041f8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004200:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	08db      	lsrs	r3, r3, #3
{
 8004206:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004208:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800420c:	4c05      	ldr	r4, [pc, #20]	; (8004224 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800420e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004210:	6823      	ldr	r3, [r4, #0]
}
 8004212:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	600b      	str	r3, [r1, #0]
}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	40023c00 	.word	0x40023c00

08004228 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop

0800422c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800422c:	2800      	cmp	r0, #0
 800422e:	d076      	beq.n	800431e <HAL_TIM_Base_Init+0xf2>
{
 8004230:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004236:	4604      	mov	r4, r0
 8004238:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800423c:	2b00      	cmp	r3, #0
 800423e:	d055      	beq.n	80042ec <HAL_TIM_Base_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004240:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004242:	4938      	ldr	r1, [pc, #224]	; (8004324 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	2302      	movs	r3, #2
 8004246:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800424c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424e:	d052      	beq.n	80042f6 <HAL_TIM_Base_Init+0xca>
 8004250:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004254:	d021      	beq.n	800429a <HAL_TIM_Base_Init+0x6e>
 8004256:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800425a:	428a      	cmp	r2, r1
 800425c:	d01d      	beq.n	800429a <HAL_TIM_Base_Init+0x6e>
 800425e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004262:	428a      	cmp	r2, r1
 8004264:	d019      	beq.n	800429a <HAL_TIM_Base_Init+0x6e>
 8004266:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800426a:	428a      	cmp	r2, r1
 800426c:	d015      	beq.n	800429a <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8004272:	428a      	cmp	r2, r1
 8004274:	d015      	beq.n	80042a2 <HAL_TIM_Base_Init+0x76>
 8004276:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800427a:	428a      	cmp	r2, r1
 800427c:	d011      	beq.n	80042a2 <HAL_TIM_Base_Init+0x76>
 800427e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004282:	428a      	cmp	r2, r1
 8004284:	d00d      	beq.n	80042a2 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004286:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004288:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800428a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004290:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004292:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004294:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004296:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004298:	e010      	b.n	80042bc <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800429a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800429c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80042a0:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80042b4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80042b6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80042ba:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042bc:	2301      	movs	r3, #1
 80042be:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80042c8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80042cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80042d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80042e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80042e8:	2000      	movs	r0, #0
}
 80042ea:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80042ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80042f0:	f7ff ff9a 	bl	8004228 <HAL_TIM_Base_MspInit>
 80042f4:	e7a4      	b.n	8004240 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80042f6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80042fe:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004304:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004306:	69a1      	ldr	r1, [r4, #24]
 8004308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800430e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004310:	68e3      	ldr	r3, [r4, #12]
 8004312:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004314:	6863      	ldr	r3, [r4, #4]
 8004316:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004318:	6963      	ldr	r3, [r4, #20]
 800431a:	6313      	str	r3, [r2, #48]	; 0x30
 800431c:	e7ce      	b.n	80042bc <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 800431e:	2001      	movs	r0, #1
}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000

08004328 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004328:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800432c:	2b01      	cmp	r3, #1
 800432e:	d127      	bne.n	8004380 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004330:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004332:	4915      	ldr	r1, [pc, #84]	; (8004388 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	2202      	movs	r2, #2
 8004336:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800433a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004344:	d011      	beq.n	800436a <HAL_TIM_Base_Start_IT+0x42>
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434a:	d00e      	beq.n	800436a <HAL_TIM_Base_Start_IT+0x42>
 800434c:	4a0f      	ldr	r2, [pc, #60]	; (800438c <HAL_TIM_Base_Start_IT+0x64>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00b      	beq.n	800436a <HAL_TIM_Base_Start_IT+0x42>
 8004352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <HAL_TIM_Base_Start_IT+0x42>
 800435a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <HAL_TIM_Base_Start_IT+0x42>
 8004362:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004366:	4293      	cmp	r3, r2
 8004368:	d104      	bne.n	8004374 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	2a06      	cmp	r2, #6
 8004372:	d007      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800437a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	4770      	bx	lr
    return HAL_ERROR;
 8004380:	2001      	movs	r0, #1
 8004382:	4770      	bx	lr
  return HAL_OK;
 8004384:	2000      	movs	r0, #0
}
 8004386:	4770      	bx	lr
 8004388:	40010000 	.word	0x40010000
 800438c:	40000400 	.word	0x40000400

08004390 <HAL_TIM_OC_DelayElapsedCallback>:
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop

08004394 <HAL_TIM_IC_CaptureCallback>:
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop

08004398 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop

0800439c <HAL_TIM_TriggerCallback>:
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop

080043a0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a0:	6803      	ldr	r3, [r0, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	0791      	lsls	r1, r2, #30
{
 80043a6:	b510      	push	{r4, lr}
 80043a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043aa:	d502      	bpl.n	80043b2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	0792      	lsls	r2, r2, #30
 80043b0:	d45f      	bmi.n	8004472 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	0750      	lsls	r0, r2, #29
 80043b6:	d502      	bpl.n	80043be <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	0751      	lsls	r1, r2, #29
 80043bc:	d446      	bmi.n	800444c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	0712      	lsls	r2, r2, #28
 80043c2:	d502      	bpl.n	80043ca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	0710      	lsls	r0, r2, #28
 80043c8:	d42e      	bmi.n	8004428 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	06d2      	lsls	r2, r2, #27
 80043ce:	d502      	bpl.n	80043d6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	06d0      	lsls	r0, r2, #27
 80043d4:	d418      	bmi.n	8004408 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	07d1      	lsls	r1, r2, #31
 80043da:	d502      	bpl.n	80043e2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	07d2      	lsls	r2, r2, #31
 80043e0:	d45d      	bmi.n	800449e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	0610      	lsls	r0, r2, #24
 80043e6:	d502      	bpl.n	80043ee <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	0611      	lsls	r1, r2, #24
 80043ec:	d45f      	bmi.n	80044ae <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	0652      	lsls	r2, r2, #25
 80043f2:	d502      	bpl.n	80043fa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	0650      	lsls	r0, r2, #25
 80043f8:	d461      	bmi.n	80044be <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	0691      	lsls	r1, r2, #26
 80043fe:	d502      	bpl.n	8004406 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	0692      	lsls	r2, r2, #26
 8004404:	d443      	bmi.n	800448e <HAL_TIM_IRQHandler+0xee>
}
 8004406:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004408:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800440e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004410:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004418:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800441a:	d064      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800441c:	f7ff ffba 	bl	8004394 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004420:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004422:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004424:	7722      	strb	r2, [r4, #28]
 8004426:	e7d6      	b.n	80043d6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004428:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800442e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004430:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004438:	d152      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	f7ff ffa9 	bl	8004390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff ffaa 	bl	8004398 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004444:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004446:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004448:	7722      	strb	r2, [r4, #28]
 800444a:	e7be      	b.n	80043ca <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800444c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004450:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004452:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004454:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800445c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800445e:	d13c      	bne.n	80044da <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004460:	f7ff ff96 	bl	8004390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff ff97 	bl	8004398 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800446c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	7722      	strb	r2, [r4, #28]
 8004470:	e7a5      	b.n	80043be <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004472:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004476:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004478:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800447a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	079b      	lsls	r3, r3, #30
 8004480:	d025      	beq.n	80044ce <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004482:	f7ff ff87 	bl	8004394 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004486:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004488:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	7722      	strb	r2, [r4, #28]
 800448c:	e791      	b.n	80043b2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800448e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004492:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004494:	611a      	str	r2, [r3, #16]
}
 8004496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800449a:	f000 b82b 	b.w	80044f4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800449e:	f06f 0201 	mvn.w	r2, #1
 80044a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a4:	4620      	mov	r0, r4
 80044a6:	f7fc ff4d 	bl	8001344 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	e799      	b.n	80043e2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80044b4:	4620      	mov	r0, r4
 80044b6:	f000 f81f 	bl	80044f8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	e797      	b.n	80043ee <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80044c4:	4620      	mov	r0, r4
 80044c6:	f7ff ff69 	bl	800439c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	e795      	b.n	80043fa <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	f7ff ff5f 	bl	8004390 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d2:	4620      	mov	r0, r4
 80044d4:	f7ff ff60 	bl	8004398 <HAL_TIM_PWM_PulseFinishedCallback>
 80044d8:	e7d5      	b.n	8004486 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	f7ff ff5b 	bl	8004394 <HAL_TIM_IC_CaptureCallback>
 80044de:	e7c4      	b.n	800446a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80044e0:	f7ff ff58 	bl	8004394 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e7ae      	b.n	8004444 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	f7ff ff53 	bl	8004390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ea:	4620      	mov	r0, r4
 80044ec:	f7ff ff54 	bl	8004398 <HAL_TIM_PWM_PulseFinishedCallback>
 80044f0:	e796      	b.n	8004420 <HAL_TIM_IRQHandler+0x80>
 80044f2:	bf00      	nop

080044f4 <HAL_TIMEx_CommutCallback>:
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop

080044f8 <HAL_TIMEx_BreakCallback>:
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop

080044fc <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044fc:	2800      	cmp	r0, #0
 80044fe:	f000 808f 	beq.w	8004620 <HAL_UART_Init+0x124>
{
 8004502:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004504:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004508:	4604      	mov	r4, r0
 800450a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 8081 	beq.w	8004616 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004514:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004516:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8004518:	2224      	movs	r2, #36	; 0x24
 800451a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004524:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004526:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004528:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800452a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800452e:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004530:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004532:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004534:	4302      	orrs	r2, r0
 8004536:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004538:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800453a:	4302      	orrs	r2, r0
 800453c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800453e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004542:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004546:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004548:	430a      	orrs	r2, r1
 800454a:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004550:	4934      	ldr	r1, [pc, #208]	; (8004624 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004552:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004556:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004558:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800455a:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800455c:	d035      	beq.n	80045ca <HAL_UART_Init+0xce>
 800455e:	4a32      	ldr	r2, [pc, #200]	; (8004628 <HAL_UART_Init+0x12c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d032      	beq.n	80045ca <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7ff fe1e 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004568:	69e3      	ldr	r3, [r4, #28]
 800456a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800456e:	d032      	beq.n	80045d6 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	2119      	movs	r1, #25
 8004574:	009a      	lsls	r2, r3, #2
 8004576:	fba0 0101 	umull	r0, r1, r0, r1
 800457a:	0f9b      	lsrs	r3, r3, #30
 800457c:	f7fc fb1c 	bl	8000bb8 <__aeabi_uldivmod>
 8004580:	492a      	ldr	r1, [pc, #168]	; (800462c <HAL_UART_Init+0x130>)
 8004582:	fba1 3200 	umull	r3, r2, r1, r0
 8004586:	0952      	lsrs	r2, r2, #5
 8004588:	2564      	movs	r5, #100	; 0x64
 800458a:	fb05 0012 	mls	r0, r5, r2, r0
 800458e:	0100      	lsls	r0, r0, #4
 8004590:	3032      	adds	r0, #50	; 0x32
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	fba1 1000 	umull	r1, r0, r1, r0
 8004598:	0112      	lsls	r2, r2, #4
 800459a:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 800459e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ae:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80045b0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80045b4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80045b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ba:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045be:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045c2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80045c6:	4628      	mov	r0, r5
}
 80045c8:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80045ca:	f7ff fdfb 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ce:	69e3      	ldr	r3, [r4, #28]
 80045d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d4:	d1cc      	bne.n	8004570 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045d6:	6862      	ldr	r2, [r4, #4]
 80045d8:	2119      	movs	r1, #25
 80045da:	1892      	adds	r2, r2, r2
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	415b      	adcs	r3, r3
 80045e2:	fba0 0101 	umull	r0, r1, r0, r1
 80045e6:	f7fc fae7 	bl	8000bb8 <__aeabi_uldivmod>
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <HAL_UART_Init+0x130>)
 80045ec:	fba3 2500 	umull	r2, r5, r3, r0
 80045f0:	096d      	lsrs	r5, r5, #5
 80045f2:	2264      	movs	r2, #100	; 0x64
 80045f4:	fb02 0215 	mls	r2, r2, r5, r0
 80045f8:	00d2      	lsls	r2, r2, #3
 80045fa:	3232      	adds	r2, #50	; 0x32
 80045fc:	fba3 3202 	umull	r3, r2, r3, r2
 8004600:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004604:	0912      	lsrs	r2, r2, #4
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800460c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004610:	440a      	add	r2, r1
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	e7c4      	b.n	80045a0 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004616:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800461a:	f7fc ffd5 	bl	80015c8 <HAL_UART_MspInit>
 800461e:	e779      	b.n	8004514 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8004620:	2001      	movs	r0, #1
}
 8004622:	4770      	bx	lr
 8004624:	40011000 	.word	0x40011000
 8004628:	40011400 	.word	0x40011400
 800462c:	51eb851f 	.word	0x51eb851f

08004630 <HAL_UART_Transmit_DMA>:
{
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004634:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8004638:	2820      	cmp	r0, #32
 800463a:	d135      	bne.n	80046a8 <HAL_UART_Transmit_DMA+0x78>
    if ((pData == NULL) || (Size == 0U))
 800463c:	b391      	cbz	r1, 80046a4 <HAL_UART_Transmit_DMA+0x74>
 800463e:	b38a      	cbz	r2, 80046a4 <HAL_UART_Transmit_DMA+0x74>
    __HAL_LOCK(huart);
 8004640:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8004644:	2801      	cmp	r0, #1
 8004646:	d02f      	beq.n	80046a8 <HAL_UART_Transmit_DMA+0x78>
 8004648:	2001      	movs	r0, #1
    huart->TxXferCount = Size;
 800464a:	84e2      	strh	r2, [r4, #38]	; 0x26
    __HAL_LOCK(huart);
 800464c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    huart->TxXferSize = Size;
 8004650:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004652:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004654:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80046b4 <HAL_UART_Transmit_DMA+0x84>
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004658:	4f14      	ldr	r7, [pc, #80]	; (80046ac <HAL_UART_Transmit_DMA+0x7c>)
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800465a:	4e15      	ldr	r6, [pc, #84]	; (80046b0 <HAL_UART_Transmit_DMA+0x80>)
    huart->pTxBuffPtr = pData;
 800465c:	6221      	str	r1, [r4, #32]
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800465e:	4613      	mov	r3, r2
 8004660:	6822      	ldr	r2, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004664:	f04f 0e21 	mov.w	lr, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	6425      	str	r5, [r4, #64]	; 0x40
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800466a:	3204      	adds	r2, #4
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466c:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004670:	e9c0 c70f 	strd	ip, r7, [r0, #60]	; 0x3c
    huart->hdmatx->XferAbortCallback = NULL;
 8004674:	e9c0 6513 	strd	r6, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004678:	f7fd f984 	bl	8001984 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800467c:	6822      	ldr	r2, [r4, #0]
 800467e:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8004682:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8004684:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	f102 0314 	add.w	r3, r2, #20
 800468c:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	f102 0014 	add.w	r0, r2, #20
 8004698:	e840 3100 	strex	r1, r3, [r0]
 800469c:	2900      	cmp	r1, #0
 800469e:	d1f3      	bne.n	8004688 <HAL_UART_Transmit_DMA+0x58>
    return HAL_OK;
 80046a0:	2000      	movs	r0, #0
}
 80046a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80046a4:	2001      	movs	r0, #1
}
 80046a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80046a8:	2002      	movs	r0, #2
}
 80046aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ac:	0800470d 	.word	0x0800470d
 80046b0:	08004721 	.word	0x08004721
 80046b4:	080046bd 	.word	0x080046bd

080046b8 <HAL_UART_TxCpltCallback>:
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop

080046bc <UART_DMATransmitCplt>:
{
 80046bc:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046be:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80046c8:	d11a      	bne.n	8004700 <UART_DMATransmitCplt+0x44>
    huart->TxXferCount = 0x00U;
 80046ca:	6802      	ldr	r2, [r0, #0]
 80046cc:	84c3      	strh	r3, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	f102 0314 	add.w	r3, r2, #20
 80046d2:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	f102 0014 	add.w	r0, r2, #20
 80046de:	e840 3100 	strex	r1, r3, [r0]
 80046e2:	2900      	cmp	r1, #0
 80046e4:	d1f3      	bne.n	80046ce <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	f102 030c 	add.w	r3, r2, #12
 80046ea:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	f102 000c 	add.w	r0, r2, #12
 80046f6:	e840 3100 	strex	r1, r3, [r0]
 80046fa:	2900      	cmp	r1, #0
 80046fc:	d1f3      	bne.n	80046e6 <UART_DMATransmitCplt+0x2a>
}
 80046fe:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004700:	f7ff ffda 	bl	80046b8 <HAL_UART_TxCpltCallback>
}
 8004704:	bd08      	pop	{r3, pc}
 8004706:	bf00      	nop

08004708 <HAL_UART_TxHalfCpltCallback>:
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop

0800470c <UART_DMATxHalfCplt>:
{
 800470c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800470e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004710:	f7ff fffa 	bl	8004708 <HAL_UART_TxHalfCpltCallback>
}
 8004714:	bd08      	pop	{r3, pc}
 8004716:	bf00      	nop

08004718 <HAL_UART_RxCpltCallback>:
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop

0800471c <HAL_UART_ErrorCallback>:
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop

08004720 <UART_DMAError>:
{
 8004720:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004722:	6b80      	ldr	r0, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004724:	6803      	ldr	r3, [r0, #0]
 8004726:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004728:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800472c:	2a21      	cmp	r2, #33	; 0x21
 800472e:	d00b      	beq.n	8004748 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004730:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004732:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8004736:	2a22      	cmp	r2, #34	; 0x22
 8004738:	d01e      	beq.n	8004778 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800473a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800473c:	f043 0310 	orr.w	r3, r3, #16
 8004740:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8004742:	f7ff ffeb 	bl	800471c <HAL_UART_ErrorCallback>
}
 8004746:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004748:	0609      	lsls	r1, r1, #24
 800474a:	d5f1      	bpl.n	8004730 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800474c:	2200      	movs	r2, #0
 800474e:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	f103 020c 	add.w	r2, r3, #12
 8004754:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004758:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	f103 0c0c 	add.w	ip, r3, #12
 8004760:	e84c 2100 	strex	r1, r2, [ip]
 8004764:	2900      	cmp	r1, #0
 8004766:	d1f3      	bne.n	8004750 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8004768:	2220      	movs	r2, #32
 800476a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800476e:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004770:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8004774:	2a22      	cmp	r2, #34	; 0x22
 8004776:	d1e0      	bne.n	800473a <UART_DMAError+0x1a>
 8004778:	064a      	lsls	r2, r1, #25
 800477a:	d5de      	bpl.n	800473a <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800477c:	2200      	movs	r2, #0
 800477e:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	f103 020c 	add.w	r2, r3, #12
 8004784:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004788:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	f103 0c0c 	add.w	ip, r3, #12
 8004790:	e84c 2100 	strex	r1, r2, [ip]
 8004794:	2900      	cmp	r1, #0
 8004796:	d1f3      	bne.n	8004780 <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	f103 0214 	add.w	r2, r3, #20
 800479c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	f103 0c14 	add.w	ip, r3, #20
 80047a8:	e84c 2100 	strex	r1, r2, [ip]
 80047ac:	2900      	cmp	r1, #0
 80047ae:	d1f3      	bne.n	8004798 <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80047b2:	2a01      	cmp	r2, #1
 80047b4:	d005      	beq.n	80047c2 <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 80047b6:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80047ba:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	6303      	str	r3, [r0, #48]	; 0x30
}
 80047c0:	e7bb      	b.n	800473a <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	f103 020c 	add.w	r2, r3, #12
 80047c6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	f103 0c0c 	add.w	ip, r3, #12
 80047d2:	e84c 2100 	strex	r1, r2, [ip]
 80047d6:	2900      	cmp	r1, #0
 80047d8:	d1f3      	bne.n	80047c2 <UART_DMAError+0xa2>
 80047da:	e7ec      	b.n	80047b6 <UART_DMAError+0x96>

080047dc <UART_DMAAbortOnError>:
{
 80047dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047de:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047e4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80047e6:	f7ff ff99 	bl	800471c <HAL_UART_ErrorCallback>
}
 80047ea:	bd08      	pop	{r3, pc}

080047ec <HAL_UARTEx_RxEventCallback>:
}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop

080047f0 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f0:	6883      	ldr	r3, [r0, #8]
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	d044      	beq.n	8004882 <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d039      	beq.n	8004872 <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047fe:	6803      	ldr	r3, [r0, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004806:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004808:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800480a:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 800480c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 800480e:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004810:	3b01      	subs	r3, #1
 8004812:	b29b      	uxth	r3, r3
 8004814:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004816:	2b00      	cmp	r3, #0
 8004818:	d132      	bne.n	8004880 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800481a:	6802      	ldr	r2, [r0, #0]
 800481c:	68d1      	ldr	r1, [r2, #12]
 800481e:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004822:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004824:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004826:	68d1      	ldr	r1, [r2, #12]
 8004828:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800482c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800482e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004830:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004834:	f021 0101 	bic.w	r1, r1, #1
 8004838:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800483a:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004840:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004842:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004844:	d127      	bne.n	8004896 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004846:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	f102 030c 	add.w	r3, r2, #12
 800484c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004850:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	f102 0c0c 	add.w	ip, r2, #12
 8004858:	e84c 3100 	strex	r1, r3, [ip]
 800485c:	2900      	cmp	r1, #0
 800485e:	d1f3      	bne.n	8004848 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004860:	6813      	ldr	r3, [r2, #0]
 8004862:	06db      	lsls	r3, r3, #27
 8004864:	d421      	bmi.n	80048aa <UART_Receive_IT.part.0.isra.0+0xba>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004866:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004868:	f7ff ffc0 	bl	80047ec <HAL_UARTEx_RxEventCallback>
}
 800486c:	b003      	add	sp, #12
 800486e:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004872:	6903      	ldr	r3, [r0, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1c2      	bne.n	80047fe <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004878:	6803      	ldr	r3, [r0, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	7013      	strb	r3, [r2, #0]
 800487e:	e7c3      	b.n	8004808 <UART_Receive_IT.part.0.isra.0+0x18>
 8004880:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004882:	6903      	ldr	r3, [r0, #16]
 8004884:	b963      	cbnz	r3, 80048a0 <UART_Receive_IT.part.0.isra.0+0xb0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004886:	6803      	ldr	r3, [r0, #0]
 8004888:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004890:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8004894:	e7ba      	b.n	800480c <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8004896:	f7ff ff3f 	bl	8004718 <HAL_UART_RxCpltCallback>
}
 800489a:	b003      	add	sp, #12
 800489c:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048a0:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	7013      	strb	r3, [r2, #0]
 80048a8:	e7ae      	b.n	8004808 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048aa:	2300      	movs	r3, #0
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	6853      	ldr	r3, [r2, #4]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	9b01      	ldr	r3, [sp, #4]
 80048b8:	e7d5      	b.n	8004866 <UART_Receive_IT.part.0.isra.0+0x76>
 80048ba:	bf00      	nop

080048bc <HAL_UART_IRQHandler>:
{
 80048bc:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048be:	6803      	ldr	r3, [r0, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048c2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048c4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80048c6:	f012 0f0f 	tst.w	r2, #15
{
 80048ca:	b083      	sub	sp, #12
 80048cc:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80048ce:	d16e      	bne.n	80049ae <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d0:	0695      	lsls	r5, r2, #26
 80048d2:	d502      	bpl.n	80048da <HAL_UART_IRQHandler+0x1e>
 80048d4:	068d      	lsls	r5, r1, #26
 80048d6:	f100 80b2 	bmi.w	8004a3e <HAL_UART_IRQHandler+0x182>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80048dc:	2801      	cmp	r0, #1
 80048de:	d00b      	beq.n	80048f8 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048e0:	0610      	lsls	r0, r2, #24
 80048e2:	d502      	bpl.n	80048ea <HAL_UART_IRQHandler+0x2e>
 80048e4:	060d      	lsls	r5, r1, #24
 80048e6:	f100 80b4 	bmi.w	8004a52 <HAL_UART_IRQHandler+0x196>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048ea:	0650      	lsls	r0, r2, #25
 80048ec:	d502      	bpl.n	80048f4 <HAL_UART_IRQHandler+0x38>
 80048ee:	064a      	lsls	r2, r1, #25
 80048f0:	f100 80ce 	bmi.w	8004a90 <HAL_UART_IRQHandler+0x1d4>
}
 80048f4:	b003      	add	sp, #12
 80048f6:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048f8:	06d5      	lsls	r5, r2, #27
 80048fa:	d5f1      	bpl.n	80048e0 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048fc:	06c8      	lsls	r0, r1, #27
 80048fe:	d5ef      	bpl.n	80048e0 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004900:	2200      	movs	r2, #0
 8004902:	9201      	str	r2, [sp, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	9201      	str	r2, [sp, #4]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	9201      	str	r2, [sp, #4]
 800490c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	0655      	lsls	r5, r2, #25
 8004912:	f140 8117 	bpl.w	8004b44 <HAL_UART_IRQHandler+0x288>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004916:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004918:	6802      	ldr	r2, [r0, #0]
 800491a:	6852      	ldr	r2, [r2, #4]
 800491c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800491e:	2a00      	cmp	r2, #0
 8004920:	d0e8      	beq.n	80048f4 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004922:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004924:	4291      	cmp	r1, r2
 8004926:	d9e5      	bls.n	80048f4 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004928:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800492a:	69c2      	ldr	r2, [r0, #28]
 800492c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004930:	d036      	beq.n	80049a0 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	f103 020c 	add.w	r2, r3, #12
 8004936:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800493a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	f103 050c 	add.w	r5, r3, #12
 8004942:	e845 2100 	strex	r1, r2, [r5]
 8004946:	2900      	cmp	r1, #0
 8004948:	d1f3      	bne.n	8004932 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	f103 0214 	add.w	r2, r3, #20
 800494e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004952:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	f103 0514 	add.w	r5, r3, #20
 800495a:	e845 2100 	strex	r1, r2, [r5]
 800495e:	2900      	cmp	r1, #0
 8004960:	d1f3      	bne.n	800494a <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	f103 0214 	add.w	r2, r3, #20
 8004966:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	f103 0514 	add.w	r5, r3, #20
 8004972:	e845 2100 	strex	r1, r2, [r5]
 8004976:	2900      	cmp	r1, #0
 8004978:	d1f3      	bne.n	8004962 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 800497a:	2220      	movs	r2, #32
 800497c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004980:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	f103 020c 	add.w	r2, r3, #12
 8004986:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	f103 050c 	add.w	r5, r3, #12
 8004992:	e845 2100 	strex	r1, r2, [r5]
 8004996:	2900      	cmp	r1, #0
 8004998:	d1f3      	bne.n	8004982 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800499a:	f7fd f833 	bl	8001a04 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800499e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80049a0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80049a2:	1ac9      	subs	r1, r1, r3
 80049a4:	4620      	mov	r0, r4
 80049a6:	b289      	uxth	r1, r1
 80049a8:	f7ff ff20 	bl	80047ec <HAL_UARTEx_RxEventCallback>
 80049ac:	e7a2      	b.n	80048f4 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049ae:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049b2:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80049b6:	4328      	orrs	r0, r5
 80049b8:	d08f      	beq.n	80048da <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ba:	07d0      	lsls	r0, r2, #31
 80049bc:	d505      	bpl.n	80049ca <HAL_UART_IRQHandler+0x10e>
 80049be:	05c8      	lsls	r0, r1, #23
 80049c0:	d503      	bpl.n	80049ca <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049c4:	f040 0001 	orr.w	r0, r0, #1
 80049c8:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ca:	0750      	lsls	r0, r2, #29
 80049cc:	d532      	bpl.n	8004a34 <HAL_UART_IRQHandler+0x178>
 80049ce:	b14d      	cbz	r5, 80049e4 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049d2:	f040 0002 	orr.w	r0, r0, #2
 80049d6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049d8:	0790      	lsls	r0, r2, #30
 80049da:	d503      	bpl.n	80049e4 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049dc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049de:	f040 0004 	orr.w	r0, r0, #4
 80049e2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049e4:	0710      	lsls	r0, r2, #28
 80049e6:	d507      	bpl.n	80049f8 <HAL_UART_IRQHandler+0x13c>
 80049e8:	f001 0020 	and.w	r0, r1, #32
 80049ec:	4328      	orrs	r0, r5
 80049ee:	d003      	beq.n	80049f8 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049f0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049f2:	f040 0008 	orr.w	r0, r0, #8
 80049f6:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049f8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049fa:	2800      	cmp	r0, #0
 80049fc:	f43f af7a 	beq.w	80048f4 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a00:	0690      	lsls	r0, r2, #26
 8004a02:	d509      	bpl.n	8004a18 <HAL_UART_IRQHandler+0x15c>
 8004a04:	0689      	lsls	r1, r1, #26
 8004a06:	d507      	bpl.n	8004a18 <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a08:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004a0c:	2a22      	cmp	r2, #34	; 0x22
 8004a0e:	d103      	bne.n	8004a18 <HAL_UART_IRQHandler+0x15c>
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7ff feed 	bl	80047f0 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1c:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a20:	f001 0108 	and.w	r1, r1, #8
 8004a24:	ea52 0501 	orrs.w	r5, r2, r1
 8004a28:	d13d      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x1ea>
        HAL_UART_ErrorCallback(huart);
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7ff fe76 	bl	800471c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a30:	6425      	str	r5, [r4, #64]	; 0x40
 8004a32:	e75f      	b.n	80048f4 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a34:	0790      	lsls	r0, r2, #30
 8004a36:	d5d5      	bpl.n	80049e4 <HAL_UART_IRQHandler+0x128>
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	d1cf      	bne.n	80049dc <HAL_UART_IRQHandler+0x120>
 8004a3c:	e7d2      	b.n	80049e4 <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a3e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004a42:	2b22      	cmp	r3, #34	; 0x22
 8004a44:	f47f af56 	bne.w	80048f4 <HAL_UART_IRQHandler+0x38>
}
 8004a48:	b003      	add	sp, #12
 8004a4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a4e:	f7ff becf 	b.w	80047f0 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a52:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004a56:	2a21      	cmp	r2, #33	; 0x21
 8004a58:	f47f af4c 	bne.w	80048f4 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5c:	68a2      	ldr	r2, [r4, #8]
 8004a5e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004a62:	f000 80a8 	beq.w	8004bb6 <HAL_UART_IRQHandler+0x2fa>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a66:	6a22      	ldr	r2, [r4, #32]
 8004a68:	1c51      	adds	r1, r2, #1
 8004a6a:	6221      	str	r1, [r4, #32]
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004a70:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004a72:	3a01      	subs	r2, #1
 8004a74:	b292      	uxth	r2, r2
 8004a76:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	f47f af3b 	bne.w	80048f4 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a84:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	e731      	b.n	80048f4 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a90:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004a92:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a98:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004a9a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8004a9c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004aa0:	f7ff fe0a 	bl	80046b8 <HAL_UART_TxCpltCallback>
    return;
 8004aa4:	e726      	b.n	80048f4 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	f103 020c 	add.w	r2, r3, #12
 8004aaa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	f103 000c 	add.w	r0, r3, #12
 8004ab6:	e840 2100 	strex	r1, r2, [r0]
 8004aba:	2900      	cmp	r1, #0
 8004abc:	d1f3      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x1ea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	f103 0214 	add.w	r2, r3, #20
 8004ac2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	f103 0014 	add.w	r0, r3, #20
 8004ace:	e840 2100 	strex	r1, r2, [r0]
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	d1f3      	bne.n	8004abe <HAL_UART_IRQHandler+0x202>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ad8:	2a01      	cmp	r2, #1
 8004ada:	d022      	beq.n	8004b22 <HAL_UART_IRQHandler+0x266>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004adc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004ade:	2120      	movs	r1, #32
 8004ae0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae4:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	0652      	lsls	r2, r2, #25
 8004aea:	d527      	bpl.n	8004b3c <HAL_UART_IRQHandler+0x280>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	f103 0214 	add.w	r2, r3, #20
 8004af0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	f103 0014 	add.w	r0, r3, #20
 8004afc:	e840 2100 	strex	r1, r2, [r0]
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d1f3      	bne.n	8004aec <HAL_UART_IRQHandler+0x230>
          if (huart->hdmarx != NULL)
 8004b04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b06:	b1c8      	cbz	r0, 8004b3c <HAL_UART_IRQHandler+0x280>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <HAL_UART_IRQHandler+0x314>)
 8004b0a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b0c:	f7fc ffc4 	bl	8001a98 <HAL_DMA_Abort_IT>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f43f aeef 	beq.w	80048f4 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b18:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8004b1a:	b003      	add	sp, #12
 8004b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b20:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	f103 020c 	add.w	r2, r3, #12
 8004b26:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	f103 000c 	add.w	r0, r3, #12
 8004b32:	e840 2100 	strex	r1, r2, [r0]
 8004b36:	2900      	cmp	r1, #0
 8004b38:	d1f3      	bne.n	8004b22 <HAL_UART_IRQHandler+0x266>
 8004b3a:	e7cf      	b.n	8004adc <HAL_UART_IRQHandler+0x220>
            HAL_UART_ErrorCallback(huart);
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7ff fded 	bl	800471c <HAL_UART_ErrorCallback>
 8004b42:	e6d7      	b.n	80048f4 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b44:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8004b46:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b48:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8004b4a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b4c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004b4e:	2a00      	cmp	r2, #0
 8004b50:	f43f aed0 	beq.w	80048f4 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b54:	1a41      	subs	r1, r0, r1
 8004b56:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	f43f aecb 	beq.w	80048f4 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	f103 020c 	add.w	r2, r3, #12
 8004b62:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	f103 050c 	add.w	r5, r3, #12
 8004b6e:	e845 2000 	strex	r0, r2, [r5]
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d1f3      	bne.n	8004b5e <HAL_UART_IRQHandler+0x2a2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	f103 0214 	add.w	r2, r3, #20
 8004b7a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	f103 0514 	add.w	r5, r3, #20
 8004b86:	e845 2000 	strex	r0, r2, [r5]
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d1f3      	bne.n	8004b76 <HAL_UART_IRQHandler+0x2ba>
        huart->RxState = HAL_UART_STATE_READY;
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b94:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	f103 020c 	add.w	r2, r3, #12
 8004b9a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	f103 050c 	add.w	r5, r3, #12
 8004ba6:	e845 2000 	strex	r0, r2, [r5]
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d1f3      	bne.n	8004b96 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f7ff fe1c 	bl	80047ec <HAL_UARTEx_RxEventCallback>
 8004bb4:	e69e      	b.n	80048f4 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb6:	6922      	ldr	r2, [r4, #16]
 8004bb8:	2a00      	cmp	r2, #0
 8004bba:	f47f af54 	bne.w	8004a66 <HAL_UART_IRQHandler+0x1aa>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bbe:	6a22      	ldr	r2, [r4, #32]
 8004bc0:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004bc4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004bc8:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bca:	6222      	str	r2, [r4, #32]
 8004bcc:	e750      	b.n	8004a70 <HAL_UART_IRQHandler+0x1b4>
 8004bce:	bf00      	nop
 8004bd0:	080047dd 	.word	0x080047dd

08004bd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	f10d 0c0c 	add.w	ip, sp, #12
 8004bdc:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004be0:	9a08      	ldr	r2, [sp, #32]
 8004be2:	2a01      	cmp	r2, #1
{
 8004be4:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004be6:	d12c      	bne.n	8004c42 <USB_CoreInit+0x6e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004be8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8004bea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bf0:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bf2:	68c2      	ldr	r2, [r0, #12]
 8004bf4:	f422 0284 	bic.w	r2, r2, #4325376	; 0x420000
 8004bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfc:	60c2      	str	r2, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bfe:	68c2      	ldr	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004c00:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c02:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004c06:	60c2      	str	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004c08:	d05f      	beq.n	8004cca <USB_CoreInit+0xf6>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8004c0a:	2200      	movs	r2, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8004c0c:	4931      	ldr	r1, [pc, #196]	; (8004cd4 <USB_CoreInit+0x100>)
  __IO uint32_t count = 0U;
 8004c0e:	9200      	str	r2, [sp, #0]
 8004c10:	e002      	b.n	8004c18 <USB_CoreInit+0x44>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	2a00      	cmp	r2, #0
 8004c16:	db2d      	blt.n	8004c74 <USB_CoreInit+0xa0>
    count++;
 8004c18:	9a00      	ldr	r2, [sp, #0]
 8004c1a:	3201      	adds	r2, #1
 8004c1c:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8004c1e:	9a00      	ldr	r2, [sp, #0]
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d9f6      	bls.n	8004c12 <USB_CoreInit+0x3e>
      return HAL_TIMEOUT;
 8004c24:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 8004c26:	9a06      	ldr	r2, [sp, #24]
 8004c28:	2a01      	cmp	r2, #1
 8004c2a:	d107      	bne.n	8004c3c <USB_CoreInit+0x68>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	f042 0206 	orr.w	r2, r2, #6
 8004c32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	f042 0220 	orr.w	r2, r2, #32
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	b002      	add	sp, #8
 8004c3e:	b004      	add	sp, #16
 8004c40:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c42:	68c2      	ldr	r2, [r0, #12]
    if (count > 200000U)
 8004c44:	4923      	ldr	r1, [pc, #140]	; (8004cd4 <USB_CoreInit+0x100>)
  __IO uint32_t count = 0U;
 8004c46:	2000      	movs	r0, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c4c:	60da      	str	r2, [r3, #12]
  __IO uint32_t count = 0U;
 8004c4e:	9001      	str	r0, [sp, #4]
 8004c50:	e002      	b.n	8004c58 <USB_CoreInit+0x84>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	db25      	blt.n	8004ca4 <USB_CoreInit+0xd0>
    count++;
 8004c58:	9a01      	ldr	r2, [sp, #4]
 8004c5a:	3201      	adds	r2, #1
 8004c5c:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8004c5e:	9a01      	ldr	r2, [sp, #4]
 8004c60:	428a      	cmp	r2, r1
 8004c62:	d9f6      	bls.n	8004c52 <USB_CoreInit+0x7e>
      return HAL_TIMEOUT;
 8004c64:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 8004c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c68:	b9ba      	cbnz	r2, 8004c9a <USB_CoreInit+0xc6>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
 8004c72:	e7d8      	b.n	8004c26 <USB_CoreInit+0x52>

  /* Core Soft Reset */
  count = 0U;
 8004c74:	2200      	movs	r2, #0
 8004c76:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c78:	691a      	ldr	r2, [r3, #16]

  do
  {
    count++;

    if (count > 200000U)
 8004c7a:	4916      	ldr	r1, [pc, #88]	; (8004cd4 <USB_CoreInit+0x100>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c7c:	f042 0201 	orr.w	r2, r2, #1
 8004c80:	611a      	str	r2, [r3, #16]
 8004c82:	e003      	b.n	8004c8c <USB_CoreInit+0xb8>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c84:	6918      	ldr	r0, [r3, #16]
 8004c86:	f010 0001 	ands.w	r0, r0, #1
 8004c8a:	d0cc      	beq.n	8004c26 <USB_CoreInit+0x52>
    count++;
 8004c8c:	9a00      	ldr	r2, [sp, #0]
 8004c8e:	3201      	adds	r2, #1
 8004c90:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8004c92:	9a00      	ldr	r2, [sp, #0]
 8004c94:	428a      	cmp	r2, r1
 8004c96:	d9f5      	bls.n	8004c84 <USB_CoreInit+0xb0>
 8004c98:	e7c4      	b.n	8004c24 <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ca2:	e7c0      	b.n	8004c26 <USB_CoreInit+0x52>
  count = 0U;
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ca8:	691a      	ldr	r2, [r3, #16]
    if (count > 200000U)
 8004caa:	490a      	ldr	r1, [pc, #40]	; (8004cd4 <USB_CoreInit+0x100>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
 8004cb2:	e003      	b.n	8004cbc <USB_CoreInit+0xe8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cb4:	6918      	ldr	r0, [r3, #16]
 8004cb6:	f010 0001 	ands.w	r0, r0, #1
 8004cba:	d0d4      	beq.n	8004c66 <USB_CoreInit+0x92>
    count++;
 8004cbc:	9a01      	ldr	r2, [sp, #4]
 8004cbe:	3201      	adds	r2, #1
 8004cc0:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8004cc2:	9a01      	ldr	r2, [sp, #4]
 8004cc4:	428a      	cmp	r2, r1
 8004cc6:	d9f5      	bls.n	8004cb4 <USB_CoreInit+0xe0>
 8004cc8:	e7cc      	b.n	8004c64 <USB_CoreInit+0x90>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cca:	68c2      	ldr	r2, [r0, #12]
 8004ccc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004cd0:	60c2      	str	r2, [r0, #12]
 8004cd2:	e79a      	b.n	8004c0a <USB_CoreInit+0x36>
 8004cd4:	00030d40 	.word	0x00030d40

08004cd8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004cd8:	2a02      	cmp	r2, #2
{
 8004cda:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8004cdc:	d00a      	beq.n	8004cf4 <USB_SetTurnaroundTime+0x1c>
 8004cde:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004ce8:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	430a      	orrs	r2, r1
}
 8004cee:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cf0:	60da      	str	r2, [r3, #12]
}
 8004cf2:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <USB_SetTurnaroundTime+0xb8>)
 8004cf6:	4827      	ldr	r0, [pc, #156]	; (8004d94 <USB_SetTurnaroundTime+0xbc>)
 8004cf8:	440a      	add	r2, r1
 8004cfa:	4282      	cmp	r2, r0
 8004cfc:	d932      	bls.n	8004d64 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cfe:	4a26      	ldr	r2, [pc, #152]	; (8004d98 <USB_SetTurnaroundTime+0xc0>)
 8004d00:	4826      	ldr	r0, [pc, #152]	; (8004d9c <USB_SetTurnaroundTime+0xc4>)
 8004d02:	440a      	add	r2, r1
 8004d04:	4282      	cmp	r2, r0
 8004d06:	d930      	bls.n	8004d6a <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d08:	4825      	ldr	r0, [pc, #148]	; (8004da0 <USB_SetTurnaroundTime+0xc8>)
 8004d0a:	f5a1 0274 	sub.w	r2, r1, #15990784	; 0xf40000
 8004d0e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8004d12:	4282      	cmp	r2, r0
 8004d14:	d92c      	bls.n	8004d70 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d16:	4823      	ldr	r0, [pc, #140]	; (8004da4 <USB_SetTurnaroundTime+0xcc>)
 8004d18:	f1a1 7283 	sub.w	r2, r1, #17170432	; 0x1060000
 8004d1c:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8004d20:	4282      	cmp	r2, r0
 8004d22:	d328      	bcc.n	8004d76 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d24:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <USB_SetTurnaroundTime+0xd0>)
 8004d26:	4821      	ldr	r0, [pc, #132]	; (8004dac <USB_SetTurnaroundTime+0xd4>)
 8004d28:	440a      	add	r2, r1
 8004d2a:	4282      	cmp	r2, r0
 8004d2c:	d926      	bls.n	8004d7c <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d2e:	4a20      	ldr	r2, [pc, #128]	; (8004db0 <USB_SetTurnaroundTime+0xd8>)
 8004d30:	4820      	ldr	r0, [pc, #128]	; (8004db4 <USB_SetTurnaroundTime+0xdc>)
 8004d32:	440a      	add	r2, r1
 8004d34:	4282      	cmp	r2, r0
 8004d36:	d324      	bcc.n	8004d82 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d38:	4a1f      	ldr	r2, [pc, #124]	; (8004db8 <USB_SetTurnaroundTime+0xe0>)
 8004d3a:	4820      	ldr	r0, [pc, #128]	; (8004dbc <USB_SetTurnaroundTime+0xe4>)
 8004d3c:	440a      	add	r2, r1
 8004d3e:	4282      	cmp	r2, r0
 8004d40:	d3cd      	bcc.n	8004cde <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d42:	481f      	ldr	r0, [pc, #124]	; (8004dc0 <USB_SetTurnaroundTime+0xe8>)
 8004d44:	f1a1 72b7 	sub.w	r2, r1, #23986176	; 0x16e0000
 8004d48:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8004d4c:	4282      	cmp	r2, r0
 8004d4e:	d31b      	bcc.n	8004d88 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <USB_SetTurnaroundTime+0xec>)
 8004d52:	481d      	ldr	r0, [pc, #116]	; (8004dc8 <USB_SetTurnaroundTime+0xf0>)
 8004d54:	440a      	add	r2, r1
 8004d56:	4282      	cmp	r2, r0
 8004d58:	bf34      	ite	cc
 8004d5a:	f44f 51e0 	movcc.w	r1, #7168	; 0x1c00
 8004d5e:	f44f 51c0 	movcs.w	r1, #6144	; 0x1800
 8004d62:	e7be      	b.n	8004ce2 <USB_SetTurnaroundTime+0xa>
 8004d64:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8004d68:	e7bb      	b.n	8004ce2 <USB_SetTurnaroundTime+0xa>
 8004d6a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8004d6e:	e7b8      	b.n	8004ce2 <USB_SetTurnaroundTime+0xa>
 8004d70:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8004d74:	e7b5      	b.n	8004ce2 <USB_SetTurnaroundTime+0xa>
 8004d76:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004d7a:	e7b2      	b.n	8004ce2 <USB_SetTurnaroundTime+0xa>
 8004d7c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8004d80:	e7af      	b.n	8004ce2 <USB_SetTurnaroundTime+0xa>
 8004d82:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8004d86:	e7ac      	b.n	8004ce2 <USB_SetTurnaroundTime+0xa>
 8004d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d8c:	e7a9      	b.n	8004ce2 <USB_SetTurnaroundTime+0xa>
 8004d8e:	bf00      	nop
 8004d90:	ff275340 	.word	0xff275340
 8004d94:	000c34ff 	.word	0x000c34ff
 8004d98:	ff1b1e40 	.word	0xff1b1e40
 8004d9c:	000f423f 	.word	0x000f423f
 8004da0:	00124f7f 	.word	0x00124f7f
 8004da4:	0013d620 	.word	0x0013d620
 8004da8:	fee5b660 	.word	0xfee5b660
 8004dac:	0016e35f 	.word	0x0016e35f
 8004db0:	feced300 	.word	0xfeced300
 8004db4:	001b7740 	.word	0x001b7740
 8004db8:	feb35bc0 	.word	0xfeb35bc0
 8004dbc:	002191c0 	.word	0x002191c0
 8004dc0:	00387520 	.word	0x00387520
 8004dc4:	fe5954e0 	.word	0xfe5954e0
 8004dc8:	00419ce0 	.word	0x00419ce0

08004dcc <USB_EnableGlobalInt>:
{
 8004dcc:	4603      	mov	r3, r0
}
 8004dce:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	609a      	str	r2, [r3, #8]
}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <USB_DisableGlobalInt>:
{
 8004ddc:	4603      	mov	r3, r0
}
 8004dde:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	609a      	str	r2, [r3, #8]
}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop

08004dec <USB_SetCurrentMode>:
{
 8004dec:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dee:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004df0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004df2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 8004df6:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004df8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004dfa:	d018      	beq.n	8004e2e <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 8004dfc:	b9a9      	cbnz	r1, 8004e2a <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dfe:	68c3      	ldr	r3, [r0, #12]
 8004e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t ms = 0U;
 8004e04:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e06:	60c3      	str	r3, [r0, #12]
 8004e08:	e001      	b.n	8004e0e <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e0a:	2c32      	cmp	r4, #50	; 0x32
 8004e0c:	d00d      	beq.n	8004e2a <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f7fc fcb0 	bl	8001774 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004e14:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e16:	07db      	lsls	r3, r3, #31
      ms++;
 8004e18:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e1c:	d4f5      	bmi.n	8004e0a <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8004e1e:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8004e22:	fab0 f080 	clz	r0, r0
 8004e26:	0940      	lsrs	r0, r0, #5
}
 8004e28:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e2a:	2001      	movs	r0, #1
}
 8004e2c:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e2e:	68c3      	ldr	r3, [r0, #12]
 8004e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  uint32_t ms = 0U;
 8004e34:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e36:	60c3      	str	r3, [r0, #12]
 8004e38:	e001      	b.n	8004e3e <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e3a:	2c32      	cmp	r4, #50	; 0x32
 8004e3c:	d0f5      	beq.n	8004e2a <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f7fc fc98 	bl	8001774 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004e44:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e46:	07da      	lsls	r2, r3, #31
      ms++;
 8004e48:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e4c:	d5f5      	bpl.n	8004e3a <USB_SetCurrentMode+0x4e>
    return HAL_ERROR;
 8004e4e:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8004e52:	fab0 f080 	clz	r0, r0
 8004e56:	0940      	lsrs	r0, r0, #5
 8004e58:	e7e6      	b.n	8004e28 <USB_SetCurrentMode+0x3c>
 8004e5a:	bf00      	nop

08004e5c <USB_DevInit>:
{
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e62:	b083      	sub	sp, #12
 8004e64:	ac0b      	add	r4, sp, #44	; 0x2c
 8004e66:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004e68:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
{
 8004e72:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 8004e74:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 8004e78:	460c      	mov	r4, r1
 8004e7a:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8004e7e:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 8004e82:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8004e86:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8004e8a:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 8004e8e:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
 8004e92:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8004e96:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
 8004e9a:	f8c0 212c 	str.w	r2, [r0, #300]	; 0x12c
 8004e9e:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
 8004ea2:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
 8004ea6:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 8004eaa:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8004eae:	2d00      	cmp	r5, #0
 8004eb0:	f040 80ad 	bne.w	800500e <USB_DevInit+0x1b2>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eb4:	f8d0 2804 	ldr.w	r2, [r0, #2052]	; 0x804
 8004eb8:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 8004ebc:	f042 0202 	orr.w	r2, r2, #2
 8004ec0:	f8cc 2004 	str.w	r2, [ip, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ec4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ec6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004eca:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ecc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ece:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004ed2:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ed4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ed6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eda:	6382      	str	r2, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ee2:	f8dc 2000 	ldr.w	r2, [ip]
 8004ee6:	f8cc 2000 	str.w	r2, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004eec:	2a01      	cmp	r2, #1
 8004eee:	f000 80bc 	beq.w	800506a <USB_DevInit+0x20e>
  USBx_DEVICE->DCFG |= speed;
 8004ef2:	f8dc 2000 	ldr.w	r2, [ip]
 8004ef6:	f042 0203 	orr.w	r2, r2, #3
 8004efa:	f8cc 2000 	str.w	r2, [ip]
  __IO uint32_t count = 0U;
 8004efe:	2200      	movs	r2, #0
    if (count > 200000U)
 8004f00:	4961      	ldr	r1, [pc, #388]	; (8005088 <USB_DevInit+0x22c>)
  __IO uint32_t count = 0U;
 8004f02:	9200      	str	r2, [sp, #0]
 8004f04:	e003      	b.n	8004f0e <USB_DevInit+0xb2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	2a00      	cmp	r2, #0
 8004f0a:	f2c0 809b 	blt.w	8005044 <USB_DevInit+0x1e8>
    count++;
 8004f0e:	9a00      	ldr	r2, [sp, #0]
 8004f10:	3201      	adds	r2, #1
 8004f12:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8004f14:	9a00      	ldr	r2, [sp, #0]
 8004f16:	428a      	cmp	r2, r1
 8004f18:	d9f5      	bls.n	8004f06 <USB_DevInit+0xaa>
    ret = HAL_ERROR;
 8004f1a:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 8004f1c:	2200      	movs	r2, #0
    if (count > 200000U)
 8004f1e:	495a      	ldr	r1, [pc, #360]	; (8005088 <USB_DevInit+0x22c>)
  __IO uint32_t count = 0U;
 8004f20:	9201      	str	r2, [sp, #4]
 8004f22:	e002      	b.n	8004f2a <USB_DevInit+0xce>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	2a00      	cmp	r2, #0
 8004f28:	db7c      	blt.n	8005024 <USB_DevInit+0x1c8>
    count++;
 8004f2a:	9a01      	ldr	r2, [sp, #4]
 8004f2c:	3201      	adds	r2, #1
 8004f2e:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8004f30:	9a01      	ldr	r2, [sp, #4]
 8004f32:	428a      	cmp	r2, r1
 8004f34:	d9f6      	bls.n	8004f24 <USB_DevInit+0xc8>
    ret = HAL_ERROR;
 8004f36:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8004f38:	2100      	movs	r1, #0
 8004f3a:	f8cc 1010 	str.w	r1, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f3e:	f8cc 1014 	str.w	r1, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f42:	f8cc 101c 	str.w	r1, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f46:	b1e4      	cbz	r4, 8004f82 <USB_DevInit+0x126>
 8004f48:	f503 6210 	add.w	r2, r3, #2304	; 0x900
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f4c:	460f      	mov	r7, r1
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f4e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f52:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f56:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8004f5a:	e008      	b.n	8004f6e <USB_DevInit+0x112>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f5c:	6017      	str	r7, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5e:	3101      	adds	r1, #1
 8004f60:	428c      	cmp	r4, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f62:	6117      	str	r7, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f64:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f68:	f102 0220 	add.w	r2, r2, #32
 8004f6c:	d031      	beq.n	8004fd2 <USB_DevInit+0x176>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f6e:	6816      	ldr	r6, [r2, #0]
 8004f70:	2e00      	cmp	r6, #0
 8004f72:	daf3      	bge.n	8004f5c <USB_DevInit+0x100>
      if (i == 0U)
 8004f74:	b111      	cbz	r1, 8004f7c <USB_DevInit+0x120>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f76:	f8c2 8000 	str.w	r8, [r2]
 8004f7a:	e7f0      	b.n	8004f5e <USB_DevInit+0x102>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f7c:	f8c2 9000 	str.w	r9, [r2]
 8004f80:	e7ed      	b.n	8004f5e <USB_DevInit+0x102>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f82:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f8a:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx->GINTMSK = 0U;
 8004f8e:	2100      	movs	r1, #0
  if (cfg.dma_enable == 0U)
 8004f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK = 0U;
 8004f92:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f94:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
 8004f98:	6159      	str	r1, [r3, #20]
  if (cfg.dma_enable == 0U)
 8004f9a:	b91a      	cbnz	r2, 8004fa4 <USB_DevInit+0x148>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	f042 0210 	orr.w	r2, r2, #16
 8004fa2:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	4a39      	ldr	r2, [pc, #228]	; (800508c <USB_DevInit+0x230>)
 8004fa8:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 8004faa:	9911      	ldr	r1, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fac:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 8004fae:	b119      	cbz	r1, 8004fb8 <USB_DevInit+0x15c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	f042 0208 	orr.w	r2, r2, #8
 8004fb6:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004fb8:	2d01      	cmp	r5, #1
 8004fba:	d105      	bne.n	8004fc8 <USB_DevInit+0x16c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004fc2:	f042 0204 	orr.w	r2, r2, #4
 8004fc6:	619a      	str	r2, [r3, #24]
}
 8004fc8:	b003      	add	sp, #12
 8004fca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fce:	b004      	add	sp, #16
 8004fd0:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fd8:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fda:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fde:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fe2:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8004fe6:	e008      	b.n	8004ffa <USB_DevInit+0x19e>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fe8:	6017      	str	r7, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fea:	3101      	adds	r1, #1
 8004fec:	428c      	cmp	r4, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fee:	6117      	str	r7, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ff0:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff4:	f102 0220 	add.w	r2, r2, #32
 8004ff8:	d0c3      	beq.n	8004f82 <USB_DevInit+0x126>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ffa:	6816      	ldr	r6, [r2, #0]
 8004ffc:	2e00      	cmp	r6, #0
 8004ffe:	daf3      	bge.n	8004fe8 <USB_DevInit+0x18c>
      if (i == 0U)
 8005000:	b111      	cbz	r1, 8005008 <USB_DevInit+0x1ac>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005002:	f8c2 8000 	str.w	r8, [r2]
 8005006:	e7f0      	b.n	8004fea <USB_DevInit+0x18e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005008:	f8c2 9000 	str.w	r9, [r2]
 800500c:	e7ed      	b.n	8004fea <USB_DevInit+0x18e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800500e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005010:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005014:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005016:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005018:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800501c:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005020:	6382      	str	r2, [r0, #56]	; 0x38
 8005022:	e75b      	b.n	8004edc <USB_DevInit+0x80>
  count = 0U;
 8005024:	2200      	movs	r2, #0
 8005026:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005028:	2210      	movs	r2, #16
    if (count > 200000U)
 800502a:	4917      	ldr	r1, [pc, #92]	; (8005088 <USB_DevInit+0x22c>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800502c:	611a      	str	r2, [r3, #16]
 800502e:	e002      	b.n	8005036 <USB_DevInit+0x1da>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	06d2      	lsls	r2, r2, #27
 8005034:	d580      	bpl.n	8004f38 <USB_DevInit+0xdc>
    count++;
 8005036:	9a01      	ldr	r2, [sp, #4]
 8005038:	3201      	adds	r2, #1
 800503a:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 800503c:	9a01      	ldr	r2, [sp, #4]
 800503e:	428a      	cmp	r2, r1
 8005040:	d9f6      	bls.n	8005030 <USB_DevInit+0x1d4>
 8005042:	e778      	b.n	8004f36 <USB_DevInit+0xda>
  count = 0U;
 8005044:	2200      	movs	r2, #0
 8005046:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005048:	f44f 6284 	mov.w	r2, #1056	; 0x420
    if (count > 200000U)
 800504c:	490e      	ldr	r1, [pc, #56]	; (8005088 <USB_DevInit+0x22c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800504e:	611a      	str	r2, [r3, #16]
 8005050:	e004      	b.n	800505c <USB_DevInit+0x200>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005052:	6918      	ldr	r0, [r3, #16]
 8005054:	f010 0020 	ands.w	r0, r0, #32
 8005058:	f43f af60 	beq.w	8004f1c <USB_DevInit+0xc0>
    count++;
 800505c:	9a00      	ldr	r2, [sp, #0]
 800505e:	3201      	adds	r2, #1
 8005060:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8005062:	9a00      	ldr	r2, [sp, #0]
 8005064:	428a      	cmp	r2, r1
 8005066:	d9f4      	bls.n	8005052 <USB_DevInit+0x1f6>
 8005068:	e757      	b.n	8004f1a <USB_DevInit+0xbe>
    if (cfg.speed == USBD_HS_SPEED)
 800506a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800506c:	b922      	cbnz	r2, 8005078 <USB_DevInit+0x21c>
  USBx_DEVICE->DCFG |= speed;
 800506e:	f8dc 2000 	ldr.w	r2, [ip]
 8005072:	f8cc 2000 	str.w	r2, [ip]
  return HAL_OK;
 8005076:	e742      	b.n	8004efe <USB_DevInit+0xa2>
  USBx_DEVICE->DCFG |= speed;
 8005078:	f8dc 2000 	ldr.w	r2, [ip]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	f8cc 2000 	str.w	r2, [ip]
  return HAL_OK;
 8005084:	e73b      	b.n	8004efe <USB_DevInit+0xa2>
 8005086:	bf00      	nop
 8005088:	00030d40 	.word	0x00030d40
 800508c:	803c3800 	.word	0x803c3800

08005090 <USB_FlushTxFifo>:
{
 8005090:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005092:	2300      	movs	r3, #0
    if (count > 200000U)
 8005094:	4a12      	ldr	r2, [pc, #72]	; (80050e0 <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	e002      	b.n	80050a0 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800509a:	6903      	ldr	r3, [r0, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	db08      	blt.n	80050b2 <USB_FlushTxFifo+0x22>
    count++;
 80050a0:	9b01      	ldr	r3, [sp, #4]
 80050a2:	3301      	adds	r3, #1
 80050a4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80050a6:	9b01      	ldr	r3, [sp, #4]
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d9f6      	bls.n	800509a <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 80050ac:	2003      	movs	r0, #3
}
 80050ae:	b002      	add	sp, #8
 80050b0:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050b2:	0189      	lsls	r1, r1, #6
  count = 0U;
 80050b4:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050b6:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80050ba:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80050bc:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050be:	6101      	str	r1, [r0, #16]
 80050c0:	e003      	b.n	80050ca <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050c2:	6903      	ldr	r3, [r0, #16]
 80050c4:	f013 0320 	ands.w	r3, r3, #32
 80050c8:	d006      	beq.n	80050d8 <USB_FlushTxFifo+0x48>
    count++;
 80050ca:	9b01      	ldr	r3, [sp, #4]
 80050cc:	3301      	adds	r3, #1
 80050ce:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80050d0:	9b01      	ldr	r3, [sp, #4]
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d9f5      	bls.n	80050c2 <USB_FlushTxFifo+0x32>
 80050d6:	e7e9      	b.n	80050ac <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 80050d8:	4618      	mov	r0, r3
}
 80050da:	b002      	add	sp, #8
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	00030d40 	.word	0x00030d40

080050e4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050e4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050e8:	f013 0006 	ands.w	r0, r3, #6
 80050ec:	d004      	beq.n	80050f8 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 80050ee:	f013 0f02 	tst.w	r3, #2
 80050f2:	bf14      	ite	ne
 80050f4:	2002      	movne	r0, #2
 80050f6:	200f      	moveq	r0, #15
}
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop

080050fc <USB_ActivateEndpoint>:
{
 80050fc:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 80050fe:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8005100:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8005102:	2b01      	cmp	r3, #1
 8005104:	d022      	beq.n	800514c <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005106:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800510a:	f002 0c0f 	and.w	ip, r2, #15
 800510e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005112:	fa03 f30c 	lsl.w	r3, r3, ip
 8005116:	4323      	orrs	r3, r4
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005118:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800511c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005120:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	d40e      	bmi.n	8005146 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005128:	68cb      	ldr	r3, [r1, #12]
 800512a:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
                                    ((uint32_t)ep->type << 18) |
 800512e:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005134:	4303      	orrs	r3, r0
 8005136:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800513a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005142:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
}
 8005146:	2000      	movs	r0, #0
 8005148:	bc30      	pop	{r4, r5}
 800514a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800514c:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8005150:	f002 0c0f 	and.w	ip, r2, #15
 8005154:	fa03 f30c 	lsl.w	r3, r3, ip
 8005158:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800515c:	432b      	orrs	r3, r5
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800515e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005162:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005164:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005168:	041c      	lsls	r4, r3, #16
 800516a:	d4ec      	bmi.n	8005146 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800516c:	68cb      	ldr	r3, [r1, #12]
 800516e:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005172:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005178:	4323      	orrs	r3, r4
 800517a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800517e:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8005182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800518e:	bc30      	pop	{r4, r5}
 8005190:	2000      	movs	r0, #0
 8005192:	4770      	bx	lr

08005194 <USB_DeactivateEndpoint>:
{
 8005194:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8005196:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8005198:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800519a:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800519c:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80051a0:	d02c      	beq.n	80051fc <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051a2:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 80051a6:	2900      	cmp	r1, #0
 80051a8:	db1b      	blt.n	80051e2 <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051aa:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 80051ae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ba:	ea24 0403 	bic.w	r4, r4, r3
 80051be:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051c2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80051c6:	4922      	ldr	r1, [pc, #136]	; (8005250 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051c8:	ea24 0303 	bic.w	r3, r4, r3
 80051cc:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80051d0:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
}
 80051d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80051d8:	4019      	ands	r1, r3
}
 80051da:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80051dc:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 80051e0:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051e2:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 80051e6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80051ea:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80051ee:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 80051f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80051f6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 80051fa:	e7d6      	b.n	80051aa <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051fc:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8005200:	2900      	cmp	r1, #0
 8005202:	da0b      	bge.n	800521c <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005204:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8005208:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800520c:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005210:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8005214:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005218:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800521c:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8005220:	f003 040f 	and.w	r4, r3, #15
 8005224:	2301      	movs	r3, #1
 8005226:	40a3      	lsls	r3, r4
 8005228:	ea21 0103 	bic.w	r1, r1, r3
 800522c:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005230:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005234:	4907      	ldr	r1, [pc, #28]	; (8005254 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005236:	ea24 0303 	bic.w	r3, r4, r3
 800523a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800523e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
}
 8005242:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005246:	4019      	ands	r1, r3
}
 8005248:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800524a:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 800524e:	4770      	bx	lr
 8005250:	eff37800 	.word	0xeff37800
 8005254:	ec337800 	.word	0xec337800

08005258 <USB_EPStartXfer>:
{
 8005258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800525c:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800525e:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8005262:	2c01      	cmp	r4, #1
 8005264:	d04f      	beq.n	8005306 <USB_EPStartXfer+0xae>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005266:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 800526a:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 800526e:	691c      	ldr	r4, [r3, #16]
 8005270:	0ce4      	lsrs	r4, r4, #19
 8005272:	04e4      	lsls	r4, r4, #19
 8005274:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005276:	691c      	ldr	r4, [r3, #16]
 8005278:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800527c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8005280:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8005282:	698c      	ldr	r4, [r1, #24]
 8005284:	b374      	cbz	r4, 80052e4 <USB_EPStartXfer+0x8c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005286:	68cd      	ldr	r5, [r1, #12]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005288:	4e78      	ldr	r6, [pc, #480]	; (800546c <USB_EPStartXfer+0x214>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800528a:	442c      	add	r4, r5
 800528c:	3c01      	subs	r4, #1
 800528e:	fbb4 f4f5 	udiv	r4, r4, r5
 8005292:	b2a4      	uxth	r4, r4
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005294:	fb04 f505 	mul.w	r5, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005298:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800529c:	691e      	ldr	r6, [r3, #16]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800529e:	61cd      	str	r5, [r1, #28]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052a0:	4334      	orrs	r4, r6
 80052a2:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80052a4:	691c      	ldr	r4, [r3, #16]
 80052a6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80052aa:	4325      	orrs	r5, r4
    if (dma == 1U)
 80052ac:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80052ae:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80052b0:	d024      	beq.n	80052fc <USB_EPStartXfer+0xa4>
    if (ep->type == EP_TYPE_ISOC)
 80052b2:	790b      	ldrb	r3, [r1, #4]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d10c      	bne.n	80052d2 <USB_EPStartXfer+0x7a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052b8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80052bc:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052c0:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 80052c4:	bf0c      	ite	eq
 80052c6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052ca:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80052ce:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052d2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 80052d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052da:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 80052de:	2000      	movs	r0, #0
 80052e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052e4:	68cc      	ldr	r4, [r1, #12]
 80052e6:	691d      	ldr	r5, [r3, #16]
 80052e8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80052ec:	432c      	orrs	r4, r5
 80052ee:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052f0:	691c      	ldr	r4, [r3, #16]
    if (dma == 1U)
 80052f2:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052f4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80052f8:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80052fa:	d1da      	bne.n	80052b2 <USB_EPStartXfer+0x5a>
      if ((uint32_t)ep->xfer_buff != 0U)
 80052fc:	690a      	ldr	r2, [r1, #16]
 80052fe:	2a00      	cmp	r2, #0
 8005300:	d0d7      	beq.n	80052b2 <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005302:	615a      	str	r2, [r3, #20]
 8005304:	e7d5      	b.n	80052b2 <USB_EPStartXfer+0x5a>
    if (ep->xfer_len == 0U)
 8005306:	698e      	ldr	r6, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005308:	eb00 154c 	add.w	r5, r0, ip, lsl #5
    if (ep->xfer_len == 0U)
 800530c:	b3de      	cbz	r6, 8005386 <USB_EPStartXfer+0x12e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800530e:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005312:	68cf      	ldr	r7, [r1, #12]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005314:	0cdb      	lsrs	r3, r3, #19
 8005316:	04db      	lsls	r3, r3, #19
 8005318:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800531c:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
 8005320:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005324:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005328:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800532c:	4b4f      	ldr	r3, [pc, #316]	; (800546c <USB_EPStartXfer+0x214>)
 800532e:	f8d5 8910 	ldr.w	r8, [r5, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005332:	eb06 0e07 	add.w	lr, r6, r7
 8005336:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800533a:	fbbe fef7 	udiv	lr, lr, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800533e:	ea03 43ce 	and.w	r3, r3, lr, lsl #19
 8005342:	ea43 0308 	orr.w	r3, r3, r8
 8005346:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800534a:	f8d5 7910 	ldr.w	r7, [r5, #2320]	; 0x910
 800534e:	f3c6 0312 	ubfx	r3, r6, #0, #19
 8005352:	433b      	orrs	r3, r7
 8005354:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8005358:	790f      	ldrb	r7, [r1, #4]
 800535a:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800535c:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8005360:	d053      	beq.n	800540a <USB_EPStartXfer+0x1b2>
    if (dma == 1U)
 8005362:	2a01      	cmp	r2, #1
 8005364:	d06d      	beq.n	8005442 <USB_EPStartXfer+0x1ea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005366:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800536a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800536e:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005372:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8005376:	f00c 0c0f 	and.w	ip, ip, #15
 800537a:	fa04 f30c 	lsl.w	r3, r4, ip
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8005384:	e7ab      	b.n	80052de <USB_EPStartXfer+0x86>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005386:	f8d5 4910 	ldr.w	r4, [r5, #2320]	; 0x910
 800538a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800538e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8005392:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005396:	f8d5 4910 	ldr.w	r4, [r5, #2320]	; 0x910
 800539a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800539e:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053a2:	f8d5 4910 	ldr.w	r4, [r5, #2320]	; 0x910
 80053a6:	0ce4      	lsrs	r4, r4, #19
 80053a8:	04e4      	lsls	r4, r4, #19
 80053aa:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
    if (dma == 1U)
 80053ae:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053b0:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80053b4:	790f      	ldrb	r7, [r1, #4]
    if (dma == 1U)
 80053b6:	d039      	beq.n	800542c <USB_EPStartXfer+0x1d4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053b8:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80053bc:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053be:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80053c2:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80053c6:	d18a      	bne.n	80052de <USB_EPStartXfer+0x86>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053c8:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80053cc:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	bf0c      	ite	eq
 80053d4:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053d8:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 80053dc:	601c      	str	r4, [r3, #0]
  if (dma == 0U)
 80053de:	2a00      	cmp	r2, #0
 80053e0:	f47f af7d 	bne.w	80052de <USB_EPStartXfer+0x86>
    count32b = ((uint32_t)len + 3U) / 4U;
 80053e4:	b2b6      	uxth	r6, r6
 80053e6:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 80053e8:	08b6      	lsrs	r6, r6, #2
 80053ea:	f43f af78 	beq.w	80052de <USB_EPStartXfer+0x86>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053ee:	690b      	ldr	r3, [r1, #16]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053f0:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 80053f4:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 80053f8:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 80053fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005400:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8005404:	428b      	cmp	r3, r1
 8005406:	d1f9      	bne.n	80053fc <USB_EPStartXfer+0x1a4>
 8005408:	e769      	b.n	80052de <USB_EPStartXfer+0x86>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800540a:	691c      	ldr	r4, [r3, #16]
 800540c:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8005410:	611c      	str	r4, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005412:	691c      	ldr	r4, [r3, #16]
    if (dma == 1U)
 8005414:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005416:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800541a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800541c:	d016      	beq.n	800544c <USB_EPStartXfer+0x1f4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800541e:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8005422:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8005426:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800542a:	e7cd      	b.n	80053c8 <USB_EPStartXfer+0x170>
      if ((uint32_t)ep->dma_addr != 0U)
 800542c:	694a      	ldr	r2, [r1, #20]
 800542e:	b95a      	cbnz	r2, 8005448 <USB_EPStartXfer+0x1f0>
      if (ep->type == EP_TYPE_ISOC)
 8005430:	2f01      	cmp	r7, #1
 8005432:	d00e      	beq.n	8005452 <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800543a:	601a      	str	r2, [r3, #0]
}
 800543c:	2000      	movs	r0, #0
 800543e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8005442:	694a      	ldr	r2, [r1, #20]
 8005444:	2a00      	cmp	r2, #0
 8005446:	d0f5      	beq.n	8005434 <USB_EPStartXfer+0x1dc>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005448:	615a      	str	r2, [r3, #20]
 800544a:	e7f1      	b.n	8005430 <USB_EPStartXfer+0x1d8>
      if ((uint32_t)ep->dma_addr != 0U)
 800544c:	694a      	ldr	r2, [r1, #20]
 800544e:	2a00      	cmp	r2, #0
 8005450:	d1fa      	bne.n	8005448 <USB_EPStartXfer+0x1f0>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005452:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8005456:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	bf0c      	ite	eq
 800545e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005462:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e7e4      	b.n	8005434 <USB_EPStartXfer+0x1dc>
 800546a:	bf00      	nop
 800546c:	1ff80000 	.word	0x1ff80000

08005470 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8005470:	784b      	ldrb	r3, [r1, #1]
 8005472:	2b01      	cmp	r3, #1
{
 8005474:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t epnum = (uint32_t)ep->num;
 8005476:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8005478:	d028      	beq.n	80054cc <USB_EP0StartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800547a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800547e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8005482:	691c      	ldr	r4, [r3, #16]
 8005484:	0ce4      	lsrs	r4, r4, #19
 8005486:	04e4      	lsls	r4, r4, #19
 8005488:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800548a:	691c      	ldr	r4, [r3, #16]
 800548c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8005490:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8005494:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8005496:	698c      	ldr	r4, [r1, #24]
 8005498:	b9ac      	cbnz	r4, 80054c6 <USB_EP0StartXfer+0x56>
      if (ep->xfer_len > ep->maxpacket)
 800549a:	68cc      	ldr	r4, [r1, #12]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800549c:	691d      	ldr	r5, [r3, #16]
    ep->xfer_size = ep->maxpacket;
 800549e:	61cc      	str	r4, [r1, #28]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054a0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80054a4:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054a6:	691d      	ldr	r5, [r3, #16]
 80054a8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80054ac:	432c      	orrs	r4, r5
    if (dma == 1U)
 80054ae:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054b0:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80054b2:	d043      	beq.n	800553c <USB_EP0StartXfer+0xcc>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80054b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80054c0:	2000      	movs	r0, #0
 80054c2:	bcf0      	pop	{r4, r5, r6, r7}
 80054c4:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 80054c6:	68cc      	ldr	r4, [r1, #12]
 80054c8:	618c      	str	r4, [r1, #24]
 80054ca:	e7e7      	b.n	800549c <USB_EP0StartXfer+0x2c>
    if (ep->xfer_len == 0U)
 80054cc:	698d      	ldr	r5, [r1, #24]
 80054ce:	2d00      	cmp	r5, #0
 80054d0:	d039      	beq.n	8005546 <USB_EP0StartXfer+0xd6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054d2:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
      if (ep->xfer_len > ep->maxpacket)
 80054d6:	68ce      	ldr	r6, [r1, #12]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054d8:	f8dc 3910 	ldr.w	r3, [ip, #2320]	; 0x910
 80054dc:	0cdb      	lsrs	r3, r3, #19
 80054de:	04db      	lsls	r3, r3, #19
 80054e0:	f8cc 3910 	str.w	r3, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054e4:	f8dc 3910 	ldr.w	r3, [ip, #2320]	; 0x910
 80054e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
      if (ep->xfer_len > ep->maxpacket)
 80054f0:	42b5      	cmp	r5, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054f2:	f8cc 3910 	str.w	r3, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054f6:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
      if (ep->xfer_len > ep->maxpacket)
 80054fa:	d952      	bls.n	80055a2 <USB_EP0StartXfer+0x132>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054fc:	691d      	ldr	r5, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 80054fe:	618e      	str	r6, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005500:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005504:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005506:	691f      	ldr	r7, [r3, #16]
 8005508:	f3c6 0512 	ubfx	r5, r6, #0, #19
 800550c:	433d      	orrs	r5, r7
    if (dma == 1U)
 800550e:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005510:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8005512:	d03c      	beq.n	800558e <USB_EP0StartXfer+0x11e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005514:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8005518:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800551c:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8005520:	2e00      	cmp	r6, #0
 8005522:	d0cd      	beq.n	80054c0 <USB_EP0StartXfer+0x50>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005524:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8005528:	f004 040f 	and.w	r4, r4, #15
 800552c:	2301      	movs	r3, #1
 800552e:	40a3      	lsls	r3, r4
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 8005536:	bcf0      	pop	{r4, r5, r6, r7}
 8005538:	2000      	movs	r0, #0
 800553a:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 800553c:	690a      	ldr	r2, [r1, #16]
 800553e:	2a00      	cmp	r2, #0
 8005540:	d0b8      	beq.n	80054b4 <USB_EP0StartXfer+0x44>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005542:	615a      	str	r2, [r3, #20]
 8005544:	e7b6      	b.n	80054b4 <USB_EP0StartXfer+0x44>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005546:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    if (dma == 1U)
 800554a:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800554c:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 8005550:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8005554:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8005558:	f8c0 4910 	str.w	r4, [r0, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800555c:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 8005560:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005564:	f8c0 4910 	str.w	r4, [r0, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005568:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 800556c:	ea4f 44d4 	mov.w	r4, r4, lsr #19
 8005570:	ea4f 44c4 	mov.w	r4, r4, lsl #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005574:	f500 6310 	add.w	r3, r0, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005578:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800557a:	d008      	beq.n	800558e <USB_EP0StartXfer+0x11e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800557c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005580:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005584:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8005588:	bcf0      	pop	{r4, r5, r6, r7}
 800558a:	2000      	movs	r0, #0
 800558c:	4770      	bx	lr
      if ((uint32_t)ep->dma_addr != 0U)
 800558e:	694a      	ldr	r2, [r1, #20]
 8005590:	b102      	cbz	r2, 8005594 <USB_EP0StartXfer+0x124>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005592:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 800559a:	2000      	movs	r0, #0
 800559c:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800559e:	601a      	str	r2, [r3, #0]
}
 80055a0:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055a2:	691e      	ldr	r6, [r3, #16]
 80055a4:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80055a8:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055aa:	691e      	ldr	r6, [r3, #16]
 80055ac:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80055b0:	4335      	orrs	r5, r6
    if (dma == 1U)
 80055b2:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055b4:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80055b6:	d0ea      	beq.n	800558e <USB_EP0StartXfer+0x11e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055b8:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 80055bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055c0:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80055c4:	e7ae      	b.n	8005524 <USB_EP0StartXfer+0xb4>
 80055c6:	bf00      	nop

080055c8 <USB_EPStopXfer>:
  if (ep->is_in == 1U)
 80055c8:	784b      	ldrb	r3, [r1, #1]
{
 80055ca:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80055cc:	2200      	movs	r2, #0
  if (ep->is_in == 1U)
 80055ce:	2b01      	cmp	r3, #1
  __IO uint32_t count = 0U;
 80055d0:	9201      	str	r2, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055d2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80055d4:	d020      	beq.n	8005618 <USB_EPStopXfer+0x50>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80055da:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80055de:	6803      	ldr	r3, [r0, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	db02      	blt.n	80055ea <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 80055e4:	2000      	movs	r0, #0
}
 80055e6:	b002      	add	sp, #8
 80055e8:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055ea:	6803      	ldr	r3, [r0, #0]
 80055ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055f0:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055f2:	6803      	ldr	r3, [r0, #0]
 80055f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        if (count > 10000U)
 80055f8:	f242 7210 	movw	r2, #10000	; 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055fc:	6003      	str	r3, [r0, #0]
 80055fe:	e002      	b.n	8005606 <USB_EPStopXfer+0x3e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005600:	6803      	ldr	r3, [r0, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	daee      	bge.n	80055e4 <USB_EPStopXfer+0x1c>
        count++;
 8005606:	9b01      	ldr	r3, [sp, #4]
 8005608:	3301      	adds	r3, #1
 800560a:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800560c:	9b01      	ldr	r3, [sp, #4]
 800560e:	4293      	cmp	r3, r2
 8005610:	d9f6      	bls.n	8005600 <USB_EPStopXfer+0x38>
          ret = HAL_ERROR;
 8005612:	2001      	movs	r0, #1
}
 8005614:	b002      	add	sp, #8
 8005616:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005618:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800561c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	2a00      	cmp	r2, #0
 8005624:	dade      	bge.n	80055e4 <USB_EPStopXfer+0x1c>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800562c:	601a      	str	r2, [r3, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
        if (count > 10000U)
 8005634:	f242 7110 	movw	r1, #10000	; 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e002      	b.n	8005642 <USB_EPStopXfer+0x7a>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	2a00      	cmp	r2, #0
 8005640:	dad0      	bge.n	80055e4 <USB_EPStopXfer+0x1c>
        count++;
 8005642:	9a01      	ldr	r2, [sp, #4]
 8005644:	3201      	adds	r2, #1
 8005646:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 8005648:	9a01      	ldr	r2, [sp, #4]
 800564a:	428a      	cmp	r2, r1
 800564c:	d9f6      	bls.n	800563c <USB_EPStopXfer+0x74>
 800564e:	e7e0      	b.n	8005612 <USB_EPStopXfer+0x4a>

08005650 <USB_WritePacket>:
{
 8005650:	b410      	push	{r4}
 8005652:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8005656:	b964      	cbnz	r4, 8005672 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8005658:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	d009      	beq.n	8005672 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800565e:	3201      	adds	r2, #1
 8005660:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8005664:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005668:	f851 2b04 	ldr.w	r2, [r1], #4
 800566c:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800566e:	428b      	cmp	r3, r1
 8005670:	d1fa      	bne.n	8005668 <USB_WritePacket+0x18>
}
 8005672:	2000      	movs	r0, #0
 8005674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop

0800567c <USB_ReadPacket>:
{
 800567c:	b530      	push	{r4, r5, lr}
  for (i = 0U; i < count32b; i++)
 800567e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8005682:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8005686:	d00b      	beq.n	80056a0 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005688:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800568c:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800568e:	2300      	movs	r3, #0
 8005690:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8005698:	459e      	cmp	lr, r3
 800569a:	d1f9      	bne.n	8005690 <USB_ReadPacket+0x14>
    pDest++;
 800569c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 80056a0:	b17d      	cbz	r5, 80056c2 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056a2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 80056a6:	1e6b      	subs	r3, r5, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056a8:	6802      	ldr	r2, [r0, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056aa:	700a      	strb	r2, [r1, #0]
      remaining_bytes--;
 80056ac:	b29b      	uxth	r3, r3
    } while (remaining_bytes != 0U);
 80056ae:	b13b      	cbz	r3, 80056c0 <USB_ReadPacket+0x44>
 80056b0:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056b2:	ea4f 2012 	mov.w	r0, r2, lsr #8
 80056b6:	bf18      	it	ne
 80056b8:	0c12      	lsrne	r2, r2, #16
 80056ba:	7048      	strb	r0, [r1, #1]
 80056bc:	bf18      	it	ne
 80056be:	708a      	strbne	r2, [r1, #2]
      pDest++;
 80056c0:	4429      	add	r1, r5
}
 80056c2:	4608      	mov	r0, r1
 80056c4:	bd30      	pop	{r4, r5, pc}
 80056c6:	bf00      	nop

080056c8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80056c8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80056ca:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80056cc:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056ce:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80056d2:	d00c      	beq.n	80056ee <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056d4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80056d8:	2a00      	cmp	r2, #0
 80056da:	db00      	blt.n	80056de <USB_EPSetStall+0x16>
 80056dc:	b9d3      	cbnz	r3, 8005714 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056de:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80056e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056e6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80056ea:	2000      	movs	r0, #0
 80056ec:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056ee:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	db06      	blt.n	8005704 <USB_EPSetStall+0x3c>
 80056f6:	b12b      	cbz	r3, 8005704 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056f8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80056fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005700:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005704:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800570c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8005710:	2000      	movs	r0, #0
 8005712:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005714:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005718:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800571c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005720:	e7dd      	b.n	80056de <USB_EPSetStall+0x16>
 8005722:	bf00      	nop

08005724 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8005724:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8005726:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005728:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800572a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800572e:	d013      	beq.n	8005758 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005730:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005734:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005738:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800573c:	790b      	ldrb	r3, [r1, #4]
 800573e:	3b02      	subs	r3, #2
 8005740:	2b01      	cmp	r3, #1
 8005742:	d901      	bls.n	8005748 <USB_EPClearStall+0x24>
}
 8005744:	2000      	movs	r0, #0
 8005746:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005748:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800574c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005750:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8005754:	2000      	movs	r0, #0
 8005756:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005758:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800575c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005760:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005764:	790b      	ldrb	r3, [r1, #4]
 8005766:	3b02      	subs	r3, #2
 8005768:	2b01      	cmp	r3, #1
 800576a:	d8eb      	bhi.n	8005744 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800576c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005774:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8005778:	2000      	movs	r0, #0
 800577a:	4770      	bx	lr

0800577c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800577c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005780:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005784:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005788:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800578c:	0109      	lsls	r1, r1, #4
 800578e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8005792:	4319      	orrs	r1, r3
 8005794:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8005798:	2000      	movs	r0, #0
 800579a:	4770      	bx	lr

0800579c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800579c:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 80057a0:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057a2:	f022 0203 	bic.w	r2, r2, #3
 80057a6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80057aa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80057ae:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 80057b2:	f023 0302 	bic.w	r3, r3, #2
}
 80057b6:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80057b8:	604b      	str	r3, [r1, #4]
}
 80057ba:	4770      	bx	lr

080057bc <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057bc:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 80057c0:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057c2:	f022 0203 	bic.w	r2, r2, #3
 80057c6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057ca:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80057ce:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 80057d2:	f043 0302 	orr.w	r3, r3, #2
}
 80057d6:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057d8:	604b      	str	r3, [r1, #4]
}
 80057da:	4770      	bx	lr

080057dc <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80057dc:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80057de:	6980      	ldr	r0, [r0, #24]
}
 80057e0:	4010      	ands	r0, r2
 80057e2:	4770      	bx	lr

080057e4 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80057e4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80057e8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057ec:	69c0      	ldr	r0, [r0, #28]
 80057ee:	4018      	ands	r0, r3
}
 80057f0:	0c00      	lsrs	r0, r0, #16
 80057f2:	4770      	bx	lr

080057f4 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80057f4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80057f8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057fc:	69c0      	ldr	r0, [r0, #28]
 80057fe:	4018      	ands	r0, r3
}
 8005800:	b280      	uxth	r0, r0
 8005802:	4770      	bx	lr

08005804 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005804:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005808:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800580c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005810:	6940      	ldr	r0, [r0, #20]
}
 8005812:	4010      	ands	r0, r2
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop

08005818 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8005818:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800581c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005820:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005824:	f001 010f 	and.w	r1, r1, #15
 8005828:	40cb      	lsrs	r3, r1
 800582a:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800582c:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005830:	b2db      	uxtb	r3, r3
 8005832:	4313      	orrs	r3, r2
}
 8005834:	4018      	ands	r0, r3
 8005836:	4770      	bx	lr

08005838 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8005838:	6940      	ldr	r0, [r0, #20]
}
 800583a:	f000 0001 	and.w	r0, r0, #1
 800583e:	4770      	bx	lr

08005840 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005840:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
{
 8005844:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005846:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800584a:	f022 0207 	bic.w	r2, r2, #7
 800584e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005852:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8005856:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
}
 800585e:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005860:	604b      	str	r3, [r1, #4]
}
 8005862:	4770      	bx	lr

08005864 <USB_EP0_OutStart>:
{
 8005864:	b410      	push	{r4}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <USB_EP0_OutStart+0x54>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005868:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800586a:	429c      	cmp	r4, r3
 800586c:	d81a      	bhi.n	80058a4 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800586e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005876:	6903      	ldr	r3, [r0, #16]
 8005878:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800587c:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800587e:	6903      	ldr	r3, [r0, #16]
 8005880:	f043 0318 	orr.w	r3, r3, #24
 8005884:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005886:	6903      	ldr	r3, [r0, #16]
  if (dma == 1U)
 8005888:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800588a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800588e:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8005890:	d104      	bne.n	800589c <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005892:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005894:	6803      	ldr	r3, [r0, #0]
 8005896:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800589a:	6003      	str	r3, [r0, #0]
}
 800589c:	2000      	movs	r0, #0
 800589e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a2:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80058ae:	dae0      	bge.n	8005872 <USB_EP0_OutStart+0xe>
}
 80058b0:	2000      	movs	r0, #0
 80058b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	4f54300a 	.word	0x4f54300a

080058bc <asn1_get_int>:
 * @param int_ptr Указатель на записанное число
 * @param nbytes Размер данных
 * @return
 */
int asn1_get_int(const uint8_t *buffer, const uint8_t **int_ptr, size_t *nbytes) {
    if (buffer[0] != ASN1_INTEGER) {
 80058bc:	f890 c000 	ldrb.w	ip, [r0]
 80058c0:	f1bc 0f02 	cmp.w	ip, #2
 80058c4:	d12d      	bne.n	8005922 <asn1_get_int+0x66>
int asn1_get_int(const uint8_t *buffer, const uint8_t **int_ptr, size_t *nbytes) {
 80058c6:	b570      	push	{r4, r5, r6, lr}
        return -1;
    }

    size_t int_index = 2 + (buffer[1] & ~0x7F ? buffer[1] & 0x7F : 0);
 80058c8:	7843      	ldrb	r3, [r0, #1]
 80058ca:	4604      	mov	r4, r0
 80058cc:	0618      	lsls	r0, r3, #24
 80058ce:	d40f      	bmi.n	80058f0 <asn1_get_int+0x34>
 80058d0:	4660      	mov	r0, ip
    size_t data_bytes = asn1_get_len(buffer + 1);

    if (buffer[int_index] == 0 && data_bytes > 1) {
 80058d2:	1825      	adds	r5, r4, r0
 80058d4:	5c26      	ldrb	r6, [r4, r0]
 80058d6:	bb06      	cbnz	r6, 800591a <asn1_get_int+0x5e>
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d91e      	bls.n	800591a <asn1_get_int+0x5e>
        ++int_index;
 80058dc:	f100 0c01 	add.w	ip, r0, #1
        --data_bytes;
 80058e0:	3b01      	subs	r3, #1
    }

    *int_ptr = buffer + int_index;
 80058e2:	eb04 050c 	add.w	r5, r4, ip
    *nbytes = data_bytes;

    return *nbytes + int_index;
 80058e6:	eb0c 0003 	add.w	r0, ip, r3
    *int_ptr = buffer + int_index;
 80058ea:	600d      	str	r5, [r1, #0]
    *nbytes = data_bytes;
 80058ec:	6013      	str	r3, [r2, #0]
}
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    size_t int_index = 2 + (buffer[1] & ~0x7F ? buffer[1] & 0x7F : 0);
 80058f4:	1c98      	adds	r0, r3, #2
    *int_ptr = buffer + int_index;
 80058f6:	1825      	adds	r5, r4, r0
 */
size_t asn1_get_len(const uint8_t *buffer) {
    size_t len = buffer[0];
    if (buffer[0] & ~0x7F) {
        len = 0;
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f6      	beq.n	80058ea <asn1_get_int+0x2e>
 80058fc:	f104 0c01 	add.w	ip, r4, #1
 8005900:	eb0c 0503 	add.w	r5, ip, r3
        len = 0;
 8005904:	2300      	movs	r3, #0
            len = len << 8 | buffer[i];
 8005906:	f81c ef01 	ldrb.w	lr, [ip, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 800590a:	4565      	cmp	r5, ip
            len = len << 8 | buffer[i];
 800590c:	ea4e 2303 	orr.w	r3, lr, r3, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8005910:	d1f9      	bne.n	8005906 <asn1_get_int+0x4a>
    if (buffer[int_index] == 0 && data_bytes > 1) {
 8005912:	5c26      	ldrb	r6, [r4, r0]
 8005914:	1825      	adds	r5, r4, r0
 8005916:	2e00      	cmp	r6, #0
 8005918:	d0de      	beq.n	80058d8 <asn1_get_int+0x1c>
    *int_ptr = buffer + int_index;
 800591a:	600d      	str	r5, [r1, #0]
    return *nbytes + int_index;
 800591c:	4418      	add	r0, r3
    *nbytes = data_bytes;
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8005922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005926:	4770      	bx	lr

08005928 <asn1_get_padding_pub_key>:
    if (buffer[i] != ASN1_SEQUENCE) {
 8005928:	7803      	ldrb	r3, [r0, #0]
 800592a:	2b30      	cmp	r3, #48	; 0x30
 800592c:	d12a      	bne.n	8005984 <asn1_get_padding_pub_key+0x5c>
    if (buffer[i] & 0x80) {
 800592e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8005932:	7842      	ldrb	r2, [r0, #1]
 8005934:	2b00      	cmp	r3, #0
 8005936:	db28      	blt.n	800598a <asn1_get_padding_pub_key+0x62>
 8005938:	2202      	movs	r2, #2
    ++i;
 800593a:	2301      	movs	r3, #1
    if (buffer[i] != ASN1_SEQUENCE) {
 800593c:	5c82      	ldrb	r2, [r0, r2]
 800593e:	2a30      	cmp	r2, #48	; 0x30
 8005940:	d120      	bne.n	8005984 <asn1_get_padding_pub_key+0x5c>
    ++i;
 8005942:	1c9a      	adds	r2, r3, #2
    i += asn1_get_len(buffer + i) + 1;
 8005944:	1881      	adds	r1, r0, r2
    size_t len = buffer[0];
 8005946:	5c82      	ldrb	r2, [r0, r2]
    if (buffer[0] & ~0x7F) {
 8005948:	f012 0f80 	tst.w	r2, #128	; 0x80
 800594c:	d122      	bne.n	8005994 <asn1_get_padding_pub_key+0x6c>
        }
    }

    return len;
 800594e:	3303      	adds	r3, #3
    i += asn1_get_len(buffer + i) + 1;
 8005950:	4413      	add	r3, r2
    if (buffer[i] != ASN1_BIT_STRING) {
 8005952:	5cc2      	ldrb	r2, [r0, r3]
 8005954:	2a03      	cmp	r2, #3
 8005956:	d115      	bne.n	8005984 <asn1_get_padding_pub_key+0x5c>
    ++i;
 8005958:	3301      	adds	r3, #1
    if (buffer[i] & 0x80) {
 800595a:	56c1      	ldrsb	r1, [r0, r3]
 800595c:	5cc2      	ldrb	r2, [r0, r3]
 800595e:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8005960:	bfbc      	itt	lt
 8005962:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 8005966:	189b      	addlt	r3, r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 8005968:	18c2      	adds	r2, r0, r3
 800596a:	7892      	ldrb	r2, [r2, #2]
 800596c:	2a30      	cmp	r2, #48	; 0x30
 800596e:	d109      	bne.n	8005984 <asn1_get_padding_pub_key+0x5c>
    ++i;
 8005970:	3303      	adds	r3, #3
    if (buffer[i] & 0x80) {
 8005972:	56c1      	ldrsb	r1, [r0, r3]
 8005974:	5cc2      	ldrb	r2, [r0, r3]
 8005976:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8005978:	bfbc      	itt	lt
 800597a:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 800597e:	189b      	addlt	r3, r3, r2
    ++i;
 8005980:	1c58      	adds	r0, r3, #1
    return i;
 8005982:	4770      	bx	lr
        return -1;
 8005984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005988:	4770      	bx	lr
        i += buffer[i] & 0x7F;
 800598a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800598e:	1c53      	adds	r3, r2, #1
    ++i;
 8005990:	3202      	adds	r2, #2
 8005992:	e7d3      	b.n	800593c <asn1_get_padding_pub_key+0x14>
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8005994:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8005998:	d0d9      	beq.n	800594e <asn1_get_padding_pub_key+0x26>
size_t asn1_get_padding_pub_key(const uint8_t *buffer) {
 800599a:	b500      	push	{lr}
 800599c:	eb01 0e02 	add.w	lr, r1, r2
        len = 0;
 80059a0:	2200      	movs	r2, #0
            len = len << 8 | buffer[i];
 80059a2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80059a6:	458e      	cmp	lr, r1
            len = len << 8 | buffer[i];
 80059a8:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80059ac:	d1f9      	bne.n	80059a2 <asn1_get_padding_pub_key+0x7a>
    return len;
 80059ae:	3303      	adds	r3, #3
    i += asn1_get_len(buffer + i) + 1;
 80059b0:	4413      	add	r3, r2
    if (buffer[i] != ASN1_BIT_STRING) {
 80059b2:	5cc2      	ldrb	r2, [r0, r3]
 80059b4:	2a03      	cmp	r2, #3
 80059b6:	d116      	bne.n	80059e6 <asn1_get_padding_pub_key+0xbe>
    ++i;
 80059b8:	3301      	adds	r3, #1
    if (buffer[i] & 0x80) {
 80059ba:	56c1      	ldrsb	r1, [r0, r3]
 80059bc:	5cc2      	ldrb	r2, [r0, r3]
 80059be:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 80059c0:	bfbc      	itt	lt
 80059c2:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 80059c6:	189b      	addlt	r3, r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 80059c8:	18c2      	adds	r2, r0, r3
 80059ca:	7892      	ldrb	r2, [r2, #2]
 80059cc:	2a30      	cmp	r2, #48	; 0x30
 80059ce:	d10a      	bne.n	80059e6 <asn1_get_padding_pub_key+0xbe>
    ++i;
 80059d0:	3303      	adds	r3, #3
    if (buffer[i] & 0x80) {
 80059d2:	56c1      	ldrsb	r1, [r0, r3]
 80059d4:	5cc2      	ldrb	r2, [r0, r3]
 80059d6:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 80059d8:	bfbc      	itt	lt
 80059da:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 80059de:	189b      	addlt	r3, r3, r2
    ++i;
 80059e0:	1c58      	adds	r0, r3, #1
}
 80059e2:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
 80059e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80059ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80059ee:	bf00      	nop

080059f0 <asn1_get_padding_pvt_key>:
    if (buffer[i] != ASN1_SEQUENCE) {
 80059f0:	7803      	ldrb	r3, [r0, #0]
 80059f2:	2b30      	cmp	r3, #48	; 0x30
 80059f4:	d14f      	bne.n	8005a96 <asn1_get_padding_pvt_key+0xa6>
    if (buffer[i] & 0x80) {
 80059f6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80059fa:	7842      	ldrb	r2, [r0, #1]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	db4d      	blt.n	8005a9c <asn1_get_padding_pvt_key+0xac>
 8005a00:	2202      	movs	r2, #2
    ++i;
 8005a02:	2301      	movs	r3, #1
    if (buffer[i] != ASN1_INTEGER) {
 8005a04:	5c82      	ldrb	r2, [r0, r2]
 8005a06:	2a02      	cmp	r2, #2
 8005a08:	d145      	bne.n	8005a96 <asn1_get_padding_pvt_key+0xa6>
size_t asn1_get_padding_pvt_key(const uint8_t *buffer) {
 8005a0a:	b500      	push	{lr}
    ++i;
 8005a0c:	1c9a      	adds	r2, r3, #2
    i += asn1_get_len(buffer + i) + 1;
 8005a0e:	1881      	adds	r1, r0, r2
    size_t len = buffer[0];
 8005a10:	5c82      	ldrb	r2, [r0, r2]
    if (buffer[0] & ~0x7F) {
 8005a12:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a16:	d00b      	beq.n	8005a30 <asn1_get_padding_pvt_key+0x40>
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8005a18:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8005a1c:	d008      	beq.n	8005a30 <asn1_get_padding_pvt_key+0x40>
 8005a1e:	eb01 0e02 	add.w	lr, r1, r2
        len = 0;
 8005a22:	2200      	movs	r2, #0
            len = len << 8 | buffer[i];
 8005a24:	f811 cf01 	ldrb.w	ip, [r1, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8005a28:	458e      	cmp	lr, r1
            len = len << 8 | buffer[i];
 8005a2a:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8005a2e:	d1f9      	bne.n	8005a24 <asn1_get_padding_pvt_key+0x34>
    return len;
 8005a30:	3303      	adds	r3, #3
    i += asn1_get_len(buffer + i) + 1;
 8005a32:	4413      	add	r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 8005a34:	5cc2      	ldrb	r2, [r0, r3]
 8005a36:	2a30      	cmp	r2, #48	; 0x30
 8005a38:	d135      	bne.n	8005aa6 <asn1_get_padding_pvt_key+0xb6>
    ++i;
 8005a3a:	1c5a      	adds	r2, r3, #1
    i += asn1_get_len(buffer + i) + 1;
 8005a3c:	1881      	adds	r1, r0, r2
    size_t len = buffer[0];
 8005a3e:	5c82      	ldrb	r2, [r0, r2]
    if (buffer[0] & ~0x7F) {
 8005a40:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a44:	d00b      	beq.n	8005a5e <asn1_get_padding_pvt_key+0x6e>
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8005a46:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8005a4a:	d008      	beq.n	8005a5e <asn1_get_padding_pvt_key+0x6e>
 8005a4c:	eb01 0e02 	add.w	lr, r1, r2
        len = 0;
 8005a50:	2200      	movs	r2, #0
            len = len << 8 | buffer[i];
 8005a52:	f811 cf01 	ldrb.w	ip, [r1, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8005a56:	458e      	cmp	lr, r1
            len = len << 8 | buffer[i];
 8005a58:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8005a5c:	d1f9      	bne.n	8005a52 <asn1_get_padding_pvt_key+0x62>
    return len;
 8005a5e:	3302      	adds	r3, #2
    i += asn1_get_len(buffer + i) + 1;
 8005a60:	4413      	add	r3, r2
    if (buffer[i] != ASN1_OCTET_STRING) {
 8005a62:	5cc2      	ldrb	r2, [r0, r3]
 8005a64:	2a04      	cmp	r2, #4
 8005a66:	d11e      	bne.n	8005aa6 <asn1_get_padding_pvt_key+0xb6>
    ++i;
 8005a68:	3301      	adds	r3, #1
    if (buffer[i] & 0x80) {
 8005a6a:	56c1      	ldrsb	r1, [r0, r3]
 8005a6c:	5cc2      	ldrb	r2, [r0, r3]
 8005a6e:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8005a70:	bfbc      	itt	lt
 8005a72:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 8005a76:	189b      	addlt	r3, r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 8005a78:	18c2      	adds	r2, r0, r3
 8005a7a:	7852      	ldrb	r2, [r2, #1]
 8005a7c:	2a30      	cmp	r2, #48	; 0x30
 8005a7e:	d112      	bne.n	8005aa6 <asn1_get_padding_pvt_key+0xb6>
    ++i;
 8005a80:	3302      	adds	r3, #2
    if (buffer[i] & 0x80) {
 8005a82:	56c1      	ldrsb	r1, [r0, r3]
 8005a84:	5cc2      	ldrb	r2, [r0, r3]
 8005a86:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8005a88:	bfbc      	itt	lt
 8005a8a:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 8005a8e:	189b      	addlt	r3, r3, r2
    ++i;
 8005a90:	1c58      	adds	r0, r3, #1
}
 8005a92:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
 8005a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005a9a:	4770      	bx	lr
        i += buffer[i] & 0x7F;
 8005a9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005aa0:	1c53      	adds	r3, r2, #1
    ++i;
 8005aa2:	3202      	adds	r2, #2
 8005aa4:	e7ae      	b.n	8005a04 <asn1_get_padding_pvt_key+0x14>
        return -1;
 8005aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aae:	bf00      	nop

08005ab0 <base64_read>:
 * @param in_size Размер входных данных
 * @param out Выходные данные
 * @param out_size Максимальный размер выходных данных
 * @return Размер, который занимает выходные данные
 */
int base64_read(const uint8_t *in, const size_t in_size, uint8_t *out, const size_t out_size) {
 8005ab0:	b530      	push	{r4, r5, lr}
    if (out_size < in_size * 4 / 3) {
 8005ab2:	4d1f      	ldr	r5, [pc, #124]	; (8005b30 <base64_read+0x80>)
 8005ab4:	008c      	lsls	r4, r1, #2
 8005ab6:	fba5 5404 	umull	r5, r4, r5, r4
 8005aba:	ebb3 0f54 	cmp.w	r3, r4, lsr #1
 8005abe:	d334      	bcc.n	8005b2a <base64_read+0x7a>
        return 0;
    }

    for (size_t r = 0, w = 0; r < in_size; r += 4, w += 3) {
 8005ac0:	0865      	lsrs	r5, r4, #1
 8005ac2:	b381      	cbz	r1, 8005b26 <base64_read+0x76>
 8005ac4:	4c1b      	ldr	r4, [pc, #108]	; (8005b34 <base64_read+0x84>)
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f04f 0e00 	mov.w	lr, #0
        out[w + 0] = (v64[in[r + 0]] << 2) | (v64[in[r + 1]] >> 4);
 8005acc:	f893 c001 	ldrb.w	ip, [r3, #1]
 8005ad0:	7818      	ldrb	r0, [r3, #0]
 8005ad2:	f934 c01c 	ldrsh.w	ip, [r4, ip, lsl #1]
 8005ad6:	f934 0010 	ldrsh.w	r0, [r4, r0, lsl #1]
 8005ada:	ea4f 1c2c 	mov.w	ip, ip, asr #4
 8005ade:	ea4c 0c80 	orr.w	ip, ip, r0, lsl #2
 8005ae2:	f882 c000 	strb.w	ip, [r2]
        out[w + 1] = (v64[in[r + 1]] << 4) | (v64[in[r + 2]] >> 2);
 8005ae6:	f893 c002 	ldrb.w	ip, [r3, #2]
 8005aea:	7858      	ldrb	r0, [r3, #1]
 8005aec:	f934 c01c 	ldrsh.w	ip, [r4, ip, lsl #1]
 8005af0:	f934 0010 	ldrsh.w	r0, [r4, r0, lsl #1]
 8005af4:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8005af8:	ea4c 1c00 	orr.w	ip, ip, r0, lsl #4
 8005afc:	f882 c001 	strb.w	ip, [r2, #1]
        out[w + 2] = (v64[in[r + 2]] << 6) | (v64[in[r + 3]] >> 0);
 8005b00:	7898      	ldrb	r0, [r3, #2]
 8005b02:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005b06:	f934 0010 	ldrsh.w	r0, [r4, r0, lsl #1]
 8005b0a:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
    for (size_t r = 0, w = 0; r < in_size; r += 4, w += 3) {
 8005b0e:	f10e 0e04 	add.w	lr, lr, #4
        out[w + 2] = (v64[in[r + 2]] << 6) | (v64[in[r + 3]] >> 0);
 8005b12:	ea4c 1c80 	orr.w	ip, ip, r0, lsl #6
    for (size_t r = 0, w = 0; r < in_size; r += 4, w += 3) {
 8005b16:	4571      	cmp	r1, lr
        out[w + 2] = (v64[in[r + 2]] << 6) | (v64[in[r + 3]] >> 0);
 8005b18:	f882 c002 	strb.w	ip, [r2, #2]
    for (size_t r = 0, w = 0; r < in_size; r += 4, w += 3) {
 8005b1c:	f103 0304 	add.w	r3, r3, #4
 8005b20:	f102 0203 	add.w	r2, r2, #3
 8005b24:	d8d2      	bhi.n	8005acc <base64_read+0x1c>
    }

    return in_size * 4 / 3;
 8005b26:	4628      	mov	r0, r5
}
 8005b28:	bd30      	pop	{r4, r5, pc}
        return 0;
 8005b2a:	2000      	movs	r0, #0
}
 8005b2c:	bd30      	pop	{r4, r5, pc}
 8005b2e:	bf00      	nop
 8005b30:	aaaaaaab 	.word	0xaaaaaaab
 8005b34:	0800bad8 	.word	0x0800bad8

08005b38 <bn_div.part.0>:
 * @param bignum1 Делимое
 * @param bignum2 Делитель
 * @param bignum_res Частное
 * @param size Размер чисел
 */
void bn_div(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	b0e7      	sub	sp, #412	; 0x19c
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005b3e:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8005b42:	ac06      	add	r4, sp, #24
void bn_div(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8005b44:	461e      	mov	r6, r3
 8005b46:	4680      	mov	r8, r0
 8005b48:	460d      	mov	r5, r1
 8005b4a:	4617      	mov	r7, r2
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	464a      	mov	r2, r9
 8005b50:	4620      	mov	r0, r4
 8005b52:	f003 f893 	bl	8008c7c <memset>
    for (size_t i = 0; i < size; i++) {
 8005b56:	b12e      	cbz	r6, 8005b64 <bn_div.part.0+0x2c>
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 8005b58:	2301      	movs	r3, #1
    for (size_t i = 0; i < size; i++) {
 8005b5a:	429e      	cmp	r6, r3
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	bf1c      	itt	ne
 8005b60:	2300      	movne	r3, #0
 8005b62:	6063      	strne	r3, [r4, #4]
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8005b64:	4629      	mov	r1, r5
 8005b66:	ad26      	add	r5, sp, #152	; 0x98
 8005b68:	464a      	mov	r2, r9
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f003 f937 	bl	8008dde <memcpy>
 8005b70:	4641      	mov	r1, r8
 8005b72:	464a      	mov	r2, r9
 8005b74:	a846      	add	r0, sp, #280	; 0x118
 8005b76:	f003 f932 	bl	8008dde <memcpy>
    bn_assign(&tmp, 0, bignum1, 0, size);

    uint8_t overflow = 0;
    while (bn_cmp(&denom, bignum1, size) != BN_CMP_LARGER) {
        const BN_DTYPE_TMP half_max = 1 + (BN_DTYPE_TMP)(BN_MAX_VAL / 2);
        if (denom[size - 1] >= half_max) {
 8005b7a:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
 8005b7e:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8005b82:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8005b86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b8a:	46be      	mov	lr, r7
void bn_div(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8005b8c:	4661      	mov	r1, ip
 8005b8e:	4642      	mov	r2, r8
 8005b90:	4633      	mov	r3, r6
 8005b92:	e004      	b.n	8005b9e <bn_div.part.0+0x66>
bignum_compare_state bn_cmp(const bignum_t *bignum1, const bignum_t *bignum2, size_t size) {
    do {
        --size;
        if ((*bignum1)[size] > (*bignum2)[size]) {
            return BN_CMP_LARGER;
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8005b94:	f0c0 8188 	bcc.w	8005ea8 <bn_div.part.0+0x370>
            return BN_CMP_SMALLER;
        }
    } while (size != 0);
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8185 	beq.w	8005ea8 <bn_div.part.0+0x370>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8005b9e:	f852 7d04 	ldr.w	r7, [r2, #-4]!
 8005ba2:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8005ba6:	4287      	cmp	r7, r0
        --size;
 8005ba8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8005bac:	d9f2      	bls.n	8005b94 <bn_div.part.0+0x5c>
 8005bae:	6829      	ldr	r1, [r5, #0]
 8005bb0:	4677      	mov	r7, lr
 8005bb2:	462b      	mov	r3, r5
 8005bb4:	a845      	add	r0, sp, #276	; 0x114
 * \brief Смещение вправо на 1 бит
 * @param bignum Число
 */
static void rshift_one_bit(bignum_t *bignum) {
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 8005bb6:	084a      	lsrs	r2, r1, #1
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8005bbe:	f843 2b04 	str.w	r2, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8005bc2:	4283      	cmp	r3, r0
 8005bc4:	d1f7      	bne.n	8005bb6 <bn_div.part.0+0x7e>
    }
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 8005bc6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005bc8:	6821      	ldr	r1, [r4, #0]
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	67eb      	str	r3, [r5, #124]	; 0x7c
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8005bce:	a825      	add	r0, sp, #148	; 0x94
 8005bd0:	4623      	mov	r3, r4
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 8005bd2:	084a      	lsrs	r2, r1, #1
 8005bd4:	6859      	ldr	r1, [r3, #4]
 8005bd6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8005bda:	f843 2b04 	str.w	r2, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8005bde:	4283      	cmp	r3, r0
 8005be0:	d1f7      	bne.n	8005bd2 <bn_div.part.0+0x9a>
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 8005be2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	67e3      	str	r3, [r4, #124]	; 0x7c
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005be8:	464a      	mov	r2, r9
 8005bea:	2100      	movs	r1, #0
 8005bec:	4638      	mov	r0, r7
 8005bee:	f003 f845 	bl	8008c7c <memset>
    for (size_t i = 0; i < size; ++i) {
 8005bf2:	ab46      	add	r3, sp, #280	; 0x118
 8005bf4:	445b      	add	r3, fp
 8005bf6:	f1ba 0f03 	cmp.w	sl, #3
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	f3c7 0302 	ubfx	r3, r7, #0, #3
 8005c00:	bf94      	ite	ls
 8005c02:	2200      	movls	r2, #0
 8005c04:	2201      	movhi	r2, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bf18      	it	ne
 8005c0a:	2200      	movne	r2, #0
 8005c0c:	1f3b      	subs	r3, r7, #4
 8005c0e:	9202      	str	r2, [sp, #8]
 8005c10:	9305      	str	r3, [sp, #20]
 8005c12:	aa46      	add	r2, sp, #280	; 0x118
 8005c14:	444b      	add	r3, r9
 8005c16:	eb02 0c09 	add.w	ip, r2, r9
 8005c1a:	9304      	str	r3, [sp, #16]
 8005c1c:	ea4f 0e56 	mov.w	lr, r6, lsr #1
 8005c20:	f026 0201 	bic.w	r2, r6, #1
 8005c24:	2e00      	cmp	r6, #0
 8005c26:	f000 813c 	beq.w	8005ea2 <bn_div.part.0+0x36a>
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	46a1      	mov	r9, r4
 8005c30:	e002      	b.n	8005c38 <bn_div.part.0+0x100>
 8005c32:	428e      	cmp	r6, r1
 8005c34:	f000 8135 	beq.w	8005ea2 <bn_div.part.0+0x36a>
        if ((*bignum)[i] != 0) {
 8005c38:	f850 3b04 	ldr.w	r3, [r0], #4
    for (size_t i = 0; i < size; ++i) {
 8005c3c:	3101      	adds	r1, #1
        if ((*bignum)[i] != 0) {
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f7      	beq.n	8005c32 <bn_div.part.0+0xfa>
 8005c42:	464b      	mov	r3, r9
 8005c44:	9801      	ldr	r0, [sp, #4]
 8005c46:	46c1      	mov	r9, r8
 8005c48:	4631      	mov	r1, r6
 8005c4a:	469a      	mov	sl, r3
 8005c4c:	4693      	mov	fp, r2
 8005c4e:	e002      	b.n	8005c56 <bn_div.part.0+0x11e>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8005c50:	f0c0 8147 	bcc.w	8005ee2 <bn_div.part.0+0x3aa>
    } while (size != 0);
 8005c54:	b139      	cbz	r1, 8005c66 <bn_div.part.0+0x12e>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8005c56:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8005c5a:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8005c5e:	429a      	cmp	r2, r3
        --size;
 8005c60:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8005c64:	d9f4      	bls.n	8005c50 <bn_div.part.0+0x118>
 8005c66:	9801      	ldr	r0, [sp, #4]
 8005c68:	46c1      	mov	r9, r8
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	e002      	b.n	8005c74 <bn_div.part.0+0x13c>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8005c6e:	f0c0 813b 	bcc.w	8005ee8 <bn_div.part.0+0x3b0>
    } while (size != 0);
 8005c72:	b139      	cbz	r1, 8005c84 <bn_div.part.0+0x14c>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8005c74:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8005c78:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8005c7c:	429a      	cmp	r2, r3
        --size;
 8005c7e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8005c82:	d9f4      	bls.n	8005c6e <bn_div.part.0+0x136>
 8005c84:	4653      	mov	r3, sl
 8005c86:	465a      	mov	r2, fp
 8005c88:	46aa      	mov	sl, r5
 8005c8a:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8005c8e:	2000      	movs	r0, #0
 8005c90:	9303      	str	r3, [sp, #12]
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8005c92:	f8d9 3000 	ldr.w	r3, [r9]
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 8005c96:	f85a bb04 	ldr.w	fp, [sl], #4
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8005c9a:	4241      	negs	r1, r0
 8005c9c:	18c9      	adds	r1, r1, r3
 8005c9e:	f080 0001 	eor.w	r0, r0, #1
 8005ca2:	f140 0000 	adc.w	r0, r0, #0
 8005ca6:	ebb1 010b 	subs.w	r1, r1, fp
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8005caa:	f849 1b04 	str.w	r1, [r9], #4
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8005cae:	f160 0000 	sbc.w	r0, r0, #0
        borrow = res <= BN_MAX_VAL;
 8005cb2:	fab0 f080 	clz	r0, r0
    for (size_t i = 0; i < size; ++i) {
 8005cb6:	45e1      	cmp	r9, ip
        borrow = res <= BN_MAX_VAL;
 8005cb8:	ea4f 1050 	mov.w	r0, r0, lsr #5
    for (size_t i = 0; i < size; ++i) {
 8005cbc:	d1e9      	bne.n	8005c92 <bn_div.part.0+0x15a>
    for (size_t i = 0; i < size; ++i) {
 8005cbe:	9902      	ldr	r1, [sp, #8]
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	f000 8116 	beq.w	8005ef4 <bn_div.part.0+0x3bc>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6820      	ldr	r0, [r4, #0]
 8005ccc:	4301      	orrs	r1, r0
 8005cce:	6039      	str	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	9907      	ldr	r1, [sp, #28]
 8005cd4:	f1be 0f01 	cmp.w	lr, #1
 8005cd8:	ea41 0100 	orr.w	r1, r1, r0
 8005cdc:	6079      	str	r1, [r7, #4]
    for (size_t i = 0; i < size; ++i) {
 8005cde:	f240 80b7 	bls.w	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	9808      	ldr	r0, [sp, #32]
 8005ce6:	4301      	orrs	r1, r0
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cee:	f1be 0f02 	cmp.w	lr, #2
 8005cf2:	ea41 0100 	orr.w	r1, r1, r0
 8005cf6:	60f9      	str	r1, [r7, #12]
    for (size_t i = 0; i < size; ++i) {
 8005cf8:	f000 80aa 	beq.w	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005cfc:	6938      	ldr	r0, [r7, #16]
 8005cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d00:	4301      	orrs	r1, r0
 8005d02:	6139      	str	r1, [r7, #16]
 8005d04:	6978      	ldr	r0, [r7, #20]
 8005d06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d08:	f1be 0f03 	cmp.w	lr, #3
 8005d0c:	ea41 0100 	orr.w	r1, r1, r0
 8005d10:	6179      	str	r1, [r7, #20]
    for (size_t i = 0; i < size; ++i) {
 8005d12:	f000 809d 	beq.w	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005d16:	69b9      	ldr	r1, [r7, #24]
 8005d18:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005d1a:	4301      	orrs	r1, r0
 8005d1c:	61b9      	str	r1, [r7, #24]
 8005d1e:	69f8      	ldr	r0, [r7, #28]
 8005d20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d22:	f1be 0f04 	cmp.w	lr, #4
 8005d26:	ea41 0100 	orr.w	r1, r1, r0
 8005d2a:	61f9      	str	r1, [r7, #28]
    for (size_t i = 0; i < size; ++i) {
 8005d2c:	f000 8090 	beq.w	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005d30:	6a38      	ldr	r0, [r7, #32]
 8005d32:	9003      	str	r0, [sp, #12]
 8005d34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d38:	4301      	orrs	r1, r0
 8005d3a:	6279      	str	r1, [r7, #36]	; 0x24
 8005d3c:	9803      	ldr	r0, [sp, #12]
 8005d3e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005d40:	f1be 0f05 	cmp.w	lr, #5
 8005d44:	ea40 0001 	orr.w	r0, r0, r1
 8005d48:	6238      	str	r0, [r7, #32]
 8005d4a:	f000 8081 	beq.w	8005e50 <bn_div.part.0+0x318>
 8005d4e:	e9dd 1910 	ldrd	r1, r9, [sp, #64]	; 0x40
 8005d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d54:	4301      	orrs	r1, r0
 8005d56:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d5a:	f1be 0f06 	cmp.w	lr, #6
 8005d5e:	ea41 0109 	orr.w	r1, r1, r9
 8005d62:	62f9      	str	r1, [r7, #44]	; 0x2c
    for (size_t i = 0; i < size; ++i) {
 8005d64:	d074      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005d66:	e9dd 1912 	ldrd	r1, r9, [sp, #72]	; 0x48
 8005d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6c:	4301      	orrs	r1, r0
 8005d6e:	6339      	str	r1, [r7, #48]	; 0x30
 8005d70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d72:	f1be 0f07 	cmp.w	lr, #7
 8005d76:	ea41 0109 	orr.w	r1, r1, r9
 8005d7a:	6379      	str	r1, [r7, #52]	; 0x34
    for (size_t i = 0; i < size; ++i) {
 8005d7c:	d068      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005d7e:	e9dd 1914 	ldrd	r1, r9, [sp, #80]	; 0x50
 8005d82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d84:	4301      	orrs	r1, r0
 8005d86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d8a:	f1be 0f08 	cmp.w	lr, #8
 8005d8e:	ea41 0109 	orr.w	r1, r1, r9
 8005d92:	63f9      	str	r1, [r7, #60]	; 0x3c
    for (size_t i = 0; i < size; ++i) {
 8005d94:	d05c      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005d96:	e9dd 1916 	ldrd	r1, r9, [sp, #88]	; 0x58
 8005d9a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005d9c:	4301      	orrs	r1, r0
 8005d9e:	6439      	str	r1, [r7, #64]	; 0x40
 8005da0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005da2:	f1be 0f09 	cmp.w	lr, #9
 8005da6:	ea41 0109 	orr.w	r1, r1, r9
 8005daa:	6479      	str	r1, [r7, #68]	; 0x44
    for (size_t i = 0; i < size; ++i) {
 8005dac:	d050      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005dae:	e9dd 1918 	ldrd	r1, r9, [sp, #96]	; 0x60
 8005db2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005db4:	4301      	orrs	r1, r0
 8005db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005db8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005dba:	f1be 0f0a 	cmp.w	lr, #10
 8005dbe:	ea41 0109 	orr.w	r1, r1, r9
 8005dc2:	64f9      	str	r1, [r7, #76]	; 0x4c
    for (size_t i = 0; i < size; ++i) {
 8005dc4:	d044      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005dc6:	e9dd 191a 	ldrd	r1, r9, [sp, #104]	; 0x68
 8005dca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005dcc:	4301      	orrs	r1, r0
 8005dce:	6539      	str	r1, [r7, #80]	; 0x50
 8005dd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dd2:	f1be 0f0b 	cmp.w	lr, #11
 8005dd6:	ea41 0109 	orr.w	r1, r1, r9
 8005dda:	6579      	str	r1, [r7, #84]	; 0x54
    for (size_t i = 0; i < size; ++i) {
 8005ddc:	d038      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005dde:	e9dd 191c 	ldrd	r1, r9, [sp, #112]	; 0x70
 8005de2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005de4:	4301      	orrs	r1, r0
 8005de6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005de8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005dea:	f1be 0f0c 	cmp.w	lr, #12
 8005dee:	ea41 0109 	orr.w	r1, r1, r9
 8005df2:	65f9      	str	r1, [r7, #92]	; 0x5c
    for (size_t i = 0; i < size; ++i) {
 8005df4:	d02c      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005df6:	e9dd 191e 	ldrd	r1, r9, [sp, #120]	; 0x78
 8005dfa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005dfc:	4301      	orrs	r1, r0
 8005dfe:	6639      	str	r1, [r7, #96]	; 0x60
 8005e00:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005e02:	f1be 0f0d 	cmp.w	lr, #13
 8005e06:	ea41 0109 	orr.w	r1, r1, r9
 8005e0a:	6679      	str	r1, [r7, #100]	; 0x64
    for (size_t i = 0; i < size; ++i) {
 8005e0c:	d020      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005e0e:	e9dd 1920 	ldrd	r1, r9, [sp, #128]	; 0x80
 8005e12:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005e14:	4301      	orrs	r1, r0
 8005e16:	66b9      	str	r1, [r7, #104]	; 0x68
 8005e18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005e1a:	f1be 0f0e 	cmp.w	lr, #14
 8005e1e:	ea41 0109 	orr.w	r1, r1, r9
 8005e22:	66f9      	str	r1, [r7, #108]	; 0x6c
    for (size_t i = 0; i < size; ++i) {
 8005e24:	d014      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005e26:	e9dd 1922 	ldrd	r1, r9, [sp, #136]	; 0x88
 8005e2a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005e2c:	4301      	orrs	r1, r0
 8005e2e:	6739      	str	r1, [r7, #112]	; 0x70
 8005e30:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005e32:	f1be 0f0f 	cmp.w	lr, #15
 8005e36:	ea41 0109 	orr.w	r1, r1, r9
 8005e3a:	6779      	str	r1, [r7, #116]	; 0x74
    for (size_t i = 0; i < size; ++i) {
 8005e3c:	d008      	beq.n	8005e50 <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005e3e:	e9dd 1924 	ldrd	r1, r9, [sp, #144]	; 0x90
 8005e42:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8005e44:	4301      	orrs	r1, r0
 8005e46:	67b9      	str	r1, [r7, #120]	; 0x78
 8005e48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e4a:	ea41 0109 	orr.w	r1, r1, r9
 8005e4e:	67f9      	str	r1, [r7, #124]	; 0x7c
    for (size_t i = 0; i < size; ++i) {
 8005e50:	4296      	cmp	r6, r2
 8005e52:	d006      	beq.n	8005e62 <bn_div.part.0+0x32a>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005e54:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
 8005e58:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8005e5c:	4301      	orrs	r1, r0
 8005e5e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    for (size_t i = 0; i < size; ++i) {
 8005e62:	46a1      	mov	r9, r4
 8005e64:	f859 0b7c 	ldr.w	r0, [r9], #124
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 8005e68:	0841      	lsrs	r1, r0, #1
 8005e6a:	6858      	ldr	r0, [r3, #4]
 8005e6c:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8005e70:	f843 1b04 	str.w	r1, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8005e74:	4599      	cmp	r9, r3
 8005e76:	d1f7      	bne.n	8005e68 <bn_div.part.0+0x330>
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 8005e78:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005e7a:	6828      	ldr	r0, [r5, #0]
 8005e7c:	085b      	lsrs	r3, r3, #1
 8005e7e:	67e3      	str	r3, [r4, #124]	; 0x7c
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8005e80:	f50d 798a 	add.w	r9, sp, #276	; 0x114
 8005e84:	462b      	mov	r3, r5
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 8005e86:	0841      	lsrs	r1, r0, #1
 8005e88:	6858      	ldr	r0, [r3, #4]
 8005e8a:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8005e8e:	f843 1b04 	str.w	r1, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8005e92:	4599      	cmp	r9, r3
 8005e94:	d1f7      	bne.n	8005e86 <bn_div.part.0+0x34e>
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 8005e96:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	67eb      	str	r3, [r5, #124]	; 0x7c
    for (size_t i = 0; i < size; ++i) {
 8005e9c:	2e00      	cmp	r6, #0
 8005e9e:	f47f aec4 	bne.w	8005c2a <bn_div.part.0+0xf2>
}
 8005ea2:	b067      	add	sp, #412	; 0x19c
 8005ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (denom[size - 1] >= half_max) {
 8005ea8:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	db2f      	blt.n	8005f10 <bn_div.part.0+0x3d8>
 8005eb0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005eb2:	ab25      	add	r3, sp, #148	; 0x94
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8005eb4:	004a      	lsls	r2, r1, #1
 8005eb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005eba:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8005ebe:	42a3      	cmp	r3, r4
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8005ec0:	605a      	str	r2, [r3, #4]
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8005ec2:	d1f7      	bne.n	8005eb4 <bn_div.part.0+0x37c>
    (*bignum)[0] <<= 1;
 8005ec4:	004b      	lsls	r3, r1, #1
 8005ec6:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8005ec8:	6023      	str	r3, [r4, #0]
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8005eca:	ab45      	add	r3, sp, #276	; 0x114
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8005ecc:	004a      	lsls	r2, r1, #1
 8005ece:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ed2:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8005ed6:	42ab      	cmp	r3, r5
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8005ed8:	605a      	str	r2, [r3, #4]
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8005eda:	d1f7      	bne.n	8005ecc <bn_div.part.0+0x394>
    (*bignum)[0] <<= 1;
 8005edc:	0049      	lsls	r1, r1, #1
 8005ede:	6029      	str	r1, [r5, #0]
}
 8005ee0:	e654      	b.n	8005b8c <bn_div.part.0+0x54>
 8005ee2:	4653      	mov	r3, sl
 8005ee4:	465a      	mov	r2, fp
 8005ee6:	e7bc      	b.n	8005e62 <bn_div.part.0+0x32a>
 8005ee8:	9902      	ldr	r1, [sp, #8]
 8005eea:	4653      	mov	r3, sl
 8005eec:	465a      	mov	r2, fp
    for (size_t i = 0; i < size; ++i) {
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	f47f aeea 	bne.w	8005cc8 <bn_div.part.0+0x190>
 8005ef4:	9905      	ldr	r1, [sp, #20]
 8005ef6:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005efa:	46a1      	mov	r9, r4
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005efc:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8005f00:	f859 bb04 	ldr.w	fp, [r9], #4
    for (size_t i = 0; i < size; ++i) {
 8005f04:	458a      	cmp	sl, r1
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8005f06:	ea40 000b 	orr.w	r0, r0, fp
 8005f0a:	6008      	str	r0, [r1, #0]
    for (size_t i = 0; i < size; ++i) {
 8005f0c:	d1f6      	bne.n	8005efc <bn_div.part.0+0x3c4>
 8005f0e:	e7a8      	b.n	8005e62 <bn_div.part.0+0x32a>
 8005f10:	4677      	mov	r7, lr
 8005f12:	e669      	b.n	8005be8 <bn_div.part.0+0xb0>

08005f14 <bn_inner_karatsuba>:
static void bn_inner_karatsuba(bignum_t *left, const bignum_t *right, const size_t in_bn_size) {
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	ed2d 8b02 	vpush	{d8}
 8005f1c:	b0c7      	sub	sp, #284	; 0x11c
 8005f1e:	466b      	mov	r3, sp
 8005f20:	af00      	add	r7, sp, #0
    if (in_bn_size == 1) {
 8005f22:	2a01      	cmp	r2, #1
static void bn_inner_karatsuba(bignum_t *left, const bignum_t *right, const size_t in_bn_size) {
 8005f24:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8005f28:	ee08 3a10 	vmov	s16, r3
    if (in_bn_size == 1) {
 8005f2c:	f000 8156 	beq.w	80061dc <bn_inner_karatsuba+0x2c8>
    for (size_t i = 0; i < size; ++i) {
 8005f30:	4614      	mov	r4, r2
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	f000 8146 	beq.w	80061c4 <bn_inner_karatsuba+0x2b0>
 8005f38:	1f05      	subs	r5, r0, #4
 8005f3a:	462a      	mov	r2, r5
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e002      	b.n	8005f46 <bn_inner_karatsuba+0x32>
 8005f40:	429c      	cmp	r4, r3
 8005f42:	f000 813f 	beq.w	80061c4 <bn_inner_karatsuba+0x2b0>
        if ((*bignum)[i] != 0) {
 8005f46:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for (size_t i = 0; i < size; ++i) {
 8005f4a:	3301      	adds	r3, #1
        if ((*bignum)[i] != 0) {
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d0f7      	beq.n	8005f40 <bn_inner_karatsuba+0x2c>
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f1a3 0904 	sub.w	r9, r3, #4
 8005f56:	464a      	mov	r2, r9
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e002      	b.n	8005f62 <bn_inner_karatsuba+0x4e>
    for (size_t i = 0; i < size; ++i) {
 8005f5c:	429c      	cmp	r4, r3
 8005f5e:	f000 812c 	beq.w	80061ba <bn_inner_karatsuba+0x2a6>
        if ((*bignum)[i] != 0) {
 8005f62:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for (size_t i = 0; i < size; ++i) {
 8005f66:	3301      	adds	r3, #1
        if ((*bignum)[i] != 0) {
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	d0f7      	beq.n	8005f5c <bn_inner_karatsuba+0x48>
    memset(z, 0, z_size * (in_bn_size << 1) * BN_WORD_SIZE);
 8005f6c:	0122      	lsls	r2, r4, #4
 8005f6e:	2100      	movs	r1, #0
 8005f70:	f107 0018 	add.w	r0, r7, #24
 8005f74:	f002 fe82 	bl	8008c7c <memset>
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8005f78:	693b      	ldr	r3, [r7, #16]
    const size_t bn_size_shift = in_bn_size >> 1;
 8005f7a:	0866      	lsrs	r6, r4, #1
    bignum_t* z1_ptr = (bignum_t *)((BN_DTYPE *) z + (in_bn_size << 1));
 8005f7c:	f107 0218 	add.w	r2, r7, #24
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8005f80:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    bignum_t* z1_ptr = (bignum_t *)((BN_DTYPE *) z + (in_bn_size << 1));
 8005f84:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8005f88:	2100      	movs	r1, #0
 8005f8a:	ee08 3a90 	vmov	s17, r3
    bignum_t* z1_ptr = (bignum_t *)((BN_DTYPE *) z + (in_bn_size << 1));
 8005f8e:	60ba      	str	r2, [r7, #8]
    for (size_t i = 0; i + 1 < size; ++i) {
 8005f90:	f1a3 0804 	sub.w	r8, r3, #4
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8005f94:	00b2      	lsls	r2, r6, #2
 8005f96:	f107 0318 	add.w	r3, r7, #24
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	46ac      	mov	ip, r5
    uint8_t carry = 0;
 8005fa0:	460a      	mov	r2, r1
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	469b      	mov	fp, r3
 8005fa6:	f858 af04 	ldr.w	sl, [r8, #4]!
 8005faa:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8005fae:	eb13 030a 	adds.w	r3, r3, sl
 8005fb2:	eb40 0a00 	adc.w	sl, r0, r0
 8005fb6:	189b      	adds	r3, r3, r2
 8005fb8:	f14a 0200 	adc.w	r2, sl, #0
        carry = tmp > BN_MAX_VAL;
 8005fbc:	3a00      	subs	r2, #0
    for (size_t i = 0; i + 1 < size; ++i) {
 8005fbe:	f101 0101 	add.w	r1, r1, #1
        carry = tmp > BN_MAX_VAL;
 8005fc2:	bf18      	it	ne
 8005fc4:	2201      	movne	r2, #1
    for (size_t i = 0; i + 1 < size; ++i) {
 8005fc6:	428e      	cmp	r6, r1
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8005fc8:	f84e 3b04 	str.w	r3, [lr], #4
    for (size_t i = 0; i + 1 < size; ++i) {
 8005fcc:	d1eb      	bne.n	8005fa6 <bn_inner_karatsuba+0x92>
    (*bignum_res)[size - 1] = carry;
 8005fce:	f107 0118 	add.w	r1, r7, #24
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8005fd2:	6878      	ldr	r0, [r7, #4]
    (*bignum_res)[size - 1] = carry;
 8005fd4:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8005fd8:	697a      	ldr	r2, [r7, #20]
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8005fda:	f8c7 b00c 	str.w	fp, [r7, #12]
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8005fde:	eb02 0a00 	add.w	sl, r2, r0
    for (size_t i = 0; i + 1 < size; ++i) {
 8005fe2:	68ba      	ldr	r2, [r7, #8]
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	f1a2 0804 	sub.w	r8, r2, #4
 8005fea:	f1aa 0e04 	sub.w	lr, sl, #4
 8005fee:	46c4      	mov	ip, r8
    uint8_t carry = 0;
 8005ff0:	460a      	mov	r2, r1
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8005ff2:	4608      	mov	r0, r1
 8005ff4:	f85e bf04 	ldr.w	fp, [lr, #4]!
 8005ff8:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8005ffc:	eb13 030b 	adds.w	r3, r3, fp
 8006000:	eb40 0b00 	adc.w	fp, r0, r0
 8006004:	189b      	adds	r3, r3, r2
 8006006:	f14b 0b00 	adc.w	fp, fp, #0
        carry = tmp > BN_MAX_VAL;
 800600a:	f1bb 0200 	subs.w	r2, fp, #0
    for (size_t i = 0; i + 1 < size; ++i) {
 800600e:	f101 0101 	add.w	r1, r1, #1
        carry = tmp > BN_MAX_VAL;
 8006012:	bf18      	it	ne
 8006014:	2201      	movne	r2, #1
    for (size_t i = 0; i + 1 < size; ++i) {
 8006016:	428e      	cmp	r6, r1
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8006018:	f84c 3f04 	str.w	r3, [ip, #4]!
    for (size_t i = 0; i + 1 < size; ++i) {
 800601c:	d1ea      	bne.n	8005ff4 <bn_inner_karatsuba+0xe0>
    (*bignum_res)[size - 1] = carry;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    bn_inner_karatsuba(z0_ptr, z1_ptr, size);
 8006024:	469b      	mov	fp, r3
 8006026:	4619      	mov	r1, r3
    const size_t size = ((*z0_ptr)[bn_size_shift] | (*z1_ptr)[bn_size_shift]) ? in_bn_size : bn_size_shift;
 8006028:	f107 0318 	add.w	r3, r7, #24
    bn_inner_karatsuba(z0_ptr, z1_ptr, size);
 800602c:	f107 0018 	add.w	r0, r7, #24
    const size_t size = ((*z0_ptr)[bn_size_shift] | (*z1_ptr)[bn_size_shift]) ? in_bn_size : bn_size_shift;
 8006030:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8006034:	4313      	orrs	r3, r2
    bn_inner_karatsuba(z0_ptr, z1_ptr, size);
 8006036:	bf14      	ite	ne
 8006038:	4622      	movne	r2, r4
 800603a:	4632      	moveq	r2, r6
 800603c:	f7ff ff6a 	bl	8005f14 <bn_inner_karatsuba>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	ee18 1a90 	vmov	r1, s17
 8006046:	4658      	mov	r0, fp
 8006048:	f002 fec9 	bl	8008dde <memcpy>
    bn_inner_karatsuba(z1_ptr, (bignum_t*)(*(bignum_t *)right + bn_size_shift), bn_size_shift);
 800604c:	4651      	mov	r1, sl
 800604e:	4632      	mov	r2, r6
 8006050:	4658      	mov	r0, fp
 8006052:	f7ff ff5f 	bl	8005f14 <bn_inner_karatsuba>
    bn_sub(z0_ptr, z1_ptr, z0_ptr, in_bn_size << 1);
 8006056:	f107 0318 	add.w	r3, r7, #24
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	eb03 0ac4 	add.w	sl, r3, r4, lsl #3
 8006060:	00e2      	lsls	r2, r4, #3
 8006062:	ea4f 0944 	mov.w	r9, r4, lsl #1
bignum_compare_state bn_cmp(const bignum_t *bignum1, const bignum_t *bignum2, size_t size) {
 8006066:	603a      	str	r2, [r7, #0]
 8006068:	eb0b 01c4 	add.w	r1, fp, r4, lsl #3
    bn_sub(z0_ptr, z1_ptr, z0_ptr, in_bn_size << 1);
 800606c:	4652      	mov	r2, sl
 800606e:	464b      	mov	r3, r9
 8006070:	4686      	mov	lr, r0
 8006072:	46a4      	mov	ip, r4
 8006074:	e002      	b.n	800607c <bn_inner_karatsuba+0x168>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8006076:	f0c0 80ad 	bcc.w	80061d4 <bn_inner_karatsuba+0x2c0>
    } while (size != 0);
 800607a:	b13b      	cbz	r3, 800608c <bn_inner_karatsuba+0x178>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 800607c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8006080:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8006084:	4284      	cmp	r4, r0
        --size;
 8006086:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 800608a:	d9f4      	bls.n	8006076 <bn_inner_karatsuba+0x162>
    for (size_t i = 0; i < size; ++i) {
 800608c:	f8c7 e00c 	str.w	lr, [r7, #12]
 8006090:	4664      	mov	r4, ip
 8006092:	f1b9 0f00 	cmp.w	r9, #0
 8006096:	d01c      	beq.n	80060d2 <bn_inner_karatsuba+0x1be>
 8006098:	2300      	movs	r3, #0
 800609a:	46c3      	mov	fp, r8
 800609c:	f107 0c18 	add.w	ip, r7, #24
 80060a0:	4618      	mov	r0, r3
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 80060a2:	f85b 1f04 	ldr.w	r1, [fp, #4]!
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 80060a6:	f8dc 2000 	ldr.w	r2, [ip]
        BN_DTYPE_TMP res = tmp1 - tmp2;
 80060aa:	f1c3 0e00 	rsb	lr, r3, #0
 80060ae:	ebbe 0101 	subs.w	r1, lr, r1
 80060b2:	f083 0301 	eor.w	r3, r3, #1
 80060b6:	f163 0300 	sbc.w	r3, r3, #0
 80060ba:	1889      	adds	r1, r1, r2
 80060bc:	f143 0300 	adc.w	r3, r3, #0
    for (size_t i = 0; i < size; ++i) {
 80060c0:	3001      	adds	r0, #1
        borrow = res <= BN_MAX_VAL;
 80060c2:	fab3 f383 	clz	r3, r3
    for (size_t i = 0; i < size; ++i) {
 80060c6:	4581      	cmp	r9, r0
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 80060c8:	f84c 1b04 	str.w	r1, [ip], #4
        borrow = res <= BN_MAX_VAL;
 80060cc:	ea4f 1353 	mov.w	r3, r3, lsr #5
    for (size_t i = 0; i < size; ++i) {
 80060d0:	d1e7      	bne.n	80060a2 <bn_inner_karatsuba+0x18e>
    bn_fill(left, bn_size_shift, 0, in_bn_size + bn_size_shift);
 80060d2:	19a2      	adds	r2, r4, r6
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80060d4:	0092      	lsls	r2, r2, #2
 80060d6:	2100      	movs	r1, #0
 80060d8:	ee18 0a90 	vmov	r0, s17
 80060dc:	f002 fdce 	bl	8008c7c <memset>
    bn_inner_karatsuba(left, right, bn_size_shift);
 80060e0:	4632      	mov	r2, r6
 80060e2:	e9d7 6104 	ldrd	r6, r1, [r7, #16]
 80060e6:	4630      	mov	r0, r6
 80060e8:	f7ff ff14 	bl	8005f14 <bn_inner_karatsuba>
void bn_sub(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80060ec:	683a      	ldr	r2, [r7, #0]
    bn_sub(z0_ptr, z1_ptr, z0_ptr, in_bn_size << 1);
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	4432      	add	r2, r6
 80060f2:	464b      	mov	r3, r9
 80060f4:	460e      	mov	r6, r1
 80060f6:	e001      	b.n	80060fc <bn_inner_karatsuba+0x1e8>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 80060f8:	d378      	bcc.n	80061ec <bn_inner_karatsuba+0x2d8>
    } while (size != 0);
 80060fa:	b13b      	cbz	r3, 800610c <bn_inner_karatsuba+0x1f8>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80060fc:	f85a 0d04 	ldr.w	r0, [sl, #-4]!
 8006100:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006104:	4288      	cmp	r0, r1
        --size;
 8006106:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 800610a:	d9f5      	bls.n	80060f8 <bn_inner_karatsuba+0x1e4>
    for (size_t i = 0; i < size; ++i) {
 800610c:	f1b9 0f00 	cmp.w	r9, #0
 8006110:	f000 8087 	beq.w	8006222 <bn_inner_karatsuba+0x30e>
 8006114:	2300      	movs	r3, #0
 8006116:	46ac      	mov	ip, r5
 8006118:	4618      	mov	r0, r3
 800611a:	617e      	str	r6, [r7, #20]
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 800611c:	697a      	ldr	r2, [r7, #20]
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 800611e:	f85c 6f04 	ldr.w	r6, [ip, #4]!
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 8006122:	6811      	ldr	r1, [r2, #0]
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8006124:	425a      	negs	r2, r3
 8006126:	1b92      	subs	r2, r2, r6
 8006128:	f083 0301 	eor.w	r3, r3, #1
 800612c:	f163 0300 	sbc.w	r3, r3, #0
 8006130:	1852      	adds	r2, r2, r1
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8006132:	6979      	ldr	r1, [r7, #20]
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8006134:	f143 0300 	adc.w	r3, r3, #0
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8006138:	f841 2b04 	str.w	r2, [r1], #4
    for (size_t i = 0; i < size; ++i) {
 800613c:	3001      	adds	r0, #1
        borrow = res <= BN_MAX_VAL;
 800613e:	fab3 f383 	clz	r3, r3
    for (size_t i = 0; i < size; ++i) {
 8006142:	4581      	cmp	r9, r0
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8006144:	6179      	str	r1, [r7, #20]
        borrow = res <= BN_MAX_VAL;
 8006146:	ea4f 1353 	mov.w	r3, r3, lsr #5
    for (size_t i = 0; i < size; ++i) {
 800614a:	d1e7      	bne.n	800611c <bn_inner_karatsuba+0x208>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	68be      	ldr	r6, [r7, #8]
 8006150:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006154:	00a4      	lsls	r4, r4, #2
 8006156:	4631      	mov	r1, r6
 8006158:	4622      	mov	r2, r4
 800615a:	f002 fe40 	bl	8008dde <memcpy>
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 800615e:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8006162:	2100      	movs	r1, #0
 8006164:	4652      	mov	r2, sl
 8006166:	4630      	mov	r0, r6
 8006168:	f002 fd88 	bl	8008c7c <memset>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 800616c:	4630      	mov	r0, r6
 800616e:	4450      	add	r0, sl
 8006170:	1d22      	adds	r2, r4, #4
 8006172:	f107 0118 	add.w	r1, r7, #24
 8006176:	f002 fe32 	bl	8008dde <memcpy>
    for (size_t i = 0; i < size; ++i) {
 800617a:	2200      	movs	r2, #0
 800617c:	4610      	mov	r0, r2
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 800617e:	4614      	mov	r4, r2
 8006180:	4611      	mov	r1, r2
 8006182:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8006186:	f858 2f04 	ldr.w	r2, [r8, #4]!
 800618a:	189b      	adds	r3, r3, r2
 800618c:	eb44 0204 	adc.w	r2, r4, r4
 8006190:	185b      	adds	r3, r3, r1
 8006192:	f142 0200 	adc.w	r2, r2, #0
        carry = tmp > BN_MAX_VAL;
 8006196:	1e11      	subs	r1, r2, #0
    for (size_t i = 0; i < size; ++i) {
 8006198:	f100 0001 	add.w	r0, r0, #1
        carry = tmp > BN_MAX_VAL;
 800619c:	bf18      	it	ne
 800619e:	2101      	movne	r1, #1
    for (size_t i = 0; i < size; ++i) {
 80061a0:	4581      	cmp	r9, r0
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 80061a2:	602b      	str	r3, [r5, #0]
    for (size_t i = 0; i < size; ++i) {
 80061a4:	d8ed      	bhi.n	8006182 <bn_inner_karatsuba+0x26e>
        return;
 80061a6:	ee18 3a10 	vmov	r3, s16
}
 80061aa:	f507 778e 	add.w	r7, r7, #284	; 0x11c
        return;
 80061ae:	469d      	mov	sp, r3
}
 80061b0:	46bd      	mov	sp, r7
 80061b2:	ecbd 8b02 	vpop	{d8}
 80061b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	00e2      	lsls	r2, r4, #3
 80061be:	f002 fd5d 	bl	8008c7c <memset>
        return;
 80061c2:	e7f0      	b.n	80061a6 <bn_inner_karatsuba+0x292>
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	00a2      	lsls	r2, r4, #2
 80061c8:	2100      	movs	r1, #0
 80061ca:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80061ce:	f002 fd55 	bl	8008c7c <memset>
        return;
 80061d2:	e7e8      	b.n	80061a6 <bn_inner_karatsuba+0x292>
 80061d4:	f8c7 e00c 	str.w	lr, [r7, #12]
 80061d8:	4664      	mov	r4, ip
 80061da:	e77a      	b.n	80060d2 <bn_inner_karatsuba+0x1be>
        bn_from_int(left, (BN_DTYPE_TMP)(*left)[0] * (BN_DTYPE_TMP)(*right)[0], 2);
 80061dc:	680b      	ldr	r3, [r1, #0]
 80061de:	6939      	ldr	r1, [r7, #16]
 80061e0:	680a      	ldr	r2, [r1, #0]
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 80061e6:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < size; i++) {
 80061ea:	e7dc      	b.n	80061a6 <bn_inner_karatsuba+0x292>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	68be      	ldr	r6, [r7, #8]
 80061f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80061f4:	00a4      	lsls	r4, r4, #2
 80061f6:	4631      	mov	r1, r6
 80061f8:	4622      	mov	r2, r4
 80061fa:	f002 fdf0 	bl	8008dde <memcpy>
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80061fe:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8006202:	2100      	movs	r1, #0
 8006204:	4652      	mov	r2, sl
 8006206:	4630      	mov	r0, r6
 8006208:	f002 fd38 	bl	8008c7c <memset>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 800620c:	4630      	mov	r0, r6
 800620e:	4450      	add	r0, sl
 8006210:	1d22      	adds	r2, r4, #4
 8006212:	f107 0118 	add.w	r1, r7, #24
 8006216:	f002 fde2 	bl	8008dde <memcpy>
    for (size_t i = 0; i < size; ++i) {
 800621a:	f1b9 0f00 	cmp.w	r9, #0
 800621e:	d1ac      	bne.n	800617a <bn_inner_karatsuba+0x266>
 8006220:	e7c1      	b.n	80061a6 <bn_inner_karatsuba+0x292>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	00a2      	lsls	r2, r4, #2
 8006228:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800622c:	f002 fdd7 	bl	8008dde <memcpy>
    for (size_t i = 0; i < size; ++i) {
 8006230:	e7b9      	b.n	80061a6 <bn_inner_karatsuba+0x292>
 8006232:	bf00      	nop

08006234 <bn_init>:
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8006234:	008a      	lsls	r2, r1, #2
 8006236:	2100      	movs	r1, #0
 8006238:	f002 bd20 	b.w	8008c7c <memset>

0800623c <bn_assign>:
               size_t count) {
 800623c:	468c      	mov	ip, r1
 800623e:	4611      	mov	r1, r2
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8006240:	9a00      	ldr	r2, [sp, #0]
 8006242:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006246:	0092      	lsls	r2, r2, #2
 8006248:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800624c:	f002 bdc7 	b.w	8008dde <memcpy>

08006250 <bn_from_bytes>:
void bn_from_bytes(bignum_t *bignum, const uint8_t *bytes, const size_t nbytes) {
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	4615      	mov	r5, r2
 8006254:	460e      	mov	r6, r1
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8006256:	2280      	movs	r2, #128	; 0x80
 8006258:	2100      	movs	r1, #0
void bn_from_bytes(bignum_t *bignum, const uint8_t *bytes, const size_t nbytes) {
 800625a:	4604      	mov	r4, r0
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 800625c:	f002 fd0e 	bl	8008c7c <memset>
    uint8_t padding = ((nbytes - 1) / BN_WORD_SIZE + 1) * BN_WORD_SIZE - nbytes;
 8006260:	1e6b      	subs	r3, r5, #1
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	3304      	adds	r3, #4
 8006268:	1b5b      	subs	r3, r3, r5
    for (size_t i = 0; i < nbytes; ++i) {
 800626a:	b1ed      	cbz	r5, 80062a8 <bn_from_bytes+0x58>
 800626c:	b2db      	uxtb	r3, r3
 800626e:	1972      	adds	r2, r6, r5
 8006270:	f1c3 0303 	rsb	r3, r3, #3
 8006274:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8006278:	18f1      	adds	r1, r6, r3
 800627a:	1e56      	subs	r6, r2, #1
 800627c:	3a02      	subs	r2, #2
        (*bignum)[(nbytes - 1 - i) / BN_WORD_SIZE] |= (BN_DTYPE)bytes[i] << ((BN_WORD_SIZE - 1 - i - padding) % BN_WORD_SIZE) * 8;
 800627e:	eba2 0e0c 	sub.w	lr, r2, ip
 8006282:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8006286:	eba1 030c 	sub.w	r3, r1, ip
 800628a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	fa00 f303 	lsl.w	r3, r0, r3
 8006298:	f854 002e 	ldr.w	r0, [r4, lr, lsl #2]
    for (size_t i = 0; i < nbytes; ++i) {
 800629c:	4566      	cmp	r6, ip
        (*bignum)[(nbytes - 1 - i) / BN_WORD_SIZE] |= (BN_DTYPE)bytes[i] << ((BN_WORD_SIZE - 1 - i - padding) % BN_WORD_SIZE) * 8;
 800629e:	ea43 0300 	orr.w	r3, r3, r0
 80062a2:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
    for (size_t i = 0; i < nbytes; ++i) {
 80062a6:	d1ea      	bne.n	800627e <bn_from_bytes+0x2e>
}
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	bf00      	nop

080062ac <bn_from_string>:
void bn_from_string(bignum_t *bignum, const char *str, const size_t nbytes) {
 80062ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b0:	4614      	mov	r4, r2
 80062b2:	b082      	sub	sp, #8
 80062b4:	460e      	mov	r6, r1
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80062b6:	2280      	movs	r2, #128	; 0x80
 80062b8:	2100      	movs	r1, #0
void bn_from_string(bignum_t *bignum, const char *str, const size_t nbytes) {
 80062ba:	4605      	mov	r5, r0
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80062bc:	f002 fcde 	bl	8008c7c <memset>
    while (i > 0) {
 80062c0:	b19c      	cbz	r4, 80062ea <bn_from_string+0x3e>
        sscanf(&str[i], BN_SSCANF_FORMAT_STR, &tmp);
 80062c2:	4f0b      	ldr	r7, [pc, #44]	; (80062f0 <bn_from_string+0x44>)
 80062c4:	3d04      	subs	r5, #4
        BN_DTYPE tmp = 0;
 80062c6:	f04f 0800 	mov.w	r8, #0
        i = i > sizeof(BN_DTYPE_TMP) ? i - sizeof(BN_DTYPE_TMP) : 0;
 80062ca:	2c08      	cmp	r4, #8
 80062cc:	bf38      	it	cc
 80062ce:	2408      	movcc	r4, #8
 80062d0:	3c08      	subs	r4, #8
        sscanf(&str[i], BN_SSCANF_FORMAT_STR, &tmp);
 80062d2:	aa01      	add	r2, sp, #4
 80062d4:	4639      	mov	r1, r7
 80062d6:	1930      	adds	r0, r6, r4
        BN_DTYPE tmp = 0;
 80062d8:	f8cd 8004 	str.w	r8, [sp, #4]
        sscanf(&str[i], BN_SSCANF_FORMAT_STR, &tmp);
 80062dc:	f002 fc0a 	bl	8008af4 <siscanf>
        (*bignum)[j] = tmp;
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	f845 3f04 	str.w	r3, [r5, #4]!
    while (i > 0) {
 80062e6:	2c00      	cmp	r4, #0
 80062e8:	d1ef      	bne.n	80062ca <bn_from_string+0x1e>
}
 80062ea:	b002      	add	sp, #8
 80062ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f0:	0800bcd8 	.word	0x0800bcd8

080062f4 <bn_from_int>:
void bn_from_int(bignum_t *bignum, const BN_DTYPE_TMP value, size_t size) {
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	9d06      	ldr	r5, [sp, #24]
 80062f8:	4616      	mov	r6, r2
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80062fa:	2100      	movs	r1, #0
 80062fc:	00aa      	lsls	r2, r5, #2
void bn_from_int(bignum_t *bignum, const BN_DTYPE_TMP value, size_t size) {
 80062fe:	4604      	mov	r4, r0
 8006300:	461f      	mov	r7, r3
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8006302:	f002 fcbb 	bl	8008c7c <memset>
    for (size_t i = 0; i < size; i++) {
 8006306:	b11d      	cbz	r5, 8006310 <bn_from_int+0x1c>
 8006308:	2d01      	cmp	r5, #1
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 800630a:	6026      	str	r6, [r4, #0]
 800630c:	bf18      	it	ne
 800630e:	6067      	strne	r7, [r4, #4]
}
 8006310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006312:	bf00      	nop

08006314 <bn_to_string>:
void bn_to_string(const bignum_t *bignum, char *str, size_t nbytes) {
 8006314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        sprintf(&str[i], BN_SPRINTF_FORMAT_STR, (*bignum)[j]);
 8006318:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800634c <bn_to_string+0x38>
void bn_to_string(const bignum_t *bignum, char *str, size_t nbytes) {
 800631c:	460e      	mov	r6, r1
 800631e:	4617      	mov	r7, r2
 8006320:	f100 0580 	add.w	r5, r0, #128	; 0x80
    size_t i = 0;
 8006324:	2400      	movs	r4, #0
 8006326:	e007      	b.n	8006338 <bn_to_string+0x24>
        sprintf(&str[i], BN_SPRINTF_FORMAT_STR, (*bignum)[j]);
 8006328:	f855 2d04 	ldr.w	r2, [r5, #-4]!
        i += sizeof(BN_DTYPE_TMP);
 800632c:	3408      	adds	r4, #8
        sprintf(&str[i], BN_SPRINTF_FORMAT_STR, (*bignum)[j]);
 800632e:	f002 fbc1 	bl	8008ab4 <siprintf>
    while (j >= 0 && nbytes > i + 1) {
 8006332:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8006336:	d005      	beq.n	8006344 <bn_to_string+0x30>
 8006338:	1c63      	adds	r3, r4, #1
 800633a:	429f      	cmp	r7, r3
        sprintf(&str[i], BN_SPRINTF_FORMAT_STR, (*bignum)[j]);
 800633c:	eb06 0004 	add.w	r0, r6, r4
 8006340:	4641      	mov	r1, r8
    while (j >= 0 && nbytes > i + 1) {
 8006342:	d8f1      	bhi.n	8006328 <bn_to_string+0x14>
    str[i] = '\0';
 8006344:	2300      	movs	r3, #0
 8006346:	5533      	strb	r3, [r6, r4]
}
 8006348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800634c:	0800bcdc 	.word	0x0800bcdc

08006350 <bn_add>:
    for (size_t i = 0; i < size; ++i) {
 8006350:	b1e3      	cbz	r3, 800638c <bn_add+0x3c>
void bn_add(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8006352:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (size_t i = 0; i < size; ++i) {
 8006354:	f04f 0e00 	mov.w	lr, #0
 8006358:	1f14      	subs	r4, r2, #4
 800635a:	1f06      	subs	r6, r0, #4
 800635c:	1f0d      	subs	r5, r1, #4
    uint8_t carry = 0;
 800635e:	4672      	mov	r2, lr
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8006360:	4677      	mov	r7, lr
 8006362:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8006366:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800636a:	1840      	adds	r0, r0, r1
 800636c:	eb47 0c07 	adc.w	ip, r7, r7
 8006370:	1880      	adds	r0, r0, r2
 8006372:	f14c 0c00 	adc.w	ip, ip, #0
        carry = tmp > BN_MAX_VAL;
 8006376:	f1bc 0200 	subs.w	r2, ip, #0
    for (size_t i = 0; i < size; ++i) {
 800637a:	f10e 0e01 	add.w	lr, lr, #1
        carry = tmp > BN_MAX_VAL;
 800637e:	bf18      	it	ne
 8006380:	2201      	movne	r2, #1
    for (size_t i = 0; i < size; ++i) {
 8006382:	4573      	cmp	r3, lr
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8006384:	f844 0f04 	str.w	r0, [r4, #4]!
    for (size_t i = 0; i < size; ++i) {
 8006388:	d1eb      	bne.n	8006362 <bn_add+0x12>
}
 800638a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop

08006390 <bn_sub>:
void bn_sub(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8006396:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
 800639a:	461c      	mov	r4, r3
 800639c:	e001      	b.n	80063a2 <bn_sub+0x12>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 800639e:	d327      	bcc.n	80063f0 <bn_sub+0x60>
    } while (size != 0);
 80063a0:	b13c      	cbz	r4, 80063b2 <bn_sub+0x22>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80063a2:	f85e 6d04 	ldr.w	r6, [lr, #-4]!
 80063a6:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
 80063aa:	42ae      	cmp	r6, r5
        --size;
 80063ac:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80063b0:	d9f5      	bls.n	800639e <bn_sub+0xe>
    for (size_t i = 0; i < size; ++i) {
 80063b2:	b1eb      	cbz	r3, 80063f0 <bn_sub+0x60>
 80063b4:	f04f 0c00 	mov.w	ip, #0
 80063b8:	1f0d      	subs	r5, r1, #4
 80063ba:	1f06      	subs	r6, r0, #4
 80063bc:	f1a2 0e04 	sub.w	lr, r2, #4
 80063c0:	4661      	mov	r1, ip
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 80063c2:	f856 2f04 	ldr.w	r2, [r6, #4]!
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 80063c6:	f855 0f04 	ldr.w	r0, [r5, #4]!
        BN_DTYPE_TMP res = tmp1 - tmp2;
 80063ca:	f1cc 0400 	rsb	r4, ip, #0
 80063ce:	1912      	adds	r2, r2, r4
 80063d0:	f08c 0c01 	eor.w	ip, ip, #1
 80063d4:	f14c 0c00 	adc.w	ip, ip, #0
 80063d8:	1a12      	subs	r2, r2, r0
 80063da:	f16c 0c00 	sbc.w	ip, ip, #0
    for (size_t i = 0; i < size; ++i) {
 80063de:	3101      	adds	r1, #1
        borrow = res <= BN_MAX_VAL;
 80063e0:	fabc fc8c 	clz	ip, ip
    for (size_t i = 0; i < size; ++i) {
 80063e4:	428b      	cmp	r3, r1
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 80063e6:	f84e 2f04 	str.w	r2, [lr, #4]!
        borrow = res <= BN_MAX_VAL;
 80063ea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    for (size_t i = 0; i < size; ++i) {
 80063ee:	d1e8      	bne.n	80063c2 <bn_sub+0x32>
}
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	bf00      	nop

080063f4 <bn_karatsuba>:
void bn_karatsuba(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	4614      	mov	r4, r2
    bn_assign(bignum_res, 0, bignum1, 0, size >> 1);
 80063f8:	085d      	lsrs	r5, r3, #1
void bn_karatsuba(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80063fa:	460e      	mov	r6, r1
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 80063fc:	00aa      	lsls	r2, r5, #2
 80063fe:	4601      	mov	r1, r0
 8006400:	4620      	mov	r0, r4
 8006402:	f002 fcec 	bl	8008dde <memcpy>
    bn_inner_karatsuba(bignum_res, bignum2, size >> 1);
 8006406:	462a      	mov	r2, r5
 8006408:	4631      	mov	r1, r6
 800640a:	4620      	mov	r0, r4
}
 800640c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bn_inner_karatsuba(bignum_res, bignum2, size >> 1);
 8006410:	f7ff bd80 	b.w	8005f14 <bn_inner_karatsuba>

08006414 <bn_divmod>:
void bn_divmod(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_div, bignum_t *bignum_mod, size_t size) {
 8006414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006418:	b0a1      	sub	sp, #132	; 0x84
 800641a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
    for (size_t i = 0; i < size; ++i) {
 800641c:	2c00      	cmp	r4, #0
 800641e:	d055      	beq.n	80064cc <bn_divmod+0xb8>
 8006420:	461f      	mov	r7, r3
 8006422:	1f0b      	subs	r3, r1, #4
 8006424:	4606      	mov	r6, r0
 8006426:	4688      	mov	r8, r1
 8006428:	4691      	mov	r9, r2
 800642a:	469e      	mov	lr, r3
 800642c:	f04f 0c00 	mov.w	ip, #0
 8006430:	e001      	b.n	8006436 <bn_divmod+0x22>
 8006432:	4564      	cmp	r4, ip
 8006434:	d04a      	beq.n	80064cc <bn_divmod+0xb8>
        if ((*bignum)[i] != 0) {
 8006436:	f85e 5f04 	ldr.w	r5, [lr, #4]!
    for (size_t i = 0; i < size; ++i) {
 800643a:	f10c 0c01 	add.w	ip, ip, #1
        if ((*bignum)[i] != 0) {
 800643e:	2d00      	cmp	r5, #0
 8006440:	d0f7      	beq.n	8006432 <bn_divmod+0x1e>
 8006442:	2000      	movs	r0, #0
 8006444:	e001      	b.n	800644a <bn_divmod+0x36>
    for (size_t i = 0; i < size; ++i) {
 8006446:	4284      	cmp	r4, r0
 8006448:	d00a      	beq.n	8006460 <bn_divmod+0x4c>
        if ((*bignum)[i] != 0) {
 800644a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (size_t i = 0; i < size; ++i) {
 800644e:	3001      	adds	r0, #1
        if ((*bignum)[i] != 0) {
 8006450:	2a00      	cmp	r2, #0
 8006452:	d0f8      	beq.n	8006446 <bn_divmod+0x32>
 8006454:	4623      	mov	r3, r4
 8006456:	464a      	mov	r2, r9
 8006458:	4641      	mov	r1, r8
 800645a:	4630      	mov	r0, r6
 800645c:	f7ff fb6c 	bl	8005b38 <bn_div.part.0>
    bn_assign(bignum_res, 0, bignum1, 0, size >> 1);
 8006460:	0865      	lsrs	r5, r4, #1
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8006462:	4649      	mov	r1, r9
 8006464:	00aa      	lsls	r2, r5, #2
 8006466:	4668      	mov	r0, sp
 8006468:	f002 fcb9 	bl	8008dde <memcpy>
    bn_inner_karatsuba(bignum_res, bignum2, size >> 1);
 800646c:	462a      	mov	r2, r5
 800646e:	4641      	mov	r1, r8
 8006470:	4668      	mov	r0, sp
 8006472:	f7ff fd4f 	bl	8005f14 <bn_inner_karatsuba>
 8006476:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 800647a:	eb0d 0384 	add.w	r3, sp, r4, lsl #2
}
 800647e:	4622      	mov	r2, r4
 8006480:	e001      	b.n	8006486 <bn_divmod+0x72>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8006482:	d323      	bcc.n	80064cc <bn_divmod+0xb8>
    } while (size != 0);
 8006484:	b13a      	cbz	r2, 8006496 <bn_divmod+0x82>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8006486:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 800648a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800648e:	4285      	cmp	r5, r0
        --size;
 8006490:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8006494:	d9f5      	bls.n	8006482 <bn_divmod+0x6e>
 8006496:	3e04      	subs	r6, #4
 8006498:	466d      	mov	r5, sp
 800649a:	3f04      	subs	r7, #4
 800649c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
}
 80064a0:	2200      	movs	r2, #0
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 80064a2:	f856 1f04 	ldr.w	r1, [r6, #4]!
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 80064a6:	f855 3b04 	ldr.w	r3, [r5], #4
        BN_DTYPE_TMP res = tmp1 - tmp2;
 80064aa:	4250      	negs	r0, r2
 80064ac:	1809      	adds	r1, r1, r0
 80064ae:	f082 0201 	eor.w	r2, r2, #1
 80064b2:	f142 0200 	adc.w	r2, r2, #0
 80064b6:	1ac9      	subs	r1, r1, r3
 80064b8:	f162 0200 	sbc.w	r2, r2, #0
        borrow = res <= BN_MAX_VAL;
 80064bc:	fab2 f282 	clz	r2, r2
    for (size_t i = 0; i < size; ++i) {
 80064c0:	42b4      	cmp	r4, r6
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 80064c2:	f847 1f04 	str.w	r1, [r7, #4]!
        borrow = res <= BN_MAX_VAL;
 80064c6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    for (size_t i = 0; i < size; ++i) {
 80064ca:	d1ea      	bne.n	80064a2 <bn_divmod+0x8e>
}
 80064cc:	b021      	add	sp, #132	; 0x84
 80064ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064d2:	bf00      	nop

080064d4 <bn_mod>:
    for (size_t i = 0; i < size; ++i) {
 80064d4:	b1ab      	cbz	r3, 8006502 <bn_mod+0x2e>
void bn_mod(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80064d6:	b510      	push	{r4, lr}
    for (size_t i = 0; i < size; ++i) {
 80064d8:	f04f 0c00 	mov.w	ip, #0
void bn_mod(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80064dc:	b0a2      	sub	sp, #136	; 0x88
 80064de:	f1a1 0e04 	sub.w	lr, r1, #4
 80064e2:	e001      	b.n	80064e8 <bn_mod+0x14>
    for (size_t i = 0; i < size; ++i) {
 80064e4:	4563      	cmp	r3, ip
 80064e6:	d00a      	beq.n	80064fe <bn_mod+0x2a>
        if ((*bignum)[i] != 0) {
 80064e8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
    for (size_t i = 0; i < size; ++i) {
 80064ec:	f10c 0c01 	add.w	ip, ip, #1
        if ((*bignum)[i] != 0) {
 80064f0:	2c00      	cmp	r4, #0
 80064f2:	d0f7      	beq.n	80064e4 <bn_mod+0x10>
    bn_divmod(bignum1, bignum2, &tmp, bignum_res, size);
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4613      	mov	r3, r2
 80064f8:	aa02      	add	r2, sp, #8
 80064fa:	f7ff ff8b 	bl	8006414 <bn_divmod>
}
 80064fe:	b022      	add	sp, #136	; 0x88
 8006500:	bd10      	pop	{r4, pc}
 8006502:	4770      	bx	lr

08006504 <bn_cmp>:
bignum_compare_state bn_cmp(const bignum_t *bignum1, const bignum_t *bignum2, size_t size) {
 8006504:	b410      	push	{r4}
 8006506:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800650a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800650e:	e001      	b.n	8006514 <bn_cmp+0x10>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8006510:	d30c      	bcc.n	800652c <bn_cmp+0x28>
    } while (size != 0);
 8006512:	b182      	cbz	r2, 8006536 <bn_cmp+0x32>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8006514:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8006518:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800651c:	429c      	cmp	r4, r3
        --size;
 800651e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8006522:	d9f5      	bls.n	8006510 <bn_cmp+0xc>
            return BN_CMP_LARGER;
 8006524:	2001      	movs	r0, #1
}
 8006526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800652a:	4770      	bx	lr
            return BN_CMP_SMALLER;
 800652c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006534:	4770      	bx	lr
    return BN_CMP_EQUAL;
 8006536:	4610      	mov	r0, r2
}
 8006538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop

08006540 <bn_is_zero>:
    for (size_t i = 0; i < size; ++i) {
 8006540:	b159      	cbz	r1, 800655a <bn_is_zero+0x1a>
 8006542:	3804      	subs	r0, #4
 8006544:	2300      	movs	r3, #0
 8006546:	e001      	b.n	800654c <bn_is_zero+0xc>
 8006548:	4299      	cmp	r1, r3
 800654a:	d006      	beq.n	800655a <bn_is_zero+0x1a>
        if ((*bignum)[i] != 0) {
 800654c:	f850 2f04 	ldr.w	r2, [r0, #4]!
    for (size_t i = 0; i < size; ++i) {
 8006550:	3301      	adds	r3, #1
        if ((*bignum)[i] != 0) {
 8006552:	2a00      	cmp	r2, #0
 8006554:	d0f8      	beq.n	8006548 <bn_is_zero+0x8>
            return 0;
 8006556:	2000      	movs	r0, #0
}
 8006558:	4770      	bx	lr
    return 1;
 800655a:	2001      	movs	r0, #1
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop

08006560 <bn_bitcount>:
 * @return Количество бит
 */
size_t bn_bitcount(const bignum_t *bignum) {
    size_t bits = (BN_BYTE_SIZE << 3) - (BN_WORD_SIZE << 3);
    int i;
    for (i = BN_ARRAY_SIZE - 1; i >= 0 && (*bignum)[i] == 0; --i) {
 8006560:	f100 0180 	add.w	r1, r0, #128	; 0x80
    size_t bits = (BN_BYTE_SIZE << 3) - (BN_WORD_SIZE << 3);
 8006564:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8006568:	e003      	b.n	8006572 <bn_bitcount+0x12>
        bits -= BN_WORD_SIZE << 3;
 800656a:	3b20      	subs	r3, #32
    for (i = BN_ARRAY_SIZE - 1; i >= 0 && (*bignum)[i] == 0; --i) {
 800656c:	f113 0f20 	cmn.w	r3, #32
 8006570:	d009      	beq.n	8006586 <bn_bitcount+0x26>
 8006572:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006576:	2a00      	cmp	r2, #0
 8006578:	d0f7      	beq.n	800656a <bn_bitcount+0xa>
    }

    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 800657a:	0852      	lsrs	r2, r2, #1
        bits++;
 800657c:	f103 0301 	add.w	r3, r3, #1
    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 8006580:	d1fb      	bne.n	800657a <bn_bitcount+0x1a>
    }

    return bits;
}
 8006582:	4618      	mov	r0, r3
 8006584:	4770      	bx	lr
    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 8006586:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800658a:	2a00      	cmp	r2, #0
 800658c:	d0f9      	beq.n	8006582 <bn_bitcount+0x22>
 800658e:	0852      	lsrs	r2, r2, #1
        bits++;
 8006590:	f103 0301 	add.w	r3, r3, #1
    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 8006594:	d1f1      	bne.n	800657a <bn_bitcount+0x1a>
 8006596:	e7f4      	b.n	8006582 <bn_bitcount+0x22>

08006598 <montg_inverse>:
 * \brief Расширенный алгоритм Евклида
 * @param val Число
 * @param mod Модуль
 * @param res Результат
 */
static void montg_inverse(const bignum_t *val, const bignum_t *mod, bignum_t *res) {
 8006598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800659c:	4614      	mov	r4, r2
 800659e:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
    if (bn_cmp(val, mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 80065a2:	2220      	movs	r2, #32
static void montg_inverse(const bignum_t *val, const bignum_t *mod, bignum_t *res) {
 80065a4:	4605      	mov	r5, r0
 80065a6:	4688      	mov	r8, r1
    if (bn_cmp(val, mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 80065a8:	f7ff ffac 	bl	8006504 <bn_cmp>
 80065ac:	3001      	adds	r0, #1
 80065ae:	d003      	beq.n	80065b8 <montg_inverse+0x20>
    if (!sign) {
        bn_sub(mod, res, res, BN_ARRAY_SIZE / 2 + 1);
    }

    // Если b != 1 в конце, то res не существует. Данная функция не учитывает этот случай.
}
 80065b0:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
 80065b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bn_assign(&n, 0, mod, 0, BN_ARRAY_SIZE);
 80065b8:	2720      	movs	r7, #32
 80065ba:	2300      	movs	r3, #0
 80065bc:	4619      	mov	r1, r3
 80065be:	4642      	mov	r2, r8
 80065c0:	a804      	add	r0, sp, #16
 80065c2:	9700      	str	r7, [sp, #0]
 80065c4:	f7ff fe3a 	bl	800623c <bn_assign>
    bn_assign(&b, 0, val, 0, BN_ARRAY_SIZE);
 80065c8:	2300      	movs	r3, #0
 80065ca:	462a      	mov	r2, r5
 80065cc:	4619      	mov	r1, r3
 80065ce:	a824      	add	r0, sp, #144	; 0x90
 80065d0:	9700      	str	r7, [sp, #0]
 80065d2:	f7ff fe33 	bl	800623c <bn_assign>
    bn_init(&q, BN_ARRAY_SIZE);
 80065d6:	4639      	mov	r1, r7
 80065d8:	a844      	add	r0, sp, #272	; 0x110
 80065da:	f7ff fe2b 	bl	8006234 <bn_init>
    bn_init(&r, BN_ARRAY_SIZE);
 80065de:	4639      	mov	r1, r7
 80065e0:	a864      	add	r0, sp, #400	; 0x190
 80065e2:	f7ff fe27 	bl	8006234 <bn_init>
    bn_init(&t1, BN_ARRAY_SIZE);
 80065e6:	4639      	mov	r1, r7
 80065e8:	a884      	add	r0, sp, #528	; 0x210
 80065ea:	f7ff fe23 	bl	8006234 <bn_init>
    bn_from_int(res, 1, BN_ARRAY_SIZE);
 80065ee:	4620      	mov	r0, r4
 80065f0:	2201      	movs	r2, #1
 80065f2:	2300      	movs	r3, #0
 80065f4:	9700      	str	r7, [sp, #0]
 80065f6:	f7ff fe7d 	bl	80062f4 <bn_from_int>
    bn_init(&t3, BN_ARRAY_SIZE);
 80065fa:	4639      	mov	r1, r7
 80065fc:	a8a4      	add	r0, sp, #656	; 0x290
 80065fe:	f7ff fe19 	bl	8006234 <bn_init>
    bn_divmod(&n, &b, &q, &r, BN_ARRAY_SIZE);
 8006602:	ab64      	add	r3, sp, #400	; 0x190
 8006604:	aa44      	add	r2, sp, #272	; 0x110
 8006606:	a924      	add	r1, sp, #144	; 0x90
 8006608:	a804      	add	r0, sp, #16
 800660a:	9700      	str	r7, [sp, #0]
 800660c:	f7ff ff02 	bl	8006414 <bn_divmod>
    bn_karatsuba(res, &q, &t3, BN_ARRAY_SIZE);
 8006610:	463b      	mov	r3, r7
 8006612:	aaa4      	add	r2, sp, #656	; 0x290
 8006614:	a944      	add	r1, sp, #272	; 0x110
 8006616:	4620      	mov	r0, r4
    uint8_t sign = 1;
 8006618:	2601      	movs	r6, #1
        bn_assign(&n, 0, &b, 0, BN_ARRAY_SIZE / 2 + 1);
 800661a:	f04f 0911 	mov.w	r9, #17
    bn_karatsuba(res, &q, &t3, BN_ARRAY_SIZE);
 800661e:	f7ff fee9 	bl	80063f4 <bn_karatsuba>
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 8006622:	e02f      	b.n	8006684 <montg_inverse+0xec>
        bn_assign(&n, 0, &b, 0, BN_ARRAY_SIZE / 2 + 1);
 8006624:	4619      	mov	r1, r3
 8006626:	f8cd 9000 	str.w	r9, [sp]
 800662a:	9303      	str	r3, [sp, #12]
 800662c:	f7ff fe06 	bl	800623c <bn_assign>
        bn_assign(&b, 0, &r, 0, BN_ARRAY_SIZE / 2);
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	9500      	str	r5, [sp, #0]
 8006634:	4619      	mov	r1, r3
 8006636:	aa64      	add	r2, sp, #400	; 0x190
 8006638:	a824      	add	r0, sp, #144	; 0x90
 800663a:	f7ff fdff 	bl	800623c <bn_assign>
        bn_assign(&t1, 0, res, 0, BN_ARRAY_SIZE / 2);
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	9500      	str	r5, [sp, #0]
 8006642:	4619      	mov	r1, r3
 8006644:	4622      	mov	r2, r4
 8006646:	a884      	add	r0, sp, #528	; 0x210
 8006648:	f7ff fdf8 	bl	800623c <bn_assign>
        bn_assign(res, 0, &t3, 0, BN_ARRAY_SIZE / 2);
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	9500      	str	r5, [sp, #0]
 8006650:	4619      	mov	r1, r3
 8006652:	aaa4      	add	r2, sp, #656	; 0x290
 8006654:	4620      	mov	r0, r4
 8006656:	f7ff fdf1 	bl	800623c <bn_assign>
        bn_divmod(n_ptr, b_ptr, &q, &r, BN_ARRAY_SIZE);
 800665a:	ab64      	add	r3, sp, #400	; 0x190
 800665c:	aa44      	add	r2, sp, #272	; 0x110
 800665e:	a924      	add	r1, sp, #144	; 0x90
 8006660:	a804      	add	r0, sp, #16
 8006662:	9700      	str	r7, [sp, #0]
 8006664:	f7ff fed6 	bl	8006414 <bn_divmod>
        bn_karatsuba(res, &q, &t3, BN_ARRAY_SIZE);
 8006668:	2320      	movs	r3, #32
 800666a:	aaa4      	add	r2, sp, #656	; 0x290
 800666c:	a944      	add	r1, sp, #272	; 0x110
 800666e:	4620      	mov	r0, r4
 8006670:	f7ff fec0 	bl	80063f4 <bn_karatsuba>
        bn_add(&t3, &t1, &t3, BN_ARRAY_SIZE / 2 + 1);
 8006674:	aaa4      	add	r2, sp, #656	; 0x290
 8006676:	2311      	movs	r3, #17
 8006678:	a984      	add	r1, sp, #528	; 0x210
 800667a:	4610      	mov	r0, r2
 800667c:	f086 0601 	eor.w	r6, r6, #1
 8006680:	f7ff fe66 	bl	8006350 <bn_add>
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 8006684:	2120      	movs	r1, #32
 8006686:	a864      	add	r0, sp, #400	; 0x190
 8006688:	f7ff ff5a 	bl	8006540 <bn_is_zero>
        bn_assign(&b, 0, &r, 0, BN_ARRAY_SIZE / 2);
 800668c:	2510      	movs	r5, #16
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 800668e:	4603      	mov	r3, r0
        bn_assign(&n, 0, &b, 0, BN_ARRAY_SIZE / 2 + 1);
 8006690:	aa24      	add	r2, sp, #144	; 0x90
 8006692:	eb0d 0005 	add.w	r0, sp, r5
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0c4      	beq.n	8006624 <montg_inverse+0x8c>
    if (!sign) {
 800669a:	2e00      	cmp	r6, #0
 800669c:	d188      	bne.n	80065b0 <montg_inverse+0x18>
        bn_sub(mod, res, res, BN_ARRAY_SIZE / 2 + 1);
 800669e:	2311      	movs	r3, #17
 80066a0:	4622      	mov	r2, r4
 80066a2:	4621      	mov	r1, r4
 80066a4:	4640      	mov	r0, r8
 80066a6:	f7ff fe73 	bl	8006390 <bn_sub>
}
 80066aa:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
 80066ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066b2:	bf00      	nop
 80066b4:	0000      	movs	r0, r0
	...

080066b8 <montg_init>:
 * \brief Инициализация пространства montgomery
 * @param md Пространство montgomery
 * @param mod Модуль
 */
void montg_init(montg_t *md, const bignum_t *mod) {
    if (mod == NULL) {
 80066b8:	b351      	cbz	r1, 8006710 <montg_init+0x58>
void montg_init(montg_t *md, const bignum_t *mod) {
 80066ba:	b570      	push	{r4, r5, r6, lr}
        return;
    }

    md->shift = BN_ARRAY_SIZE / 2;    // 512 для ключа 512 бит - лучше передавать ключ вместо mod для инициализации
 80066bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006718 <montg_init+0x60>
 80066c0:	ed80 7b60 	vstr	d7, [r0, #384]	; 0x180
    md->shift_byte_size = BN_BYTE_SIZE / 2;
 80066c4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006720 <montg_init+0x68>
void montg_init(montg_t *md, const bignum_t *mod) {
 80066c8:	b084      	sub	sp, #16
 80066ca:	4604      	mov	r4, r0

    bn_assign(&md->mod, 0, mod, 0, BN_ARRAY_SIZE);
 80066cc:	2300      	movs	r3, #0
 80066ce:	2620      	movs	r6, #32
    md->shift_byte_size = BN_BYTE_SIZE / 2;
 80066d0:	ed80 7b62 	vstr	d7, [r0, #392]	; 0x188
 80066d4:	460a      	mov	r2, r1

    bn_init(&md->r, BN_ARRAY_SIZE);
 80066d6:	f104 0580 	add.w	r5, r4, #128	; 0x80
    bn_assign(&md->mod, 0, mod, 0, BN_ARRAY_SIZE);
 80066da:	4619      	mov	r1, r3
 80066dc:	9600      	str	r6, [sp, #0]
 80066de:	f7ff fdad 	bl	800623c <bn_assign>
    bn_init(&md->r, BN_ARRAY_SIZE);
 80066e2:	4631      	mov	r1, r6
 80066e4:	4628      	mov	r0, r5
 80066e6:	f7ff fda5 	bl	8006234 <bn_init>
    md->r[BN_ARRAY_SIZE / 2] = 1;
 80066ea:	2301      	movs	r3, #1

    bn_sub(&md->r, &md->mod, &md->r_inv, BN_ARRAY_SIZE);
 80066ec:	f504 7280 	add.w	r2, r4, #256	; 0x100
    md->r[BN_ARRAY_SIZE / 2] = 1;
 80066f0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    bn_sub(&md->r, &md->mod, &md->r_inv, BN_ARRAY_SIZE);
 80066f4:	4621      	mov	r1, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	4633      	mov	r3, r6
 80066fa:	9203      	str	r2, [sp, #12]
 80066fc:	f7ff fe48 	bl	8006390 <bn_sub>
    montg_inverse(&md->r_inv, &md->r, &md->r_inv);
 8006700:	9a03      	ldr	r2, [sp, #12]
 8006702:	4629      	mov	r1, r5
 8006704:	4610      	mov	r0, r2
}
 8006706:	b004      	add	sp, #16
 8006708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    montg_inverse(&md->r_inv, &md->r, &md->r_inv);
 800670c:	f7ff bf44 	b.w	8006598 <montg_inverse>
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	f3af 8000 	nop.w
 8006718:	00000010 	.word	0x00000010
 800671c:	00000000 	.word	0x00000000
 8006720:	00000040 	.word	0x00000040
 8006724:	00000000 	.word	0x00000000

08006728 <montg_transform>:
 * \brief Перевод числа в пространство montgomery
 * @param md Пространство montgomery
 * @param val Число
 * @param res Результат
 */
void montg_transform(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8006728:	b570      	push	{r4, r5, r6, lr}
    bignum_t temp;
    memmove(temp + md->shift, *val, md->shift_byte_size);
 800672a:	f8d0 6188 	ldr.w	r6, [r0, #392]	; 0x188
void montg_transform(const montg_t *md, const bignum_t *val, bignum_t *res) {
 800672e:	4604      	mov	r4, r0
    memmove(temp + md->shift, *val, md->shift_byte_size);
 8006730:	f8d0 0180 	ldr.w	r0, [r0, #384]	; 0x180
void montg_transform(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8006734:	b0a0      	sub	sp, #128	; 0x80
 8006736:	4615      	mov	r5, r2
    memmove(temp + md->shift, *val, md->shift_byte_size);
 8006738:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
 800673c:	4632      	mov	r2, r6
 800673e:	f002 fb4e 	bl	8008dde <memcpy>
    memset(temp, 0, md->shift_byte_size);
 8006742:	4632      	mov	r2, r6
 8006744:	2100      	movs	r1, #0
 8006746:	4668      	mov	r0, sp
 8006748:	f002 fa98 	bl	8008c7c <memset>
    bn_mod(&temp, &md->mod, res, BN_ARRAY_SIZE);
 800674c:	2320      	movs	r3, #32
 800674e:	462a      	mov	r2, r5
 8006750:	4621      	mov	r1, r4
 8006752:	4668      	mov	r0, sp
 8006754:	f7ff febe 	bl	80064d4 <bn_mod>
}
 8006758:	b020      	add	sp, #128	; 0x80
 800675a:	bd70      	pop	{r4, r5, r6, pc}

0800675c <montg_mul>:
 * @param md Пространство montgomery
 * @param lhs Первый множитель
 * @param rhs Второй множитель
 * @param res Результат
 */
void montg_mul(const montg_t *md, const bignum_t *lhs, const bignum_t *rhs, bignum_t *res) {
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	460d      	mov	r5, r1
 8006760:	b0e2      	sub	sp, #392	; 0x188
 8006762:	4604      	mov	r4, r0
    bignum_t m, m_r_inv, t;
    uint8_t overflow = 0;
    bn_karatsuba(lhs, rhs, &t, BN_ARRAY_SIZE);
 8006764:	4611      	mov	r1, r2
 8006766:	4628      	mov	r0, r5
 8006768:	aa42      	add	r2, sp, #264	; 0x108
void montg_mul(const montg_t *md, const bignum_t *lhs, const bignum_t *rhs, bignum_t *res) {
 800676a:	461d      	mov	r5, r3
    bn_karatsuba(lhs, rhs, &t, BN_ARRAY_SIZE);
 800676c:	2320      	movs	r3, #32
 800676e:	f7ff fe41 	bl	80063f4 <bn_karatsuba>
    bn_assign(res, 0, &t, 0, BN_ARRAY_SIZE);
 8006772:	2620      	movs	r6, #32
 8006774:	2300      	movs	r3, #0
 8006776:	4619      	mov	r1, r3
 8006778:	aa42      	add	r2, sp, #264	; 0x108
 800677a:	4628      	mov	r0, r5
 800677c:	9600      	str	r6, [sp, #0]
 800677e:	f7ff fd5d 	bl	800623c <bn_assign>
    bn_assign(&m, 0, res, 0, BN_ARRAY_SIZE);
 8006782:	2300      	movs	r3, #0
 8006784:	4619      	mov	r1, r3
 8006786:	462a      	mov	r2, r5
 8006788:	a802      	add	r0, sp, #8
 800678a:	9600      	str	r6, [sp, #0]
 800678c:	f7ff fd56 	bl	800623c <bn_assign>

    memset(m + md->shift, 0, md->shift_byte_size);
 8006790:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 8006794:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8006798:	ab02      	add	r3, sp, #8
 800679a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800679e:	2100      	movs	r1, #0
 80067a0:	f002 fa6c 	bl	8008c7c <memset>
    bn_karatsuba(&m, &md->r_inv, &m_r_inv, BN_ARRAY_SIZE);
 80067a4:	4633      	mov	r3, r6
 80067a6:	aa22      	add	r2, sp, #136	; 0x88
 80067a8:	f504 7180 	add.w	r1, r4, #256	; 0x100
 80067ac:	a802      	add	r0, sp, #8
 80067ae:	f7ff fe21 	bl	80063f4 <bn_karatsuba>
    memset(m_r_inv + md->shift, 0, md->shift_byte_size);
 80067b2:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 80067b6:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 80067ba:	ab22      	add	r3, sp, #136	; 0x88
 80067bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067c0:	2100      	movs	r1, #0
 80067c2:	f002 fa5b 	bl	8008c7c <memset>

    bn_karatsuba(&m_r_inv, &md->mod, &m, BN_ARRAY_SIZE);
 80067c6:	4633      	mov	r3, r6
 80067c8:	aa02      	add	r2, sp, #8
 80067ca:	4621      	mov	r1, r4
 80067cc:	a822      	add	r0, sp, #136	; 0x88
 80067ce:	f7ff fe11 	bl	80063f4 <bn_karatsuba>
    bn_add(res, &m, res, BN_ARRAY_SIZE);
 80067d2:	4633      	mov	r3, r6
 80067d4:	462a      	mov	r2, r5
 80067d6:	a902      	add	r1, sp, #8
 80067d8:	4628      	mov	r0, r5
 80067da:	f7ff fdb9 	bl	8006350 <bn_add>

    overflow = bn_cmp(res, &t, BN_ARRAY_SIZE) == BN_CMP_SMALLER && bn_cmp(res, &m, BN_ARRAY_SIZE) == BN_CMP_SMALLER;
 80067de:	4632      	mov	r2, r6
 80067e0:	a942      	add	r1, sp, #264	; 0x108
 80067e2:	4628      	mov	r0, r5
 80067e4:	f7ff fe8e 	bl	8006504 <bn_cmp>
 80067e8:	3001      	adds	r0, #1
 80067ea:	d020      	beq.n	800682e <montg_mul+0xd2>

    memmove(*res, *res + md->shift, md->shift_byte_size);
 80067ec:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 80067f0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 80067f4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80067f8:	4628      	mov	r0, r5
 80067fa:	f002 fa25 	bl	8008c48 <memmove>
    memset(*res + md->shift, 0, md->shift_byte_size);
 80067fe:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 8006802:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8006806:	2100      	movs	r1, #0
 8006808:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800680c:	f002 fa36 	bl	8008c7c <memset>

    if (overflow) {
        (*res)[BN_ARRAY_SIZE / 2] = 1;
    }

    if (bn_cmp(res, &md->mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 8006810:	2220      	movs	r2, #32
 8006812:	4621      	mov	r1, r4
 8006814:	4628      	mov	r0, r5
 8006816:	f7ff fe75 	bl	8006504 <bn_cmp>
 800681a:	3001      	adds	r0, #1
 800681c:	d005      	beq.n	800682a <montg_mul+0xce>
        bn_sub(res, &md->mod, res, BN_ARRAY_SIZE);
 800681e:	2320      	movs	r3, #32
 8006820:	462a      	mov	r2, r5
 8006822:	4621      	mov	r1, r4
 8006824:	4628      	mov	r0, r5
 8006826:	f7ff fdb3 	bl	8006390 <bn_sub>
    }
}
 800682a:	b062      	add	sp, #392	; 0x188
 800682c:	bd70      	pop	{r4, r5, r6, pc}
    overflow = bn_cmp(res, &t, BN_ARRAY_SIZE) == BN_CMP_SMALLER && bn_cmp(res, &m, BN_ARRAY_SIZE) == BN_CMP_SMALLER;
 800682e:	4632      	mov	r2, r6
 8006830:	a902      	add	r1, sp, #8
 8006832:	4628      	mov	r0, r5
 8006834:	f7ff fe66 	bl	8006504 <bn_cmp>
 8006838:	3001      	adds	r0, #1
 800683a:	d1d7      	bne.n	80067ec <montg_mul+0x90>
    memmove(*res, *res + md->shift, md->shift_byte_size);
 800683c:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 8006840:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8006844:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8006848:	4628      	mov	r0, r5
 800684a:	f002 f9fd 	bl	8008c48 <memmove>
    memset(*res + md->shift, 0, md->shift_byte_size);
 800684e:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 8006852:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8006856:	2100      	movs	r1, #0
 8006858:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800685c:	f002 fa0e 	bl	8008c7c <memset>
        (*res)[BN_ARRAY_SIZE / 2] = 1;
 8006860:	2301      	movs	r3, #1
 8006862:	642b      	str	r3, [r5, #64]	; 0x40
 8006864:	e7d4      	b.n	8006810 <montg_mul+0xb4>
 8006866:	bf00      	nop

08006868 <montg_revert>:
void montg_revert(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8006868:	b530      	push	{r4, r5, lr}
 800686a:	b0a5      	sub	sp, #148	; 0x94
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
 800686c:	2320      	movs	r3, #32
void montg_revert(const montg_t *md, const bignum_t *val, bignum_t *res) {
 800686e:	4604      	mov	r4, r0
 8006870:	4615      	mov	r5, r2
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	a804      	add	r0, sp, #16
 8006876:	2201      	movs	r2, #1
 8006878:	2300      	movs	r3, #0
void montg_revert(const montg_t *md, const bignum_t *val, bignum_t *res) {
 800687a:	9103      	str	r1, [sp, #12]
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
 800687c:	f7ff fd3a 	bl	80062f4 <bn_from_int>
    montg_mul(md, val, &one, res);
 8006880:	9903      	ldr	r1, [sp, #12]
 8006882:	462b      	mov	r3, r5
 8006884:	aa04      	add	r2, sp, #16
 8006886:	4620      	mov	r0, r4
 8006888:	f7ff ff68 	bl	800675c <montg_mul>
}
 800688c:	b025      	add	sp, #148	; 0x94
 800688e:	bd30      	pop	{r4, r5, pc}

08006890 <montg_pow>:
 * @param md Пространство montgomery
 * @param b Число
 * @param exp Степень
 * @param res Результат
 */
void montg_pow(const montg_t *md, const bignum_t *b, const bignum_t *exp, bignum_t *res) {
 8006890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006894:	b083      	sub	sp, #12
 8006896:	461e      	mov	r6, r3
    bn_assign(res, 0, b, 0, BN_ARRAY_SIZE);
 8006898:	2320      	movs	r3, #32
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	2300      	movs	r3, #0
void montg_pow(const montg_t *md, const bignum_t *b, const bignum_t *exp, bignum_t *res) {
 800689e:	4617      	mov	r7, r2
 80068a0:	4689      	mov	r9, r1
    bn_assign(res, 0, b, 0, BN_ARRAY_SIZE);
 80068a2:	460a      	mov	r2, r1
void montg_pow(const montg_t *md, const bignum_t *b, const bignum_t *exp, bignum_t *res) {
 80068a4:	4680      	mov	r8, r0
    bn_assign(res, 0, b, 0, BN_ARRAY_SIZE);
 80068a6:	4619      	mov	r1, r3
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff fcc7 	bl	800623c <bn_assign>
    
    size_t len = bn_bitcount(exp) - 1;
 80068ae:	4638      	mov	r0, r7
 80068b0:	f7ff fe56 	bl	8006560 <bn_bitcount>
    uint8_t *end = (uint8_t *)(*exp) + len / 8;
    uint8_t *beg = (uint8_t *)(*exp);
    uint8_t mask = 1 << ((len - 1) & 7);
 80068b4:	1e83      	subs	r3, r0, #2
 80068b6:	f003 0307 	and.w	r3, r3, #7
    size_t len = bn_bitcount(exp) - 1;
 80068ba:	3801      	subs	r0, #1

    if (mask == 128) {
 80068bc:	2b07      	cmp	r3, #7
    uint8_t *end = (uint8_t *)(*exp) + len / 8;
 80068be:	eb07 05d0 	add.w	r5, r7, r0, lsr #3
    if (mask == 128) {
 80068c2:	d00f      	beq.n	80068e4 <montg_pow+0x54>
    uint8_t mask = 1 << ((len - 1) & 7);
 80068c4:	2401      	movs	r4, #1
 80068c6:	409c      	lsls	r4, r3
 80068c8:	b2e4      	uxtb	r4, r4
        end--;
    }

    while (end >= beg) {
 80068ca:	42af      	cmp	r7, r5
 80068cc:	d80f      	bhi.n	80068ee <montg_pow+0x5e>
        montg_mul(md, res, res, res);
 80068ce:	4633      	mov	r3, r6
 80068d0:	4632      	mov	r2, r6
 80068d2:	4631      	mov	r1, r6
 80068d4:	4640      	mov	r0, r8
 80068d6:	f7ff ff41 	bl	800675c <montg_mul>
        if (*end & mask) {
 80068da:	782b      	ldrb	r3, [r5, #0]
 80068dc:	421c      	tst	r4, r3
 80068de:	d109      	bne.n	80068f4 <montg_pow+0x64>
            montg_mul(md, b, res, res);
        }

        mask >>= 1;
        if (!mask) {
 80068e0:	0864      	lsrs	r4, r4, #1
 80068e2:	d1f2      	bne.n	80068ca <montg_pow+0x3a>
        end--;
 80068e4:	3d01      	subs	r5, #1
    while (end >= beg) {
 80068e6:	42af      	cmp	r7, r5
        end--;
 80068e8:	f04f 0480 	mov.w	r4, #128	; 0x80
    while (end >= beg) {
 80068ec:	d9ef      	bls.n	80068ce <montg_pow+0x3e>
            mask = 128;
            end--;
        }
    }
}
 80068ee:	b003      	add	sp, #12
 80068f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            montg_mul(md, b, res, res);
 80068f4:	4633      	mov	r3, r6
 80068f6:	4632      	mov	r2, r6
 80068f8:	4649      	mov	r1, r9
 80068fa:	4640      	mov	r0, r8
 80068fc:	f7ff ff2e 	bl	800675c <montg_mul>
 8006900:	e7ee      	b.n	80068e0 <montg_pow+0x50>
 8006902:	bf00      	nop

08006904 <import_pub_key>:
/**
 * \brief Парсинг публичного ключа
 * @param key Указатель на публичный ключ
 * @param data Данные публичного ключа
 */
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 8006904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char begin[] = "-----BEGIN PUBLIC KEY-----\r\n";
 8006908:	4c3b      	ldr	r4, [pc, #236]	; (80069f8 <import_pub_key+0xf4>)
    const char end[] = "-----END PUBLIC KEY-----\r\n";
 800690a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 80069fc <import_pub_key+0xf8>
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 800690e:	b092      	sub	sp, #72	; 0x48
 8006910:	460d      	mov	r5, r1
 8006912:	4606      	mov	r6, r0
    const char begin[] = "-----BEGIN PUBLIC KEY-----\r\n";
 8006914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 8006916:	af00      	add	r7, sp, #0
    const char begin[] = "-----BEGIN PUBLIC KEY-----\r\n";
 8006918:	f107 0e28 	add.w	lr, r7, #40	; 0x28
 800691c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006920:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006924:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
 8006928:	f88e 3000 	strb.w	r3, [lr]
    const char end[] = "-----END PUBLIC KEY-----\r\n";
 800692c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8006930:	f107 0c0c 	add.w	ip, r7, #12
 8006934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006938:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 800693c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 8006940:	46e8      	mov	r8, sp
    const char end[] = "-----END PUBLIC KEY-----\r\n";
 8006942:	f82c 2b02 	strh.w	r2, [ip], #2
    size_t in_size = 2048;
    char pem[in_size];
 8006946:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
    const char end[] = "-----END PUBLIC KEY-----\r\n";
 800694a:	0c12      	lsrs	r2, r2, #16
    strcpy(pem, data);
 800694c:	4629      	mov	r1, r5
 800694e:	4668      	mov	r0, sp
    const char end[] = "-----END PUBLIC KEY-----\r\n";
 8006950:	f88c 2000 	strb.w	r2, [ip]
    strcpy(pem, data);
 8006954:	f002 f9c2 	bl	8008cdc <stpcpy>
    char pem[in_size];
 8006958:	46e9      	mov	r9, sp
 800695a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800695e:	221c      	movs	r2, #28

    size_t beg_size = strlen(begin);
    size_t end_size = strlen(end);
    size_t pem_size = strlen(pem);
 8006960:	eba0 0a09 	sub.w	sl, r0, r9
    char *beg_pos = strstr(pem, begin);
 8006964:	4668      	mov	r0, sp
 8006966:	f002 f991 	bl	8008c8c <strncmp>
    size_t beg_idx = beg_pos - pem;
    char *end_pos = strstr(pem, end);
 800696a:	f107 010c 	add.w	r1, r7, #12
 800696e:	4604      	mov	r4, r0
 8006970:	4668      	mov	r0, sp
 8006972:	f002 f99d 	bl	8008cb0 <strstr>
    size_t end_idx = end_pos - pem;

    if (beg_idx == 0 && end_idx == pem_size - end_size) {
 8006976:	b124      	cbz	r4, 8006982 <import_pub_key+0x7e>
            return;
        }
        bn_from_bytes(&key->pub_exp, int_ptr, int_size);
        read_ptr += read_size;
    }
}
 8006978:	3748      	adds	r7, #72	; 0x48
 800697a:	46c5      	mov	sp, r8
 800697c:	46bd      	mov	sp, r7
 800697e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t end_idx = end_pos - pem;
 8006982:	466b      	mov	r3, sp
 8006984:	1ac0      	subs	r0, r0, r3
    if (beg_idx == 0 && end_idx == pem_size - end_size) {
 8006986:	f1aa 031a 	sub.w	r3, sl, #26
 800698a:	4283      	cmp	r3, r0
 800698c:	d1f4      	bne.n	8006978 <import_pub_key+0x74>
        uint8_t buffer[in_size];
 800698e:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
        memset(buffer, 0, in_size);
 8006992:	4621      	mov	r1, r4
 8006994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006998:	4668      	mov	r0, sp
 800699a:	f002 f96f 	bl	8008c7c <memset>
        base64_read((uint8_t *)data + beg_size, pem_size - beg_size - end_size, buffer, in_size);
 800699e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069a2:	f1aa 0136 	sub.w	r1, sl, #54	; 0x36
 80069a6:	466a      	mov	r2, sp
 80069a8:	f105 001c 	add.w	r0, r5, #28
 80069ac:	f7ff f880 	bl	8005ab0 <base64_read>
        const size_t key_padding = asn1_get_padding_pub_key(buffer);
 80069b0:	4668      	mov	r0, sp
 80069b2:	f7fe ffb9 	bl	8005928 <asn1_get_padding_pub_key>
        read_ptr = buffer + key_padding;
 80069b6:	eb0d 0500 	add.w	r5, sp, r0
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80069ba:	f107 0208 	add.w	r2, r7, #8
 80069be:	1d39      	adds	r1, r7, #4
 80069c0:	4628      	mov	r0, r5
 80069c2:	f7fe ff7b 	bl	80058bc <asn1_get_int>
        if (read_size == -1) {
 80069c6:	1c43      	adds	r3, r0, #1
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80069c8:	4604      	mov	r4, r0
        if (read_size == -1) {
 80069ca:	d0d5      	beq.n	8006978 <import_pub_key+0x74>
        bn_from_bytes(&key->mod, int_ptr, int_size);
 80069cc:	e9d7 1201 	ldrd	r1, r2, [r7, #4]
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7ff fc3d 	bl	8006250 <bn_from_bytes>
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80069d6:	f107 0208 	add.w	r2, r7, #8
 80069da:	1d39      	adds	r1, r7, #4
 80069dc:	1928      	adds	r0, r5, r4
 80069de:	f7fe ff6d 	bl	80058bc <asn1_get_int>
        if (read_size == -1) {
 80069e2:	3001      	adds	r0, #1
 80069e4:	d0c8      	beq.n	8006978 <import_pub_key+0x74>
        bn_from_bytes(&key->pub_exp, int_ptr, int_size);
 80069e6:	e9d7 1201 	ldrd	r1, r2, [r7, #4]
 80069ea:	f106 0080 	add.w	r0, r6, #128	; 0x80
 80069ee:	f7ff fc2f 	bl	8006250 <bn_from_bytes>
        read_ptr += read_size;
 80069f2:	46cd      	mov	sp, r9
 80069f4:	e7c0      	b.n	8006978 <import_pub_key+0x74>
 80069f6:	bf00      	nop
 80069f8:	0800bce4 	.word	0x0800bce4
 80069fc:	0800bd04 	.word	0x0800bd04

08006a00 <import_pvt_key>:
/**
 * \brief Парсинг приватного ключа
 * @param key Указатель на приватный ключ
 * @param data Данные приватного ключа
 */
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 8006a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char begin[] = "-----BEGIN PRIVATE KEY-----\r\n";
 8006a04:	4c4c      	ldr	r4, [pc, #304]	; (8006b38 <import_pvt_key+0x138>)
    const char end[] = "-----END PRIVATE KEY-----\r\n";
 8006a06:	f8df a134 	ldr.w	sl, [pc, #308]	; 8006b3c <import_pvt_key+0x13c>
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 8006a0a:	b0ba      	sub	sp, #232	; 0xe8
 8006a0c:	460e      	mov	r6, r1
 8006a0e:	4680      	mov	r8, r0
    const char begin[] = "-----BEGIN PRIVATE KEY-----\r\n";
 8006a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 8006a12:	af00      	add	r7, sp, #0
    const char begin[] = "-----BEGIN PRIVATE KEY-----\r\n";
 8006a14:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8006a18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006a1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006a20:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8006a24:	f8ac 3000 	strh.w	r3, [ip]
    const char end[] = "-----END PRIVATE KEY-----\r\n";
 8006a28:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8006a2c:	f107 0e0c 	add.w	lr, r7, #12
 8006a30:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006a34:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 8006a38:	46e9      	mov	r9, sp
    size_t in_size = 9192;
    char pem[in_size];
 8006a3a:	f5ad 5d0f 	sub.w	sp, sp, #9152	; 0x23c0
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	466d      	mov	r5, sp
    const char end[] = "-----END PRIVATE KEY-----\r\n";
 8006a42:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    strcpy(pem, data);
 8006a46:	4631      	mov	r1, r6
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f002 f947 	bl	8008cdc <stpcpy>

    size_t beg_size = strlen(begin);
    size_t end_size = strlen(end);
    size_t pem_size = strlen(pem);
 8006a4e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006a52:	221d      	movs	r2, #29
 8006a54:	1b44      	subs	r4, r0, r5
    char *beg_pos = strstr(pem, begin);
 8006a56:	4628      	mov	r0, r5
 8006a58:	f002 f918 	bl	8008c8c <strncmp>
    size_t beg_idx = beg_pos - pem;
    char *end_pos = strstr(pem, end);
 8006a5c:	f107 010c 	add.w	r1, r7, #12
 8006a60:	4682      	mov	sl, r0
 8006a62:	4628      	mov	r0, r5
 8006a64:	f002 f924 	bl	8008cb0 <strstr>
    size_t end_idx = end_pos - pem;

    if (!(beg_idx == 0 && end_idx == pem_size - end_size)) {
 8006a68:	f1ba 0f00 	cmp.w	sl, #0
 8006a6c:	d004      	beq.n	8006a78 <import_pvt_key+0x78>
            return;
        }
        bn_from_bytes(targets[i], int_ptr, int_size);
        read_ptr += read_size;
    }
}
 8006a6e:	37e8      	adds	r7, #232	; 0xe8
        return;
 8006a70:	46cd      	mov	sp, r9
}
 8006a72:	46bd      	mov	sp, r7
 8006a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t end_idx = end_pos - pem;
 8006a78:	1b43      	subs	r3, r0, r5
    if (!(beg_idx == 0 && end_idx == pem_size - end_size)) {
 8006a7a:	f1a4 021b 	sub.w	r2, r4, #27
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d1f5      	bne.n	8006a6e <import_pvt_key+0x6e>
    uint8_t buffer[in_size];
 8006a82:	f5ad 5d0f 	sub.w	sp, sp, #9152	; 0x23c0
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	466d      	mov	r5, sp
    memset(buffer, 0, in_size);
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	f242 32e8 	movw	r2, #9192	; 0x23e8
 8006a90:	4628      	mov	r0, r5
 8006a92:	f002 f8f3 	bl	8008c7c <memset>
    base64_read((uint8_t *)data + beg_size, pem_size - beg_size - end_size, buffer, in_size);
 8006a96:	f1a4 0138 	sub.w	r1, r4, #56	; 0x38
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	f242 33e8 	movw	r3, #9192	; 0x23e8
 8006aa0:	f106 001d 	add.w	r0, r6, #29
 8006aa4:	f7ff f804 	bl	8005ab0 <base64_read>
    const size_t key_padding = asn1_get_padding_pvt_key(buffer);
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f7fe ffa1 	bl	80059f0 <asn1_get_padding_pvt_key>
    read_ptr = buffer + key_padding;
 8006aae:	4405      	add	r5, r0
    read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 8006ab0:	f107 0208 	add.w	r2, r7, #8
 8006ab4:	1d39      	adds	r1, r7, #4
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f7fe ff00 	bl	80058bc <asn1_get_int>
    if (read_size == -1) {
 8006abc:	1c42      	adds	r2, r0, #1
    read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 8006abe:	4604      	mov	r4, r0
    if (read_size == -1) {
 8006ac0:	d0d5      	beq.n	8006a6e <import_pvt_key+0x6e>
    bn_from_bytes(&version, int_ptr, int_size);
 8006ac2:	e9d7 1201 	ldrd	r1, r2, [r7, #4]
 8006ac6:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8006aca:	f7ff fbc1 	bl	8006250 <bn_from_bytes>
    if (!bn_is_zero(&version, BN_ARRAY_SIZE)) {
 8006ace:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8006ad2:	2120      	movs	r1, #32
 8006ad4:	f7ff fd34 	bl	8006540 <bn_is_zero>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d0c8      	beq.n	8006a6e <import_pvt_key+0x6e>
    bignum_t *targets[] = {&key->mod, &key->pub_exp, &key->pvt_exp, &key->p, &key->q, &key->exp1, &key->exp2, &key->coeff};
 8006adc:	f108 0380 	add.w	r3, r8, #128	; 0x80
 8006ae0:	e9c7 8312 	strd	r8, r3, [r7, #72]	; 0x48
 8006ae4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8006ae8:	653b      	str	r3, [r7, #80]	; 0x50
 8006aea:	f508 73c0 	add.w	r3, r8, #384	; 0x180
 8006aee:	657b      	str	r3, [r7, #84]	; 0x54
 8006af0:	f508 7300 	add.w	r3, r8, #512	; 0x200
 8006af4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006af6:	f508 7320 	add.w	r3, r8, #640	; 0x280
 8006afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006afc:	f508 7240 	add.w	r2, r8, #768	; 0x300
 8006b00:	f508 7360 	add.w	r3, r8, #896	; 0x380
 8006b04:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    read_ptr += read_size;
 8006b08:	442c      	add	r4, r5
    for (size_t i = 0; i < targets_size; i++) {
 8006b0a:	f107 0664 	add.w	r6, r7, #100	; 0x64
 8006b0e:	f107 0544 	add.w	r5, r7, #68	; 0x44
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 8006b12:	4620      	mov	r0, r4
 8006b14:	f107 0208 	add.w	r2, r7, #8
 8006b18:	1d39      	adds	r1, r7, #4
 8006b1a:	f7fe fecf 	bl	80058bc <asn1_get_int>
        if (read_size == -1) {
 8006b1e:	1c43      	adds	r3, r0, #1
        read_ptr += read_size;
 8006b20:	4404      	add	r4, r0
        if (read_size == -1) {
 8006b22:	d0a4      	beq.n	8006a6e <import_pvt_key+0x6e>
        bn_from_bytes(targets[i], int_ptr, int_size);
 8006b24:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8006b28:	e9d7 1201 	ldrd	r1, r2, [r7, #4]
 8006b2c:	f7ff fb90 	bl	8006250 <bn_from_bytes>
    for (size_t i = 0; i < targets_size; i++) {
 8006b30:	42ae      	cmp	r6, r5
 8006b32:	d1ee      	bne.n	8006b12 <import_pvt_key+0x112>
 8006b34:	e79b      	b.n	8006a6e <import_pvt_key+0x6e>
 8006b36:	bf00      	nop
 8006b38:	0800bd20 	.word	0x0800bd20
 8006b3c:	0800bd40 	.word	0x0800bd40

08006b40 <encrypt_buf>:
 * @param buffer_in Входные данные
 * @param buffer_in_len Размер входных данных
 * @param buffer_out Зашифрованные данные
 * @param buffer_out_len Размер зашифрованных данных
 */
void encrypt_buf(const rsa_pub_key_t *key, const montg_t *montg_domain_n, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006b46:	460c      	mov	r4, r1
 8006b48:	4616      	mov	r6, r2
 8006b4a:	4605      	mov	r5, r0
    bignum_t in_bn, out_bn;
    bn_init(&in_bn, BN_ARRAY_SIZE);
 8006b4c:	2120      	movs	r1, #32
 8006b4e:	a802      	add	r0, sp, #8
void encrypt_buf(const rsa_pub_key_t *key, const montg_t *montg_domain_n, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 8006b50:	9301      	str	r3, [sp, #4]
    bn_init(&in_bn, BN_ARRAY_SIZE);
 8006b52:	f7ff fb6f 	bl	8006234 <bn_init>

    memmove(in_bn, buffer_in, buffer_in_len * sizeof(char));
 8006b56:	9a01      	ldr	r2, [sp, #4]
 8006b58:	4631      	mov	r1, r6
 8006b5a:	a802      	add	r0, sp, #8
 8006b5c:	f002 f93f 	bl	8008dde <memcpy>
    montg_transform(montg_domain_n, bignum_in, &bignum_montg_in);
 8006b60:	aa42      	add	r2, sp, #264	; 0x108
 8006b62:	a902      	add	r1, sp, #8
 8006b64:	4620      	mov	r0, r4
 8006b66:	f7ff fddf 	bl	8006728 <montg_transform>
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
 8006b6a:	a862      	add	r0, sp, #392	; 0x188
 8006b6c:	2120      	movs	r1, #32
 8006b6e:	f7ff fb61 	bl	8006234 <bn_init>
    montg_pow(montg_domain_n, &bignum_montg_in, &key->pub_exp, &bignum_montg_out);
 8006b72:	ab62      	add	r3, sp, #392	; 0x188
 8006b74:	f105 0280 	add.w	r2, r5, #128	; 0x80
 8006b78:	a942      	add	r1, sp, #264	; 0x108
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f7ff fe88 	bl	8006890 <montg_pow>
    montg_revert(montg_domain_n, &bignum_montg_out, bignum_out);
 8006b80:	aa22      	add	r2, sp, #136	; 0x88
 8006b82:	a962      	add	r1, sp, #392	; 0x188
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7ff fe6f 	bl	8006868 <montg_revert>
    encrypt(key, montg_domain_n, &in_bn, &out_bn);
    bn_to_string(&out_bn, buffer_out, buffer_out_len);
 8006b8a:	e9dd 1286 	ldrd	r1, r2, [sp, #536]	; 0x218
 8006b8e:	a822      	add	r0, sp, #136	; 0x88
 8006b90:	f7ff fbc0 	bl	8006314 <bn_to_string>
}
 8006b94:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8006b98:	bd70      	pop	{r4, r5, r6, pc}
 8006b9a:	bf00      	nop

08006b9c <decrypt>:
 * @param montg_domain_p Число p в пространстве montgomery
 * @param montg_domain_q Число q в пространстве montgomery
 * @param bignum_in Зашифрованные данные
 * @param bignum_out Дешифрованные данные
 */
void decrypt(const rsa_pvt_key_t *key, const montg_t *montg_domain_n, const montg_t *montg_domain_p, const montg_t *montg_domain_q, const bignum_t *bignum_in, bignum_t *bignum_out) {
 8006b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ba0:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	f8dd 9420 	ldr.w	r9, [sp, #1056]	; 0x420
 8006baa:	f8dd 4424 	ldr.w	r4, [sp, #1060]	; 0x424
 8006bae:	4605      	mov	r5, r0
    bignum_t bignum_montg_p_in, bignum_montg_q_in, bignum_montg_p_out, bignum_montg_q_out, bignum_p_out, bignum_q_out, h, hq;

    montg_transform(montg_domain_p, bignum_in, &bignum_montg_p_in);
 8006bb0:	466a      	mov	r2, sp
void decrypt(const rsa_pvt_key_t *key, const montg_t *montg_domain_n, const montg_t *montg_domain_p, const montg_t *montg_domain_q, const bignum_t *bignum_in, bignum_t *bignum_out) {
 8006bb2:	4688      	mov	r8, r1
    montg_transform(montg_domain_p, bignum_in, &bignum_montg_p_in);
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4649      	mov	r1, r9
void decrypt(const rsa_pvt_key_t *key, const montg_t *montg_domain_n, const montg_t *montg_domain_p, const montg_t *montg_domain_q, const bignum_t *bignum_in, bignum_t *bignum_out) {
 8006bb8:	461f      	mov	r7, r3
    montg_transform(montg_domain_p, bignum_in, &bignum_montg_p_in);
 8006bba:	f7ff fdb5 	bl	8006728 <montg_transform>
    bn_init(&bignum_montg_p_out, BN_ARRAY_SIZE);
 8006bbe:	a840      	add	r0, sp, #256	; 0x100
 8006bc0:	2120      	movs	r1, #32
 8006bc2:	f7ff fb37 	bl	8006234 <bn_init>
    montg_pow(montg_domain_p, &bignum_montg_p_in, &key->exp1, &bignum_montg_p_out);
 8006bc6:	ab40      	add	r3, sp, #256	; 0x100
 8006bc8:	4669      	mov	r1, sp
 8006bca:	f505 7220 	add.w	r2, r5, #640	; 0x280
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7ff fe5e 	bl	8006890 <montg_pow>
    montg_revert(montg_domain_p, &bignum_montg_p_out, &bignum_p_out);
 8006bd4:	a940      	add	r1, sp, #256	; 0x100
 8006bd6:	aa80      	add	r2, sp, #512	; 0x200
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f7ff fe45 	bl	8006868 <montg_revert>

    montg_transform(montg_domain_q, bignum_in, &bignum_montg_q_in);
 8006bde:	aa20      	add	r2, sp, #128	; 0x80
 8006be0:	4649      	mov	r1, r9
 8006be2:	4638      	mov	r0, r7
 8006be4:	f7ff fda0 	bl	8006728 <montg_transform>
    bn_init(&bignum_montg_q_out, BN_ARRAY_SIZE);
 8006be8:	a860      	add	r0, sp, #384	; 0x180
 8006bea:	2120      	movs	r1, #32
 8006bec:	f7ff fb22 	bl	8006234 <bn_init>
    montg_pow(montg_domain_q, &bignum_montg_q_in, &key->exp2, &bignum_montg_q_out);
 8006bf0:	ab60      	add	r3, sp, #384	; 0x180
 8006bf2:	a920      	add	r1, sp, #128	; 0x80
 8006bf4:	f505 7240 	add.w	r2, r5, #768	; 0x300
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff fe49 	bl	8006890 <montg_pow>
    montg_revert(montg_domain_q, &bignum_montg_q_out, &bignum_q_out);
 8006bfe:	a960      	add	r1, sp, #384	; 0x180
 8006c00:	4638      	mov	r0, r7
 8006c02:	aaa0      	add	r2, sp, #640	; 0x280
 8006c04:	f7ff fe30 	bl	8006868 <montg_revert>

    bn_sub(&bignum_p_out, &bignum_q_out, &bignum_p_out, BN_ARRAY_SIZE);
 8006c08:	aa80      	add	r2, sp, #512	; 0x200
 8006c0a:	a9a0      	add	r1, sp, #640	; 0x280
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	2320      	movs	r3, #32
 8006c10:	f7ff fbbe 	bl	8006390 <bn_sub>
    montg_mul(montg_domain_p, &key->coeff, &bignum_p_out, &h);
 8006c14:	aa80      	add	r2, sp, #512	; 0x200
 8006c16:	4630      	mov	r0, r6
 8006c18:	abc0      	add	r3, sp, #768	; 0x300
 8006c1a:	f505 7160 	add.w	r1, r5, #896	; 0x380
 8006c1e:	f7ff fd9d 	bl	800675c <montg_mul>
    montg_mul(montg_domain_n, &h, &key->q, &hq);
 8006c22:	a9c0      	add	r1, sp, #768	; 0x300
 8006c24:	4640      	mov	r0, r8
 8006c26:	abe0      	add	r3, sp, #896	; 0x380
 8006c28:	f505 7200 	add.w	r2, r5, #512	; 0x200
 8006c2c:	f7ff fd96 	bl	800675c <montg_mul>
    bn_add(&bignum_q_out, &hq, bignum_out, BN_ARRAY_SIZE);
 8006c30:	2320      	movs	r3, #32
 8006c32:	a9e0      	add	r1, sp, #896	; 0x380
 8006c34:	a8a0      	add	r0, sp, #640	; 0x280
 8006c36:	4622      	mov	r2, r4
 8006c38:	f7ff fb8a 	bl	8006350 <bn_add>

    while (bn_cmp(bignum_out, &key->mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 8006c3c:	e001      	b.n	8006c42 <decrypt+0xa6>
        bn_sub(bignum_out, &key->mod, bignum_out, BN_ARRAY_SIZE);
 8006c3e:	f7ff fba7 	bl	8006390 <bn_sub>
    while (bn_cmp(bignum_out, &key->mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 8006c42:	2220      	movs	r2, #32
 8006c44:	4629      	mov	r1, r5
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7ff fc5c 	bl	8006504 <bn_cmp>
 8006c4c:	3001      	adds	r0, #1
        bn_sub(bignum_out, &key->mod, bignum_out, BN_ARRAY_SIZE);
 8006c4e:	f04f 0320 	mov.w	r3, #32
 8006c52:	4622      	mov	r2, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	4620      	mov	r0, r4
    while (bn_cmp(bignum_out, &key->mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 8006c58:	d1f1      	bne.n	8006c3e <decrypt+0xa2>
    }
}
 8006c5a:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 8006c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c62:	bf00      	nop

08006c64 <decrypt_buf>:
 * @param bignum_in Зашифрованные данные
 * @param buffer_in_len Размер зашифрованных данных
 * @param bignum_out Дешифрованные данные
 * @param buffer_out_len Размер дешифрованных данных
 */
void decrypt_buf(const rsa_pvt_key_t *key, const montg_t *montg_domain_n, const montg_t *montg_domain_p, const montg_t *montg_domain_q, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 8006c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c66:	b0c5      	sub	sp, #276	; 0x114
    bignum_t in_bn, out_bn;
    bn_init(&in_bn, BN_ARRAY_SIZE);
 8006c68:	af04      	add	r7, sp, #16
void decrypt_buf(const rsa_pvt_key_t *key, const montg_t *montg_domain_n, const montg_t *montg_domain_p, const montg_t *montg_domain_q, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	460d      	mov	r5, r1
    bn_init(&in_bn, BN_ARRAY_SIZE);
 8006c6e:	4638      	mov	r0, r7
 8006c70:	2120      	movs	r1, #32
void decrypt_buf(const rsa_pvt_key_t *key, const montg_t *montg_domain_n, const montg_t *montg_domain_p, const montg_t *montg_domain_q, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 8006c72:	4616      	mov	r6, r2
 8006c74:	9303      	str	r3, [sp, #12]
    bn_init(&in_bn, BN_ARRAY_SIZE);
 8006c76:	f7ff fadd 	bl	8006234 <bn_init>

    bn_from_string(&in_bn, buffer_in, buffer_in_len - 1);
 8006c7a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8006c7c:	994a      	ldr	r1, [sp, #296]	; 0x128
 8006c7e:	1e5a      	subs	r2, r3, #1
 8006c80:	4638      	mov	r0, r7
 8006c82:	f7ff fb13 	bl	80062ac <bn_from_string>
    decrypt(key, montg_domain_n, montg_domain_p, montg_domain_q, &in_bn, &out_bn);
 8006c86:	4620      	mov	r0, r4
 8006c88:	ac24      	add	r4, sp, #144	; 0x90
 8006c8a:	9b03      	ldr	r3, [sp, #12]
 8006c8c:	9700      	str	r7, [sp, #0]
 8006c8e:	4632      	mov	r2, r6
 8006c90:	4629      	mov	r1, r5
 8006c92:	9401      	str	r4, [sp, #4]
 8006c94:	f7ff ff82 	bl	8006b9c <decrypt>
    memmove(buffer_out, out_bn, buffer_out_len * sizeof(uint8_t));
 8006c98:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8006c9a:	984c      	ldr	r0, [sp, #304]	; 0x130
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	f002 f89e 	bl	8008dde <memcpy>
 8006ca2:	b045      	add	sp, #276	; 0x114
 8006ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca6:	bf00      	nop

08006ca8 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ca8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006cac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8006cb0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cb2:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 8006cb6:	b184      	cbz	r4, 8006cda <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cb8:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8006cbc:	b15b      	cbz	r3, 8006cd6 <USBD_CDC_EP0_RxReady+0x2e>
 8006cbe:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006cc2:	28ff      	cmp	r0, #255	; 0xff
 8006cc4:	d007      	beq.n	8006cd6 <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8006ccc:	4621      	mov	r1, r4
 8006cce:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006cd0:	23ff      	movs	r3, #255	; 0xff
 8006cd2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006cd6:	2000      	movs	r0, #0
}
 8006cd8:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8006cda:	2003      	movs	r0, #3
}
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	bf00      	nop

08006ce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ce0:	230a      	movs	r3, #10
 8006ce2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8006ce4:	4800      	ldr	r0, [pc, #0]	; (8006ce8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006ce6:	4770      	bx	lr
 8006ce8:	20000088 	.word	0x20000088

08006cec <USBD_CDC_GetFSCfgDesc>:
{
 8006cec:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cee:	2182      	movs	r1, #130	; 0x82
{
 8006cf0:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cf2:	480f      	ldr	r0, [pc, #60]	; (8006d30 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006cf4:	f000 fbda 	bl	80074ac <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cf8:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cfa:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cfc:	480c      	ldr	r0, [pc, #48]	; (8006d30 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006cfe:	f000 fbd5 	bl	80074ac <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d02:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d04:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d06:	480a      	ldr	r0, [pc, #40]	; (8006d30 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006d08:	f000 fbd0 	bl	80074ac <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006d0c:	b10d      	cbz	r5, 8006d12 <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d0e:	2210      	movs	r2, #16
 8006d10:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006d12:	b11c      	cbz	r4, 8006d1c <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d14:	2200      	movs	r2, #0
 8006d16:	2140      	movs	r1, #64	; 0x40
 8006d18:	7121      	strb	r1, [r4, #4]
 8006d1a:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006d1c:	b118      	cbz	r0, 8006d26 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2140      	movs	r1, #64	; 0x40
 8006d22:	7101      	strb	r1, [r0, #4]
 8006d24:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d26:	2343      	movs	r3, #67	; 0x43
}
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d2a:	8033      	strh	r3, [r6, #0]
}
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000044 	.word	0x20000044

08006d34 <USBD_CDC_GetHSCfgDesc>:
{
 8006d34:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d36:	2182      	movs	r1, #130	; 0x82
{
 8006d38:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d3a:	480f      	ldr	r0, [pc, #60]	; (8006d78 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006d3c:	f000 fbb6 	bl	80074ac <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d40:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d42:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d44:	480c      	ldr	r0, [pc, #48]	; (8006d78 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006d46:	f000 fbb1 	bl	80074ac <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d4a:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d4c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d4e:	480a      	ldr	r0, [pc, #40]	; (8006d78 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006d50:	f000 fbac 	bl	80074ac <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006d54:	b10d      	cbz	r5, 8006d5a <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d56:	2210      	movs	r2, #16
 8006d58:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006d5a:	b11c      	cbz	r4, 8006d64 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	2202      	movs	r2, #2
 8006d60:	7121      	strb	r1, [r4, #4]
 8006d62:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006d64:	b118      	cbz	r0, 8006d6e <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d66:	2100      	movs	r1, #0
 8006d68:	2202      	movs	r2, #2
 8006d6a:	7101      	strb	r1, [r0, #4]
 8006d6c:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d6e:	2343      	movs	r3, #67	; 0x43
}
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d72:	8033      	strh	r3, [r6, #0]
}
 8006d74:	bd70      	pop	{r4, r5, r6, pc}
 8006d76:	bf00      	nop
 8006d78:	20000044 	.word	0x20000044

08006d7c <USBD_CDC_DataOut>:
{
 8006d7c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d7e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006d82:	33b0      	adds	r3, #176	; 0xb0
 8006d84:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d88:	b195      	cbz	r5, 8006db0 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	f001 f960 	bl	8008050 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d90:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d94:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d98:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006d9c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006da0:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 8006da4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006dac:	2000      	movs	r0, #0
}
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8006db0:	2003      	movs	r0, #3
}
 8006db2:	bd38      	pop	{r3, r4, r5, pc}

08006db4 <USBD_CDC_DataIn>:
{
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	f8d0 42d4 	ldr.w	r4, [r0, #724]	; 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006dba:	f8d0 62c8 	ldr.w	r6, [r0, #712]	; 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dbe:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8006dc2:	f8de 52c0 	ldr.w	r5, [lr, #704]	; 0x2c0
 8006dc6:	b365      	cbz	r5, 8006e22 <USBD_CDC_DataIn+0x6e>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006dc8:	f001 040f 	and.w	r4, r1, #15
 8006dcc:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8006dd0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006dd4:	460a      	mov	r2, r1
 8006dd6:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8006dda:	b96b      	cbnz	r3, 8006df8 <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ddc:	f8de 32c4 	ldr.w	r3, [lr, #708]	; 0x2c4
 8006de0:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8006de2:	2400      	movs	r4, #0
 8006de4:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006de8:	b1cb      	cbz	r3, 8006e1e <USBD_CDC_DataIn+0x6a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006dea:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8006dee:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8006df2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006df4:	4620      	mov	r0, r4
}
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006df8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8006dfc:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8006e00:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8006e02:	fbb3 f6f4 	udiv	r6, r3, r4
 8006e06:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	d1e6      	bne.n	8006ddc <USBD_CDC_DataIn+0x28>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006e0e:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e12:	4623      	mov	r3, r4
 8006e14:	4622      	mov	r2, r4
 8006e16:	f001 f8ff 	bl	8008018 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006e1a:	4620      	mov	r0, r4
}
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 8006e1e:	4618      	mov	r0, r3
}
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8006e22:	2003      	movs	r0, #3
}
 8006e24:	bd70      	pop	{r4, r5, r6, pc}
 8006e26:	bf00      	nop

08006e28 <USBD_CDC_Setup>:
{
 8006e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006e2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006e32:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e34:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
{
 8006e38:	4604      	mov	r4, r0
  uint8_t ifalt = 0U;
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 8006e40:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 8006e44:	2f00      	cmp	r7, #0
 8006e46:	d068      	beq.n	8006f1a <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e48:	f891 c000 	ldrb.w	ip, [r1]
 8006e4c:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 8006e50:	460d      	mov	r5, r1
 8006e52:	d01f      	beq.n	8006e94 <USBD_CDC_Setup+0x6c>
 8006e54:	2e20      	cmp	r6, #32
 8006e56:	d007      	beq.n	8006e68 <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 fde6 	bl	8007a2c <USBD_CtlError>
          ret = USBD_FAIL;
 8006e60:	2603      	movs	r6, #3
}
 8006e62:	4630      	mov	r0, r6
 8006e64:	b003      	add	sp, #12
 8006e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 8006e68:	88ce      	ldrh	r6, [r1, #6]
 8006e6a:	b38e      	cbz	r6, 8006ed0 <USBD_CDC_Setup+0xa8>
        if ((req->bmRequest & 0x80U) != 0U)
 8006e6c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006e70:	d157      	bne.n	8006f22 <USBD_CDC_Setup+0xfa>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e72:	2e3f      	cmp	r6, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 8006e74:	784b      	ldrb	r3, [r1, #1]
 8006e76:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e7a:	bf95      	itete	ls
 8006e7c:	4632      	movls	r2, r6
 8006e7e:	2340      	movhi	r3, #64	; 0x40
 8006e80:	b2d3      	uxtbls	r3, r2
 8006e82:	461a      	movhi	r2, r3
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e84:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fe1a 	bl	8007ac4 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8006e90:	2600      	movs	r6, #0
 8006e92:	e7e6      	b.n	8006e62 <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 8006e94:	784f      	ldrb	r7, [r1, #1]
 8006e96:	2f0b      	cmp	r7, #11
 8006e98:	d8de      	bhi.n	8006e58 <USBD_CDC_Setup+0x30>
 8006e9a:	a301      	add	r3, pc, #4	; (adr r3, 8006ea0 <USBD_CDC_Setup+0x78>)
 8006e9c:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8006ea0:	08006f03 	.word	0x08006f03
 8006ea4:	08006e63 	.word	0x08006e63
 8006ea8:	08006e59 	.word	0x08006e59
 8006eac:	08006e59 	.word	0x08006e59
 8006eb0:	08006e59 	.word	0x08006e59
 8006eb4:	08006e59 	.word	0x08006e59
 8006eb8:	08006e59 	.word	0x08006e59
 8006ebc:	08006e59 	.word	0x08006e59
 8006ec0:	08006e59 	.word	0x08006e59
 8006ec4:	08006e59 	.word	0x08006e59
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006ee3 	.word	0x08006ee3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ed0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ed4:	7848      	ldrb	r0, [r1, #1]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	4632      	mov	r2, r6
 8006eda:	4798      	blx	r3
}
 8006edc:	4630      	mov	r0, r6
 8006ede:	b003      	add	sp, #12
 8006ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ee2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d0bb      	beq.n	8006e62 <USBD_CDC_Setup+0x3a>
 8006eea:	e7b5      	b.n	8006e58 <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eec:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d1b1      	bne.n	8006e58 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f10d 0105 	add.w	r1, sp, #5
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 fdcc 	bl	8007a98 <USBD_CtlSendData>
 8006f00:	e7af      	b.n	8006e62 <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f02:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d1a6      	bne.n	8006e58 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f10d 0106 	add.w	r1, sp, #6
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fdc1 	bl	8007a98 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006f16:	463e      	mov	r6, r7
 8006f18:	e7a3      	b.n	8006e62 <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 8006f1a:	2603      	movs	r6, #3
}
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	b003      	add	sp, #12
 8006f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f26:	4632      	mov	r2, r6
 8006f28:	4639      	mov	r1, r7
 8006f2a:	689b      	ldr	r3, [r3, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f2c:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f2e:	7868      	ldrb	r0, [r5, #1]
 8006f30:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f32:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f34:	2a07      	cmp	r2, #7
 8006f36:	4639      	mov	r1, r7
 8006f38:	bf28      	it	cs
 8006f3a:	2207      	movcs	r2, #7
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 fdab 	bl	8007a98 <USBD_CtlSendData>
 8006f42:	e78e      	b.n	8006e62 <USBD_CDC_Setup+0x3a>

08006f44 <USBD_CDC_DeInit>:
{
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f48:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f4a:	2181      	movs	r1, #129	; 0x81
 8006f4c:	f001 f818 	bl	8007f80 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f50:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f52:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f54:	4620      	mov	r0, r4
 8006f56:	f001 f813 	bl	8007f80 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f5a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f5e:	2182      	movs	r1, #130	; 0x82
 8006f60:	4620      	mov	r0, r4
 8006f62:	f001 f80d 	bl	8007f80 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f66:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f6a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f70:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8006f74:	b18a      	cbz	r2, 8006f9a <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f7e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006f82:	33b0      	adds	r3, #176	; 0xb0
 8006f84:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006f88:	f001 f86a 	bl	8008060 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f8c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006f90:	33b0      	adds	r3, #176	; 0xb0
 8006f92:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8006f96:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
 8006f9e:	bf00      	nop

08006fa0 <USBD_CDC_Init>:
{
 8006fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa4:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fa6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006faa:	f001 f855 	bl	8008058 <USBD_static_malloc>
  if (hcdc == NULL)
 8006fae:	4605      	mov	r5, r0
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d061      	beq.n	8007078 <USBD_CDC_Init+0xd8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006fb4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f001 fe5f 	bl	8008c7c <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006fbe:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006fc2:	33b0      	adds	r3, #176	; 0xb0
 8006fc4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc8:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006fca:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fce:	b3d3      	cbz	r3, 8007046 <USBD_CDC_Init+0xa6>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fd0:	2340      	movs	r3, #64	; 0x40
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	2181      	movs	r1, #129	; 0x81
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 ffc2 	bl	8007f60 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fdc:	2101      	movs	r1, #1
 8006fde:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006fe0:	2340      	movs	r3, #64	; 0x40
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 ffbb 	bl	8007f60 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fea:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006fec:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fee:	2308      	movs	r3, #8
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ff0:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ff4:	2182      	movs	r1, #130	; 0x82
 8006ff6:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ff8:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 ffaf 	bl	8007f60 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007002:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007006:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800700a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 800700e:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007010:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  hcdc->RxBuffer = NULL;
 8007014:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 800701c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 8007020:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8007024:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 8007028:	b382      	cbz	r2, 800708c <USBD_CDC_Init+0xec>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702a:	f894 8010 	ldrb.w	r8, [r4, #16]
 800702e:	f1b8 0f00 	cmp.w	r8, #0
 8007032:	d118      	bne.n	8007066 <USBD_CDC_Init+0xc6>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007038:	4639      	mov	r1, r7
 800703a:	4620      	mov	r0, r4
 800703c:	f000 fffa 	bl	8008034 <USBD_LL_PrepareReceive>
}
 8007040:	4640      	mov	r0, r8
 8007042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800704a:	2202      	movs	r2, #2
 800704c:	2181      	movs	r1, #129	; 0x81
 800704e:	4620      	mov	r0, r4
 8007050:	f000 ff86 	bl	8007f60 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007054:	2101      	movs	r1, #1
 8007056:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800705c:	2202      	movs	r2, #2
 800705e:	4620      	mov	r0, r4
 8007060:	f000 ff7e 	bl	8007f60 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007064:	e7c1      	b.n	8006fea <USBD_CDC_Init+0x4a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	4639      	mov	r1, r7
 800706a:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 800706c:	46b0      	mov	r8, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800706e:	f000 ffe1 	bl	8008034 <USBD_LL_PrepareReceive>
}
 8007072:	4640      	mov	r0, r8
 8007074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007078:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800707c:	33b0      	adds	r3, #176	; 0xb0
    return (uint8_t)USBD_EMEM;
 800707e:	f04f 0802 	mov.w	r8, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007082:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 8007086:	4640      	mov	r0, r8
 8007088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800708c:	f04f 0802 	mov.w	r8, #2
 8007090:	e7d6      	b.n	8007040 <USBD_CDC_Init+0xa0>
 8007092:	bf00      	nop

08007094 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8007094:	b570      	push	{r4, r5, r6, lr}
 8007096:	2182      	movs	r1, #130	; 0x82
 8007098:	4606      	mov	r6, r0
 800709a:	480f      	ldr	r0, [pc, #60]	; (80070d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800709c:	f000 fa06 	bl	80074ac <USBD_GetEpDesc>
 80070a0:	2101      	movs	r1, #1
 80070a2:	4605      	mov	r5, r0
 80070a4:	480c      	ldr	r0, [pc, #48]	; (80070d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80070a6:	f000 fa01 	bl	80074ac <USBD_GetEpDesc>
 80070aa:	2181      	movs	r1, #129	; 0x81
 80070ac:	4604      	mov	r4, r0
 80070ae:	480a      	ldr	r0, [pc, #40]	; (80070d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80070b0:	f000 f9fc 	bl	80074ac <USBD_GetEpDesc>
 80070b4:	b10d      	cbz	r5, 80070ba <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 80070b6:	2210      	movs	r2, #16
 80070b8:	71aa      	strb	r2, [r5, #6]
 80070ba:	b11c      	cbz	r4, 80070c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 80070bc:	2200      	movs	r2, #0
 80070be:	2140      	movs	r1, #64	; 0x40
 80070c0:	7121      	strb	r1, [r4, #4]
 80070c2:	7162      	strb	r2, [r4, #5]
 80070c4:	b118      	cbz	r0, 80070ce <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 80070c6:	2200      	movs	r2, #0
 80070c8:	2140      	movs	r1, #64	; 0x40
 80070ca:	7101      	strb	r1, [r0, #4]
 80070cc:	7142      	strb	r2, [r0, #5]
 80070ce:	2343      	movs	r3, #67	; 0x43
 80070d0:	4801      	ldr	r0, [pc, #4]	; (80070d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80070d2:	8033      	strh	r3, [r6, #0]
 80070d4:	bd70      	pop	{r4, r5, r6, pc}
 80070d6:	bf00      	nop
 80070d8:	20000044 	.word	0x20000044

080070dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070dc:	4603      	mov	r3, r0
  if (fops == NULL)
 80070de:	b139      	cbz	r1, 80070f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 80070e0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 80070e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 80070e8:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 80070ea:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 80070ee:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80070f0:	2003      	movs	r0, #3
}
 80070f2:	4770      	bx	lr

080070f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070f4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80070f8:	33b0      	adds	r3, #176	; 0xb0
 80070fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 80070fe:	b12b      	cbz	r3, 800710c <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8007100:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007104:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007108:	2000      	movs	r0, #0
 800710a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800710c:	2003      	movs	r0, #3
}
 800710e:	4770      	bx	lr

08007110 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007110:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8007114:	33b0      	adds	r3, #176	; 0xb0
 8007116:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800711a:	b11b      	cbz	r3, 8007124 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800711c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007120:	2000      	movs	r0, #0
 8007122:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007124:	2003      	movs	r0, #3
}
 8007126:	4770      	bx	lr

08007128 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007128:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800712c:	32b0      	adds	r2, #176	; 0xb0
{
 800712e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007130:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007134:	b18a      	cbz	r2, 800715a <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007136:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007138:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800713c:	b134      	cbz	r4, 800714c <USBD_CDC_ReceivePacket+0x24>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800713e:	2340      	movs	r3, #64	; 0x40
 8007140:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007142:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007144:	f000 ff76 	bl	8008034 <USBD_LL_PrepareReceive>
}
 8007148:	4620      	mov	r0, r4
 800714a:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800714c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007150:	2101      	movs	r1, #1
 8007152:	f000 ff6f 	bl	8008034 <USBD_LL_PrepareReceive>
}
 8007156:	4620      	mov	r0, r4
 8007158:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800715a:	2403      	movs	r4, #3
}
 800715c:	4620      	mov	r0, r4
 800715e:	bd10      	pop	{r4, pc}

08007160 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007160:	b178      	cbz	r0, 8007182 <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007162:	2300      	movs	r3, #0
 8007164:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007168:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800716c:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007170:	b109      	cbz	r1, 8007176 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8007172:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007176:	2301      	movs	r3, #1
 8007178:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800717c:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800717e:	f000 bea3 	b.w	8007ec8 <USBD_LL_Init>

  return ret;
}
 8007182:	2003      	movs	r0, #3
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop

08007188 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007188:	b510      	push	{r4, lr}
 800718a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8007192:	b189      	cbz	r1, 80071b8 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007194:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass[0] = pclass;
 8007196:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800719a:	4604      	mov	r4, r0
 800719c:	b123      	cbz	r3, 80071a8 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800719e:	f10d 0006 	add.w	r0, sp, #6
 80071a2:	4798      	blx	r3
 80071a4:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80071a8:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 80071ac:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 80071ae:	3301      	adds	r3, #1
 80071b0:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 80071b4:	b002      	add	sp, #8
 80071b6:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80071b8:	2003      	movs	r0, #3
}
 80071ba:	b002      	add	sp, #8
 80071bc:	bd10      	pop	{r4, pc}
 80071be:	bf00      	nop

080071c0 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071c0:	f000 bec0 	b.w	8007f44 <USBD_LL_Start>

080071c4 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80071c8:	b10b      	cbz	r3, 80071ce <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop

080071d4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071d4:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80071d6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 80071de:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80071e0:	bf18      	it	ne
 80071e2:	2003      	movne	r0, #3
 80071e4:	bd08      	pop	{r3, pc}
 80071e6:	bf00      	nop

080071e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071ec:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 fc0f 	bl	8007a14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80071f6:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 80071fa:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 80071fe:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8007202:	2301      	movs	r3, #1
 8007204:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8007208:	f001 031f 	and.w	r3, r1, #31
 800720c:	2b01      	cmp	r3, #1
 800720e:	d009      	beq.n	8007224 <USBD_LL_SetupStage+0x3c>
 8007210:	2b02      	cmp	r3, #2
 8007212:	d013      	beq.n	800723c <USBD_LL_SetupStage+0x54>
 8007214:	b163      	cbz	r3, 8007230 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007216:	4620      	mov	r0, r4
 8007218:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800721c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007220:	f000 bebc 	b.w	8007f9c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007224:	4629      	mov	r1, r5
 8007226:	4620      	mov	r0, r4
}
 8007228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800722c:	f000 bb0e 	b.w	800784c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007230:	4629      	mov	r1, r5
 8007232:	4620      	mov	r0, r4
}
 8007234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007238:	f000 b94e 	b.w	80074d8 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800723c:	4629      	mov	r1, r5
 800723e:	4620      	mov	r0, r4
}
 8007240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007244:	f000 bb3c 	b.w	80078c0 <USBD_StdEPReq>

08007248 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007248:	b510      	push	{r4, lr}
 800724a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800724c:	b931      	cbnz	r1, 800725c <USBD_LL_DataOutStage+0x14>
 800724e:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007250:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007254:	2a03      	cmp	r2, #3
 8007256:	d010      	beq.n	800727a <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8007258:	2000      	movs	r0, #0
 800725a:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007260:	2b03      	cmp	r3, #3
 8007262:	d1f9      	bne.n	8007258 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8007264:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f4      	beq.n	8007258 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 800726e:	2200      	movs	r2, #0
}
 8007270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 8007274:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007278:	4718      	bx	r3
 800727a:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 800727c:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8007280:	4291      	cmp	r1, r2
 8007282:	d808      	bhi.n	8007296 <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007284:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007288:	2a03      	cmp	r2, #3
 800728a:	d00e      	beq.n	80072aa <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fc2f 	bl	8007af0 <USBD_CtlSendStatus>
}
 8007292:	2000      	movs	r0, #0
 8007294:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8007296:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007298:	428a      	cmp	r2, r1
 800729a:	bf28      	it	cs
 800729c:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800729e:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072a2:	4661      	mov	r1, ip
 80072a4:	f000 fc1c 	bl	8007ae0 <USBD_CtlContinueRx>
 80072a8:	e7d6      	b.n	8007258 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072aa:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80072ae:	6912      	ldr	r2, [r2, #16]
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	d0eb      	beq.n	800728c <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 80072b4:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072b8:	4790      	blx	r2
 80072ba:	e7e7      	b.n	800728c <USBD_LL_DataOutStage+0x44>

080072bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072c0:	b961      	cbnz	r1, 80072dc <USBD_LL_DataInStage+0x20>
 80072c2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072c4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80072c8:	2a02      	cmp	r2, #2
 80072ca:	d016      	beq.n	80072fa <USBD_LL_DataInStage+0x3e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80072cc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80072d0:	b113      	cbz	r3, 80072d8 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 80072d8:	2000      	movs	r0, #0
 80072da:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d1f9      	bne.n	80072d8 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 80072e4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f4      	beq.n	80072d8 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 80072ee:	2200      	movs	r2, #0
}
 80072f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80072f4:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80072f8:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80072fa:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 80072fe:	42b2      	cmp	r2, r6
 8007300:	460d      	mov	r5, r1
 8007302:	d810      	bhi.n	8007326 <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 8007304:	d01b      	beq.n	800733e <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007306:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800730a:	2b03      	cmp	r3, #3
 800730c:	d024      	beq.n	8007358 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800730e:	2180      	movs	r1, #128	; 0x80
 8007310:	4620      	mov	r0, r4
 8007312:	f000 fe43 	bl	8007f9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fbf6 	bl	8007b08 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 800731c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0d9      	beq.n	80072d8 <USBD_LL_DataInStage+0x1c>
 8007324:	e7d5      	b.n	80072d2 <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8007326:	1b92      	subs	r2, r2, r6
 8007328:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800732a:	4619      	mov	r1, r3
 800732c:	f000 fbc2 	bl	8007ab4 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007330:	462b      	mov	r3, r5
 8007332:	462a      	mov	r2, r5
 8007334:	4629      	mov	r1, r5
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fe7c 	bl	8008034 <USBD_LL_PrepareReceive>
 800733c:	e7c6      	b.n	80072cc <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800733e:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8007340:	429a      	cmp	r2, r3
 8007342:	d8e0      	bhi.n	8007306 <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 8007344:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8007348:	4293      	cmp	r3, r2
 800734a:	d2dc      	bcs.n	8007306 <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800734c:	460a      	mov	r2, r1
 800734e:	f000 fbb1 	bl	8007ab4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007352:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8007356:	e7eb      	b.n	8007330 <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007358:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0d5      	beq.n	800730e <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 8007362:	2200      	movs	r2, #0
 8007364:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007368:	4620      	mov	r0, r4
 800736a:	4798      	blx	r3
 800736c:	e7cf      	b.n	800730e <USBD_LL_DataInStage+0x52>
 800736e:	bf00      	nop

08007370 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007372:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8007376:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007378:	2201      	movs	r2, #1
 800737a:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
{
 800737e:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 8007380:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8007382:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 8007386:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800738a:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 800738e:	b11b      	cbz	r3, 8007398 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	b10b      	cbz	r3, 8007398 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007394:	4798      	blx	r3
 8007396:	b9b0      	cbnz	r0, 80073c6 <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8007398:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800739a:	2200      	movs	r2, #0
 800739c:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800739e:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a0:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073a2:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 fddb 	bl	8007f60 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073aa:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073ae:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073b2:	462b      	mov	r3, r5
 80073b4:	2200      	movs	r2, #0
 80073b6:	2180      	movs	r1, #128	; 0x80
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 fdd1 	bl	8007f60 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073be:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073c0:	6225      	str	r5, [r4, #32]

  return ret;
}
 80073c2:	4638      	mov	r0, r7
 80073c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 80073c6:	2703      	movs	r7, #3
 80073c8:	e7e7      	b.n	800739a <USBD_LL_Reset+0x2a>
 80073ca:	bf00      	nop

080073cc <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80073cc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80073ce:	2000      	movs	r0, #0
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop

080073d4 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80073d4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 80073d8:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073da:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d

  return USBD_OK;
}
 80073e2:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073e4:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop

080073ec <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d104      	bne.n	80073fe <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073f4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80073fe:	2000      	movs	r0, #0
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop

08007404 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007404:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007408:	2a03      	cmp	r2, #3
 800740a:	d001      	beq.n	8007410 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800740c:	2000      	movs	r0, #0
 800740e:	4770      	bx	lr
{
 8007410:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8007412:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007416:	b113      	cbz	r3, 800741e <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	b103      	cbz	r3, 800741e <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800741c:	4798      	blx	r3
}
 800741e:	2000      	movs	r0, #0
 8007420:	bd08      	pop	{r3, pc}
 8007422:	bf00      	nop

08007424 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8007424:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8007428:	32ae      	adds	r2, #174	; 0xae
 800742a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800742e:	b15a      	cbz	r2, 8007448 <USBD_LL_IsoINIncomplete+0x24>
{
 8007430:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007432:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007436:	2b03      	cmp	r3, #3
 8007438:	d001      	beq.n	800743e <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800743a:	2000      	movs	r0, #0
}
 800743c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800743e:	6a13      	ldr	r3, [r2, #32]
 8007440:	b123      	cbz	r3, 800744c <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007442:	4798      	blx	r3
  return USBD_OK;
 8007444:	2000      	movs	r0, #0
}
 8007446:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007448:	2003      	movs	r0, #3
}
 800744a:	4770      	bx	lr
  return USBD_OK;
 800744c:	4618      	mov	r0, r3
}
 800744e:	bd08      	pop	{r3, pc}

08007450 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8007450:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8007454:	32ae      	adds	r2, #174	; 0xae
 8007456:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800745a:	b15a      	cbz	r2, 8007474 <USBD_LL_IsoOUTIncomplete+0x24>
{
 800745c:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007462:	2b03      	cmp	r3, #3
 8007464:	d001      	beq.n	800746a <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8007466:	2000      	movs	r0, #0
}
 8007468:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800746a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800746c:	b123      	cbz	r3, 8007478 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800746e:	4798      	blx	r3
  return USBD_OK;
 8007470:	2000      	movs	r0, #0
}
 8007472:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007474:	2003      	movs	r0, #3
}
 8007476:	4770      	bx	lr
  return USBD_OK;
 8007478:	4618      	mov	r0, r3
}
 800747a:	bd08      	pop	{r3, pc}

0800747c <USBD_LL_DevConnected>:
 800747c:	2000      	movs	r0, #0
 800747e:	4770      	bx	lr

08007480 <USBD_LL_DevDisconnected>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007480:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007484:	2101      	movs	r1, #1
 8007486:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass[0] != NULL)
 800748a:	b142      	cbz	r2, 800749e <USBD_LL_DevDisconnected+0x1e>
{
 800748c:	b508      	push	{r3, lr}
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800748e:	6852      	ldr	r2, [r2, #4]
 8007490:	7901      	ldrb	r1, [r0, #4]
 8007492:	4790      	blx	r2
 8007494:	b908      	cbnz	r0, 800749a <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 8007496:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8007498:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800749a:	2003      	movs	r0, #3
}
 800749c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800749e:	2000      	movs	r0, #0
}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop

080074a4 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80074a4:	2000      	movs	r0, #0
 80074a6:	4770      	bx	lr

080074a8 <USBD_CoreFindEP>:
 80074a8:	2000      	movs	r0, #0
 80074aa:	4770      	bx	lr

080074ac <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80074ac:	7802      	ldrb	r2, [r0, #0]
 80074ae:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 80074b2:	4594      	cmp	ip, r2
 80074b4:	b293      	uxth	r3, r2
 80074b6:	d803      	bhi.n	80074c0 <USBD_GetEpDesc+0x14>
 80074b8:	e00c      	b.n	80074d4 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 80074ba:	459c      	cmp	ip, r3
 80074bc:	d90a      	bls.n	80074d4 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80074be:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80074c0:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 80074c2:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074c4:	7842      	ldrb	r2, [r0, #1]
 80074c6:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 80074c8:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074ca:	d1f6      	bne.n	80074ba <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 80074cc:	7882      	ldrb	r2, [r0, #2]
 80074ce:	428a      	cmp	r2, r1
 80074d0:	d1f3      	bne.n	80074ba <USBD_GetEpDesc+0xe>
}
 80074d2:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80074d4:	2000      	movs	r0, #0
}
 80074d6:	4770      	bx	lr

080074d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074dc:	780c      	ldrb	r4, [r1, #0]
 80074de:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074e2:	2c20      	cmp	r4, #32
{
 80074e4:	b082      	sub	sp, #8
 80074e6:	460e      	mov	r6, r1
 80074e8:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ea:	d00f      	beq.n	800750c <USBD_StdDevReq+0x34>
 80074ec:	2c40      	cmp	r4, #64	; 0x40
 80074ee:	d00d      	beq.n	800750c <USBD_StdDevReq+0x34>
 80074f0:	b1c4      	cbz	r4, 8007524 <USBD_StdDevReq+0x4c>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074f2:	2180      	movs	r1, #128	; 0x80
 80074f4:	4628      	mov	r0, r5
 80074f6:	f000 fd51 	bl	8007f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074fa:	2100      	movs	r1, #0
 80074fc:	4628      	mov	r0, r5
 80074fe:	f000 fd4d 	bl	8007f9c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8007502:	2400      	movs	r4, #0
}
 8007504:	4620      	mov	r0, r4
 8007506:	b002      	add	sp, #8
 8007508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800750c:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 8007510:	33ae      	adds	r3, #174	; 0xae
 8007512:	4631      	mov	r1, r6
 8007514:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	4628      	mov	r0, r5
}
 800751c:	b002      	add	sp, #8
 800751e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007522:	4718      	bx	r3
      switch (req->bRequest)
 8007524:	784f      	ldrb	r7, [r1, #1]
 8007526:	2f09      	cmp	r7, #9
 8007528:	d8e3      	bhi.n	80074f2 <USBD_StdDevReq+0x1a>
 800752a:	a301      	add	r3, pc, #4	; (adr r3, 8007530 <USBD_StdDevReq+0x58>)
 800752c:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8007530:	08007595 	.word	0x08007595
 8007534:	080075bf 	.word	0x080075bf
 8007538:	080074f3 	.word	0x080074f3
 800753c:	080075dd 	.word	0x080075dd
 8007540:	080074f3 	.word	0x080074f3
 8007544:	08007601 	.word	0x08007601
 8007548:	08007639 	.word	0x08007639
 800754c:	080074f3 	.word	0x080074f3
 8007550:	0800766d 	.word	0x0800766d
 8007554:	08007559 	.word	0x08007559
  cfgidx = (uint8_t)(req->wValue);
 8007558:	788e      	ldrb	r6, [r1, #2]
 800755a:	4fb5      	ldr	r7, [pc, #724]	; (8007830 <USBD_StdDevReq+0x358>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800755c:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 800755e:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007560:	f200 8147 	bhi.w	80077f2 <USBD_StdDevReq+0x31a>
  switch (pdev->dev_state)
 8007564:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007568:	2b02      	cmp	r3, #2
 800756a:	fa5f f883 	uxtb.w	r8, r3
 800756e:	f000 8102 	beq.w	8007776 <USBD_StdDevReq+0x29e>
 8007572:	f1b8 0f03 	cmp.w	r8, #3
 8007576:	f000 8113 	beq.w	80077a0 <USBD_StdDevReq+0x2c8>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800757a:	2180      	movs	r1, #128	; 0x80
 800757c:	f000 fd0e 	bl	8007f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007580:	2100      	movs	r1, #0
 8007582:	4628      	mov	r0, r5
 8007584:	f000 fd0a 	bl	8007f9c <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007588:	7839      	ldrb	r1, [r7, #0]
 800758a:	4628      	mov	r0, r5
 800758c:	f7ff fe22 	bl	80071d4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007590:	2403      	movs	r4, #3
      break;
 8007592:	e7b7      	b.n	8007504 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8007594:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007598:	3b01      	subs	r3, #1
 800759a:	2b02      	cmp	r3, #2
 800759c:	d824      	bhi.n	80075e8 <USBD_StdDevReq+0x110>
      if (req->wLength != 0x2U)
 800759e:	88ca      	ldrh	r2, [r1, #6]
 80075a0:	2a02      	cmp	r2, #2
 80075a2:	d121      	bne.n	80075e8 <USBD_StdDevReq+0x110>
      if (pdev->dev_remote_wakeup != 0U)
 80075a4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80075a8:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bf14      	ite	ne
 80075ae:	2303      	movne	r3, #3
 80075b0:	2301      	moveq	r3, #1
 80075b2:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075b6:	f000 fa6f 	bl	8007a98 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80075ba:	463c      	mov	r4, r7
      break;
 80075bc:	e7a2      	b.n	8007504 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 80075be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80075c2:	3b01      	subs	r3, #1
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d80f      	bhi.n	80075e8 <USBD_StdDevReq+0x110>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075c8:	884b      	ldrh	r3, [r1, #2]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d19a      	bne.n	8007504 <USBD_StdDevReq+0x2c>
        pdev->dev_remote_wakeup = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075d4:	4628      	mov	r0, r5
 80075d6:	f000 fa8b 	bl	8007af0 <USBD_CtlSendStatus>
 80075da:	e793      	b.n	8007504 <USBD_StdDevReq+0x2c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075dc:	884b      	ldrh	r3, [r1, #2]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d0f6      	beq.n	80075d0 <USBD_StdDevReq+0xf8>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	f000 80fe 	beq.w	80077e4 <USBD_StdDevReq+0x30c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80075e8:	2180      	movs	r1, #128	; 0x80
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 fcd6 	bl	8007f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80075f0:	2100      	movs	r1, #0
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 fcd2 	bl	8007f9c <USBD_LL_StallEP>
}
 80075f8:	4620      	mov	r0, r4
 80075fa:	b002      	add	sp, #8
 80075fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007600:	888b      	ldrh	r3, [r1, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f0      	bne.n	80075e8 <USBD_StdDevReq+0x110>
 8007606:	88cb      	ldrh	r3, [r1, #6]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1ed      	bne.n	80075e8 <USBD_StdDevReq+0x110>
 800760c:	884e      	ldrh	r6, [r1, #2]
 800760e:	2e7f      	cmp	r6, #127	; 0x7f
 8007610:	d8ea      	bhi.n	80075e8 <USBD_StdDevReq+0x110>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007612:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007616:	2b03      	cmp	r3, #3
 8007618:	d0e6      	beq.n	80075e8 <USBD_StdDevReq+0x110>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800761a:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800761c:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007620:	f000 fcec 	bl	8007ffc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007624:	4628      	mov	r0, r5
 8007626:	f000 fa63 	bl	8007af0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800762a:	2e00      	cmp	r6, #0
 800762c:	f000 8109 	beq.w	8007842 <USBD_StdDevReq+0x36a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007630:	2302      	movs	r3, #2
 8007632:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007636:	e765      	b.n	8007504 <USBD_StdDevReq+0x2c>
  switch (req->wValue >> 8)
 8007638:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007640:	0a13      	lsrs	r3, r2, #8
 8007642:	3b01      	subs	r3, #1
 8007644:	2b06      	cmp	r3, #6
 8007646:	d8cf      	bhi.n	80075e8 <USBD_StdDevReq+0x110>
 8007648:	a101      	add	r1, pc, #4	; (adr r1, 8007650 <USBD_StdDevReq+0x178>)
 800764a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007707 	.word	0x08007707
 8007654:	080076ed 	.word	0x080076ed
 8007658:	080076dd 	.word	0x080076dd
 800765c:	080075e9 	.word	0x080075e9
 8007660:	080075e9 	.word	0x080075e9
 8007664:	080076c9 	.word	0x080076c9
 8007668:	08007691 	.word	0x08007691
  if (req->wLength != 1U)
 800766c:	88ca      	ldrh	r2, [r1, #6]
 800766e:	2a01      	cmp	r2, #1
 8007670:	d1ba      	bne.n	80075e8 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state)
 8007672:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8007676:	2902      	cmp	r1, #2
 8007678:	b2cb      	uxtb	r3, r1
 800767a:	d875      	bhi.n	8007768 <USBD_StdDevReq+0x290>
 800767c:	2b00      	cmp	r3, #0
 800767e:	f43f af38 	beq.w	80074f2 <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 8007682:	4601      	mov	r1, r0
 8007684:	2300      	movs	r3, #0
 8007686:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800768a:	f000 fa05 	bl	8007a98 <USBD_CtlSendData>
        break;
 800768e:	e739      	b.n	8007504 <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007690:	7c03      	ldrb	r3, [r0, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1a8      	bne.n	80075e8 <USBD_StdDevReq+0x110>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007696:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800769a:	f10d 0006 	add.w	r0, sp, #6
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076a2:	2307      	movs	r3, #7
 80076a4:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 80076a6:	88f2      	ldrh	r2, [r6, #6]
 80076a8:	2a00      	cmp	r2, #0
 80076aa:	d093      	beq.n	80075d4 <USBD_StdDevReq+0xfc>
    if (len != 0U)
 80076ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d099      	beq.n	80075e8 <USBD_StdDevReq+0x110>
      len = MIN(len, req->wLength);
 80076b4:	429a      	cmp	r2, r3
 80076b6:	bf28      	it	cs
 80076b8:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076ba:	4601      	mov	r1, r0
 80076bc:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 80076be:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076c2:	f000 f9e9 	bl	8007a98 <USBD_CtlSendData>
 80076c6:	e71d      	b.n	8007504 <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c8:	7c03      	ldrb	r3, [r0, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d18c      	bne.n	80075e8 <USBD_StdDevReq+0x110>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80076d2:	f10d 0006 	add.w	r0, sp, #6
 80076d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d8:	4798      	blx	r3
  if (err != 0U)
 80076da:	e7e4      	b.n	80076a6 <USBD_StdDevReq+0x1ce>
      switch ((uint8_t)(req->wValue))
 80076dc:	b2d2      	uxtb	r2, r2
 80076de:	2a05      	cmp	r2, #5
 80076e0:	d882      	bhi.n	80075e8 <USBD_StdDevReq+0x110>
 80076e2:	e8df f002 	tbb	[pc, r2]
 80076e6:	353b      	.short	0x353b
 80076e8:	1823292f 	.word	0x1823292f
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ec:	7c03      	ldrb	r3, [r0, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f040 8094 	bne.w	800781c <USBD_StdDevReq+0x344>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80076f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80076f8:	f10d 0006 	add.w	r0, sp, #6
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fe:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007700:	2302      	movs	r3, #2
 8007702:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007704:	e7cf      	b.n	80076a6 <USBD_StdDevReq+0x1ce>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007706:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800770a:	7c00      	ldrb	r0, [r0, #16]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f10d 0106 	add.w	r1, sp, #6
 8007712:	4798      	blx	r3
  if (err != 0U)
 8007714:	e7c7      	b.n	80076a6 <USBD_StdDevReq+0x1ce>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007716:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	2b00      	cmp	r3, #0
 800771e:	f43f af63 	beq.w	80075e8 <USBD_StdDevReq+0x110>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007722:	7c28      	ldrb	r0, [r5, #16]
 8007724:	f10d 0106 	add.w	r1, sp, #6
 8007728:	4798      	blx	r3
  if (err != 0U)
 800772a:	e7bc      	b.n	80076a6 <USBD_StdDevReq+0x1ce>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800772c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f5      	bne.n	8007722 <USBD_StdDevReq+0x24a>
 8007736:	e757      	b.n	80075e8 <USBD_StdDevReq+0x110>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007738:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1ef      	bne.n	8007722 <USBD_StdDevReq+0x24a>
 8007742:	e751      	b.n	80075e8 <USBD_StdDevReq+0x110>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007744:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e9      	bne.n	8007722 <USBD_StdDevReq+0x24a>
 800774e:	e74b      	b.n	80075e8 <USBD_StdDevReq+0x110>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007750:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e3      	bne.n	8007722 <USBD_StdDevReq+0x24a>
 800775a:	e745      	b.n	80075e8 <USBD_StdDevReq+0x110>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800775c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1dd      	bne.n	8007722 <USBD_StdDevReq+0x24a>
 8007766:	e73f      	b.n	80075e8 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state)
 8007768:	2b03      	cmp	r3, #3
 800776a:	f47f aec2 	bne.w	80074f2 <USBD_StdDevReq+0x1a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800776e:	1d01      	adds	r1, r0, #4
 8007770:	f000 f992 	bl	8007a98 <USBD_CtlSendData>
        break;
 8007774:	e6c6      	b.n	8007504 <USBD_StdDevReq+0x2c>
      if (cfgidx != 0U)
 8007776:	2e00      	cmp	r6, #0
 8007778:	f43f af2c 	beq.w	80075d4 <USBD_StdDevReq+0xfc>
        pdev->dev_config = cfgidx;
 800777c:	2101      	movs	r1, #1
 800777e:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007780:	f7ff fd20 	bl	80071c4 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007784:	4604      	mov	r4, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	d054      	beq.n	8007834 <USBD_StdDevReq+0x35c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800778a:	2180      	movs	r1, #128	; 0x80
 800778c:	4628      	mov	r0, r5
 800778e:	f000 fc05 	bl	8007f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007792:	2100      	movs	r1, #0
 8007794:	4628      	mov	r0, r5
 8007796:	f000 fc01 	bl	8007f9c <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800779a:	f885 829c 	strb.w	r8, [r5, #668]	; 0x29c
 800779e:	e6b1      	b.n	8007504 <USBD_StdDevReq+0x2c>
      if (cfgidx == 0U)
 80077a0:	b386      	cbz	r6, 8007804 <USBD_StdDevReq+0x32c>
      else if (cfgidx != pdev->dev_config)
 80077a2:	6841      	ldr	r1, [r0, #4]
 80077a4:	2901      	cmp	r1, #1
 80077a6:	f43f af15 	beq.w	80075d4 <USBD_StdDevReq+0xfc>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077aa:	b2c9      	uxtb	r1, r1
 80077ac:	f7ff fd12 	bl	80071d4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80077b0:	7839      	ldrb	r1, [r7, #0]
 80077b2:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077b4:	4628      	mov	r0, r5
 80077b6:	f7ff fd05 	bl	80071c4 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80077ba:	4606      	mov	r6, r0
 80077bc:	2800      	cmp	r0, #0
 80077be:	f43f af09 	beq.w	80075d4 <USBD_StdDevReq+0xfc>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077c2:	2180      	movs	r1, #128	; 0x80
 80077c4:	4628      	mov	r0, r5
 80077c6:	f000 fbe9 	bl	8007f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077ca:	2100      	movs	r1, #0
 80077cc:	4628      	mov	r0, r5
 80077ce:	f000 fbe5 	bl	8007f9c <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077d2:	7929      	ldrb	r1, [r5, #4]
 80077d4:	4628      	mov	r0, r5
 80077d6:	f7ff fcfd 	bl	80071d4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077da:	2302      	movs	r3, #2
 80077dc:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80077e0:	4634      	mov	r4, r6
 80077e2:	e68f      	b.n	8007504 <USBD_StdDevReq+0x2c>
    pdev->dev_test_mode = req->wIndex >> 8;
 80077e4:	888b      	ldrh	r3, [r1, #4]
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80077ec:	f000 f980 	bl	8007af0 <USBD_CtlSendStatus>
 80077f0:	e688      	b.n	8007504 <USBD_StdDevReq+0x2c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077f2:	2180      	movs	r1, #128	; 0x80
 80077f4:	f000 fbd2 	bl	8007f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077f8:	2100      	movs	r1, #0
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 fbce 	bl	8007f9c <USBD_LL_StallEP>
    return USBD_FAIL;
 8007800:	2403      	movs	r4, #3
 8007802:	e67f      	b.n	8007504 <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007804:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007806:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007808:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800780c:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800780e:	f7ff fce1 	bl	80071d4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007812:	4628      	mov	r0, r5
 8007814:	f000 f96c 	bl	8007af0 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8007818:	4634      	mov	r4, r6
 800781a:	e673      	b.n	8007504 <USBD_StdDevReq+0x2c>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800781c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007820:	f10d 0006 	add.w	r0, sp, #6
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007828:	2302      	movs	r3, #2
 800782a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800782c:	e73b      	b.n	80076a6 <USBD_StdDevReq+0x1ce>
 800782e:	bf00      	nop
 8007830:	20000ba4 	.word	0x20000ba4
          (void)USBD_CtlSendStatus(pdev);
 8007834:	4628      	mov	r0, r5
 8007836:	f000 f95b 	bl	8007af0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800783a:	2303      	movs	r3, #3
 800783c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007840:	e660      	b.n	8007504 <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007842:	2301      	movs	r3, #1
 8007844:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007848:	e65c      	b.n	8007504 <USBD_StdDevReq+0x2c>
 800784a:	bf00      	nop

0800784c <USBD_StdItfReq>:
{
 800784c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800784e:	780b      	ldrb	r3, [r1, #0]
 8007850:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007854:	2a40      	cmp	r2, #64	; 0x40
{
 8007856:	460d      	mov	r5, r1
 8007858:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800785a:	d00b      	beq.n	8007874 <USBD_StdItfReq+0x28>
 800785c:	065b      	lsls	r3, r3, #25
 800785e:	d509      	bpl.n	8007874 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007860:	2180      	movs	r1, #128	; 0x80
 8007862:	f000 fb9b 	bl	8007f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007866:	2100      	movs	r1, #0
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fb97 	bl	8007f9c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2500      	movs	r5, #0
}
 8007870:	4628      	mov	r0, r5
 8007872:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8007874:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007878:	3b01      	subs	r3, #1
 800787a:	2b02      	cmp	r3, #2
 800787c:	d802      	bhi.n	8007884 <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800787e:	7929      	ldrb	r1, [r5, #4]
 8007880:	2901      	cmp	r1, #1
 8007882:	d902      	bls.n	800788a <USBD_StdItfReq+0x3e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007884:	2180      	movs	r1, #128	; 0x80
 8007886:	4620      	mov	r0, r4
 8007888:	e7eb      	b.n	8007862 <USBD_StdItfReq+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800788a:	4620      	mov	r0, r4
 800788c:	f7ff fe0a 	bl	80074a4 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007890:	b990      	cbnz	r0, 80078b8 <USBD_StdItfReq+0x6c>
              if (pdev->pClass[idx]->Setup != NULL)
 8007892:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	b173      	cbz	r3, 80078b8 <USBD_StdItfReq+0x6c>
                pdev->classId = idx;
 800789a:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800789e:	4629      	mov	r1, r5
 80078a0:	4620      	mov	r0, r4
 80078a2:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078a4:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078a6:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e1      	bne.n	8007870 <USBD_StdItfReq+0x24>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d1df      	bne.n	8007870 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 f91d 	bl	8007af0 <USBD_CtlSendStatus>
 80078b6:	e7db      	b.n	8007870 <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 80078b8:	2503      	movs	r5, #3
}
 80078ba:	4628      	mov	r0, r5
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	bf00      	nop

080078c0 <USBD_StdEPReq>:
{
 80078c0:	b530      	push	{r4, r5, lr}
 80078c2:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 80078c4:	888a      	ldrh	r2, [r1, #4]
 80078c6:	7823      	ldrb	r3, [r4, #0]
 80078c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078cc:	2b20      	cmp	r3, #32
{
 80078ce:	b083      	sub	sp, #12
 80078d0:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 80078d2:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078d4:	d01e      	beq.n	8007914 <USBD_StdEPReq+0x54>
 80078d6:	2b40      	cmp	r3, #64	; 0x40
 80078d8:	d01c      	beq.n	8007914 <USBD_StdEPReq+0x54>
 80078da:	b36b      	cbz	r3, 8007938 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80078dc:	2180      	movs	r1, #128	; 0x80
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 fb5c 	bl	8007f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80078e4:	2100      	movs	r1, #0
 80078e6:	4628      	mov	r0, r5
 80078e8:	f000 fb58 	bl	8007f9c <USBD_LL_StallEP>
}
 80078ec:	2000      	movs	r0, #0
 80078ee:	b003      	add	sp, #12
 80078f0:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 80078f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	d05d      	beq.n	80079b8 <USBD_StdEPReq+0xf8>
 80078fc:	2a03      	cmp	r2, #3
 80078fe:	d1ed      	bne.n	80078dc <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007900:	8863      	ldrh	r3, [r4, #2]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f2      	bne.n	80078ec <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007906:	064b      	lsls	r3, r1, #25
 8007908:	d17a      	bne.n	8007a00 <USBD_StdEPReq+0x140>
                (void)USBD_CtlSendStatus(pdev);
 800790a:	4628      	mov	r0, r5
 800790c:	9101      	str	r1, [sp, #4]
 800790e:	f000 f8ef 	bl	8007af0 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007912:	9901      	ldr	r1, [sp, #4]
 8007914:	4628      	mov	r0, r5
 8007916:	f7ff fdc7 	bl	80074a8 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800791a:	2800      	cmp	r0, #0
 800791c:	d1e6      	bne.n	80078ec <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 800791e:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 8007922:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0df      	beq.n	80078ec <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800792c:	4621      	mov	r1, r4
 800792e:	4628      	mov	r0, r5
}
 8007930:	b003      	add	sp, #12
 8007932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007936:	4718      	bx	r3
      switch (req->bRequest)
 8007938:	7863      	ldrb	r3, [r4, #1]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d0d9      	beq.n	80078f2 <USBD_StdEPReq+0x32>
 800793e:	2b03      	cmp	r3, #3
 8007940:	d029      	beq.n	8007996 <USBD_StdEPReq+0xd6>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1ca      	bne.n	80078dc <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 8007946:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800794a:	2b02      	cmp	r3, #2
 800794c:	b2d8      	uxtb	r0, r3
 800794e:	d03c      	beq.n	80079ca <USBD_StdEPReq+0x10a>
 8007950:	2803      	cmp	r0, #3
 8007952:	d1c3      	bne.n	80078dc <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007954:	f001 030f 	and.w	r3, r1, #15
 8007958:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800795c:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800795e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8007962:	d441      	bmi.n	80079e8 <USBD_StdEPReq+0x128>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007964:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0b7      	beq.n	80078dc <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800796c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8007970:	2414      	movs	r4, #20
 8007972:	fb04 5403 	mla	r4, r4, r3, r5
 8007976:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800797a:	b12b      	cbz	r3, 8007988 <USBD_StdEPReq+0xc8>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800797c:	4628      	mov	r0, r5
 800797e:	f000 fb29 	bl	8007fd4 <USBD_LL_IsStallEP>
 8007982:	1e03      	subs	r3, r0, #0
 8007984:	bf18      	it	ne
 8007986:	2301      	movne	r3, #1
                pep->status = 0x0000U;
 8007988:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800798a:	2202      	movs	r2, #2
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f882 	bl	8007a98 <USBD_CtlSendData>
              break;
 8007994:	e7aa      	b.n	80078ec <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8007996:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800799a:	2b02      	cmp	r3, #2
 800799c:	b2da      	uxtb	r2, r3
 800799e:	d00b      	beq.n	80079b8 <USBD_StdEPReq+0xf8>
 80079a0:	2a03      	cmp	r2, #3
 80079a2:	d19b      	bne.n	80078dc <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079a4:	8863      	ldrh	r3, [r4, #2]
 80079a6:	b91b      	cbnz	r3, 80079b0 <USBD_StdEPReq+0xf0>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079a8:	0648      	lsls	r0, r1, #25
 80079aa:	d001      	beq.n	80079b0 <USBD_StdEPReq+0xf0>
 80079ac:	88e3      	ldrh	r3, [r4, #6]
 80079ae:	b363      	cbz	r3, 8007a0a <USBD_StdEPReq+0x14a>
              (void)USBD_CtlSendStatus(pdev);
 80079b0:	4628      	mov	r0, r5
 80079b2:	f000 f89d 	bl	8007af0 <USBD_CtlSendStatus>
              break;
 80079b6:	e799      	b.n	80078ec <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079b8:	064a      	lsls	r2, r1, #25
 80079ba:	d08f      	beq.n	80078dc <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079bc:	f000 faee 	bl	8007f9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079c0:	2180      	movs	r1, #128	; 0x80
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 faea 	bl	8007f9c <USBD_LL_StallEP>
 80079c8:	e790      	b.n	80078ec <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ca:	0648      	lsls	r0, r1, #25
 80079cc:	d186      	bne.n	80078dc <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ce:	0611      	lsls	r1, r2, #24
 80079d0:	bf4c      	ite	mi
 80079d2:	f105 0114 	addmi.w	r1, r5, #20
 80079d6:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 80079da:	2300      	movs	r3, #0
 80079dc:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079de:	2202      	movs	r2, #2
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 f859 	bl	8007a98 <USBD_CtlSendData>
              break;
 80079e6:	e781      	b.n	80078ec <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f43f af76 	beq.w	80078dc <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80079f4:	1c5c      	adds	r4, r3, #1
 80079f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80079fa:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80079fe:	e7bc      	b.n	800797a <USBD_StdEPReq+0xba>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a00:	9101      	str	r1, [sp, #4]
 8007a02:	f000 fad9 	bl	8007fb8 <USBD_LL_ClearStallEP>
 8007a06:	9901      	ldr	r1, [sp, #4]
 8007a08:	e77f      	b.n	800790a <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 fac6 	bl	8007f9c <USBD_LL_StallEP>
 8007a10:	e7ce      	b.n	80079b0 <USBD_StdEPReq+0xf0>
 8007a12:	bf00      	nop

08007a14 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8007a14:	780b      	ldrb	r3, [r1, #0]
 8007a16:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a18:	784b      	ldrb	r3, [r1, #1]
 8007a1a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8007a1c:	884b      	ldrh	r3, [r1, #2]
 8007a1e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8007a20:	888b      	ldrh	r3, [r1, #4]
 8007a22:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8007a24:	88cb      	ldrh	r3, [r1, #6]
 8007a26:	80c3      	strh	r3, [r0, #6]
}
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <USBD_CtlError>:
{
 8007a2c:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a2e:	2180      	movs	r1, #128	; 0x80
{
 8007a30:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a32:	f000 fab3 	bl	8007f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a36:	4620      	mov	r0, r4
 8007a38:	2100      	movs	r1, #0
}
 8007a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a3e:	f000 baad 	b.w	8007f9c <USBD_LL_StallEP>
 8007a42:	bf00      	nop

08007a44 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8007a44:	b318      	cbz	r0, 8007a8e <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8007a46:	7803      	ldrb	r3, [r0, #0]
{
 8007a48:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8007a4a:	b30b      	cbz	r3, 8007a90 <USBD_GetString+0x4c>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8007a52:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 8007a56:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d1f8      	bne.n	8007a52 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a60:	3301      	adds	r3, #1
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	b2dc      	uxtb	r4, r3
 8007a66:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a68:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8007a6a:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a6c:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8007a6e:	7804      	ldrb	r4, [r0, #0]
 8007a70:	b15c      	cbz	r4, 8007a8a <USBD_GetString+0x46>
  idx++;
 8007a72:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8007a74:	2500      	movs	r5, #0
    idx++;
 8007a76:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8007a78:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8007a7a:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 8007a7c:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8007a7e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8007a82:	3302      	adds	r3, #2
 8007a84:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8007a86:	2c00      	cmp	r4, #0
 8007a88:	d1f5      	bne.n	8007a76 <USBD_GetString+0x32>
}
 8007a8a:	bc30      	pop	{r4, r5}
 8007a8c:	4770      	bx	lr
 8007a8e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8007a90:	2402      	movs	r4, #2
 8007a92:	4623      	mov	r3, r4
 8007a94:	e7e7      	b.n	8007a66 <USBD_GetString+0x22>
 8007a96:	bf00      	nop

08007a98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a98:	b508      	push	{r3, lr}
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a9e:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007aa0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007aa4:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	f000 fab5 	bl	8008018 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007aae:	2000      	movs	r0, #0
 8007ab0:	bd08      	pop	{r3, pc}
 8007ab2:	bf00      	nop

08007ab4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ab4:	b508      	push	{r3, lr}
 8007ab6:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ab8:	460a      	mov	r2, r1
 8007aba:	2100      	movs	r1, #0
 8007abc:	f000 faac 	bl	8008018 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	bd08      	pop	{r3, pc}

08007ac4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ac4:	b508      	push	{r3, lr}
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007aca:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007acc:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ad0:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	f000 faad 	bl	8008034 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007ada:	2000      	movs	r0, #0
 8007adc:	bd08      	pop	{r3, pc}
 8007ade:	bf00      	nop

08007ae0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ae0:	b508      	push	{r3, lr}
 8007ae2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ae4:	460a      	mov	r2, r1
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	f000 faa4 	bl	8008034 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007aec:	2000      	movs	r0, #0
 8007aee:	bd08      	pop	{r3, pc}

08007af0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007af0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007af2:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007af4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007af6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007afa:	461a      	mov	r2, r3
 8007afc:	4619      	mov	r1, r3
 8007afe:	f000 fa8b 	bl	8008018 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007b02:	2000      	movs	r0, #0
 8007b04:	bd08      	pop	{r3, pc}
 8007b06:	bf00      	nop

08007b08 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b08:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b0a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b0c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b0e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b12:	461a      	mov	r2, r3
 8007b14:	4619      	mov	r1, r3
 8007b16:	f000 fa8d 	bl	8008034 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	bd08      	pop	{r3, pc}
 8007b1e:	bf00      	nop

08007b20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b22:	4918      	ldr	r1, [pc, #96]	; (8007b84 <MX_USB_DEVICE_Init+0x64>)
 8007b24:	4818      	ldr	r0, [pc, #96]	; (8007b88 <MX_USB_DEVICE_Init+0x68>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	f7ff fb1a 	bl	8007160 <USBD_Init>
 8007b2c:	b970      	cbnz	r0, 8007b4c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b2e:	4917      	ldr	r1, [pc, #92]	; (8007b8c <MX_USB_DEVICE_Init+0x6c>)
 8007b30:	4815      	ldr	r0, [pc, #84]	; (8007b88 <MX_USB_DEVICE_Init+0x68>)
 8007b32:	f7ff fb29 	bl	8007188 <USBD_RegisterClass>
 8007b36:	b988      	cbnz	r0, 8007b5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b38:	4915      	ldr	r1, [pc, #84]	; (8007b90 <MX_USB_DEVICE_Init+0x70>)
 8007b3a:	4813      	ldr	r0, [pc, #76]	; (8007b88 <MX_USB_DEVICE_Init+0x68>)
 8007b3c:	f7ff face 	bl	80070dc <USBD_CDC_RegisterInterface>
 8007b40:	b9a0      	cbnz	r0, 8007b6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b42:	4811      	ldr	r0, [pc, #68]	; (8007b88 <MX_USB_DEVICE_Init+0x68>)
 8007b44:	f7ff fb3c 	bl	80071c0 <USBD_Start>
 8007b48:	b9b8      	cbnz	r0, 8007b7a <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b4a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007b4c:	f7f9 fc02 	bl	8001354 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b50:	490e      	ldr	r1, [pc, #56]	; (8007b8c <MX_USB_DEVICE_Init+0x6c>)
 8007b52:	480d      	ldr	r0, [pc, #52]	; (8007b88 <MX_USB_DEVICE_Init+0x68>)
 8007b54:	f7ff fb18 	bl	8007188 <USBD_RegisterClass>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d0ed      	beq.n	8007b38 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8007b5c:	f7f9 fbfa 	bl	8001354 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b60:	490b      	ldr	r1, [pc, #44]	; (8007b90 <MX_USB_DEVICE_Init+0x70>)
 8007b62:	4809      	ldr	r0, [pc, #36]	; (8007b88 <MX_USB_DEVICE_Init+0x68>)
 8007b64:	f7ff faba 	bl	80070dc <USBD_CDC_RegisterInterface>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d0ea      	beq.n	8007b42 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8007b6c:	f7f9 fbf2 	bl	8001354 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b70:	4805      	ldr	r0, [pc, #20]	; (8007b88 <MX_USB_DEVICE_Init+0x68>)
 8007b72:	f7ff fb25 	bl	80071c0 <USBD_Start>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d0e7      	beq.n	8007b4a <MX_USB_DEVICE_Init+0x2a>
}
 8007b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007b7e:	f7f9 bbe9 	b.w	8001354 <Error_Handler>
 8007b82:	bf00      	nop
 8007b84:	200000a8 	.word	0x200000a8
 8007b88:	20000ba8 	.word	0x20000ba8
 8007b8c:	2000000c 	.word	0x2000000c
 8007b90:	20000094 	.word	0x20000094

08007b94 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007b94:	2000      	movs	r0, #0
 8007b96:	4770      	bx	lr

08007b98 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007b98:	2000      	movs	r0, #0
 8007b9a:	4770      	bx	lr

08007b9c <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	4770      	bx	lr

08007ba0 <CDC_Receive_FS>:
{
 8007ba0:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ba2:	4c05      	ldr	r4, [pc, #20]	; (8007bb8 <CDC_Receive_FS+0x18>)
{
 8007ba4:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f7ff fab2 	bl	8007110 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007bac:	4620      	mov	r0, r4
 8007bae:	f7ff fabb 	bl	8007128 <USBD_CDC_ReceivePacket>
}
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000ba8 	.word	0x20000ba8

08007bbc <CDC_Init_FS>:
{
 8007bbc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007bbe:	4c06      	ldr	r4, [pc, #24]	; (8007bd8 <CDC_Init_FS+0x1c>)
 8007bc0:	4906      	ldr	r1, [pc, #24]	; (8007bdc <CDC_Init_FS+0x20>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f7ff fa95 	bl	80070f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007bca:	4905      	ldr	r1, [pc, #20]	; (8007be0 <CDC_Init_FS+0x24>)
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f7ff fa9f 	bl	8007110 <USBD_CDC_SetRxBuffer>
}
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	bd10      	pop	{r4, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000ba8 	.word	0x20000ba8
 8007bdc:	20001684 	.word	0x20001684
 8007be0:	20000e84 	.word	0x20000e84

08007be4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007be4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8007be6:	4801      	ldr	r0, [pc, #4]	; (8007bec <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8007be8:	800b      	strh	r3, [r1, #0]
}
 8007bea:	4770      	bx	lr
 8007bec:	200000c4 	.word	0x200000c4

08007bf0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bf0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8007bf2:	4801      	ldr	r0, [pc, #4]	; (8007bf8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8007bf4:	800b      	strh	r3, [r1, #0]
}
 8007bf6:	4770      	bx	lr
 8007bf8:	200000d8 	.word	0x200000d8

08007bfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bfc:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bfe:	4c04      	ldr	r4, [pc, #16]	; (8007c10 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007c00:	4804      	ldr	r0, [pc, #16]	; (8007c14 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 8007c02:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c04:	4621      	mov	r1, r4
 8007c06:	f7ff ff1d 	bl	8007a44 <USBD_GetString>
  return USBD_StrDesc;
}
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	bd10      	pop	{r4, pc}
 8007c0e:	bf00      	nop
 8007c10:	20001e84 	.word	0x20001e84
 8007c14:	0800bd5c 	.word	0x0800bd5c

08007c18 <USBD_FS_ProductStrDescriptor>:
{
 8007c18:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c1a:	4c04      	ldr	r4, [pc, #16]	; (8007c2c <USBD_FS_ProductStrDescriptor+0x14>)
 8007c1c:	4804      	ldr	r0, [pc, #16]	; (8007c30 <USBD_FS_ProductStrDescriptor+0x18>)
{
 8007c1e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c20:	4621      	mov	r1, r4
 8007c22:	f7ff ff0f 	bl	8007a44 <USBD_GetString>
}
 8007c26:	4620      	mov	r0, r4
 8007c28:	bd10      	pop	{r4, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20001e84 	.word	0x20001e84
 8007c30:	0800bd70 	.word	0x0800bd70

08007c34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c36:	4c04      	ldr	r4, [pc, #16]	; (8007c48 <USBD_FS_ConfigStrDescriptor+0x14>)
 8007c38:	4804      	ldr	r0, [pc, #16]	; (8007c4c <USBD_FS_ConfigStrDescriptor+0x18>)
{
 8007c3a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f7ff ff01 	bl	8007a44 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007c42:	4620      	mov	r0, r4
 8007c44:	bd10      	pop	{r4, pc}
 8007c46:	bf00      	nop
 8007c48:	20001e84 	.word	0x20001e84
 8007c4c:	0800bd88 	.word	0x0800bd88

08007c50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c50:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c52:	4c04      	ldr	r4, [pc, #16]	; (8007c64 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8007c54:	4804      	ldr	r0, [pc, #16]	; (8007c68 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 8007c56:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c58:	4621      	mov	r1, r4
 8007c5a:	f7ff fef3 	bl	8007a44 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007c5e:	4620      	mov	r0, r4
 8007c60:	bd10      	pop	{r4, pc}
 8007c62:	bf00      	nop
 8007c64:	20001e84 	.word	0x20001e84
 8007c68:	0800bd94 	.word	0x0800bd94

08007c6c <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c6c:	4a45      	ldr	r2, [pc, #276]	; (8007d84 <USBD_FS_SerialStrDescriptor+0x118>)
 8007c6e:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	; 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8007c72:	f8d2 0a18 	ldr.w	r0, [r2, #2584]	; 0xa18
  *length = USB_SIZ_STRING_SERIAL;
 8007c76:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 8007c7a:	181b      	adds	r3, r3, r0
  *length = USB_SIZ_STRING_SERIAL;
 8007c7c:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 8007c80:	d101      	bne.n	8007c86 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8007c82:	4841      	ldr	r0, [pc, #260]	; (8007d88 <USBD_FS_SerialStrDescriptor+0x11c>)
 8007c84:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c86:	f8d2 1a14 	ldr.w	r1, [r2, #2580]	; 0xa14

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c8a:	4a3f      	ldr	r2, [pc, #252]	; (8007d88 <USBD_FS_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 8007c8c:	0f18      	lsrs	r0, r3, #28
 8007c8e:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c92:	bf2c      	ite	cs
 8007c94:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c96:	3030      	addcc	r0, #48	; 0x30
 8007c98:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8007c9a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007c9e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ca0:	bf8c      	ite	hi
 8007ca2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ca4:	3030      	addls	r0, #48	; 0x30
 8007ca6:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8007ca8:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8007cac:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cae:	bf8c      	ite	hi
 8007cb0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cb2:	3030      	addls	r0, #48	; 0x30
 8007cb4:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 8007cb6:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8007cba:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cbc:	bf8c      	ite	hi
 8007cbe:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cc0:	3030      	addls	r0, #48	; 0x30
 8007cc2:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8007cc4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8007cc8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cca:	bf8c      	ite	hi
 8007ccc:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cce:	3030      	addls	r0, #48	; 0x30
 8007cd0:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 8007cd2:	f3c3 2003 	ubfx	r0, r3, #8, #4
 8007cd6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cd8:	bf8c      	ite	hi
 8007cda:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cdc:	3030      	addls	r0, #48	; 0x30
 8007cde:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 8007ce0:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8007ce4:	2809      	cmp	r0, #9
 8007ce6:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cea:	bf8c      	ite	hi
 8007cec:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cee:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 8007cf0:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cf2:	bf94      	ite	ls
 8007cf4:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cf6:	3337      	addhi	r3, #55	; 0x37
 8007cf8:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007cfa:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 8007cfc:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 8007d00:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 8007d02:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d06:	bf2c      	ite	cs
 8007d08:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d0a:	3330      	addcc	r3, #48	; 0x30
 8007d0c:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8007d0e:	f3c1 6303 	ubfx	r3, r1, #24, #4
 8007d12:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d14:	bf8c      	ite	hi
 8007d16:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d18:	3330      	addls	r3, #48	; 0x30
 8007d1a:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8007d1c:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8007d20:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8007d22:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d26:	bf8c      	ite	hi
 8007d28:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d2a:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8007d2c:	f882 c003 	strb.w	ip, [r2, #3]
 8007d30:	f04f 0c00 	mov.w	ip, #0
 8007d34:	f882 c005 	strb.w	ip, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d38:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8007d3a:	f04f 0c00 	mov.w	ip, #0
 8007d3e:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d40:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8007d42:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8007d46:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8007d48:	f882 c007 	strb.w	ip, [r2, #7]
 8007d4c:	73d0      	strb	r0, [r2, #15]
 8007d4e:	f04f 0c00 	mov.w	ip, #0
 8007d52:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d56:	bf94      	ite	ls
 8007d58:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d5a:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8007d5c:	f882 c009 	strb.w	ip, [r2, #9]
 8007d60:	74d0      	strb	r0, [r2, #19]
 8007d62:	f04f 0c00 	mov.w	ip, #0
 8007d66:	2000      	movs	r0, #0
 8007d68:	f882 c00b 	strb.w	ip, [r2, #11]
 8007d6c:	7550      	strb	r0, [r2, #21]
 8007d6e:	f04f 0c00 	mov.w	ip, #0
 8007d72:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d74:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	75d0      	strb	r0, [r2, #23]
 8007d7a:	f882 c00d 	strb.w	ip, [r2, #13]
}
 8007d7e:	4802      	ldr	r0, [pc, #8]	; (8007d88 <USBD_FS_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 8007d80:	7653      	strb	r3, [r2, #25]
}
 8007d82:	4770      	bx	lr
 8007d84:	1fff7000 	.word	0x1fff7000
 8007d88:	200000dc 	.word	0x200000dc

08007d8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d8c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d8e:	6803      	ldr	r3, [r0, #0]
{
 8007d90:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d92:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d98:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007d9c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007da0:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007da2:	d001      	beq.n	8007da8 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007da4:	b009      	add	sp, #36	; 0x24
 8007da6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007da8:	4d17      	ldr	r5, [pc, #92]	; (8007e08 <HAL_PCD_MspInit+0x7c>)
 8007daa:	9400      	str	r4, [sp, #0]
 8007dac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dae:	4817      	ldr	r0, [pc, #92]	; (8007e0c <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007db0:	f043 0301 	orr.w	r3, r3, #1
 8007db4:	632b      	str	r3, [r5, #48]	; 0x30
 8007db6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007dbe:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dc8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dca:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dcc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dce:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dd0:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dd2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dd4:	f7f9 ff4c 	bl	8001c70 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dd8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dde:	636b      	str	r3, [r5, #52]	; 0x34
 8007de0:	9401      	str	r4, [sp, #4]
 8007de2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007de8:	646b      	str	r3, [r5, #68]	; 0x44
 8007dea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007df0:	4622      	mov	r2, r4
 8007df2:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007df4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007df6:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007df8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dfa:	f7f9 fcdf 	bl	80017bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007dfe:	2043      	movs	r0, #67	; 0x43
 8007e00:	f7f9 fd1a 	bl	8001838 <HAL_NVIC_EnableIRQ>
}
 8007e04:	b009      	add	sp, #36	; 0x24
 8007e06:	bd30      	pop	{r4, r5, pc}
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	40020000 	.word	0x40020000

08007e10 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e10:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 8007e14:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007e18:	f7ff b9e6 	b.w	80071e8 <USBD_LL_SetupStage>

08007e1c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e1c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8007e20:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007e24:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007e28:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 8007e2c:	f7ff ba0c 	b.w	8007248 <USBD_LL_DataOutStage>

08007e30 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e30:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8007e34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007e38:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e3e:	f7ff ba3d 	b.w	80072bc <USBD_LL_DataInStage>
 8007e42:	bf00      	nop

08007e44 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e44:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007e48:	f7ff badc 	b.w	8007404 <USBD_LL_SOF>

08007e4c <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e4c:	68c3      	ldr	r3, [r0, #12]
 8007e4e:	2b02      	cmp	r3, #2
{
 8007e50:	b510      	push	{r4, lr}
 8007e52:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e54:	d001      	beq.n	8007e5a <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007e56:	f7f9 fa7d 	bl	8001354 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e5a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 8007e5e:	2101      	movs	r1, #1
 8007e60:	f7ff fab4 	bl	80073cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e64:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 8007e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e6c:	f7ff ba80 	b.w	8007370 <USBD_LL_Reset>

08007e70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e70:	b510      	push	{r4, lr}
 8007e72:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e74:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007e78:	f7ff faac 	bl	80073d4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e7c:	6822      	ldr	r2, [r4, #0]
 8007e7e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e8a:	6a23      	ldr	r3, [r4, #32]
 8007e8c:	b123      	cbz	r3, 8007e98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e8e:	4a03      	ldr	r2, [pc, #12]	; (8007e9c <HAL_PCD_SuspendCallback+0x2c>)
 8007e90:	6913      	ldr	r3, [r2, #16]
 8007e92:	f043 0306 	orr.w	r3, r3, #6
 8007e96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	bf00      	nop
 8007e9c:	e000ed00 	.word	0xe000ed00

08007ea0 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ea0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007ea4:	f7ff baa2 	b.w	80073ec <USBD_LL_Resume>

08007ea8 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ea8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007eac:	f7ff bad0 	b.w	8007450 <USBD_LL_IsoOUTIncomplete>

08007eb0 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007eb0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007eb4:	f7ff bab6 	b.w	8007424 <USBD_LL_IsoINIncomplete>

08007eb8 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007eb8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007ebc:	f7ff bade 	b.w	800747c <USBD_LL_DevConnected>

08007ec0 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ec0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8007ec4:	f7ff badc 	b.w	8007480 <USBD_LL_DevDisconnected>

08007ec8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ec8:	7802      	ldrb	r2, [r0, #0]
 8007eca:	b10a      	cbz	r2, 8007ed0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8007ecc:	2000      	movs	r0, #0
 8007ece:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ed0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8007f30 <USBD_LL_Init+0x68>
  hpcd_USB_OTG_FS.pData = pdev;
 8007ed4:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <USBD_LL_Init+0x78>)
{
 8007ed6:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ed8:	ed83 7b06 	vstr	d7, [r3, #24]
 8007edc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007f38 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ee0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.pData = pdev;
 8007ee4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ee8:	2404      	movs	r4, #4
  pdev->pData = &hpcd_USB_OTG_FS;
 8007eea:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007eee:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ef0:	ed83 7b08 	vstr	d7, [r3, #32]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ef4:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ef6:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ef8:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007efc:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007efe:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f00:	611a      	str	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f02:	f7fa fed9 	bl	8002cb8 <HAL_PCD_Init>
 8007f06:	b978      	cbnz	r0, 8007f28 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f08:	2180      	movs	r1, #128	; 0x80
 8007f0a:	480d      	ldr	r0, [pc, #52]	; (8007f40 <USBD_LL_Init+0x78>)
 8007f0c:	f7fb fe88 	bl	8003c20 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f10:	2240      	movs	r2, #64	; 0x40
 8007f12:	2100      	movs	r1, #0
 8007f14:	480a      	ldr	r0, [pc, #40]	; (8007f40 <USBD_LL_Init+0x78>)
 8007f16:	f7fb fe5d 	bl	8003bd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f1a:	2280      	movs	r2, #128	; 0x80
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4808      	ldr	r0, [pc, #32]	; (8007f40 <USBD_LL_Init+0x78>)
 8007f20:	f7fb fe58 	bl	8003bd4 <HAL_PCDEx_SetTxFiFo>
}
 8007f24:	2000      	movs	r0, #0
 8007f26:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8007f28:	f7f9 fa14 	bl	8001354 <Error_Handler>
 8007f2c:	e7ec      	b.n	8007f08 <USBD_LL_Init+0x40>
 8007f2e:	bf00      	nop
 8007f30:	00000002 	.word	0x00000002
	...
 8007f40:	20002088 	.word	0x20002088

08007f44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f46:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007f4a:	f7fa ff43 	bl	8002dd4 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007f4e:	2803      	cmp	r0, #3
 8007f50:	bf96      	itet	ls
 8007f52:	4b02      	ldrls	r3, [pc, #8]	; (8007f5c <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8007f54:	2003      	movhi	r0, #3
 8007f56:	5c18      	ldrbls	r0, [r3, r0]
}
 8007f58:	bd08      	pop	{r3, pc}
 8007f5a:	bf00      	nop
 8007f5c:	0800bda4 	.word	0x0800bda4

08007f60 <USBD_LL_OpenEP>:
{
 8007f60:	4694      	mov	ip, r2
 8007f62:	b508      	push	{r3, lr}
 8007f64:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f66:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007f6a:	4663      	mov	r3, ip
 8007f6c:	f7fb fcf0 	bl	8003950 <HAL_PCD_EP_Open>
  switch (hal_status)
 8007f70:	2803      	cmp	r0, #3
 8007f72:	bf96      	itet	ls
 8007f74:	4b01      	ldrls	r3, [pc, #4]	; (8007f7c <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f76:	2003      	movhi	r0, #3
 8007f78:	5c18      	ldrbls	r0, [r3, r0]
}
 8007f7a:	bd08      	pop	{r3, pc}
 8007f7c:	0800bda4 	.word	0x0800bda4

08007f80 <USBD_LL_CloseEP>:
{
 8007f80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f82:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007f86:	f7fb fd21 	bl	80039cc <HAL_PCD_EP_Close>
  switch (hal_status)
 8007f8a:	2803      	cmp	r0, #3
 8007f8c:	bf96      	itet	ls
 8007f8e:	4b02      	ldrls	r3, [pc, #8]	; (8007f98 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f90:	2003      	movhi	r0, #3
 8007f92:	5c18      	ldrbls	r0, [r3, r0]
}
 8007f94:	bd08      	pop	{r3, pc}
 8007f96:	bf00      	nop
 8007f98:	0800bda4 	.word	0x0800bda4

08007f9c <USBD_LL_StallEP>:
{
 8007f9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f9e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007fa2:	f7fb fd9b 	bl	8003adc <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8007fa6:	2803      	cmp	r0, #3
 8007fa8:	bf96      	itet	ls
 8007faa:	4b02      	ldrls	r3, [pc, #8]	; (8007fb4 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fac:	2003      	movhi	r0, #3
 8007fae:	5c18      	ldrbls	r0, [r3, r0]
}
 8007fb0:	bd08      	pop	{r3, pc}
 8007fb2:	bf00      	nop
 8007fb4:	0800bda4 	.word	0x0800bda4

08007fb8 <USBD_LL_ClearStallEP>:
{
 8007fb8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fba:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007fbe:	f7fb fdd1 	bl	8003b64 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8007fc2:	2803      	cmp	r0, #3
 8007fc4:	bf96      	itet	ls
 8007fc6:	4b02      	ldrls	r3, [pc, #8]	; (8007fd0 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fc8:	2003      	movhi	r0, #3
 8007fca:	5c18      	ldrbls	r0, [r3, r0]
}
 8007fcc:	bd08      	pop	{r3, pc}
 8007fce:	bf00      	nop
 8007fd0:	0800bda4 	.word	0x0800bda4

08007fd4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8007fd4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fd6:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8007fda:	d406      	bmi.n	8007fea <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fdc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8007fe0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007fe4:	f893 027e 	ldrb.w	r0, [r3, #638]	; 0x27e
}
 8007fe8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007fee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8007ff2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007ff6:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8007ffa:	4770      	bx	lr

08007ffc <USBD_LL_SetUSBAddress>:
{
 8007ffc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ffe:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8008002:	f7fb fc91 	bl	8003928 <HAL_PCD_SetAddress>
  switch (hal_status)
 8008006:	2803      	cmp	r0, #3
 8008008:	bf96      	itet	ls
 800800a:	4b02      	ldrls	r3, [pc, #8]	; (8008014 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800800c:	2003      	movhi	r0, #3
 800800e:	5c18      	ldrbls	r0, [r3, r0]
}
 8008010:	bd08      	pop	{r3, pc}
 8008012:	bf00      	nop
 8008014:	0800bda4 	.word	0x0800bda4

08008018 <USBD_LL_Transmit>:
{
 8008018:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800801a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800801e:	f7fb fd35 	bl	8003a8c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8008022:	2803      	cmp	r0, #3
 8008024:	bf96      	itet	ls
 8008026:	4b02      	ldrls	r3, [pc, #8]	; (8008030 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008028:	2003      	movhi	r0, #3
 800802a:	5c18      	ldrbls	r0, [r3, r0]
}
 800802c:	bd08      	pop	{r3, pc}
 800802e:	bf00      	nop
 8008030:	0800bda4 	.word	0x0800bda4

08008034 <USBD_LL_PrepareReceive>:
{
 8008034:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008036:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800803a:	f7fb fcf5 	bl	8003a28 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800803e:	2803      	cmp	r0, #3
 8008040:	bf96      	itet	ls
 8008042:	4b02      	ldrls	r3, [pc, #8]	; (800804c <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008044:	2003      	movhi	r0, #3
 8008046:	5c18      	ldrbls	r0, [r3, r0]
}
 8008048:	bd08      	pop	{r3, pc}
 800804a:	bf00      	nop
 800804c:	0800bda4 	.word	0x0800bda4

08008050 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008050:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8008054:	f7fb bd10 	b.w	8003a78 <HAL_PCD_EP_GetRxCount>

08008058 <USBD_static_malloc>:
}
 8008058:	4800      	ldr	r0, [pc, #0]	; (800805c <USBD_static_malloc+0x4>)
 800805a:	4770      	bx	lr
 800805c:	20002594 	.word	0x20002594

08008060 <USBD_static_free>:
}
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop

08008064 <__cvt>:
 8008064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	ec55 4b10 	vmov	r4, r5, d0
 800806c:	2d00      	cmp	r5, #0
 800806e:	460e      	mov	r6, r1
 8008070:	4619      	mov	r1, r3
 8008072:	462b      	mov	r3, r5
 8008074:	bfbb      	ittet	lt
 8008076:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800807a:	461d      	movlt	r5, r3
 800807c:	2300      	movge	r3, #0
 800807e:	232d      	movlt	r3, #45	; 0x2d
 8008080:	700b      	strb	r3, [r1, #0]
 8008082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008084:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008088:	4691      	mov	r9, r2
 800808a:	f023 0820 	bic.w	r8, r3, #32
 800808e:	bfbc      	itt	lt
 8008090:	4622      	movlt	r2, r4
 8008092:	4614      	movlt	r4, r2
 8008094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008098:	d005      	beq.n	80080a6 <__cvt+0x42>
 800809a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800809e:	d100      	bne.n	80080a2 <__cvt+0x3e>
 80080a0:	3601      	adds	r6, #1
 80080a2:	2102      	movs	r1, #2
 80080a4:	e000      	b.n	80080a8 <__cvt+0x44>
 80080a6:	2103      	movs	r1, #3
 80080a8:	ab03      	add	r3, sp, #12
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	ab02      	add	r3, sp, #8
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	ec45 4b10 	vmov	d0, r4, r5
 80080b4:	4653      	mov	r3, sl
 80080b6:	4632      	mov	r2, r6
 80080b8:	f000 ff2a 	bl	8008f10 <_dtoa_r>
 80080bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080c0:	4607      	mov	r7, r0
 80080c2:	d102      	bne.n	80080ca <__cvt+0x66>
 80080c4:	f019 0f01 	tst.w	r9, #1
 80080c8:	d022      	beq.n	8008110 <__cvt+0xac>
 80080ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080ce:	eb07 0906 	add.w	r9, r7, r6
 80080d2:	d110      	bne.n	80080f6 <__cvt+0x92>
 80080d4:	783b      	ldrb	r3, [r7, #0]
 80080d6:	2b30      	cmp	r3, #48	; 0x30
 80080d8:	d10a      	bne.n	80080f0 <__cvt+0x8c>
 80080da:	2200      	movs	r2, #0
 80080dc:	2300      	movs	r3, #0
 80080de:	4620      	mov	r0, r4
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7f8 fcf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80080e6:	b918      	cbnz	r0, 80080f0 <__cvt+0x8c>
 80080e8:	f1c6 0601 	rsb	r6, r6, #1
 80080ec:	f8ca 6000 	str.w	r6, [sl]
 80080f0:	f8da 3000 	ldr.w	r3, [sl]
 80080f4:	4499      	add	r9, r3
 80080f6:	2200      	movs	r2, #0
 80080f8:	2300      	movs	r3, #0
 80080fa:	4620      	mov	r0, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7f8 fceb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008102:	b108      	cbz	r0, 8008108 <__cvt+0xa4>
 8008104:	f8cd 900c 	str.w	r9, [sp, #12]
 8008108:	2230      	movs	r2, #48	; 0x30
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	454b      	cmp	r3, r9
 800810e:	d307      	bcc.n	8008120 <__cvt+0xbc>
 8008110:	9b03      	ldr	r3, [sp, #12]
 8008112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008114:	1bdb      	subs	r3, r3, r7
 8008116:	4638      	mov	r0, r7
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	b004      	add	sp, #16
 800811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008120:	1c59      	adds	r1, r3, #1
 8008122:	9103      	str	r1, [sp, #12]
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	e7f0      	b.n	800810a <__cvt+0xa6>

08008128 <__exponent>:
 8008128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800812a:	4603      	mov	r3, r0
 800812c:	2900      	cmp	r1, #0
 800812e:	bfb8      	it	lt
 8008130:	4249      	neglt	r1, r1
 8008132:	f803 2b02 	strb.w	r2, [r3], #2
 8008136:	bfb4      	ite	lt
 8008138:	222d      	movlt	r2, #45	; 0x2d
 800813a:	222b      	movge	r2, #43	; 0x2b
 800813c:	2909      	cmp	r1, #9
 800813e:	7042      	strb	r2, [r0, #1]
 8008140:	dd2a      	ble.n	8008198 <__exponent+0x70>
 8008142:	f10d 0207 	add.w	r2, sp, #7
 8008146:	4617      	mov	r7, r2
 8008148:	260a      	movs	r6, #10
 800814a:	4694      	mov	ip, r2
 800814c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008150:	fb06 1415 	mls	r4, r6, r5, r1
 8008154:	3430      	adds	r4, #48	; 0x30
 8008156:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800815a:	460c      	mov	r4, r1
 800815c:	2c63      	cmp	r4, #99	; 0x63
 800815e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008162:	4629      	mov	r1, r5
 8008164:	dcf1      	bgt.n	800814a <__exponent+0x22>
 8008166:	3130      	adds	r1, #48	; 0x30
 8008168:	f1ac 0402 	sub.w	r4, ip, #2
 800816c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008170:	1c41      	adds	r1, r0, #1
 8008172:	4622      	mov	r2, r4
 8008174:	42ba      	cmp	r2, r7
 8008176:	d30a      	bcc.n	800818e <__exponent+0x66>
 8008178:	f10d 0209 	add.w	r2, sp, #9
 800817c:	eba2 020c 	sub.w	r2, r2, ip
 8008180:	42bc      	cmp	r4, r7
 8008182:	bf88      	it	hi
 8008184:	2200      	movhi	r2, #0
 8008186:	4413      	add	r3, r2
 8008188:	1a18      	subs	r0, r3, r0
 800818a:	b003      	add	sp, #12
 800818c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008192:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008196:	e7ed      	b.n	8008174 <__exponent+0x4c>
 8008198:	2330      	movs	r3, #48	; 0x30
 800819a:	3130      	adds	r1, #48	; 0x30
 800819c:	7083      	strb	r3, [r0, #2]
 800819e:	70c1      	strb	r1, [r0, #3]
 80081a0:	1d03      	adds	r3, r0, #4
 80081a2:	e7f1      	b.n	8008188 <__exponent+0x60>

080081a4 <_printf_float>:
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	ed2d 8b02 	vpush	{d8}
 80081ac:	b08d      	sub	sp, #52	; 0x34
 80081ae:	460c      	mov	r4, r1
 80081b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081b4:	4616      	mov	r6, r2
 80081b6:	461f      	mov	r7, r3
 80081b8:	4605      	mov	r5, r0
 80081ba:	f000 fd99 	bl	8008cf0 <_localeconv_r>
 80081be:	f8d0 a000 	ldr.w	sl, [r0]
 80081c2:	4650      	mov	r0, sl
 80081c4:	f7f8 f85c 	bl	8000280 <strlen>
 80081c8:	2300      	movs	r3, #0
 80081ca:	930a      	str	r3, [sp, #40]	; 0x28
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	9305      	str	r3, [sp, #20]
 80081d0:	f8d8 3000 	ldr.w	r3, [r8]
 80081d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081d8:	3307      	adds	r3, #7
 80081da:	f023 0307 	bic.w	r3, r3, #7
 80081de:	f103 0208 	add.w	r2, r3, #8
 80081e2:	f8c8 2000 	str.w	r2, [r8]
 80081e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081ee:	9307      	str	r3, [sp, #28]
 80081f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80081f4:	ee08 0a10 	vmov	s16, r0
 80081f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80081fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008200:	4b9e      	ldr	r3, [pc, #632]	; (800847c <_printf_float+0x2d8>)
 8008202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008206:	f7f8 fc99 	bl	8000b3c <__aeabi_dcmpun>
 800820a:	bb88      	cbnz	r0, 8008270 <_printf_float+0xcc>
 800820c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008210:	4b9a      	ldr	r3, [pc, #616]	; (800847c <_printf_float+0x2d8>)
 8008212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008216:	f7f8 fc73 	bl	8000b00 <__aeabi_dcmple>
 800821a:	bb48      	cbnz	r0, 8008270 <_printf_float+0xcc>
 800821c:	2200      	movs	r2, #0
 800821e:	2300      	movs	r3, #0
 8008220:	4640      	mov	r0, r8
 8008222:	4649      	mov	r1, r9
 8008224:	f7f8 fc62 	bl	8000aec <__aeabi_dcmplt>
 8008228:	b110      	cbz	r0, 8008230 <_printf_float+0x8c>
 800822a:	232d      	movs	r3, #45	; 0x2d
 800822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008230:	4a93      	ldr	r2, [pc, #588]	; (8008480 <_printf_float+0x2dc>)
 8008232:	4b94      	ldr	r3, [pc, #592]	; (8008484 <_printf_float+0x2e0>)
 8008234:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008238:	bf94      	ite	ls
 800823a:	4690      	movls	r8, r2
 800823c:	4698      	movhi	r8, r3
 800823e:	2303      	movs	r3, #3
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	9b05      	ldr	r3, [sp, #20]
 8008244:	f023 0304 	bic.w	r3, r3, #4
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	f04f 0900 	mov.w	r9, #0
 800824e:	9700      	str	r7, [sp, #0]
 8008250:	4633      	mov	r3, r6
 8008252:	aa0b      	add	r2, sp, #44	; 0x2c
 8008254:	4621      	mov	r1, r4
 8008256:	4628      	mov	r0, r5
 8008258:	f000 f9da 	bl	8008610 <_printf_common>
 800825c:	3001      	adds	r0, #1
 800825e:	f040 8090 	bne.w	8008382 <_printf_float+0x1de>
 8008262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008266:	b00d      	add	sp, #52	; 0x34
 8008268:	ecbd 8b02 	vpop	{d8}
 800826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f8 fc60 	bl	8000b3c <__aeabi_dcmpun>
 800827c:	b140      	cbz	r0, 8008290 <_printf_float+0xec>
 800827e:	464b      	mov	r3, r9
 8008280:	2b00      	cmp	r3, #0
 8008282:	bfbc      	itt	lt
 8008284:	232d      	movlt	r3, #45	; 0x2d
 8008286:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800828a:	4a7f      	ldr	r2, [pc, #508]	; (8008488 <_printf_float+0x2e4>)
 800828c:	4b7f      	ldr	r3, [pc, #508]	; (800848c <_printf_float+0x2e8>)
 800828e:	e7d1      	b.n	8008234 <_printf_float+0x90>
 8008290:	6863      	ldr	r3, [r4, #4]
 8008292:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008296:	9206      	str	r2, [sp, #24]
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	d13f      	bne.n	800831c <_printf_float+0x178>
 800829c:	2306      	movs	r3, #6
 800829e:	6063      	str	r3, [r4, #4]
 80082a0:	9b05      	ldr	r3, [sp, #20]
 80082a2:	6861      	ldr	r1, [r4, #4]
 80082a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082a8:	2300      	movs	r3, #0
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	ab0a      	add	r3, sp, #40	; 0x28
 80082ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082b2:	ab09      	add	r3, sp, #36	; 0x24
 80082b4:	ec49 8b10 	vmov	d0, r8, r9
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	6022      	str	r2, [r4, #0]
 80082bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082c0:	4628      	mov	r0, r5
 80082c2:	f7ff fecf 	bl	8008064 <__cvt>
 80082c6:	9b06      	ldr	r3, [sp, #24]
 80082c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ca:	2b47      	cmp	r3, #71	; 0x47
 80082cc:	4680      	mov	r8, r0
 80082ce:	d108      	bne.n	80082e2 <_printf_float+0x13e>
 80082d0:	1cc8      	adds	r0, r1, #3
 80082d2:	db02      	blt.n	80082da <_printf_float+0x136>
 80082d4:	6863      	ldr	r3, [r4, #4]
 80082d6:	4299      	cmp	r1, r3
 80082d8:	dd41      	ble.n	800835e <_printf_float+0x1ba>
 80082da:	f1ab 0302 	sub.w	r3, fp, #2
 80082de:	fa5f fb83 	uxtb.w	fp, r3
 80082e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082e6:	d820      	bhi.n	800832a <_printf_float+0x186>
 80082e8:	3901      	subs	r1, #1
 80082ea:	465a      	mov	r2, fp
 80082ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082f0:	9109      	str	r1, [sp, #36]	; 0x24
 80082f2:	f7ff ff19 	bl	8008128 <__exponent>
 80082f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082f8:	1813      	adds	r3, r2, r0
 80082fa:	2a01      	cmp	r2, #1
 80082fc:	4681      	mov	r9, r0
 80082fe:	6123      	str	r3, [r4, #16]
 8008300:	dc02      	bgt.n	8008308 <_printf_float+0x164>
 8008302:	6822      	ldr	r2, [r4, #0]
 8008304:	07d2      	lsls	r2, r2, #31
 8008306:	d501      	bpl.n	800830c <_printf_float+0x168>
 8008308:	3301      	adds	r3, #1
 800830a:	6123      	str	r3, [r4, #16]
 800830c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008310:	2b00      	cmp	r3, #0
 8008312:	d09c      	beq.n	800824e <_printf_float+0xaa>
 8008314:	232d      	movs	r3, #45	; 0x2d
 8008316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800831a:	e798      	b.n	800824e <_printf_float+0xaa>
 800831c:	9a06      	ldr	r2, [sp, #24]
 800831e:	2a47      	cmp	r2, #71	; 0x47
 8008320:	d1be      	bne.n	80082a0 <_printf_float+0xfc>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1bc      	bne.n	80082a0 <_printf_float+0xfc>
 8008326:	2301      	movs	r3, #1
 8008328:	e7b9      	b.n	800829e <_printf_float+0xfa>
 800832a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800832e:	d118      	bne.n	8008362 <_printf_float+0x1be>
 8008330:	2900      	cmp	r1, #0
 8008332:	6863      	ldr	r3, [r4, #4]
 8008334:	dd0b      	ble.n	800834e <_printf_float+0x1aa>
 8008336:	6121      	str	r1, [r4, #16]
 8008338:	b913      	cbnz	r3, 8008340 <_printf_float+0x19c>
 800833a:	6822      	ldr	r2, [r4, #0]
 800833c:	07d0      	lsls	r0, r2, #31
 800833e:	d502      	bpl.n	8008346 <_printf_float+0x1a2>
 8008340:	3301      	adds	r3, #1
 8008342:	440b      	add	r3, r1
 8008344:	6123      	str	r3, [r4, #16]
 8008346:	65a1      	str	r1, [r4, #88]	; 0x58
 8008348:	f04f 0900 	mov.w	r9, #0
 800834c:	e7de      	b.n	800830c <_printf_float+0x168>
 800834e:	b913      	cbnz	r3, 8008356 <_printf_float+0x1b2>
 8008350:	6822      	ldr	r2, [r4, #0]
 8008352:	07d2      	lsls	r2, r2, #31
 8008354:	d501      	bpl.n	800835a <_printf_float+0x1b6>
 8008356:	3302      	adds	r3, #2
 8008358:	e7f4      	b.n	8008344 <_printf_float+0x1a0>
 800835a:	2301      	movs	r3, #1
 800835c:	e7f2      	b.n	8008344 <_printf_float+0x1a0>
 800835e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008364:	4299      	cmp	r1, r3
 8008366:	db05      	blt.n	8008374 <_printf_float+0x1d0>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	6121      	str	r1, [r4, #16]
 800836c:	07d8      	lsls	r0, r3, #31
 800836e:	d5ea      	bpl.n	8008346 <_printf_float+0x1a2>
 8008370:	1c4b      	adds	r3, r1, #1
 8008372:	e7e7      	b.n	8008344 <_printf_float+0x1a0>
 8008374:	2900      	cmp	r1, #0
 8008376:	bfd4      	ite	le
 8008378:	f1c1 0202 	rsble	r2, r1, #2
 800837c:	2201      	movgt	r2, #1
 800837e:	4413      	add	r3, r2
 8008380:	e7e0      	b.n	8008344 <_printf_float+0x1a0>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	055a      	lsls	r2, r3, #21
 8008386:	d407      	bmi.n	8008398 <_printf_float+0x1f4>
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	4642      	mov	r2, r8
 800838c:	4631      	mov	r1, r6
 800838e:	4628      	mov	r0, r5
 8008390:	47b8      	blx	r7
 8008392:	3001      	adds	r0, #1
 8008394:	d12c      	bne.n	80083f0 <_printf_float+0x24c>
 8008396:	e764      	b.n	8008262 <_printf_float+0xbe>
 8008398:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800839c:	f240 80e0 	bls.w	8008560 <_printf_float+0x3bc>
 80083a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083a4:	2200      	movs	r2, #0
 80083a6:	2300      	movs	r3, #0
 80083a8:	f7f8 fb96 	bl	8000ad8 <__aeabi_dcmpeq>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d034      	beq.n	800841a <_printf_float+0x276>
 80083b0:	4a37      	ldr	r2, [pc, #220]	; (8008490 <_printf_float+0x2ec>)
 80083b2:	2301      	movs	r3, #1
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	f43f af51 	beq.w	8008262 <_printf_float+0xbe>
 80083c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083c4:	429a      	cmp	r2, r3
 80083c6:	db02      	blt.n	80083ce <_printf_float+0x22a>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	07d8      	lsls	r0, r3, #31
 80083cc:	d510      	bpl.n	80083f0 <_printf_float+0x24c>
 80083ce:	ee18 3a10 	vmov	r3, s16
 80083d2:	4652      	mov	r2, sl
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b8      	blx	r7
 80083da:	3001      	adds	r0, #1
 80083dc:	f43f af41 	beq.w	8008262 <_printf_float+0xbe>
 80083e0:	f04f 0800 	mov.w	r8, #0
 80083e4:	f104 091a 	add.w	r9, r4, #26
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	3b01      	subs	r3, #1
 80083ec:	4543      	cmp	r3, r8
 80083ee:	dc09      	bgt.n	8008404 <_printf_float+0x260>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	079b      	lsls	r3, r3, #30
 80083f4:	f100 8107 	bmi.w	8008606 <_printf_float+0x462>
 80083f8:	68e0      	ldr	r0, [r4, #12]
 80083fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083fc:	4298      	cmp	r0, r3
 80083fe:	bfb8      	it	lt
 8008400:	4618      	movlt	r0, r3
 8008402:	e730      	b.n	8008266 <_printf_float+0xc2>
 8008404:	2301      	movs	r3, #1
 8008406:	464a      	mov	r2, r9
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af27 	beq.w	8008262 <_printf_float+0xbe>
 8008414:	f108 0801 	add.w	r8, r8, #1
 8008418:	e7e6      	b.n	80083e8 <_printf_float+0x244>
 800841a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	dc39      	bgt.n	8008494 <_printf_float+0x2f0>
 8008420:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <_printf_float+0x2ec>)
 8008422:	2301      	movs	r3, #1
 8008424:	4631      	mov	r1, r6
 8008426:	4628      	mov	r0, r5
 8008428:	47b8      	blx	r7
 800842a:	3001      	adds	r0, #1
 800842c:	f43f af19 	beq.w	8008262 <_printf_float+0xbe>
 8008430:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008434:	4313      	orrs	r3, r2
 8008436:	d102      	bne.n	800843e <_printf_float+0x29a>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	07d9      	lsls	r1, r3, #31
 800843c:	d5d8      	bpl.n	80083f0 <_printf_float+0x24c>
 800843e:	ee18 3a10 	vmov	r3, s16
 8008442:	4652      	mov	r2, sl
 8008444:	4631      	mov	r1, r6
 8008446:	4628      	mov	r0, r5
 8008448:	47b8      	blx	r7
 800844a:	3001      	adds	r0, #1
 800844c:	f43f af09 	beq.w	8008262 <_printf_float+0xbe>
 8008450:	f04f 0900 	mov.w	r9, #0
 8008454:	f104 0a1a 	add.w	sl, r4, #26
 8008458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845a:	425b      	negs	r3, r3
 800845c:	454b      	cmp	r3, r9
 800845e:	dc01      	bgt.n	8008464 <_printf_float+0x2c0>
 8008460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008462:	e792      	b.n	800838a <_printf_float+0x1e6>
 8008464:	2301      	movs	r3, #1
 8008466:	4652      	mov	r2, sl
 8008468:	4631      	mov	r1, r6
 800846a:	4628      	mov	r0, r5
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	f43f aef7 	beq.w	8008262 <_printf_float+0xbe>
 8008474:	f109 0901 	add.w	r9, r9, #1
 8008478:	e7ee      	b.n	8008458 <_printf_float+0x2b4>
 800847a:	bf00      	nop
 800847c:	7fefffff 	.word	0x7fefffff
 8008480:	0800bda8 	.word	0x0800bda8
 8008484:	0800bdac 	.word	0x0800bdac
 8008488:	0800bdb0 	.word	0x0800bdb0
 800848c:	0800bdb4 	.word	0x0800bdb4
 8008490:	0800bfe3 	.word	0x0800bfe3
 8008494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008498:	429a      	cmp	r2, r3
 800849a:	bfa8      	it	ge
 800849c:	461a      	movge	r2, r3
 800849e:	2a00      	cmp	r2, #0
 80084a0:	4691      	mov	r9, r2
 80084a2:	dc37      	bgt.n	8008514 <_printf_float+0x370>
 80084a4:	f04f 0b00 	mov.w	fp, #0
 80084a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084ac:	f104 021a 	add.w	r2, r4, #26
 80084b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	eba3 0309 	sub.w	r3, r3, r9
 80084b8:	455b      	cmp	r3, fp
 80084ba:	dc33      	bgt.n	8008524 <_printf_float+0x380>
 80084bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084c0:	429a      	cmp	r2, r3
 80084c2:	db3b      	blt.n	800853c <_printf_float+0x398>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	07da      	lsls	r2, r3, #31
 80084c8:	d438      	bmi.n	800853c <_printf_float+0x398>
 80084ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80084ce:	eba2 0903 	sub.w	r9, r2, r3
 80084d2:	9b05      	ldr	r3, [sp, #20]
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	4591      	cmp	r9, r2
 80084d8:	bfa8      	it	ge
 80084da:	4691      	movge	r9, r2
 80084dc:	f1b9 0f00 	cmp.w	r9, #0
 80084e0:	dc35      	bgt.n	800854e <_printf_float+0x3aa>
 80084e2:	f04f 0800 	mov.w	r8, #0
 80084e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084ea:	f104 0a1a 	add.w	sl, r4, #26
 80084ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f2:	1a9b      	subs	r3, r3, r2
 80084f4:	eba3 0309 	sub.w	r3, r3, r9
 80084f8:	4543      	cmp	r3, r8
 80084fa:	f77f af79 	ble.w	80083f0 <_printf_float+0x24c>
 80084fe:	2301      	movs	r3, #1
 8008500:	4652      	mov	r2, sl
 8008502:	4631      	mov	r1, r6
 8008504:	4628      	mov	r0, r5
 8008506:	47b8      	blx	r7
 8008508:	3001      	adds	r0, #1
 800850a:	f43f aeaa 	beq.w	8008262 <_printf_float+0xbe>
 800850e:	f108 0801 	add.w	r8, r8, #1
 8008512:	e7ec      	b.n	80084ee <_printf_float+0x34a>
 8008514:	4613      	mov	r3, r2
 8008516:	4631      	mov	r1, r6
 8008518:	4642      	mov	r2, r8
 800851a:	4628      	mov	r0, r5
 800851c:	47b8      	blx	r7
 800851e:	3001      	adds	r0, #1
 8008520:	d1c0      	bne.n	80084a4 <_printf_float+0x300>
 8008522:	e69e      	b.n	8008262 <_printf_float+0xbe>
 8008524:	2301      	movs	r3, #1
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	9205      	str	r2, [sp, #20]
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	f43f ae97 	beq.w	8008262 <_printf_float+0xbe>
 8008534:	9a05      	ldr	r2, [sp, #20]
 8008536:	f10b 0b01 	add.w	fp, fp, #1
 800853a:	e7b9      	b.n	80084b0 <_printf_float+0x30c>
 800853c:	ee18 3a10 	vmov	r3, s16
 8008540:	4652      	mov	r2, sl
 8008542:	4631      	mov	r1, r6
 8008544:	4628      	mov	r0, r5
 8008546:	47b8      	blx	r7
 8008548:	3001      	adds	r0, #1
 800854a:	d1be      	bne.n	80084ca <_printf_float+0x326>
 800854c:	e689      	b.n	8008262 <_printf_float+0xbe>
 800854e:	9a05      	ldr	r2, [sp, #20]
 8008550:	464b      	mov	r3, r9
 8008552:	4442      	add	r2, r8
 8008554:	4631      	mov	r1, r6
 8008556:	4628      	mov	r0, r5
 8008558:	47b8      	blx	r7
 800855a:	3001      	adds	r0, #1
 800855c:	d1c1      	bne.n	80084e2 <_printf_float+0x33e>
 800855e:	e680      	b.n	8008262 <_printf_float+0xbe>
 8008560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008562:	2a01      	cmp	r2, #1
 8008564:	dc01      	bgt.n	800856a <_printf_float+0x3c6>
 8008566:	07db      	lsls	r3, r3, #31
 8008568:	d53a      	bpl.n	80085e0 <_printf_float+0x43c>
 800856a:	2301      	movs	r3, #1
 800856c:	4642      	mov	r2, r8
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f ae74 	beq.w	8008262 <_printf_float+0xbe>
 800857a:	ee18 3a10 	vmov	r3, s16
 800857e:	4652      	mov	r2, sl
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	47b8      	blx	r7
 8008586:	3001      	adds	r0, #1
 8008588:	f43f ae6b 	beq.w	8008262 <_printf_float+0xbe>
 800858c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008590:	2200      	movs	r2, #0
 8008592:	2300      	movs	r3, #0
 8008594:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008598:	f7f8 fa9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800859c:	b9d8      	cbnz	r0, 80085d6 <_printf_float+0x432>
 800859e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80085a2:	f108 0201 	add.w	r2, r8, #1
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	d10e      	bne.n	80085ce <_printf_float+0x42a>
 80085b0:	e657      	b.n	8008262 <_printf_float+0xbe>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4652      	mov	r2, sl
 80085b6:	4631      	mov	r1, r6
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b8      	blx	r7
 80085bc:	3001      	adds	r0, #1
 80085be:	f43f ae50 	beq.w	8008262 <_printf_float+0xbe>
 80085c2:	f108 0801 	add.w	r8, r8, #1
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	3b01      	subs	r3, #1
 80085ca:	4543      	cmp	r3, r8
 80085cc:	dcf1      	bgt.n	80085b2 <_printf_float+0x40e>
 80085ce:	464b      	mov	r3, r9
 80085d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085d4:	e6da      	b.n	800838c <_printf_float+0x1e8>
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	f104 0a1a 	add.w	sl, r4, #26
 80085de:	e7f2      	b.n	80085c6 <_printf_float+0x422>
 80085e0:	2301      	movs	r3, #1
 80085e2:	4642      	mov	r2, r8
 80085e4:	e7df      	b.n	80085a6 <_printf_float+0x402>
 80085e6:	2301      	movs	r3, #1
 80085e8:	464a      	mov	r2, r9
 80085ea:	4631      	mov	r1, r6
 80085ec:	4628      	mov	r0, r5
 80085ee:	47b8      	blx	r7
 80085f0:	3001      	adds	r0, #1
 80085f2:	f43f ae36 	beq.w	8008262 <_printf_float+0xbe>
 80085f6:	f108 0801 	add.w	r8, r8, #1
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085fe:	1a5b      	subs	r3, r3, r1
 8008600:	4543      	cmp	r3, r8
 8008602:	dcf0      	bgt.n	80085e6 <_printf_float+0x442>
 8008604:	e6f8      	b.n	80083f8 <_printf_float+0x254>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	f104 0919 	add.w	r9, r4, #25
 800860e:	e7f4      	b.n	80085fa <_printf_float+0x456>

08008610 <_printf_common>:
 8008610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008614:	4616      	mov	r6, r2
 8008616:	4699      	mov	r9, r3
 8008618:	688a      	ldr	r2, [r1, #8]
 800861a:	690b      	ldr	r3, [r1, #16]
 800861c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008620:	4293      	cmp	r3, r2
 8008622:	bfb8      	it	lt
 8008624:	4613      	movlt	r3, r2
 8008626:	6033      	str	r3, [r6, #0]
 8008628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800862c:	4607      	mov	r7, r0
 800862e:	460c      	mov	r4, r1
 8008630:	b10a      	cbz	r2, 8008636 <_printf_common+0x26>
 8008632:	3301      	adds	r3, #1
 8008634:	6033      	str	r3, [r6, #0]
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	0699      	lsls	r1, r3, #26
 800863a:	bf42      	ittt	mi
 800863c:	6833      	ldrmi	r3, [r6, #0]
 800863e:	3302      	addmi	r3, #2
 8008640:	6033      	strmi	r3, [r6, #0]
 8008642:	6825      	ldr	r5, [r4, #0]
 8008644:	f015 0506 	ands.w	r5, r5, #6
 8008648:	d106      	bne.n	8008658 <_printf_common+0x48>
 800864a:	f104 0a19 	add.w	sl, r4, #25
 800864e:	68e3      	ldr	r3, [r4, #12]
 8008650:	6832      	ldr	r2, [r6, #0]
 8008652:	1a9b      	subs	r3, r3, r2
 8008654:	42ab      	cmp	r3, r5
 8008656:	dc26      	bgt.n	80086a6 <_printf_common+0x96>
 8008658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800865c:	1e13      	subs	r3, r2, #0
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	bf18      	it	ne
 8008662:	2301      	movne	r3, #1
 8008664:	0692      	lsls	r2, r2, #26
 8008666:	d42b      	bmi.n	80086c0 <_printf_common+0xb0>
 8008668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800866c:	4649      	mov	r1, r9
 800866e:	4638      	mov	r0, r7
 8008670:	47c0      	blx	r8
 8008672:	3001      	adds	r0, #1
 8008674:	d01e      	beq.n	80086b4 <_printf_common+0xa4>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	6922      	ldr	r2, [r4, #16]
 800867a:	f003 0306 	and.w	r3, r3, #6
 800867e:	2b04      	cmp	r3, #4
 8008680:	bf02      	ittt	eq
 8008682:	68e5      	ldreq	r5, [r4, #12]
 8008684:	6833      	ldreq	r3, [r6, #0]
 8008686:	1aed      	subeq	r5, r5, r3
 8008688:	68a3      	ldr	r3, [r4, #8]
 800868a:	bf0c      	ite	eq
 800868c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008690:	2500      	movne	r5, #0
 8008692:	4293      	cmp	r3, r2
 8008694:	bfc4      	itt	gt
 8008696:	1a9b      	subgt	r3, r3, r2
 8008698:	18ed      	addgt	r5, r5, r3
 800869a:	2600      	movs	r6, #0
 800869c:	341a      	adds	r4, #26
 800869e:	42b5      	cmp	r5, r6
 80086a0:	d11a      	bne.n	80086d8 <_printf_common+0xc8>
 80086a2:	2000      	movs	r0, #0
 80086a4:	e008      	b.n	80086b8 <_printf_common+0xa8>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4652      	mov	r2, sl
 80086aa:	4649      	mov	r1, r9
 80086ac:	4638      	mov	r0, r7
 80086ae:	47c0      	blx	r8
 80086b0:	3001      	adds	r0, #1
 80086b2:	d103      	bne.n	80086bc <_printf_common+0xac>
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086bc:	3501      	adds	r5, #1
 80086be:	e7c6      	b.n	800864e <_printf_common+0x3e>
 80086c0:	18e1      	adds	r1, r4, r3
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	2030      	movs	r0, #48	; 0x30
 80086c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ca:	4422      	add	r2, r4
 80086cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086d4:	3302      	adds	r3, #2
 80086d6:	e7c7      	b.n	8008668 <_printf_common+0x58>
 80086d8:	2301      	movs	r3, #1
 80086da:	4622      	mov	r2, r4
 80086dc:	4649      	mov	r1, r9
 80086de:	4638      	mov	r0, r7
 80086e0:	47c0      	blx	r8
 80086e2:	3001      	adds	r0, #1
 80086e4:	d0e6      	beq.n	80086b4 <_printf_common+0xa4>
 80086e6:	3601      	adds	r6, #1
 80086e8:	e7d9      	b.n	800869e <_printf_common+0x8e>
	...

080086ec <_printf_i>:
 80086ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f0:	7e0f      	ldrb	r7, [r1, #24]
 80086f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086f4:	2f78      	cmp	r7, #120	; 0x78
 80086f6:	4691      	mov	r9, r2
 80086f8:	4680      	mov	r8, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	469a      	mov	sl, r3
 80086fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008702:	d807      	bhi.n	8008714 <_printf_i+0x28>
 8008704:	2f62      	cmp	r7, #98	; 0x62
 8008706:	d80a      	bhi.n	800871e <_printf_i+0x32>
 8008708:	2f00      	cmp	r7, #0
 800870a:	f000 80d4 	beq.w	80088b6 <_printf_i+0x1ca>
 800870e:	2f58      	cmp	r7, #88	; 0x58
 8008710:	f000 80c0 	beq.w	8008894 <_printf_i+0x1a8>
 8008714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800871c:	e03a      	b.n	8008794 <_printf_i+0xa8>
 800871e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008722:	2b15      	cmp	r3, #21
 8008724:	d8f6      	bhi.n	8008714 <_printf_i+0x28>
 8008726:	a101      	add	r1, pc, #4	; (adr r1, 800872c <_printf_i+0x40>)
 8008728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800872c:	08008785 	.word	0x08008785
 8008730:	08008799 	.word	0x08008799
 8008734:	08008715 	.word	0x08008715
 8008738:	08008715 	.word	0x08008715
 800873c:	08008715 	.word	0x08008715
 8008740:	08008715 	.word	0x08008715
 8008744:	08008799 	.word	0x08008799
 8008748:	08008715 	.word	0x08008715
 800874c:	08008715 	.word	0x08008715
 8008750:	08008715 	.word	0x08008715
 8008754:	08008715 	.word	0x08008715
 8008758:	0800889d 	.word	0x0800889d
 800875c:	080087c5 	.word	0x080087c5
 8008760:	08008857 	.word	0x08008857
 8008764:	08008715 	.word	0x08008715
 8008768:	08008715 	.word	0x08008715
 800876c:	080088bf 	.word	0x080088bf
 8008770:	08008715 	.word	0x08008715
 8008774:	080087c5 	.word	0x080087c5
 8008778:	08008715 	.word	0x08008715
 800877c:	08008715 	.word	0x08008715
 8008780:	0800885f 	.word	0x0800885f
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	1d1a      	adds	r2, r3, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	602a      	str	r2, [r5, #0]
 800878c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008794:	2301      	movs	r3, #1
 8008796:	e09f      	b.n	80088d8 <_printf_i+0x1ec>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	0607      	lsls	r7, r0, #24
 800879e:	f103 0104 	add.w	r1, r3, #4
 80087a2:	6029      	str	r1, [r5, #0]
 80087a4:	d501      	bpl.n	80087aa <_printf_i+0xbe>
 80087a6:	681e      	ldr	r6, [r3, #0]
 80087a8:	e003      	b.n	80087b2 <_printf_i+0xc6>
 80087aa:	0646      	lsls	r6, r0, #25
 80087ac:	d5fb      	bpl.n	80087a6 <_printf_i+0xba>
 80087ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087b2:	2e00      	cmp	r6, #0
 80087b4:	da03      	bge.n	80087be <_printf_i+0xd2>
 80087b6:	232d      	movs	r3, #45	; 0x2d
 80087b8:	4276      	negs	r6, r6
 80087ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087be:	485a      	ldr	r0, [pc, #360]	; (8008928 <_printf_i+0x23c>)
 80087c0:	230a      	movs	r3, #10
 80087c2:	e012      	b.n	80087ea <_printf_i+0xfe>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	6820      	ldr	r0, [r4, #0]
 80087c8:	1d19      	adds	r1, r3, #4
 80087ca:	6029      	str	r1, [r5, #0]
 80087cc:	0605      	lsls	r5, r0, #24
 80087ce:	d501      	bpl.n	80087d4 <_printf_i+0xe8>
 80087d0:	681e      	ldr	r6, [r3, #0]
 80087d2:	e002      	b.n	80087da <_printf_i+0xee>
 80087d4:	0641      	lsls	r1, r0, #25
 80087d6:	d5fb      	bpl.n	80087d0 <_printf_i+0xe4>
 80087d8:	881e      	ldrh	r6, [r3, #0]
 80087da:	4853      	ldr	r0, [pc, #332]	; (8008928 <_printf_i+0x23c>)
 80087dc:	2f6f      	cmp	r7, #111	; 0x6f
 80087de:	bf0c      	ite	eq
 80087e0:	2308      	moveq	r3, #8
 80087e2:	230a      	movne	r3, #10
 80087e4:	2100      	movs	r1, #0
 80087e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ea:	6865      	ldr	r5, [r4, #4]
 80087ec:	60a5      	str	r5, [r4, #8]
 80087ee:	2d00      	cmp	r5, #0
 80087f0:	bfa2      	ittt	ge
 80087f2:	6821      	ldrge	r1, [r4, #0]
 80087f4:	f021 0104 	bicge.w	r1, r1, #4
 80087f8:	6021      	strge	r1, [r4, #0]
 80087fa:	b90e      	cbnz	r6, 8008800 <_printf_i+0x114>
 80087fc:	2d00      	cmp	r5, #0
 80087fe:	d04b      	beq.n	8008898 <_printf_i+0x1ac>
 8008800:	4615      	mov	r5, r2
 8008802:	fbb6 f1f3 	udiv	r1, r6, r3
 8008806:	fb03 6711 	mls	r7, r3, r1, r6
 800880a:	5dc7      	ldrb	r7, [r0, r7]
 800880c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008810:	4637      	mov	r7, r6
 8008812:	42bb      	cmp	r3, r7
 8008814:	460e      	mov	r6, r1
 8008816:	d9f4      	bls.n	8008802 <_printf_i+0x116>
 8008818:	2b08      	cmp	r3, #8
 800881a:	d10b      	bne.n	8008834 <_printf_i+0x148>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	07de      	lsls	r6, r3, #31
 8008820:	d508      	bpl.n	8008834 <_printf_i+0x148>
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	6861      	ldr	r1, [r4, #4]
 8008826:	4299      	cmp	r1, r3
 8008828:	bfde      	ittt	le
 800882a:	2330      	movle	r3, #48	; 0x30
 800882c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008830:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008834:	1b52      	subs	r2, r2, r5
 8008836:	6122      	str	r2, [r4, #16]
 8008838:	f8cd a000 	str.w	sl, [sp]
 800883c:	464b      	mov	r3, r9
 800883e:	aa03      	add	r2, sp, #12
 8008840:	4621      	mov	r1, r4
 8008842:	4640      	mov	r0, r8
 8008844:	f7ff fee4 	bl	8008610 <_printf_common>
 8008848:	3001      	adds	r0, #1
 800884a:	d14a      	bne.n	80088e2 <_printf_i+0x1f6>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008850:	b004      	add	sp, #16
 8008852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	f043 0320 	orr.w	r3, r3, #32
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	4833      	ldr	r0, [pc, #204]	; (800892c <_printf_i+0x240>)
 8008860:	2778      	movs	r7, #120	; 0x78
 8008862:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	6829      	ldr	r1, [r5, #0]
 800886a:	061f      	lsls	r7, r3, #24
 800886c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008870:	d402      	bmi.n	8008878 <_printf_i+0x18c>
 8008872:	065f      	lsls	r7, r3, #25
 8008874:	bf48      	it	mi
 8008876:	b2b6      	uxthmi	r6, r6
 8008878:	07df      	lsls	r7, r3, #31
 800887a:	bf48      	it	mi
 800887c:	f043 0320 	orrmi.w	r3, r3, #32
 8008880:	6029      	str	r1, [r5, #0]
 8008882:	bf48      	it	mi
 8008884:	6023      	strmi	r3, [r4, #0]
 8008886:	b91e      	cbnz	r6, 8008890 <_printf_i+0x1a4>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	f023 0320 	bic.w	r3, r3, #32
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	2310      	movs	r3, #16
 8008892:	e7a7      	b.n	80087e4 <_printf_i+0xf8>
 8008894:	4824      	ldr	r0, [pc, #144]	; (8008928 <_printf_i+0x23c>)
 8008896:	e7e4      	b.n	8008862 <_printf_i+0x176>
 8008898:	4615      	mov	r5, r2
 800889a:	e7bd      	b.n	8008818 <_printf_i+0x12c>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	6826      	ldr	r6, [r4, #0]
 80088a0:	6961      	ldr	r1, [r4, #20]
 80088a2:	1d18      	adds	r0, r3, #4
 80088a4:	6028      	str	r0, [r5, #0]
 80088a6:	0635      	lsls	r5, r6, #24
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	d501      	bpl.n	80088b0 <_printf_i+0x1c4>
 80088ac:	6019      	str	r1, [r3, #0]
 80088ae:	e002      	b.n	80088b6 <_printf_i+0x1ca>
 80088b0:	0670      	lsls	r0, r6, #25
 80088b2:	d5fb      	bpl.n	80088ac <_printf_i+0x1c0>
 80088b4:	8019      	strh	r1, [r3, #0]
 80088b6:	2300      	movs	r3, #0
 80088b8:	6123      	str	r3, [r4, #16]
 80088ba:	4615      	mov	r5, r2
 80088bc:	e7bc      	b.n	8008838 <_printf_i+0x14c>
 80088be:	682b      	ldr	r3, [r5, #0]
 80088c0:	1d1a      	adds	r2, r3, #4
 80088c2:	602a      	str	r2, [r5, #0]
 80088c4:	681d      	ldr	r5, [r3, #0]
 80088c6:	6862      	ldr	r2, [r4, #4]
 80088c8:	2100      	movs	r1, #0
 80088ca:	4628      	mov	r0, r5
 80088cc:	f7f7 fc88 	bl	80001e0 <memchr>
 80088d0:	b108      	cbz	r0, 80088d6 <_printf_i+0x1ea>
 80088d2:	1b40      	subs	r0, r0, r5
 80088d4:	6060      	str	r0, [r4, #4]
 80088d6:	6863      	ldr	r3, [r4, #4]
 80088d8:	6123      	str	r3, [r4, #16]
 80088da:	2300      	movs	r3, #0
 80088dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e0:	e7aa      	b.n	8008838 <_printf_i+0x14c>
 80088e2:	6923      	ldr	r3, [r4, #16]
 80088e4:	462a      	mov	r2, r5
 80088e6:	4649      	mov	r1, r9
 80088e8:	4640      	mov	r0, r8
 80088ea:	47d0      	blx	sl
 80088ec:	3001      	adds	r0, #1
 80088ee:	d0ad      	beq.n	800884c <_printf_i+0x160>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	079b      	lsls	r3, r3, #30
 80088f4:	d413      	bmi.n	800891e <_printf_i+0x232>
 80088f6:	68e0      	ldr	r0, [r4, #12]
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	4298      	cmp	r0, r3
 80088fc:	bfb8      	it	lt
 80088fe:	4618      	movlt	r0, r3
 8008900:	e7a6      	b.n	8008850 <_printf_i+0x164>
 8008902:	2301      	movs	r3, #1
 8008904:	4632      	mov	r2, r6
 8008906:	4649      	mov	r1, r9
 8008908:	4640      	mov	r0, r8
 800890a:	47d0      	blx	sl
 800890c:	3001      	adds	r0, #1
 800890e:	d09d      	beq.n	800884c <_printf_i+0x160>
 8008910:	3501      	adds	r5, #1
 8008912:	68e3      	ldr	r3, [r4, #12]
 8008914:	9903      	ldr	r1, [sp, #12]
 8008916:	1a5b      	subs	r3, r3, r1
 8008918:	42ab      	cmp	r3, r5
 800891a:	dcf2      	bgt.n	8008902 <_printf_i+0x216>
 800891c:	e7eb      	b.n	80088f6 <_printf_i+0x20a>
 800891e:	2500      	movs	r5, #0
 8008920:	f104 0619 	add.w	r6, r4, #25
 8008924:	e7f5      	b.n	8008912 <_printf_i+0x226>
 8008926:	bf00      	nop
 8008928:	0800bdb8 	.word	0x0800bdb8
 800892c:	0800bdc9 	.word	0x0800bdc9

08008930 <std>:
 8008930:	2300      	movs	r3, #0
 8008932:	b510      	push	{r4, lr}
 8008934:	4604      	mov	r4, r0
 8008936:	e9c0 3300 	strd	r3, r3, [r0]
 800893a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800893e:	6083      	str	r3, [r0, #8]
 8008940:	8181      	strh	r1, [r0, #12]
 8008942:	6643      	str	r3, [r0, #100]	; 0x64
 8008944:	81c2      	strh	r2, [r0, #14]
 8008946:	6183      	str	r3, [r0, #24]
 8008948:	4619      	mov	r1, r3
 800894a:	2208      	movs	r2, #8
 800894c:	305c      	adds	r0, #92	; 0x5c
 800894e:	f000 f995 	bl	8008c7c <memset>
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <std+0x58>)
 8008954:	6263      	str	r3, [r4, #36]	; 0x24
 8008956:	4b0d      	ldr	r3, [pc, #52]	; (800898c <std+0x5c>)
 8008958:	62a3      	str	r3, [r4, #40]	; 0x28
 800895a:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <std+0x60>)
 800895c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <std+0x64>)
 8008960:	6323      	str	r3, [r4, #48]	; 0x30
 8008962:	4b0d      	ldr	r3, [pc, #52]	; (8008998 <std+0x68>)
 8008964:	6224      	str	r4, [r4, #32]
 8008966:	429c      	cmp	r4, r3
 8008968:	d006      	beq.n	8008978 <std+0x48>
 800896a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800896e:	4294      	cmp	r4, r2
 8008970:	d002      	beq.n	8008978 <std+0x48>
 8008972:	33d0      	adds	r3, #208	; 0xd0
 8008974:	429c      	cmp	r4, r3
 8008976:	d105      	bne.n	8008984 <std+0x54>
 8008978:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800897c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008980:	f000 ba2a 	b.w	8008dd8 <__retarget_lock_init_recursive>
 8008984:	bd10      	pop	{r4, pc}
 8008986:	bf00      	nop
 8008988:	08008b4d 	.word	0x08008b4d
 800898c:	08008b73 	.word	0x08008b73
 8008990:	08008bab 	.word	0x08008bab
 8008994:	08008bcf 	.word	0x08008bcf
 8008998:	200027b4 	.word	0x200027b4

0800899c <stdio_exit_handler>:
 800899c:	4a02      	ldr	r2, [pc, #8]	; (80089a8 <stdio_exit_handler+0xc>)
 800899e:	4903      	ldr	r1, [pc, #12]	; (80089ac <stdio_exit_handler+0x10>)
 80089a0:	4803      	ldr	r0, [pc, #12]	; (80089b0 <stdio_exit_handler+0x14>)
 80089a2:	f000 b869 	b.w	8008a78 <_fwalk_sglue>
 80089a6:	bf00      	nop
 80089a8:	200000f8 	.word	0x200000f8
 80089ac:	0800ade9 	.word	0x0800ade9
 80089b0:	20000104 	.word	0x20000104

080089b4 <cleanup_stdio>:
 80089b4:	6841      	ldr	r1, [r0, #4]
 80089b6:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <cleanup_stdio+0x34>)
 80089b8:	4299      	cmp	r1, r3
 80089ba:	b510      	push	{r4, lr}
 80089bc:	4604      	mov	r4, r0
 80089be:	d001      	beq.n	80089c4 <cleanup_stdio+0x10>
 80089c0:	f002 fa12 	bl	800ade8 <_fflush_r>
 80089c4:	68a1      	ldr	r1, [r4, #8]
 80089c6:	4b09      	ldr	r3, [pc, #36]	; (80089ec <cleanup_stdio+0x38>)
 80089c8:	4299      	cmp	r1, r3
 80089ca:	d002      	beq.n	80089d2 <cleanup_stdio+0x1e>
 80089cc:	4620      	mov	r0, r4
 80089ce:	f002 fa0b 	bl	800ade8 <_fflush_r>
 80089d2:	68e1      	ldr	r1, [r4, #12]
 80089d4:	4b06      	ldr	r3, [pc, #24]	; (80089f0 <cleanup_stdio+0x3c>)
 80089d6:	4299      	cmp	r1, r3
 80089d8:	d004      	beq.n	80089e4 <cleanup_stdio+0x30>
 80089da:	4620      	mov	r0, r4
 80089dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e0:	f002 ba02 	b.w	800ade8 <_fflush_r>
 80089e4:	bd10      	pop	{r4, pc}
 80089e6:	bf00      	nop
 80089e8:	200027b4 	.word	0x200027b4
 80089ec:	2000281c 	.word	0x2000281c
 80089f0:	20002884 	.word	0x20002884

080089f4 <global_stdio_init.part.0>:
 80089f4:	b510      	push	{r4, lr}
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <global_stdio_init.part.0+0x30>)
 80089f8:	4c0b      	ldr	r4, [pc, #44]	; (8008a28 <global_stdio_init.part.0+0x34>)
 80089fa:	4a0c      	ldr	r2, [pc, #48]	; (8008a2c <global_stdio_init.part.0+0x38>)
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	4620      	mov	r0, r4
 8008a00:	2200      	movs	r2, #0
 8008a02:	2104      	movs	r1, #4
 8008a04:	f7ff ff94 	bl	8008930 <std>
 8008a08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	2109      	movs	r1, #9
 8008a10:	f7ff ff8e 	bl	8008930 <std>
 8008a14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a18:	2202      	movs	r2, #2
 8008a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a1e:	2112      	movs	r1, #18
 8008a20:	f7ff bf86 	b.w	8008930 <std>
 8008a24:	200028ec 	.word	0x200028ec
 8008a28:	200027b4 	.word	0x200027b4
 8008a2c:	0800899d 	.word	0x0800899d

08008a30 <__sfp_lock_acquire>:
 8008a30:	4801      	ldr	r0, [pc, #4]	; (8008a38 <__sfp_lock_acquire+0x8>)
 8008a32:	f000 b9d2 	b.w	8008dda <__retarget_lock_acquire_recursive>
 8008a36:	bf00      	nop
 8008a38:	200028f5 	.word	0x200028f5

08008a3c <__sfp_lock_release>:
 8008a3c:	4801      	ldr	r0, [pc, #4]	; (8008a44 <__sfp_lock_release+0x8>)
 8008a3e:	f000 b9cd 	b.w	8008ddc <__retarget_lock_release_recursive>
 8008a42:	bf00      	nop
 8008a44:	200028f5 	.word	0x200028f5

08008a48 <__sinit>:
 8008a48:	b510      	push	{r4, lr}
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	f7ff fff0 	bl	8008a30 <__sfp_lock_acquire>
 8008a50:	6a23      	ldr	r3, [r4, #32]
 8008a52:	b11b      	cbz	r3, 8008a5c <__sinit+0x14>
 8008a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a58:	f7ff bff0 	b.w	8008a3c <__sfp_lock_release>
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <__sinit+0x28>)
 8008a5e:	6223      	str	r3, [r4, #32]
 8008a60:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <__sinit+0x2c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1f5      	bne.n	8008a54 <__sinit+0xc>
 8008a68:	f7ff ffc4 	bl	80089f4 <global_stdio_init.part.0>
 8008a6c:	e7f2      	b.n	8008a54 <__sinit+0xc>
 8008a6e:	bf00      	nop
 8008a70:	080089b5 	.word	0x080089b5
 8008a74:	200028ec 	.word	0x200028ec

08008a78 <_fwalk_sglue>:
 8008a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	4688      	mov	r8, r1
 8008a80:	4614      	mov	r4, r2
 8008a82:	2600      	movs	r6, #0
 8008a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a88:	f1b9 0901 	subs.w	r9, r9, #1
 8008a8c:	d505      	bpl.n	8008a9a <_fwalk_sglue+0x22>
 8008a8e:	6824      	ldr	r4, [r4, #0]
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	d1f7      	bne.n	8008a84 <_fwalk_sglue+0xc>
 8008a94:	4630      	mov	r0, r6
 8008a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9a:	89ab      	ldrh	r3, [r5, #12]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d907      	bls.n	8008ab0 <_fwalk_sglue+0x38>
 8008aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	d003      	beq.n	8008ab0 <_fwalk_sglue+0x38>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4638      	mov	r0, r7
 8008aac:	47c0      	blx	r8
 8008aae:	4306      	orrs	r6, r0
 8008ab0:	3568      	adds	r5, #104	; 0x68
 8008ab2:	e7e9      	b.n	8008a88 <_fwalk_sglue+0x10>

08008ab4 <siprintf>:
 8008ab4:	b40e      	push	{r1, r2, r3}
 8008ab6:	b500      	push	{lr}
 8008ab8:	b09c      	sub	sp, #112	; 0x70
 8008aba:	ab1d      	add	r3, sp, #116	; 0x74
 8008abc:	9002      	str	r0, [sp, #8]
 8008abe:	9006      	str	r0, [sp, #24]
 8008ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ac4:	4809      	ldr	r0, [pc, #36]	; (8008aec <siprintf+0x38>)
 8008ac6:	9107      	str	r1, [sp, #28]
 8008ac8:	9104      	str	r1, [sp, #16]
 8008aca:	4909      	ldr	r1, [pc, #36]	; (8008af0 <siprintf+0x3c>)
 8008acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad0:	9105      	str	r1, [sp, #20]
 8008ad2:	6800      	ldr	r0, [r0, #0]
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	a902      	add	r1, sp, #8
 8008ad8:	f001 fce2 	bl	800a4a0 <_svfiprintf_r>
 8008adc:	9b02      	ldr	r3, [sp, #8]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	701a      	strb	r2, [r3, #0]
 8008ae2:	b01c      	add	sp, #112	; 0x70
 8008ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae8:	b003      	add	sp, #12
 8008aea:	4770      	bx	lr
 8008aec:	20000150 	.word	0x20000150
 8008af0:	ffff0208 	.word	0xffff0208

08008af4 <siscanf>:
 8008af4:	b40e      	push	{r1, r2, r3}
 8008af6:	b510      	push	{r4, lr}
 8008af8:	b09f      	sub	sp, #124	; 0x7c
 8008afa:	ac21      	add	r4, sp, #132	; 0x84
 8008afc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008b00:	f854 2b04 	ldr.w	r2, [r4], #4
 8008b04:	9201      	str	r2, [sp, #4]
 8008b06:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008b0a:	9004      	str	r0, [sp, #16]
 8008b0c:	9008      	str	r0, [sp, #32]
 8008b0e:	f7f7 fbb7 	bl	8000280 <strlen>
 8008b12:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <siscanf+0x50>)
 8008b14:	9005      	str	r0, [sp, #20]
 8008b16:	9009      	str	r0, [sp, #36]	; 0x24
 8008b18:	930d      	str	r3, [sp, #52]	; 0x34
 8008b1a:	480b      	ldr	r0, [pc, #44]	; (8008b48 <siscanf+0x54>)
 8008b1c:	9a01      	ldr	r2, [sp, #4]
 8008b1e:	6800      	ldr	r0, [r0, #0]
 8008b20:	9403      	str	r4, [sp, #12]
 8008b22:	2300      	movs	r3, #0
 8008b24:	9311      	str	r3, [sp, #68]	; 0x44
 8008b26:	9316      	str	r3, [sp, #88]	; 0x58
 8008b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008b30:	a904      	add	r1, sp, #16
 8008b32:	4623      	mov	r3, r4
 8008b34:	f001 fe0c 	bl	800a750 <__ssvfiscanf_r>
 8008b38:	b01f      	add	sp, #124	; 0x7c
 8008b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b3e:	b003      	add	sp, #12
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	08008b6f 	.word	0x08008b6f
 8008b48:	20000150 	.word	0x20000150

08008b4c <__sread>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	460c      	mov	r4, r1
 8008b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b54:	f000 f8f2 	bl	8008d3c <_read_r>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	bfab      	itete	ge
 8008b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b60:	181b      	addge	r3, r3, r0
 8008b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b66:	bfac      	ite	ge
 8008b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b6a:	81a3      	strhlt	r3, [r4, #12]
 8008b6c:	bd10      	pop	{r4, pc}

08008b6e <__seofread>:
 8008b6e:	2000      	movs	r0, #0
 8008b70:	4770      	bx	lr

08008b72 <__swrite>:
 8008b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b76:	461f      	mov	r7, r3
 8008b78:	898b      	ldrh	r3, [r1, #12]
 8008b7a:	05db      	lsls	r3, r3, #23
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	4616      	mov	r6, r2
 8008b82:	d505      	bpl.n	8008b90 <__swrite+0x1e>
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	2302      	movs	r3, #2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f000 f8c4 	bl	8008d18 <_lseek_r>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	f000 b8db 	b.w	8008d60 <_write_r>

08008baa <__sseek>:
 8008baa:	b510      	push	{r4, lr}
 8008bac:	460c      	mov	r4, r1
 8008bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb2:	f000 f8b1 	bl	8008d18 <_lseek_r>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	bf15      	itete	ne
 8008bbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bc6:	81a3      	strheq	r3, [r4, #12]
 8008bc8:	bf18      	it	ne
 8008bca:	81a3      	strhne	r3, [r4, #12]
 8008bcc:	bd10      	pop	{r4, pc}

08008bce <__sclose>:
 8008bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd2:	f000 b891 	b.w	8008cf8 <_close_r>

08008bd6 <_vsniprintf_r>:
 8008bd6:	b530      	push	{r4, r5, lr}
 8008bd8:	4614      	mov	r4, r2
 8008bda:	2c00      	cmp	r4, #0
 8008bdc:	b09b      	sub	sp, #108	; 0x6c
 8008bde:	4605      	mov	r5, r0
 8008be0:	461a      	mov	r2, r3
 8008be2:	da05      	bge.n	8008bf0 <_vsniprintf_r+0x1a>
 8008be4:	238b      	movs	r3, #139	; 0x8b
 8008be6:	6003      	str	r3, [r0, #0]
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bec:	b01b      	add	sp, #108	; 0x6c
 8008bee:	bd30      	pop	{r4, r5, pc}
 8008bf0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008bf4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008bf8:	bf14      	ite	ne
 8008bfa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008bfe:	4623      	moveq	r3, r4
 8008c00:	9302      	str	r3, [sp, #8]
 8008c02:	9305      	str	r3, [sp, #20]
 8008c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c08:	9100      	str	r1, [sp, #0]
 8008c0a:	9104      	str	r1, [sp, #16]
 8008c0c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008c10:	4669      	mov	r1, sp
 8008c12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008c14:	f001 fc44 	bl	800a4a0 <_svfiprintf_r>
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	bfbc      	itt	lt
 8008c1c:	238b      	movlt	r3, #139	; 0x8b
 8008c1e:	602b      	strlt	r3, [r5, #0]
 8008c20:	2c00      	cmp	r4, #0
 8008c22:	d0e3      	beq.n	8008bec <_vsniprintf_r+0x16>
 8008c24:	9b00      	ldr	r3, [sp, #0]
 8008c26:	2200      	movs	r2, #0
 8008c28:	701a      	strb	r2, [r3, #0]
 8008c2a:	e7df      	b.n	8008bec <_vsniprintf_r+0x16>

08008c2c <vsniprintf>:
 8008c2c:	b507      	push	{r0, r1, r2, lr}
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	4613      	mov	r3, r2
 8008c32:	460a      	mov	r2, r1
 8008c34:	4601      	mov	r1, r0
 8008c36:	4803      	ldr	r0, [pc, #12]	; (8008c44 <vsniprintf+0x18>)
 8008c38:	6800      	ldr	r0, [r0, #0]
 8008c3a:	f7ff ffcc 	bl	8008bd6 <_vsniprintf_r>
 8008c3e:	b003      	add	sp, #12
 8008c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c44:	20000150 	.word	0x20000150

08008c48 <memmove>:
 8008c48:	4288      	cmp	r0, r1
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	eb01 0402 	add.w	r4, r1, r2
 8008c50:	d902      	bls.n	8008c58 <memmove+0x10>
 8008c52:	4284      	cmp	r4, r0
 8008c54:	4623      	mov	r3, r4
 8008c56:	d807      	bhi.n	8008c68 <memmove+0x20>
 8008c58:	1e43      	subs	r3, r0, #1
 8008c5a:	42a1      	cmp	r1, r4
 8008c5c:	d008      	beq.n	8008c70 <memmove+0x28>
 8008c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c66:	e7f8      	b.n	8008c5a <memmove+0x12>
 8008c68:	4402      	add	r2, r0
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	428a      	cmp	r2, r1
 8008c6e:	d100      	bne.n	8008c72 <memmove+0x2a>
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c7a:	e7f7      	b.n	8008c6c <memmove+0x24>

08008c7c <memset>:
 8008c7c:	4402      	add	r2, r0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d100      	bne.n	8008c86 <memset+0xa>
 8008c84:	4770      	bx	lr
 8008c86:	f803 1b01 	strb.w	r1, [r3], #1
 8008c8a:	e7f9      	b.n	8008c80 <memset+0x4>

08008c8c <strncmp>:
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	b16a      	cbz	r2, 8008cac <strncmp+0x20>
 8008c90:	3901      	subs	r1, #1
 8008c92:	1884      	adds	r4, r0, r2
 8008c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d103      	bne.n	8008ca8 <strncmp+0x1c>
 8008ca0:	42a0      	cmp	r0, r4
 8008ca2:	d001      	beq.n	8008ca8 <strncmp+0x1c>
 8008ca4:	2a00      	cmp	r2, #0
 8008ca6:	d1f5      	bne.n	8008c94 <strncmp+0x8>
 8008ca8:	1ad0      	subs	r0, r2, r3
 8008caa:	bd10      	pop	{r4, pc}
 8008cac:	4610      	mov	r0, r2
 8008cae:	e7fc      	b.n	8008caa <strncmp+0x1e>

08008cb0 <strstr>:
 8008cb0:	780a      	ldrb	r2, [r1, #0]
 8008cb2:	b570      	push	{r4, r5, r6, lr}
 8008cb4:	b96a      	cbnz	r2, 8008cd2 <strstr+0x22>
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d109      	bne.n	8008cd0 <strstr+0x20>
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0f6      	beq.n	8008cb6 <strstr+0x6>
 8008cc8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008ccc:	429e      	cmp	r6, r3
 8008cce:	d0f7      	beq.n	8008cc0 <strstr+0x10>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	7803      	ldrb	r3, [r0, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1ef      	bne.n	8008cb8 <strstr+0x8>
 8008cd8:	4618      	mov	r0, r3
 8008cda:	e7ec      	b.n	8008cb6 <strstr+0x6>

08008cdc <stpcpy>:
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f803 2b01 	strb.w	r2, [r3], #1
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	d1f8      	bne.n	8008cde <stpcpy+0x2>
 8008cec:	4770      	bx	lr
	...

08008cf0 <_localeconv_r>:
 8008cf0:	4800      	ldr	r0, [pc, #0]	; (8008cf4 <_localeconv_r+0x4>)
 8008cf2:	4770      	bx	lr
 8008cf4:	20000244 	.word	0x20000244

08008cf8 <_close_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d06      	ldr	r5, [pc, #24]	; (8008d14 <_close_r+0x1c>)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	602b      	str	r3, [r5, #0]
 8008d04:	f7f8 fc0a 	bl	800151c <_close>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_close_r+0x1a>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_close_r+0x1a>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	200028f0 	.word	0x200028f0

08008d18 <_lseek_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d07      	ldr	r5, [pc, #28]	; (8008d38 <_lseek_r+0x20>)
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	4608      	mov	r0, r1
 8008d20:	4611      	mov	r1, r2
 8008d22:	2200      	movs	r2, #0
 8008d24:	602a      	str	r2, [r5, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	f7f8 fc04 	bl	8001534 <_lseek>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	d102      	bne.n	8008d36 <_lseek_r+0x1e>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b103      	cbz	r3, 8008d36 <_lseek_r+0x1e>
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	200028f0 	.word	0x200028f0

08008d3c <_read_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d07      	ldr	r5, [pc, #28]	; (8008d5c <_read_r+0x20>)
 8008d40:	4604      	mov	r4, r0
 8008d42:	4608      	mov	r0, r1
 8008d44:	4611      	mov	r1, r2
 8008d46:	2200      	movs	r2, #0
 8008d48:	602a      	str	r2, [r5, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f7f8 fbca 	bl	80014e4 <_read>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d102      	bne.n	8008d5a <_read_r+0x1e>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	b103      	cbz	r3, 8008d5a <_read_r+0x1e>
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	200028f0 	.word	0x200028f0

08008d60 <_write_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4d07      	ldr	r5, [pc, #28]	; (8008d80 <_write_r+0x20>)
 8008d64:	4604      	mov	r4, r0
 8008d66:	4608      	mov	r0, r1
 8008d68:	4611      	mov	r1, r2
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	602a      	str	r2, [r5, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f7f8 fbc6 	bl	8001500 <_write>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_write_r+0x1e>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_write_r+0x1e>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	200028f0 	.word	0x200028f0

08008d84 <__errno>:
 8008d84:	4b01      	ldr	r3, [pc, #4]	; (8008d8c <__errno+0x8>)
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	20000150 	.word	0x20000150

08008d90 <__libc_init_array>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	4d0d      	ldr	r5, [pc, #52]	; (8008dc8 <__libc_init_array+0x38>)
 8008d94:	4c0d      	ldr	r4, [pc, #52]	; (8008dcc <__libc_init_array+0x3c>)
 8008d96:	1b64      	subs	r4, r4, r5
 8008d98:	10a4      	asrs	r4, r4, #2
 8008d9a:	2600      	movs	r6, #0
 8008d9c:	42a6      	cmp	r6, r4
 8008d9e:	d109      	bne.n	8008db4 <__libc_init_array+0x24>
 8008da0:	4d0b      	ldr	r5, [pc, #44]	; (8008dd0 <__libc_init_array+0x40>)
 8008da2:	4c0c      	ldr	r4, [pc, #48]	; (8008dd4 <__libc_init_array+0x44>)
 8008da4:	f002 fd0a 	bl	800b7bc <_init>
 8008da8:	1b64      	subs	r4, r4, r5
 8008daa:	10a4      	asrs	r4, r4, #2
 8008dac:	2600      	movs	r6, #0
 8008dae:	42a6      	cmp	r6, r4
 8008db0:	d105      	bne.n	8008dbe <__libc_init_array+0x2e>
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db8:	4798      	blx	r3
 8008dba:	3601      	adds	r6, #1
 8008dbc:	e7ee      	b.n	8008d9c <__libc_init_array+0xc>
 8008dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc2:	4798      	blx	r3
 8008dc4:	3601      	adds	r6, #1
 8008dc6:	e7f2      	b.n	8008dae <__libc_init_array+0x1e>
 8008dc8:	0800c138 	.word	0x0800c138
 8008dcc:	0800c138 	.word	0x0800c138
 8008dd0:	0800c138 	.word	0x0800c138
 8008dd4:	0800c13c 	.word	0x0800c13c

08008dd8 <__retarget_lock_init_recursive>:
 8008dd8:	4770      	bx	lr

08008dda <__retarget_lock_acquire_recursive>:
 8008dda:	4770      	bx	lr

08008ddc <__retarget_lock_release_recursive>:
 8008ddc:	4770      	bx	lr

08008dde <memcpy>:
 8008dde:	440a      	add	r2, r1
 8008de0:	4291      	cmp	r1, r2
 8008de2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008de6:	d100      	bne.n	8008dea <memcpy+0xc>
 8008de8:	4770      	bx	lr
 8008dea:	b510      	push	{r4, lr}
 8008dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008df4:	4291      	cmp	r1, r2
 8008df6:	d1f9      	bne.n	8008dec <memcpy+0xe>
 8008df8:	bd10      	pop	{r4, pc}

08008dfa <quorem>:
 8008dfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfe:	6903      	ldr	r3, [r0, #16]
 8008e00:	690c      	ldr	r4, [r1, #16]
 8008e02:	42a3      	cmp	r3, r4
 8008e04:	4607      	mov	r7, r0
 8008e06:	db7e      	blt.n	8008f06 <quorem+0x10c>
 8008e08:	3c01      	subs	r4, #1
 8008e0a:	f101 0814 	add.w	r8, r1, #20
 8008e0e:	f100 0514 	add.w	r5, r0, #20
 8008e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e20:	3301      	adds	r3, #1
 8008e22:	429a      	cmp	r2, r3
 8008e24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e30:	d331      	bcc.n	8008e96 <quorem+0x9c>
 8008e32:	f04f 0e00 	mov.w	lr, #0
 8008e36:	4640      	mov	r0, r8
 8008e38:	46ac      	mov	ip, r5
 8008e3a:	46f2      	mov	sl, lr
 8008e3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e40:	b293      	uxth	r3, r2
 8008e42:	fb06 e303 	mla	r3, r6, r3, lr
 8008e46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e4a:	0c1a      	lsrs	r2, r3, #16
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	ebaa 0303 	sub.w	r3, sl, r3
 8008e52:	f8dc a000 	ldr.w	sl, [ip]
 8008e56:	fa13 f38a 	uxtah	r3, r3, sl
 8008e5a:	fb06 220e 	mla	r2, r6, lr, r2
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	9b00      	ldr	r3, [sp, #0]
 8008e62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e66:	b292      	uxth	r2, r2
 8008e68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e70:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e74:	4581      	cmp	r9, r0
 8008e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e7a:	f84c 3b04 	str.w	r3, [ip], #4
 8008e7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e82:	d2db      	bcs.n	8008e3c <quorem+0x42>
 8008e84:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e88:	b92b      	cbnz	r3, 8008e96 <quorem+0x9c>
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	3b04      	subs	r3, #4
 8008e8e:	429d      	cmp	r5, r3
 8008e90:	461a      	mov	r2, r3
 8008e92:	d32c      	bcc.n	8008eee <quorem+0xf4>
 8008e94:	613c      	str	r4, [r7, #16]
 8008e96:	4638      	mov	r0, r7
 8008e98:	f001 f9a8 	bl	800a1ec <__mcmp>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	db22      	blt.n	8008ee6 <quorem+0xec>
 8008ea0:	3601      	adds	r6, #1
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008eaa:	f8d1 c000 	ldr.w	ip, [r1]
 8008eae:	b293      	uxth	r3, r2
 8008eb0:	1ac3      	subs	r3, r0, r3
 8008eb2:	0c12      	lsrs	r2, r2, #16
 8008eb4:	fa13 f38c 	uxtah	r3, r3, ip
 8008eb8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008ebc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ec6:	45c1      	cmp	r9, r8
 8008ec8:	f841 3b04 	str.w	r3, [r1], #4
 8008ecc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ed0:	d2e9      	bcs.n	8008ea6 <quorem+0xac>
 8008ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eda:	b922      	cbnz	r2, 8008ee6 <quorem+0xec>
 8008edc:	3b04      	subs	r3, #4
 8008ede:	429d      	cmp	r5, r3
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	d30a      	bcc.n	8008efa <quorem+0x100>
 8008ee4:	613c      	str	r4, [r7, #16]
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	b003      	add	sp, #12
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	6812      	ldr	r2, [r2, #0]
 8008ef0:	3b04      	subs	r3, #4
 8008ef2:	2a00      	cmp	r2, #0
 8008ef4:	d1ce      	bne.n	8008e94 <quorem+0x9a>
 8008ef6:	3c01      	subs	r4, #1
 8008ef8:	e7c9      	b.n	8008e8e <quorem+0x94>
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	3b04      	subs	r3, #4
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d1f0      	bne.n	8008ee4 <quorem+0xea>
 8008f02:	3c01      	subs	r4, #1
 8008f04:	e7eb      	b.n	8008ede <quorem+0xe4>
 8008f06:	2000      	movs	r0, #0
 8008f08:	e7ee      	b.n	8008ee8 <quorem+0xee>
 8008f0a:	0000      	movs	r0, r0
 8008f0c:	0000      	movs	r0, r0
	...

08008f10 <_dtoa_r>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	ed2d 8b04 	vpush	{d8-d9}
 8008f18:	69c5      	ldr	r5, [r0, #28]
 8008f1a:	b093      	sub	sp, #76	; 0x4c
 8008f1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f20:	ec57 6b10 	vmov	r6, r7, d0
 8008f24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f28:	9107      	str	r1, [sp, #28]
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f2e:	930d      	str	r3, [sp, #52]	; 0x34
 8008f30:	b975      	cbnz	r5, 8008f50 <_dtoa_r+0x40>
 8008f32:	2010      	movs	r0, #16
 8008f34:	f000 fe2a 	bl	8009b8c <malloc>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	61e0      	str	r0, [r4, #28]
 8008f3c:	b920      	cbnz	r0, 8008f48 <_dtoa_r+0x38>
 8008f3e:	4bae      	ldr	r3, [pc, #696]	; (80091f8 <_dtoa_r+0x2e8>)
 8008f40:	21ef      	movs	r1, #239	; 0xef
 8008f42:	48ae      	ldr	r0, [pc, #696]	; (80091fc <_dtoa_r+0x2ec>)
 8008f44:	f001 fffc 	bl	800af40 <__assert_func>
 8008f48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f4c:	6005      	str	r5, [r0, #0]
 8008f4e:	60c5      	str	r5, [r0, #12]
 8008f50:	69e3      	ldr	r3, [r4, #28]
 8008f52:	6819      	ldr	r1, [r3, #0]
 8008f54:	b151      	cbz	r1, 8008f6c <_dtoa_r+0x5c>
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	604a      	str	r2, [r1, #4]
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	4093      	lsls	r3, r2
 8008f5e:	608b      	str	r3, [r1, #8]
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 ff07 	bl	8009d74 <_Bfree>
 8008f66:	69e3      	ldr	r3, [r4, #28]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	1e3b      	subs	r3, r7, #0
 8008f6e:	bfbb      	ittet	lt
 8008f70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f74:	9303      	strlt	r3, [sp, #12]
 8008f76:	2300      	movge	r3, #0
 8008f78:	2201      	movlt	r2, #1
 8008f7a:	bfac      	ite	ge
 8008f7c:	f8c8 3000 	strge.w	r3, [r8]
 8008f80:	f8c8 2000 	strlt.w	r2, [r8]
 8008f84:	4b9e      	ldr	r3, [pc, #632]	; (8009200 <_dtoa_r+0x2f0>)
 8008f86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f8a:	ea33 0308 	bics.w	r3, r3, r8
 8008f8e:	d11b      	bne.n	8008fc8 <_dtoa_r+0xb8>
 8008f90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f92:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008f9c:	4333      	orrs	r3, r6
 8008f9e:	f000 8593 	beq.w	8009ac8 <_dtoa_r+0xbb8>
 8008fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fa4:	b963      	cbnz	r3, 8008fc0 <_dtoa_r+0xb0>
 8008fa6:	4b97      	ldr	r3, [pc, #604]	; (8009204 <_dtoa_r+0x2f4>)
 8008fa8:	e027      	b.n	8008ffa <_dtoa_r+0xea>
 8008faa:	4b97      	ldr	r3, [pc, #604]	; (8009208 <_dtoa_r+0x2f8>)
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	9800      	ldr	r0, [sp, #0]
 8008fb6:	b013      	add	sp, #76	; 0x4c
 8008fb8:	ecbd 8b04 	vpop	{d8-d9}
 8008fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc0:	4b90      	ldr	r3, [pc, #576]	; (8009204 <_dtoa_r+0x2f4>)
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	3303      	adds	r3, #3
 8008fc6:	e7f3      	b.n	8008fb0 <_dtoa_r+0xa0>
 8008fc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	ec51 0b17 	vmov	r0, r1, d7
 8008fd2:	eeb0 8a47 	vmov.f32	s16, s14
 8008fd6:	eef0 8a67 	vmov.f32	s17, s15
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f7f7 fd7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fe0:	4681      	mov	r9, r0
 8008fe2:	b160      	cbz	r0, 8008ffe <_dtoa_r+0xee>
 8008fe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f000 8568 	beq.w	8009ac2 <_dtoa_r+0xbb2>
 8008ff2:	4b86      	ldr	r3, [pc, #536]	; (800920c <_dtoa_r+0x2fc>)
 8008ff4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	e7da      	b.n	8008fb4 <_dtoa_r+0xa4>
 8008ffe:	aa10      	add	r2, sp, #64	; 0x40
 8009000:	a911      	add	r1, sp, #68	; 0x44
 8009002:	4620      	mov	r0, r4
 8009004:	eeb0 0a48 	vmov.f32	s0, s16
 8009008:	eef0 0a68 	vmov.f32	s1, s17
 800900c:	f001 f994 	bl	800a338 <__d2b>
 8009010:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009014:	4682      	mov	sl, r0
 8009016:	2d00      	cmp	r5, #0
 8009018:	d07f      	beq.n	800911a <_dtoa_r+0x20a>
 800901a:	ee18 3a90 	vmov	r3, s17
 800901e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009022:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009026:	ec51 0b18 	vmov	r0, r1, d8
 800902a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800902e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009032:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009036:	4619      	mov	r1, r3
 8009038:	2200      	movs	r2, #0
 800903a:	4b75      	ldr	r3, [pc, #468]	; (8009210 <_dtoa_r+0x300>)
 800903c:	f7f7 f92c 	bl	8000298 <__aeabi_dsub>
 8009040:	a367      	add	r3, pc, #412	; (adr r3, 80091e0 <_dtoa_r+0x2d0>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f7f7 fadf 	bl	8000608 <__aeabi_dmul>
 800904a:	a367      	add	r3, pc, #412	; (adr r3, 80091e8 <_dtoa_r+0x2d8>)
 800904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009050:	f7f7 f924 	bl	800029c <__adddf3>
 8009054:	4606      	mov	r6, r0
 8009056:	4628      	mov	r0, r5
 8009058:	460f      	mov	r7, r1
 800905a:	f7f7 fa6b 	bl	8000534 <__aeabi_i2d>
 800905e:	a364      	add	r3, pc, #400	; (adr r3, 80091f0 <_dtoa_r+0x2e0>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f7f7 fad0 	bl	8000608 <__aeabi_dmul>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4630      	mov	r0, r6
 800906e:	4639      	mov	r1, r7
 8009070:	f7f7 f914 	bl	800029c <__adddf3>
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	f7f7 fd76 	bl	8000b68 <__aeabi_d2iz>
 800907c:	2200      	movs	r2, #0
 800907e:	4683      	mov	fp, r0
 8009080:	2300      	movs	r3, #0
 8009082:	4630      	mov	r0, r6
 8009084:	4639      	mov	r1, r7
 8009086:	f7f7 fd31 	bl	8000aec <__aeabi_dcmplt>
 800908a:	b148      	cbz	r0, 80090a0 <_dtoa_r+0x190>
 800908c:	4658      	mov	r0, fp
 800908e:	f7f7 fa51 	bl	8000534 <__aeabi_i2d>
 8009092:	4632      	mov	r2, r6
 8009094:	463b      	mov	r3, r7
 8009096:	f7f7 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800909a:	b908      	cbnz	r0, 80090a0 <_dtoa_r+0x190>
 800909c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80090a0:	f1bb 0f16 	cmp.w	fp, #22
 80090a4:	d857      	bhi.n	8009156 <_dtoa_r+0x246>
 80090a6:	4b5b      	ldr	r3, [pc, #364]	; (8009214 <_dtoa_r+0x304>)
 80090a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	ec51 0b18 	vmov	r0, r1, d8
 80090b4:	f7f7 fd1a 	bl	8000aec <__aeabi_dcmplt>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d04e      	beq.n	800915a <_dtoa_r+0x24a>
 80090bc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80090c0:	2300      	movs	r3, #0
 80090c2:	930c      	str	r3, [sp, #48]	; 0x30
 80090c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090c6:	1b5b      	subs	r3, r3, r5
 80090c8:	1e5a      	subs	r2, r3, #1
 80090ca:	bf45      	ittet	mi
 80090cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80090d0:	9305      	strmi	r3, [sp, #20]
 80090d2:	2300      	movpl	r3, #0
 80090d4:	2300      	movmi	r3, #0
 80090d6:	9206      	str	r2, [sp, #24]
 80090d8:	bf54      	ite	pl
 80090da:	9305      	strpl	r3, [sp, #20]
 80090dc:	9306      	strmi	r3, [sp, #24]
 80090de:	f1bb 0f00 	cmp.w	fp, #0
 80090e2:	db3c      	blt.n	800915e <_dtoa_r+0x24e>
 80090e4:	9b06      	ldr	r3, [sp, #24]
 80090e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80090ea:	445b      	add	r3, fp
 80090ec:	9306      	str	r3, [sp, #24]
 80090ee:	2300      	movs	r3, #0
 80090f0:	9308      	str	r3, [sp, #32]
 80090f2:	9b07      	ldr	r3, [sp, #28]
 80090f4:	2b09      	cmp	r3, #9
 80090f6:	d868      	bhi.n	80091ca <_dtoa_r+0x2ba>
 80090f8:	2b05      	cmp	r3, #5
 80090fa:	bfc4      	itt	gt
 80090fc:	3b04      	subgt	r3, #4
 80090fe:	9307      	strgt	r3, [sp, #28]
 8009100:	9b07      	ldr	r3, [sp, #28]
 8009102:	f1a3 0302 	sub.w	r3, r3, #2
 8009106:	bfcc      	ite	gt
 8009108:	2500      	movgt	r5, #0
 800910a:	2501      	movle	r5, #1
 800910c:	2b03      	cmp	r3, #3
 800910e:	f200 8085 	bhi.w	800921c <_dtoa_r+0x30c>
 8009112:	e8df f003 	tbb	[pc, r3]
 8009116:	3b2e      	.short	0x3b2e
 8009118:	5839      	.short	0x5839
 800911a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800911e:	441d      	add	r5, r3
 8009120:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009124:	2b20      	cmp	r3, #32
 8009126:	bfc1      	itttt	gt
 8009128:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800912c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009130:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009134:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009138:	bfd6      	itet	le
 800913a:	f1c3 0320 	rsble	r3, r3, #32
 800913e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009142:	fa06 f003 	lslle.w	r0, r6, r3
 8009146:	f7f7 f9e5 	bl	8000514 <__aeabi_ui2d>
 800914a:	2201      	movs	r2, #1
 800914c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009150:	3d01      	subs	r5, #1
 8009152:	920e      	str	r2, [sp, #56]	; 0x38
 8009154:	e76f      	b.n	8009036 <_dtoa_r+0x126>
 8009156:	2301      	movs	r3, #1
 8009158:	e7b3      	b.n	80090c2 <_dtoa_r+0x1b2>
 800915a:	900c      	str	r0, [sp, #48]	; 0x30
 800915c:	e7b2      	b.n	80090c4 <_dtoa_r+0x1b4>
 800915e:	9b05      	ldr	r3, [sp, #20]
 8009160:	eba3 030b 	sub.w	r3, r3, fp
 8009164:	9305      	str	r3, [sp, #20]
 8009166:	f1cb 0300 	rsb	r3, fp, #0
 800916a:	9308      	str	r3, [sp, #32]
 800916c:	2300      	movs	r3, #0
 800916e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009170:	e7bf      	b.n	80090f2 <_dtoa_r+0x1e2>
 8009172:	2300      	movs	r3, #0
 8009174:	9309      	str	r3, [sp, #36]	; 0x24
 8009176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009178:	2b00      	cmp	r3, #0
 800917a:	dc52      	bgt.n	8009222 <_dtoa_r+0x312>
 800917c:	2301      	movs	r3, #1
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	461a      	mov	r2, r3
 8009184:	920a      	str	r2, [sp, #40]	; 0x28
 8009186:	e00b      	b.n	80091a0 <_dtoa_r+0x290>
 8009188:	2301      	movs	r3, #1
 800918a:	e7f3      	b.n	8009174 <_dtoa_r+0x264>
 800918c:	2300      	movs	r3, #0
 800918e:	9309      	str	r3, [sp, #36]	; 0x24
 8009190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009192:	445b      	add	r3, fp
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	3301      	adds	r3, #1
 8009198:	2b01      	cmp	r3, #1
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	bfb8      	it	lt
 800919e:	2301      	movlt	r3, #1
 80091a0:	69e0      	ldr	r0, [r4, #28]
 80091a2:	2100      	movs	r1, #0
 80091a4:	2204      	movs	r2, #4
 80091a6:	f102 0614 	add.w	r6, r2, #20
 80091aa:	429e      	cmp	r6, r3
 80091ac:	d93d      	bls.n	800922a <_dtoa_r+0x31a>
 80091ae:	6041      	str	r1, [r0, #4]
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fd9f 	bl	8009cf4 <_Balloc>
 80091b6:	9000      	str	r0, [sp, #0]
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d139      	bne.n	8009230 <_dtoa_r+0x320>
 80091bc:	4b16      	ldr	r3, [pc, #88]	; (8009218 <_dtoa_r+0x308>)
 80091be:	4602      	mov	r2, r0
 80091c0:	f240 11af 	movw	r1, #431	; 0x1af
 80091c4:	e6bd      	b.n	8008f42 <_dtoa_r+0x32>
 80091c6:	2301      	movs	r3, #1
 80091c8:	e7e1      	b.n	800918e <_dtoa_r+0x27e>
 80091ca:	2501      	movs	r5, #1
 80091cc:	2300      	movs	r3, #0
 80091ce:	9307      	str	r3, [sp, #28]
 80091d0:	9509      	str	r5, [sp, #36]	; 0x24
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	2200      	movs	r2, #0
 80091dc:	2312      	movs	r3, #18
 80091de:	e7d1      	b.n	8009184 <_dtoa_r+0x274>
 80091e0:	636f4361 	.word	0x636f4361
 80091e4:	3fd287a7 	.word	0x3fd287a7
 80091e8:	8b60c8b3 	.word	0x8b60c8b3
 80091ec:	3fc68a28 	.word	0x3fc68a28
 80091f0:	509f79fb 	.word	0x509f79fb
 80091f4:	3fd34413 	.word	0x3fd34413
 80091f8:	0800bde7 	.word	0x0800bde7
 80091fc:	0800bdfe 	.word	0x0800bdfe
 8009200:	7ff00000 	.word	0x7ff00000
 8009204:	0800bde3 	.word	0x0800bde3
 8009208:	0800bdda 	.word	0x0800bdda
 800920c:	0800bfe4 	.word	0x0800bfe4
 8009210:	3ff80000 	.word	0x3ff80000
 8009214:	0800bee8 	.word	0x0800bee8
 8009218:	0800be56 	.word	0x0800be56
 800921c:	2301      	movs	r3, #1
 800921e:	9309      	str	r3, [sp, #36]	; 0x24
 8009220:	e7d7      	b.n	80091d2 <_dtoa_r+0x2c2>
 8009222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	9304      	str	r3, [sp, #16]
 8009228:	e7ba      	b.n	80091a0 <_dtoa_r+0x290>
 800922a:	3101      	adds	r1, #1
 800922c:	0052      	lsls	r2, r2, #1
 800922e:	e7ba      	b.n	80091a6 <_dtoa_r+0x296>
 8009230:	69e3      	ldr	r3, [r4, #28]
 8009232:	9a00      	ldr	r2, [sp, #0]
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	2b0e      	cmp	r3, #14
 800923a:	f200 80a8 	bhi.w	800938e <_dtoa_r+0x47e>
 800923e:	2d00      	cmp	r5, #0
 8009240:	f000 80a5 	beq.w	800938e <_dtoa_r+0x47e>
 8009244:	f1bb 0f00 	cmp.w	fp, #0
 8009248:	dd38      	ble.n	80092bc <_dtoa_r+0x3ac>
 800924a:	4bc0      	ldr	r3, [pc, #768]	; (800954c <_dtoa_r+0x63c>)
 800924c:	f00b 020f 	and.w	r2, fp, #15
 8009250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009254:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009258:	e9d3 6700 	ldrd	r6, r7, [r3]
 800925c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009260:	d019      	beq.n	8009296 <_dtoa_r+0x386>
 8009262:	4bbb      	ldr	r3, [pc, #748]	; (8009550 <_dtoa_r+0x640>)
 8009264:	ec51 0b18 	vmov	r0, r1, d8
 8009268:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800926c:	f7f7 faf6 	bl	800085c <__aeabi_ddiv>
 8009270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009274:	f008 080f 	and.w	r8, r8, #15
 8009278:	2503      	movs	r5, #3
 800927a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009550 <_dtoa_r+0x640>
 800927e:	f1b8 0f00 	cmp.w	r8, #0
 8009282:	d10a      	bne.n	800929a <_dtoa_r+0x38a>
 8009284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009288:	4632      	mov	r2, r6
 800928a:	463b      	mov	r3, r7
 800928c:	f7f7 fae6 	bl	800085c <__aeabi_ddiv>
 8009290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009294:	e02b      	b.n	80092ee <_dtoa_r+0x3de>
 8009296:	2502      	movs	r5, #2
 8009298:	e7ef      	b.n	800927a <_dtoa_r+0x36a>
 800929a:	f018 0f01 	tst.w	r8, #1
 800929e:	d008      	beq.n	80092b2 <_dtoa_r+0x3a2>
 80092a0:	4630      	mov	r0, r6
 80092a2:	4639      	mov	r1, r7
 80092a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80092a8:	f7f7 f9ae 	bl	8000608 <__aeabi_dmul>
 80092ac:	3501      	adds	r5, #1
 80092ae:	4606      	mov	r6, r0
 80092b0:	460f      	mov	r7, r1
 80092b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092b6:	f109 0908 	add.w	r9, r9, #8
 80092ba:	e7e0      	b.n	800927e <_dtoa_r+0x36e>
 80092bc:	f000 809f 	beq.w	80093fe <_dtoa_r+0x4ee>
 80092c0:	f1cb 0600 	rsb	r6, fp, #0
 80092c4:	4ba1      	ldr	r3, [pc, #644]	; (800954c <_dtoa_r+0x63c>)
 80092c6:	4fa2      	ldr	r7, [pc, #648]	; (8009550 <_dtoa_r+0x640>)
 80092c8:	f006 020f 	and.w	r2, r6, #15
 80092cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	ec51 0b18 	vmov	r0, r1, d8
 80092d8:	f7f7 f996 	bl	8000608 <__aeabi_dmul>
 80092dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e0:	1136      	asrs	r6, r6, #4
 80092e2:	2300      	movs	r3, #0
 80092e4:	2502      	movs	r5, #2
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	d17e      	bne.n	80093e8 <_dtoa_r+0x4d8>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1d0      	bne.n	8009290 <_dtoa_r+0x380>
 80092ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 8084 	beq.w	8009402 <_dtoa_r+0x4f2>
 80092fa:	4b96      	ldr	r3, [pc, #600]	; (8009554 <_dtoa_r+0x644>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	4640      	mov	r0, r8
 8009300:	4649      	mov	r1, r9
 8009302:	f7f7 fbf3 	bl	8000aec <__aeabi_dcmplt>
 8009306:	2800      	cmp	r0, #0
 8009308:	d07b      	beq.n	8009402 <_dtoa_r+0x4f2>
 800930a:	9b04      	ldr	r3, [sp, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d078      	beq.n	8009402 <_dtoa_r+0x4f2>
 8009310:	9b01      	ldr	r3, [sp, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	dd39      	ble.n	800938a <_dtoa_r+0x47a>
 8009316:	4b90      	ldr	r3, [pc, #576]	; (8009558 <_dtoa_r+0x648>)
 8009318:	2200      	movs	r2, #0
 800931a:	4640      	mov	r0, r8
 800931c:	4649      	mov	r1, r9
 800931e:	f7f7 f973 	bl	8000608 <__aeabi_dmul>
 8009322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009326:	9e01      	ldr	r6, [sp, #4]
 8009328:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800932c:	3501      	adds	r5, #1
 800932e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009332:	4628      	mov	r0, r5
 8009334:	f7f7 f8fe 	bl	8000534 <__aeabi_i2d>
 8009338:	4642      	mov	r2, r8
 800933a:	464b      	mov	r3, r9
 800933c:	f7f7 f964 	bl	8000608 <__aeabi_dmul>
 8009340:	4b86      	ldr	r3, [pc, #536]	; (800955c <_dtoa_r+0x64c>)
 8009342:	2200      	movs	r2, #0
 8009344:	f7f6 ffaa 	bl	800029c <__adddf3>
 8009348:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800934c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009350:	9303      	str	r3, [sp, #12]
 8009352:	2e00      	cmp	r6, #0
 8009354:	d158      	bne.n	8009408 <_dtoa_r+0x4f8>
 8009356:	4b82      	ldr	r3, [pc, #520]	; (8009560 <_dtoa_r+0x650>)
 8009358:	2200      	movs	r2, #0
 800935a:	4640      	mov	r0, r8
 800935c:	4649      	mov	r1, r9
 800935e:	f7f6 ff9b 	bl	8000298 <__aeabi_dsub>
 8009362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009366:	4680      	mov	r8, r0
 8009368:	4689      	mov	r9, r1
 800936a:	f7f7 fbdd 	bl	8000b28 <__aeabi_dcmpgt>
 800936e:	2800      	cmp	r0, #0
 8009370:	f040 8296 	bne.w	80098a0 <_dtoa_r+0x990>
 8009374:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009378:	4640      	mov	r0, r8
 800937a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800937e:	4649      	mov	r1, r9
 8009380:	f7f7 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8009384:	2800      	cmp	r0, #0
 8009386:	f040 8289 	bne.w	800989c <_dtoa_r+0x98c>
 800938a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800938e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009390:	2b00      	cmp	r3, #0
 8009392:	f2c0 814e 	blt.w	8009632 <_dtoa_r+0x722>
 8009396:	f1bb 0f0e 	cmp.w	fp, #14
 800939a:	f300 814a 	bgt.w	8009632 <_dtoa_r+0x722>
 800939e:	4b6b      	ldr	r3, [pc, #428]	; (800954c <_dtoa_r+0x63c>)
 80093a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f280 80dc 	bge.w	8009568 <_dtoa_r+0x658>
 80093b0:	9b04      	ldr	r3, [sp, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f300 80d8 	bgt.w	8009568 <_dtoa_r+0x658>
 80093b8:	f040 826f 	bne.w	800989a <_dtoa_r+0x98a>
 80093bc:	4b68      	ldr	r3, [pc, #416]	; (8009560 <_dtoa_r+0x650>)
 80093be:	2200      	movs	r2, #0
 80093c0:	4640      	mov	r0, r8
 80093c2:	4649      	mov	r1, r9
 80093c4:	f7f7 f920 	bl	8000608 <__aeabi_dmul>
 80093c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093cc:	f7f7 fba2 	bl	8000b14 <__aeabi_dcmpge>
 80093d0:	9e04      	ldr	r6, [sp, #16]
 80093d2:	4637      	mov	r7, r6
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f040 8245 	bne.w	8009864 <_dtoa_r+0x954>
 80093da:	9d00      	ldr	r5, [sp, #0]
 80093dc:	2331      	movs	r3, #49	; 0x31
 80093de:	f805 3b01 	strb.w	r3, [r5], #1
 80093e2:	f10b 0b01 	add.w	fp, fp, #1
 80093e6:	e241      	b.n	800986c <_dtoa_r+0x95c>
 80093e8:	07f2      	lsls	r2, r6, #31
 80093ea:	d505      	bpl.n	80093f8 <_dtoa_r+0x4e8>
 80093ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f0:	f7f7 f90a 	bl	8000608 <__aeabi_dmul>
 80093f4:	3501      	adds	r5, #1
 80093f6:	2301      	movs	r3, #1
 80093f8:	1076      	asrs	r6, r6, #1
 80093fa:	3708      	adds	r7, #8
 80093fc:	e773      	b.n	80092e6 <_dtoa_r+0x3d6>
 80093fe:	2502      	movs	r5, #2
 8009400:	e775      	b.n	80092ee <_dtoa_r+0x3de>
 8009402:	9e04      	ldr	r6, [sp, #16]
 8009404:	465f      	mov	r7, fp
 8009406:	e792      	b.n	800932e <_dtoa_r+0x41e>
 8009408:	9900      	ldr	r1, [sp, #0]
 800940a:	4b50      	ldr	r3, [pc, #320]	; (800954c <_dtoa_r+0x63c>)
 800940c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009410:	4431      	add	r1, r6
 8009412:	9102      	str	r1, [sp, #8]
 8009414:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009416:	eeb0 9a47 	vmov.f32	s18, s14
 800941a:	eef0 9a67 	vmov.f32	s19, s15
 800941e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009422:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009426:	2900      	cmp	r1, #0
 8009428:	d044      	beq.n	80094b4 <_dtoa_r+0x5a4>
 800942a:	494e      	ldr	r1, [pc, #312]	; (8009564 <_dtoa_r+0x654>)
 800942c:	2000      	movs	r0, #0
 800942e:	f7f7 fa15 	bl	800085c <__aeabi_ddiv>
 8009432:	ec53 2b19 	vmov	r2, r3, d9
 8009436:	f7f6 ff2f 	bl	8000298 <__aeabi_dsub>
 800943a:	9d00      	ldr	r5, [sp, #0]
 800943c:	ec41 0b19 	vmov	d9, r0, r1
 8009440:	4649      	mov	r1, r9
 8009442:	4640      	mov	r0, r8
 8009444:	f7f7 fb90 	bl	8000b68 <__aeabi_d2iz>
 8009448:	4606      	mov	r6, r0
 800944a:	f7f7 f873 	bl	8000534 <__aeabi_i2d>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4640      	mov	r0, r8
 8009454:	4649      	mov	r1, r9
 8009456:	f7f6 ff1f 	bl	8000298 <__aeabi_dsub>
 800945a:	3630      	adds	r6, #48	; 0x30
 800945c:	f805 6b01 	strb.w	r6, [r5], #1
 8009460:	ec53 2b19 	vmov	r2, r3, d9
 8009464:	4680      	mov	r8, r0
 8009466:	4689      	mov	r9, r1
 8009468:	f7f7 fb40 	bl	8000aec <__aeabi_dcmplt>
 800946c:	2800      	cmp	r0, #0
 800946e:	d164      	bne.n	800953a <_dtoa_r+0x62a>
 8009470:	4642      	mov	r2, r8
 8009472:	464b      	mov	r3, r9
 8009474:	4937      	ldr	r1, [pc, #220]	; (8009554 <_dtoa_r+0x644>)
 8009476:	2000      	movs	r0, #0
 8009478:	f7f6 ff0e 	bl	8000298 <__aeabi_dsub>
 800947c:	ec53 2b19 	vmov	r2, r3, d9
 8009480:	f7f7 fb34 	bl	8000aec <__aeabi_dcmplt>
 8009484:	2800      	cmp	r0, #0
 8009486:	f040 80b6 	bne.w	80095f6 <_dtoa_r+0x6e6>
 800948a:	9b02      	ldr	r3, [sp, #8]
 800948c:	429d      	cmp	r5, r3
 800948e:	f43f af7c 	beq.w	800938a <_dtoa_r+0x47a>
 8009492:	4b31      	ldr	r3, [pc, #196]	; (8009558 <_dtoa_r+0x648>)
 8009494:	ec51 0b19 	vmov	r0, r1, d9
 8009498:	2200      	movs	r2, #0
 800949a:	f7f7 f8b5 	bl	8000608 <__aeabi_dmul>
 800949e:	4b2e      	ldr	r3, [pc, #184]	; (8009558 <_dtoa_r+0x648>)
 80094a0:	ec41 0b19 	vmov	d9, r0, r1
 80094a4:	2200      	movs	r2, #0
 80094a6:	4640      	mov	r0, r8
 80094a8:	4649      	mov	r1, r9
 80094aa:	f7f7 f8ad 	bl	8000608 <__aeabi_dmul>
 80094ae:	4680      	mov	r8, r0
 80094b0:	4689      	mov	r9, r1
 80094b2:	e7c5      	b.n	8009440 <_dtoa_r+0x530>
 80094b4:	ec51 0b17 	vmov	r0, r1, d7
 80094b8:	f7f7 f8a6 	bl	8000608 <__aeabi_dmul>
 80094bc:	9b02      	ldr	r3, [sp, #8]
 80094be:	9d00      	ldr	r5, [sp, #0]
 80094c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80094c2:	ec41 0b19 	vmov	d9, r0, r1
 80094c6:	4649      	mov	r1, r9
 80094c8:	4640      	mov	r0, r8
 80094ca:	f7f7 fb4d 	bl	8000b68 <__aeabi_d2iz>
 80094ce:	4606      	mov	r6, r0
 80094d0:	f7f7 f830 	bl	8000534 <__aeabi_i2d>
 80094d4:	3630      	adds	r6, #48	; 0x30
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f6 fedb 	bl	8000298 <__aeabi_dsub>
 80094e2:	f805 6b01 	strb.w	r6, [r5], #1
 80094e6:	9b02      	ldr	r3, [sp, #8]
 80094e8:	429d      	cmp	r5, r3
 80094ea:	4680      	mov	r8, r0
 80094ec:	4689      	mov	r9, r1
 80094ee:	f04f 0200 	mov.w	r2, #0
 80094f2:	d124      	bne.n	800953e <_dtoa_r+0x62e>
 80094f4:	4b1b      	ldr	r3, [pc, #108]	; (8009564 <_dtoa_r+0x654>)
 80094f6:	ec51 0b19 	vmov	r0, r1, d9
 80094fa:	f7f6 fecf 	bl	800029c <__adddf3>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f7 fb0f 	bl	8000b28 <__aeabi_dcmpgt>
 800950a:	2800      	cmp	r0, #0
 800950c:	d173      	bne.n	80095f6 <_dtoa_r+0x6e6>
 800950e:	ec53 2b19 	vmov	r2, r3, d9
 8009512:	4914      	ldr	r1, [pc, #80]	; (8009564 <_dtoa_r+0x654>)
 8009514:	2000      	movs	r0, #0
 8009516:	f7f6 febf 	bl	8000298 <__aeabi_dsub>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4640      	mov	r0, r8
 8009520:	4649      	mov	r1, r9
 8009522:	f7f7 fae3 	bl	8000aec <__aeabi_dcmplt>
 8009526:	2800      	cmp	r0, #0
 8009528:	f43f af2f 	beq.w	800938a <_dtoa_r+0x47a>
 800952c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800952e:	1e6b      	subs	r3, r5, #1
 8009530:	930f      	str	r3, [sp, #60]	; 0x3c
 8009532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009536:	2b30      	cmp	r3, #48	; 0x30
 8009538:	d0f8      	beq.n	800952c <_dtoa_r+0x61c>
 800953a:	46bb      	mov	fp, r7
 800953c:	e04a      	b.n	80095d4 <_dtoa_r+0x6c4>
 800953e:	4b06      	ldr	r3, [pc, #24]	; (8009558 <_dtoa_r+0x648>)
 8009540:	f7f7 f862 	bl	8000608 <__aeabi_dmul>
 8009544:	4680      	mov	r8, r0
 8009546:	4689      	mov	r9, r1
 8009548:	e7bd      	b.n	80094c6 <_dtoa_r+0x5b6>
 800954a:	bf00      	nop
 800954c:	0800bee8 	.word	0x0800bee8
 8009550:	0800bec0 	.word	0x0800bec0
 8009554:	3ff00000 	.word	0x3ff00000
 8009558:	40240000 	.word	0x40240000
 800955c:	401c0000 	.word	0x401c0000
 8009560:	40140000 	.word	0x40140000
 8009564:	3fe00000 	.word	0x3fe00000
 8009568:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800956c:	9d00      	ldr	r5, [sp, #0]
 800956e:	4642      	mov	r2, r8
 8009570:	464b      	mov	r3, r9
 8009572:	4630      	mov	r0, r6
 8009574:	4639      	mov	r1, r7
 8009576:	f7f7 f971 	bl	800085c <__aeabi_ddiv>
 800957a:	f7f7 faf5 	bl	8000b68 <__aeabi_d2iz>
 800957e:	9001      	str	r0, [sp, #4]
 8009580:	f7f6 ffd8 	bl	8000534 <__aeabi_i2d>
 8009584:	4642      	mov	r2, r8
 8009586:	464b      	mov	r3, r9
 8009588:	f7f7 f83e 	bl	8000608 <__aeabi_dmul>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f7f6 fe80 	bl	8000298 <__aeabi_dsub>
 8009598:	9e01      	ldr	r6, [sp, #4]
 800959a:	9f04      	ldr	r7, [sp, #16]
 800959c:	3630      	adds	r6, #48	; 0x30
 800959e:	f805 6b01 	strb.w	r6, [r5], #1
 80095a2:	9e00      	ldr	r6, [sp, #0]
 80095a4:	1bae      	subs	r6, r5, r6
 80095a6:	42b7      	cmp	r7, r6
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	d134      	bne.n	8009618 <_dtoa_r+0x708>
 80095ae:	f7f6 fe75 	bl	800029c <__adddf3>
 80095b2:	4642      	mov	r2, r8
 80095b4:	464b      	mov	r3, r9
 80095b6:	4606      	mov	r6, r0
 80095b8:	460f      	mov	r7, r1
 80095ba:	f7f7 fab5 	bl	8000b28 <__aeabi_dcmpgt>
 80095be:	b9c8      	cbnz	r0, 80095f4 <_dtoa_r+0x6e4>
 80095c0:	4642      	mov	r2, r8
 80095c2:	464b      	mov	r3, r9
 80095c4:	4630      	mov	r0, r6
 80095c6:	4639      	mov	r1, r7
 80095c8:	f7f7 fa86 	bl	8000ad8 <__aeabi_dcmpeq>
 80095cc:	b110      	cbz	r0, 80095d4 <_dtoa_r+0x6c4>
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	07db      	lsls	r3, r3, #31
 80095d2:	d40f      	bmi.n	80095f4 <_dtoa_r+0x6e4>
 80095d4:	4651      	mov	r1, sl
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 fbcc 	bl	8009d74 <_Bfree>
 80095dc:	2300      	movs	r3, #0
 80095de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095e0:	702b      	strb	r3, [r5, #0]
 80095e2:	f10b 0301 	add.w	r3, fp, #1
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f43f ace2 	beq.w	8008fb4 <_dtoa_r+0xa4>
 80095f0:	601d      	str	r5, [r3, #0]
 80095f2:	e4df      	b.n	8008fb4 <_dtoa_r+0xa4>
 80095f4:	465f      	mov	r7, fp
 80095f6:	462b      	mov	r3, r5
 80095f8:	461d      	mov	r5, r3
 80095fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095fe:	2a39      	cmp	r2, #57	; 0x39
 8009600:	d106      	bne.n	8009610 <_dtoa_r+0x700>
 8009602:	9a00      	ldr	r2, [sp, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d1f7      	bne.n	80095f8 <_dtoa_r+0x6e8>
 8009608:	9900      	ldr	r1, [sp, #0]
 800960a:	2230      	movs	r2, #48	; 0x30
 800960c:	3701      	adds	r7, #1
 800960e:	700a      	strb	r2, [r1, #0]
 8009610:	781a      	ldrb	r2, [r3, #0]
 8009612:	3201      	adds	r2, #1
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	e790      	b.n	800953a <_dtoa_r+0x62a>
 8009618:	4ba3      	ldr	r3, [pc, #652]	; (80098a8 <_dtoa_r+0x998>)
 800961a:	2200      	movs	r2, #0
 800961c:	f7f6 fff4 	bl	8000608 <__aeabi_dmul>
 8009620:	2200      	movs	r2, #0
 8009622:	2300      	movs	r3, #0
 8009624:	4606      	mov	r6, r0
 8009626:	460f      	mov	r7, r1
 8009628:	f7f7 fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800962c:	2800      	cmp	r0, #0
 800962e:	d09e      	beq.n	800956e <_dtoa_r+0x65e>
 8009630:	e7d0      	b.n	80095d4 <_dtoa_r+0x6c4>
 8009632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009634:	2a00      	cmp	r2, #0
 8009636:	f000 80ca 	beq.w	80097ce <_dtoa_r+0x8be>
 800963a:	9a07      	ldr	r2, [sp, #28]
 800963c:	2a01      	cmp	r2, #1
 800963e:	f300 80ad 	bgt.w	800979c <_dtoa_r+0x88c>
 8009642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009644:	2a00      	cmp	r2, #0
 8009646:	f000 80a5 	beq.w	8009794 <_dtoa_r+0x884>
 800964a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800964e:	9e08      	ldr	r6, [sp, #32]
 8009650:	9d05      	ldr	r5, [sp, #20]
 8009652:	9a05      	ldr	r2, [sp, #20]
 8009654:	441a      	add	r2, r3
 8009656:	9205      	str	r2, [sp, #20]
 8009658:	9a06      	ldr	r2, [sp, #24]
 800965a:	2101      	movs	r1, #1
 800965c:	441a      	add	r2, r3
 800965e:	4620      	mov	r0, r4
 8009660:	9206      	str	r2, [sp, #24]
 8009662:	f000 fc3d 	bl	8009ee0 <__i2b>
 8009666:	4607      	mov	r7, r0
 8009668:	b165      	cbz	r5, 8009684 <_dtoa_r+0x774>
 800966a:	9b06      	ldr	r3, [sp, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	dd09      	ble.n	8009684 <_dtoa_r+0x774>
 8009670:	42ab      	cmp	r3, r5
 8009672:	9a05      	ldr	r2, [sp, #20]
 8009674:	bfa8      	it	ge
 8009676:	462b      	movge	r3, r5
 8009678:	1ad2      	subs	r2, r2, r3
 800967a:	9205      	str	r2, [sp, #20]
 800967c:	9a06      	ldr	r2, [sp, #24]
 800967e:	1aed      	subs	r5, r5, r3
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	9306      	str	r3, [sp, #24]
 8009684:	9b08      	ldr	r3, [sp, #32]
 8009686:	b1f3      	cbz	r3, 80096c6 <_dtoa_r+0x7b6>
 8009688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 80a3 	beq.w	80097d6 <_dtoa_r+0x8c6>
 8009690:	2e00      	cmp	r6, #0
 8009692:	dd10      	ble.n	80096b6 <_dtoa_r+0x7a6>
 8009694:	4639      	mov	r1, r7
 8009696:	4632      	mov	r2, r6
 8009698:	4620      	mov	r0, r4
 800969a:	f000 fce1 	bl	800a060 <__pow5mult>
 800969e:	4652      	mov	r2, sl
 80096a0:	4601      	mov	r1, r0
 80096a2:	4607      	mov	r7, r0
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fc31 	bl	8009f0c <__multiply>
 80096aa:	4651      	mov	r1, sl
 80096ac:	4680      	mov	r8, r0
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 fb60 	bl	8009d74 <_Bfree>
 80096b4:	46c2      	mov	sl, r8
 80096b6:	9b08      	ldr	r3, [sp, #32]
 80096b8:	1b9a      	subs	r2, r3, r6
 80096ba:	d004      	beq.n	80096c6 <_dtoa_r+0x7b6>
 80096bc:	4651      	mov	r1, sl
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 fcce 	bl	800a060 <__pow5mult>
 80096c4:	4682      	mov	sl, r0
 80096c6:	2101      	movs	r1, #1
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 fc09 	bl	8009ee0 <__i2b>
 80096ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	4606      	mov	r6, r0
 80096d4:	f340 8081 	ble.w	80097da <_dtoa_r+0x8ca>
 80096d8:	461a      	mov	r2, r3
 80096da:	4601      	mov	r1, r0
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 fcbf 	bl	800a060 <__pow5mult>
 80096e2:	9b07      	ldr	r3, [sp, #28]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	4606      	mov	r6, r0
 80096e8:	dd7a      	ble.n	80097e0 <_dtoa_r+0x8d0>
 80096ea:	f04f 0800 	mov.w	r8, #0
 80096ee:	6933      	ldr	r3, [r6, #16]
 80096f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096f4:	6918      	ldr	r0, [r3, #16]
 80096f6:	f000 fba5 	bl	8009e44 <__hi0bits>
 80096fa:	f1c0 0020 	rsb	r0, r0, #32
 80096fe:	9b06      	ldr	r3, [sp, #24]
 8009700:	4418      	add	r0, r3
 8009702:	f010 001f 	ands.w	r0, r0, #31
 8009706:	f000 8094 	beq.w	8009832 <_dtoa_r+0x922>
 800970a:	f1c0 0320 	rsb	r3, r0, #32
 800970e:	2b04      	cmp	r3, #4
 8009710:	f340 8085 	ble.w	800981e <_dtoa_r+0x90e>
 8009714:	9b05      	ldr	r3, [sp, #20]
 8009716:	f1c0 001c 	rsb	r0, r0, #28
 800971a:	4403      	add	r3, r0
 800971c:	9305      	str	r3, [sp, #20]
 800971e:	9b06      	ldr	r3, [sp, #24]
 8009720:	4403      	add	r3, r0
 8009722:	4405      	add	r5, r0
 8009724:	9306      	str	r3, [sp, #24]
 8009726:	9b05      	ldr	r3, [sp, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	dd05      	ble.n	8009738 <_dtoa_r+0x828>
 800972c:	4651      	mov	r1, sl
 800972e:	461a      	mov	r2, r3
 8009730:	4620      	mov	r0, r4
 8009732:	f000 fcef 	bl	800a114 <__lshift>
 8009736:	4682      	mov	sl, r0
 8009738:	9b06      	ldr	r3, [sp, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	dd05      	ble.n	800974a <_dtoa_r+0x83a>
 800973e:	4631      	mov	r1, r6
 8009740:	461a      	mov	r2, r3
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fce6 	bl	800a114 <__lshift>
 8009748:	4606      	mov	r6, r0
 800974a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800974c:	2b00      	cmp	r3, #0
 800974e:	d072      	beq.n	8009836 <_dtoa_r+0x926>
 8009750:	4631      	mov	r1, r6
 8009752:	4650      	mov	r0, sl
 8009754:	f000 fd4a 	bl	800a1ec <__mcmp>
 8009758:	2800      	cmp	r0, #0
 800975a:	da6c      	bge.n	8009836 <_dtoa_r+0x926>
 800975c:	2300      	movs	r3, #0
 800975e:	4651      	mov	r1, sl
 8009760:	220a      	movs	r2, #10
 8009762:	4620      	mov	r0, r4
 8009764:	f000 fb28 	bl	8009db8 <__multadd>
 8009768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800976e:	4682      	mov	sl, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 81b0 	beq.w	8009ad6 <_dtoa_r+0xbc6>
 8009776:	2300      	movs	r3, #0
 8009778:	4639      	mov	r1, r7
 800977a:	220a      	movs	r2, #10
 800977c:	4620      	mov	r0, r4
 800977e:	f000 fb1b 	bl	8009db8 <__multadd>
 8009782:	9b01      	ldr	r3, [sp, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	4607      	mov	r7, r0
 8009788:	f300 8096 	bgt.w	80098b8 <_dtoa_r+0x9a8>
 800978c:	9b07      	ldr	r3, [sp, #28]
 800978e:	2b02      	cmp	r3, #2
 8009790:	dc59      	bgt.n	8009846 <_dtoa_r+0x936>
 8009792:	e091      	b.n	80098b8 <_dtoa_r+0x9a8>
 8009794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009796:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800979a:	e758      	b.n	800964e <_dtoa_r+0x73e>
 800979c:	9b04      	ldr	r3, [sp, #16]
 800979e:	1e5e      	subs	r6, r3, #1
 80097a0:	9b08      	ldr	r3, [sp, #32]
 80097a2:	42b3      	cmp	r3, r6
 80097a4:	bfbf      	itttt	lt
 80097a6:	9b08      	ldrlt	r3, [sp, #32]
 80097a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80097aa:	9608      	strlt	r6, [sp, #32]
 80097ac:	1af3      	sublt	r3, r6, r3
 80097ae:	bfb4      	ite	lt
 80097b0:	18d2      	addlt	r2, r2, r3
 80097b2:	1b9e      	subge	r6, r3, r6
 80097b4:	9b04      	ldr	r3, [sp, #16]
 80097b6:	bfbc      	itt	lt
 80097b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80097ba:	2600      	movlt	r6, #0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bfb7      	itett	lt
 80097c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80097c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80097c8:	1a9d      	sublt	r5, r3, r2
 80097ca:	2300      	movlt	r3, #0
 80097cc:	e741      	b.n	8009652 <_dtoa_r+0x742>
 80097ce:	9e08      	ldr	r6, [sp, #32]
 80097d0:	9d05      	ldr	r5, [sp, #20]
 80097d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097d4:	e748      	b.n	8009668 <_dtoa_r+0x758>
 80097d6:	9a08      	ldr	r2, [sp, #32]
 80097d8:	e770      	b.n	80096bc <_dtoa_r+0x7ac>
 80097da:	9b07      	ldr	r3, [sp, #28]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	dc19      	bgt.n	8009814 <_dtoa_r+0x904>
 80097e0:	9b02      	ldr	r3, [sp, #8]
 80097e2:	b9bb      	cbnz	r3, 8009814 <_dtoa_r+0x904>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097ea:	b99b      	cbnz	r3, 8009814 <_dtoa_r+0x904>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097f2:	0d1b      	lsrs	r3, r3, #20
 80097f4:	051b      	lsls	r3, r3, #20
 80097f6:	b183      	cbz	r3, 800981a <_dtoa_r+0x90a>
 80097f8:	9b05      	ldr	r3, [sp, #20]
 80097fa:	3301      	adds	r3, #1
 80097fc:	9305      	str	r3, [sp, #20]
 80097fe:	9b06      	ldr	r3, [sp, #24]
 8009800:	3301      	adds	r3, #1
 8009802:	9306      	str	r3, [sp, #24]
 8009804:	f04f 0801 	mov.w	r8, #1
 8009808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800980a:	2b00      	cmp	r3, #0
 800980c:	f47f af6f 	bne.w	80096ee <_dtoa_r+0x7de>
 8009810:	2001      	movs	r0, #1
 8009812:	e774      	b.n	80096fe <_dtoa_r+0x7ee>
 8009814:	f04f 0800 	mov.w	r8, #0
 8009818:	e7f6      	b.n	8009808 <_dtoa_r+0x8f8>
 800981a:	4698      	mov	r8, r3
 800981c:	e7f4      	b.n	8009808 <_dtoa_r+0x8f8>
 800981e:	d082      	beq.n	8009726 <_dtoa_r+0x816>
 8009820:	9a05      	ldr	r2, [sp, #20]
 8009822:	331c      	adds	r3, #28
 8009824:	441a      	add	r2, r3
 8009826:	9205      	str	r2, [sp, #20]
 8009828:	9a06      	ldr	r2, [sp, #24]
 800982a:	441a      	add	r2, r3
 800982c:	441d      	add	r5, r3
 800982e:	9206      	str	r2, [sp, #24]
 8009830:	e779      	b.n	8009726 <_dtoa_r+0x816>
 8009832:	4603      	mov	r3, r0
 8009834:	e7f4      	b.n	8009820 <_dtoa_r+0x910>
 8009836:	9b04      	ldr	r3, [sp, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	dc37      	bgt.n	80098ac <_dtoa_r+0x99c>
 800983c:	9b07      	ldr	r3, [sp, #28]
 800983e:	2b02      	cmp	r3, #2
 8009840:	dd34      	ble.n	80098ac <_dtoa_r+0x99c>
 8009842:	9b04      	ldr	r3, [sp, #16]
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	b963      	cbnz	r3, 8009864 <_dtoa_r+0x954>
 800984a:	4631      	mov	r1, r6
 800984c:	2205      	movs	r2, #5
 800984e:	4620      	mov	r0, r4
 8009850:	f000 fab2 	bl	8009db8 <__multadd>
 8009854:	4601      	mov	r1, r0
 8009856:	4606      	mov	r6, r0
 8009858:	4650      	mov	r0, sl
 800985a:	f000 fcc7 	bl	800a1ec <__mcmp>
 800985e:	2800      	cmp	r0, #0
 8009860:	f73f adbb 	bgt.w	80093da <_dtoa_r+0x4ca>
 8009864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009866:	9d00      	ldr	r5, [sp, #0]
 8009868:	ea6f 0b03 	mvn.w	fp, r3
 800986c:	f04f 0800 	mov.w	r8, #0
 8009870:	4631      	mov	r1, r6
 8009872:	4620      	mov	r0, r4
 8009874:	f000 fa7e 	bl	8009d74 <_Bfree>
 8009878:	2f00      	cmp	r7, #0
 800987a:	f43f aeab 	beq.w	80095d4 <_dtoa_r+0x6c4>
 800987e:	f1b8 0f00 	cmp.w	r8, #0
 8009882:	d005      	beq.n	8009890 <_dtoa_r+0x980>
 8009884:	45b8      	cmp	r8, r7
 8009886:	d003      	beq.n	8009890 <_dtoa_r+0x980>
 8009888:	4641      	mov	r1, r8
 800988a:	4620      	mov	r0, r4
 800988c:	f000 fa72 	bl	8009d74 <_Bfree>
 8009890:	4639      	mov	r1, r7
 8009892:	4620      	mov	r0, r4
 8009894:	f000 fa6e 	bl	8009d74 <_Bfree>
 8009898:	e69c      	b.n	80095d4 <_dtoa_r+0x6c4>
 800989a:	2600      	movs	r6, #0
 800989c:	4637      	mov	r7, r6
 800989e:	e7e1      	b.n	8009864 <_dtoa_r+0x954>
 80098a0:	46bb      	mov	fp, r7
 80098a2:	4637      	mov	r7, r6
 80098a4:	e599      	b.n	80093da <_dtoa_r+0x4ca>
 80098a6:	bf00      	nop
 80098a8:	40240000 	.word	0x40240000
 80098ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 80c8 	beq.w	8009a44 <_dtoa_r+0xb34>
 80098b4:	9b04      	ldr	r3, [sp, #16]
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	2d00      	cmp	r5, #0
 80098ba:	dd05      	ble.n	80098c8 <_dtoa_r+0x9b8>
 80098bc:	4639      	mov	r1, r7
 80098be:	462a      	mov	r2, r5
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 fc27 	bl	800a114 <__lshift>
 80098c6:	4607      	mov	r7, r0
 80098c8:	f1b8 0f00 	cmp.w	r8, #0
 80098cc:	d05b      	beq.n	8009986 <_dtoa_r+0xa76>
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 fa0f 	bl	8009cf4 <_Balloc>
 80098d6:	4605      	mov	r5, r0
 80098d8:	b928      	cbnz	r0, 80098e6 <_dtoa_r+0x9d6>
 80098da:	4b83      	ldr	r3, [pc, #524]	; (8009ae8 <_dtoa_r+0xbd8>)
 80098dc:	4602      	mov	r2, r0
 80098de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80098e2:	f7ff bb2e 	b.w	8008f42 <_dtoa_r+0x32>
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	3202      	adds	r2, #2
 80098ea:	0092      	lsls	r2, r2, #2
 80098ec:	f107 010c 	add.w	r1, r7, #12
 80098f0:	300c      	adds	r0, #12
 80098f2:	f7ff fa74 	bl	8008dde <memcpy>
 80098f6:	2201      	movs	r2, #1
 80098f8:	4629      	mov	r1, r5
 80098fa:	4620      	mov	r0, r4
 80098fc:	f000 fc0a 	bl	800a114 <__lshift>
 8009900:	9b00      	ldr	r3, [sp, #0]
 8009902:	3301      	adds	r3, #1
 8009904:	9304      	str	r3, [sp, #16]
 8009906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800990a:	4413      	add	r3, r2
 800990c:	9308      	str	r3, [sp, #32]
 800990e:	9b02      	ldr	r3, [sp, #8]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	46b8      	mov	r8, r7
 8009916:	9306      	str	r3, [sp, #24]
 8009918:	4607      	mov	r7, r0
 800991a:	9b04      	ldr	r3, [sp, #16]
 800991c:	4631      	mov	r1, r6
 800991e:	3b01      	subs	r3, #1
 8009920:	4650      	mov	r0, sl
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	f7ff fa69 	bl	8008dfa <quorem>
 8009928:	4641      	mov	r1, r8
 800992a:	9002      	str	r0, [sp, #8]
 800992c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009930:	4650      	mov	r0, sl
 8009932:	f000 fc5b 	bl	800a1ec <__mcmp>
 8009936:	463a      	mov	r2, r7
 8009938:	9005      	str	r0, [sp, #20]
 800993a:	4631      	mov	r1, r6
 800993c:	4620      	mov	r0, r4
 800993e:	f000 fc71 	bl	800a224 <__mdiff>
 8009942:	68c2      	ldr	r2, [r0, #12]
 8009944:	4605      	mov	r5, r0
 8009946:	bb02      	cbnz	r2, 800998a <_dtoa_r+0xa7a>
 8009948:	4601      	mov	r1, r0
 800994a:	4650      	mov	r0, sl
 800994c:	f000 fc4e 	bl	800a1ec <__mcmp>
 8009950:	4602      	mov	r2, r0
 8009952:	4629      	mov	r1, r5
 8009954:	4620      	mov	r0, r4
 8009956:	9209      	str	r2, [sp, #36]	; 0x24
 8009958:	f000 fa0c 	bl	8009d74 <_Bfree>
 800995c:	9b07      	ldr	r3, [sp, #28]
 800995e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009960:	9d04      	ldr	r5, [sp, #16]
 8009962:	ea43 0102 	orr.w	r1, r3, r2
 8009966:	9b06      	ldr	r3, [sp, #24]
 8009968:	4319      	orrs	r1, r3
 800996a:	d110      	bne.n	800998e <_dtoa_r+0xa7e>
 800996c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009970:	d029      	beq.n	80099c6 <_dtoa_r+0xab6>
 8009972:	9b05      	ldr	r3, [sp, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	dd02      	ble.n	800997e <_dtoa_r+0xa6e>
 8009978:	9b02      	ldr	r3, [sp, #8]
 800997a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	f883 9000 	strb.w	r9, [r3]
 8009984:	e774      	b.n	8009870 <_dtoa_r+0x960>
 8009986:	4638      	mov	r0, r7
 8009988:	e7ba      	b.n	8009900 <_dtoa_r+0x9f0>
 800998a:	2201      	movs	r2, #1
 800998c:	e7e1      	b.n	8009952 <_dtoa_r+0xa42>
 800998e:	9b05      	ldr	r3, [sp, #20]
 8009990:	2b00      	cmp	r3, #0
 8009992:	db04      	blt.n	800999e <_dtoa_r+0xa8e>
 8009994:	9907      	ldr	r1, [sp, #28]
 8009996:	430b      	orrs	r3, r1
 8009998:	9906      	ldr	r1, [sp, #24]
 800999a:	430b      	orrs	r3, r1
 800999c:	d120      	bne.n	80099e0 <_dtoa_r+0xad0>
 800999e:	2a00      	cmp	r2, #0
 80099a0:	dded      	ble.n	800997e <_dtoa_r+0xa6e>
 80099a2:	4651      	mov	r1, sl
 80099a4:	2201      	movs	r2, #1
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 fbb4 	bl	800a114 <__lshift>
 80099ac:	4631      	mov	r1, r6
 80099ae:	4682      	mov	sl, r0
 80099b0:	f000 fc1c 	bl	800a1ec <__mcmp>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	dc03      	bgt.n	80099c0 <_dtoa_r+0xab0>
 80099b8:	d1e1      	bne.n	800997e <_dtoa_r+0xa6e>
 80099ba:	f019 0f01 	tst.w	r9, #1
 80099be:	d0de      	beq.n	800997e <_dtoa_r+0xa6e>
 80099c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099c4:	d1d8      	bne.n	8009978 <_dtoa_r+0xa68>
 80099c6:	9a01      	ldr	r2, [sp, #4]
 80099c8:	2339      	movs	r3, #57	; 0x39
 80099ca:	7013      	strb	r3, [r2, #0]
 80099cc:	462b      	mov	r3, r5
 80099ce:	461d      	mov	r5, r3
 80099d0:	3b01      	subs	r3, #1
 80099d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099d6:	2a39      	cmp	r2, #57	; 0x39
 80099d8:	d06c      	beq.n	8009ab4 <_dtoa_r+0xba4>
 80099da:	3201      	adds	r2, #1
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	e747      	b.n	8009870 <_dtoa_r+0x960>
 80099e0:	2a00      	cmp	r2, #0
 80099e2:	dd07      	ble.n	80099f4 <_dtoa_r+0xae4>
 80099e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099e8:	d0ed      	beq.n	80099c6 <_dtoa_r+0xab6>
 80099ea:	9a01      	ldr	r2, [sp, #4]
 80099ec:	f109 0301 	add.w	r3, r9, #1
 80099f0:	7013      	strb	r3, [r2, #0]
 80099f2:	e73d      	b.n	8009870 <_dtoa_r+0x960>
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	9a08      	ldr	r2, [sp, #32]
 80099f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d043      	beq.n	8009a88 <_dtoa_r+0xb78>
 8009a00:	4651      	mov	r1, sl
 8009a02:	2300      	movs	r3, #0
 8009a04:	220a      	movs	r2, #10
 8009a06:	4620      	mov	r0, r4
 8009a08:	f000 f9d6 	bl	8009db8 <__multadd>
 8009a0c:	45b8      	cmp	r8, r7
 8009a0e:	4682      	mov	sl, r0
 8009a10:	f04f 0300 	mov.w	r3, #0
 8009a14:	f04f 020a 	mov.w	r2, #10
 8009a18:	4641      	mov	r1, r8
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	d107      	bne.n	8009a2e <_dtoa_r+0xb1e>
 8009a1e:	f000 f9cb 	bl	8009db8 <__multadd>
 8009a22:	4680      	mov	r8, r0
 8009a24:	4607      	mov	r7, r0
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	e775      	b.n	800991a <_dtoa_r+0xa0a>
 8009a2e:	f000 f9c3 	bl	8009db8 <__multadd>
 8009a32:	4639      	mov	r1, r7
 8009a34:	4680      	mov	r8, r0
 8009a36:	2300      	movs	r3, #0
 8009a38:	220a      	movs	r2, #10
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f9bc 	bl	8009db8 <__multadd>
 8009a40:	4607      	mov	r7, r0
 8009a42:	e7f0      	b.n	8009a26 <_dtoa_r+0xb16>
 8009a44:	9b04      	ldr	r3, [sp, #16]
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	9d00      	ldr	r5, [sp, #0]
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4650      	mov	r0, sl
 8009a4e:	f7ff f9d4 	bl	8008dfa <quorem>
 8009a52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a56:	9b00      	ldr	r3, [sp, #0]
 8009a58:	f805 9b01 	strb.w	r9, [r5], #1
 8009a5c:	1aea      	subs	r2, r5, r3
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	4293      	cmp	r3, r2
 8009a62:	dd07      	ble.n	8009a74 <_dtoa_r+0xb64>
 8009a64:	4651      	mov	r1, sl
 8009a66:	2300      	movs	r3, #0
 8009a68:	220a      	movs	r2, #10
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 f9a4 	bl	8009db8 <__multadd>
 8009a70:	4682      	mov	sl, r0
 8009a72:	e7ea      	b.n	8009a4a <_dtoa_r+0xb3a>
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	bfc8      	it	gt
 8009a7a:	461d      	movgt	r5, r3
 8009a7c:	9b00      	ldr	r3, [sp, #0]
 8009a7e:	bfd8      	it	le
 8009a80:	2501      	movle	r5, #1
 8009a82:	441d      	add	r5, r3
 8009a84:	f04f 0800 	mov.w	r8, #0
 8009a88:	4651      	mov	r1, sl
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f000 fb41 	bl	800a114 <__lshift>
 8009a92:	4631      	mov	r1, r6
 8009a94:	4682      	mov	sl, r0
 8009a96:	f000 fba9 	bl	800a1ec <__mcmp>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	dc96      	bgt.n	80099cc <_dtoa_r+0xabc>
 8009a9e:	d102      	bne.n	8009aa6 <_dtoa_r+0xb96>
 8009aa0:	f019 0f01 	tst.w	r9, #1
 8009aa4:	d192      	bne.n	80099cc <_dtoa_r+0xabc>
 8009aa6:	462b      	mov	r3, r5
 8009aa8:	461d      	mov	r5, r3
 8009aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009aae:	2a30      	cmp	r2, #48	; 0x30
 8009ab0:	d0fa      	beq.n	8009aa8 <_dtoa_r+0xb98>
 8009ab2:	e6dd      	b.n	8009870 <_dtoa_r+0x960>
 8009ab4:	9a00      	ldr	r2, [sp, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d189      	bne.n	80099ce <_dtoa_r+0xabe>
 8009aba:	f10b 0b01 	add.w	fp, fp, #1
 8009abe:	2331      	movs	r3, #49	; 0x31
 8009ac0:	e796      	b.n	80099f0 <_dtoa_r+0xae0>
 8009ac2:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <_dtoa_r+0xbdc>)
 8009ac4:	f7ff ba99 	b.w	8008ffa <_dtoa_r+0xea>
 8009ac8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f47f aa6d 	bne.w	8008faa <_dtoa_r+0x9a>
 8009ad0:	4b07      	ldr	r3, [pc, #28]	; (8009af0 <_dtoa_r+0xbe0>)
 8009ad2:	f7ff ba92 	b.w	8008ffa <_dtoa_r+0xea>
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dcb5      	bgt.n	8009a48 <_dtoa_r+0xb38>
 8009adc:	9b07      	ldr	r3, [sp, #28]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	f73f aeb1 	bgt.w	8009846 <_dtoa_r+0x936>
 8009ae4:	e7b0      	b.n	8009a48 <_dtoa_r+0xb38>
 8009ae6:	bf00      	nop
 8009ae8:	0800be56 	.word	0x0800be56
 8009aec:	0800bfe3 	.word	0x0800bfe3
 8009af0:	0800bdda 	.word	0x0800bdda

08009af4 <_free_r>:
 8009af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009af6:	2900      	cmp	r1, #0
 8009af8:	d044      	beq.n	8009b84 <_free_r+0x90>
 8009afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009afe:	9001      	str	r0, [sp, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f1a1 0404 	sub.w	r4, r1, #4
 8009b06:	bfb8      	it	lt
 8009b08:	18e4      	addlt	r4, r4, r3
 8009b0a:	f000 f8e7 	bl	8009cdc <__malloc_lock>
 8009b0e:	4a1e      	ldr	r2, [pc, #120]	; (8009b88 <_free_r+0x94>)
 8009b10:	9801      	ldr	r0, [sp, #4]
 8009b12:	6813      	ldr	r3, [r2, #0]
 8009b14:	b933      	cbnz	r3, 8009b24 <_free_r+0x30>
 8009b16:	6063      	str	r3, [r4, #4]
 8009b18:	6014      	str	r4, [r2, #0]
 8009b1a:	b003      	add	sp, #12
 8009b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b20:	f000 b8e2 	b.w	8009ce8 <__malloc_unlock>
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	d908      	bls.n	8009b3a <_free_r+0x46>
 8009b28:	6825      	ldr	r5, [r4, #0]
 8009b2a:	1961      	adds	r1, r4, r5
 8009b2c:	428b      	cmp	r3, r1
 8009b2e:	bf01      	itttt	eq
 8009b30:	6819      	ldreq	r1, [r3, #0]
 8009b32:	685b      	ldreq	r3, [r3, #4]
 8009b34:	1949      	addeq	r1, r1, r5
 8009b36:	6021      	streq	r1, [r4, #0]
 8009b38:	e7ed      	b.n	8009b16 <_free_r+0x22>
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	b10b      	cbz	r3, 8009b44 <_free_r+0x50>
 8009b40:	42a3      	cmp	r3, r4
 8009b42:	d9fa      	bls.n	8009b3a <_free_r+0x46>
 8009b44:	6811      	ldr	r1, [r2, #0]
 8009b46:	1855      	adds	r5, r2, r1
 8009b48:	42a5      	cmp	r5, r4
 8009b4a:	d10b      	bne.n	8009b64 <_free_r+0x70>
 8009b4c:	6824      	ldr	r4, [r4, #0]
 8009b4e:	4421      	add	r1, r4
 8009b50:	1854      	adds	r4, r2, r1
 8009b52:	42a3      	cmp	r3, r4
 8009b54:	6011      	str	r1, [r2, #0]
 8009b56:	d1e0      	bne.n	8009b1a <_free_r+0x26>
 8009b58:	681c      	ldr	r4, [r3, #0]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	6053      	str	r3, [r2, #4]
 8009b5e:	440c      	add	r4, r1
 8009b60:	6014      	str	r4, [r2, #0]
 8009b62:	e7da      	b.n	8009b1a <_free_r+0x26>
 8009b64:	d902      	bls.n	8009b6c <_free_r+0x78>
 8009b66:	230c      	movs	r3, #12
 8009b68:	6003      	str	r3, [r0, #0]
 8009b6a:	e7d6      	b.n	8009b1a <_free_r+0x26>
 8009b6c:	6825      	ldr	r5, [r4, #0]
 8009b6e:	1961      	adds	r1, r4, r5
 8009b70:	428b      	cmp	r3, r1
 8009b72:	bf04      	itt	eq
 8009b74:	6819      	ldreq	r1, [r3, #0]
 8009b76:	685b      	ldreq	r3, [r3, #4]
 8009b78:	6063      	str	r3, [r4, #4]
 8009b7a:	bf04      	itt	eq
 8009b7c:	1949      	addeq	r1, r1, r5
 8009b7e:	6021      	streq	r1, [r4, #0]
 8009b80:	6054      	str	r4, [r2, #4]
 8009b82:	e7ca      	b.n	8009b1a <_free_r+0x26>
 8009b84:	b003      	add	sp, #12
 8009b86:	bd30      	pop	{r4, r5, pc}
 8009b88:	200028f8 	.word	0x200028f8

08009b8c <malloc>:
 8009b8c:	4b02      	ldr	r3, [pc, #8]	; (8009b98 <malloc+0xc>)
 8009b8e:	4601      	mov	r1, r0
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	f000 b823 	b.w	8009bdc <_malloc_r>
 8009b96:	bf00      	nop
 8009b98:	20000150 	.word	0x20000150

08009b9c <sbrk_aligned>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	4e0e      	ldr	r6, [pc, #56]	; (8009bd8 <sbrk_aligned+0x3c>)
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	6831      	ldr	r1, [r6, #0]
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	b911      	cbnz	r1, 8009bae <sbrk_aligned+0x12>
 8009ba8:	f001 f9ba 	bl	800af20 <_sbrk_r>
 8009bac:	6030      	str	r0, [r6, #0]
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f001 f9b5 	bl	800af20 <_sbrk_r>
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	d00a      	beq.n	8009bd0 <sbrk_aligned+0x34>
 8009bba:	1cc4      	adds	r4, r0, #3
 8009bbc:	f024 0403 	bic.w	r4, r4, #3
 8009bc0:	42a0      	cmp	r0, r4
 8009bc2:	d007      	beq.n	8009bd4 <sbrk_aligned+0x38>
 8009bc4:	1a21      	subs	r1, r4, r0
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f001 f9aa 	bl	800af20 <_sbrk_r>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d101      	bne.n	8009bd4 <sbrk_aligned+0x38>
 8009bd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
 8009bd8:	200028fc 	.word	0x200028fc

08009bdc <_malloc_r>:
 8009bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be0:	1ccd      	adds	r5, r1, #3
 8009be2:	f025 0503 	bic.w	r5, r5, #3
 8009be6:	3508      	adds	r5, #8
 8009be8:	2d0c      	cmp	r5, #12
 8009bea:	bf38      	it	cc
 8009bec:	250c      	movcc	r5, #12
 8009bee:	2d00      	cmp	r5, #0
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	db01      	blt.n	8009bf8 <_malloc_r+0x1c>
 8009bf4:	42a9      	cmp	r1, r5
 8009bf6:	d905      	bls.n	8009c04 <_malloc_r+0x28>
 8009bf8:	230c      	movs	r3, #12
 8009bfa:	603b      	str	r3, [r7, #0]
 8009bfc:	2600      	movs	r6, #0
 8009bfe:	4630      	mov	r0, r6
 8009c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009cd8 <_malloc_r+0xfc>
 8009c08:	f000 f868 	bl	8009cdc <__malloc_lock>
 8009c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c10:	461c      	mov	r4, r3
 8009c12:	bb5c      	cbnz	r4, 8009c6c <_malloc_r+0x90>
 8009c14:	4629      	mov	r1, r5
 8009c16:	4638      	mov	r0, r7
 8009c18:	f7ff ffc0 	bl	8009b9c <sbrk_aligned>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	4604      	mov	r4, r0
 8009c20:	d155      	bne.n	8009cce <_malloc_r+0xf2>
 8009c22:	f8d8 4000 	ldr.w	r4, [r8]
 8009c26:	4626      	mov	r6, r4
 8009c28:	2e00      	cmp	r6, #0
 8009c2a:	d145      	bne.n	8009cb8 <_malloc_r+0xdc>
 8009c2c:	2c00      	cmp	r4, #0
 8009c2e:	d048      	beq.n	8009cc2 <_malloc_r+0xe6>
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	4631      	mov	r1, r6
 8009c34:	4638      	mov	r0, r7
 8009c36:	eb04 0903 	add.w	r9, r4, r3
 8009c3a:	f001 f971 	bl	800af20 <_sbrk_r>
 8009c3e:	4581      	cmp	r9, r0
 8009c40:	d13f      	bne.n	8009cc2 <_malloc_r+0xe6>
 8009c42:	6821      	ldr	r1, [r4, #0]
 8009c44:	1a6d      	subs	r5, r5, r1
 8009c46:	4629      	mov	r1, r5
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f7ff ffa7 	bl	8009b9c <sbrk_aligned>
 8009c4e:	3001      	adds	r0, #1
 8009c50:	d037      	beq.n	8009cc2 <_malloc_r+0xe6>
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	442b      	add	r3, r5
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	f8d8 3000 	ldr.w	r3, [r8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d038      	beq.n	8009cd2 <_malloc_r+0xf6>
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	42a2      	cmp	r2, r4
 8009c64:	d12b      	bne.n	8009cbe <_malloc_r+0xe2>
 8009c66:	2200      	movs	r2, #0
 8009c68:	605a      	str	r2, [r3, #4]
 8009c6a:	e00f      	b.n	8009c8c <_malloc_r+0xb0>
 8009c6c:	6822      	ldr	r2, [r4, #0]
 8009c6e:	1b52      	subs	r2, r2, r5
 8009c70:	d41f      	bmi.n	8009cb2 <_malloc_r+0xd6>
 8009c72:	2a0b      	cmp	r2, #11
 8009c74:	d917      	bls.n	8009ca6 <_malloc_r+0xca>
 8009c76:	1961      	adds	r1, r4, r5
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	6025      	str	r5, [r4, #0]
 8009c7c:	bf18      	it	ne
 8009c7e:	6059      	strne	r1, [r3, #4]
 8009c80:	6863      	ldr	r3, [r4, #4]
 8009c82:	bf08      	it	eq
 8009c84:	f8c8 1000 	streq.w	r1, [r8]
 8009c88:	5162      	str	r2, [r4, r5]
 8009c8a:	604b      	str	r3, [r1, #4]
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f104 060b 	add.w	r6, r4, #11
 8009c92:	f000 f829 	bl	8009ce8 <__malloc_unlock>
 8009c96:	f026 0607 	bic.w	r6, r6, #7
 8009c9a:	1d23      	adds	r3, r4, #4
 8009c9c:	1af2      	subs	r2, r6, r3
 8009c9e:	d0ae      	beq.n	8009bfe <_malloc_r+0x22>
 8009ca0:	1b9b      	subs	r3, r3, r6
 8009ca2:	50a3      	str	r3, [r4, r2]
 8009ca4:	e7ab      	b.n	8009bfe <_malloc_r+0x22>
 8009ca6:	42a3      	cmp	r3, r4
 8009ca8:	6862      	ldr	r2, [r4, #4]
 8009caa:	d1dd      	bne.n	8009c68 <_malloc_r+0x8c>
 8009cac:	f8c8 2000 	str.w	r2, [r8]
 8009cb0:	e7ec      	b.n	8009c8c <_malloc_r+0xb0>
 8009cb2:	4623      	mov	r3, r4
 8009cb4:	6864      	ldr	r4, [r4, #4]
 8009cb6:	e7ac      	b.n	8009c12 <_malloc_r+0x36>
 8009cb8:	4634      	mov	r4, r6
 8009cba:	6876      	ldr	r6, [r6, #4]
 8009cbc:	e7b4      	b.n	8009c28 <_malloc_r+0x4c>
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	e7cc      	b.n	8009c5c <_malloc_r+0x80>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	603b      	str	r3, [r7, #0]
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	f000 f80e 	bl	8009ce8 <__malloc_unlock>
 8009ccc:	e797      	b.n	8009bfe <_malloc_r+0x22>
 8009cce:	6025      	str	r5, [r4, #0]
 8009cd0:	e7dc      	b.n	8009c8c <_malloc_r+0xb0>
 8009cd2:	605b      	str	r3, [r3, #4]
 8009cd4:	deff      	udf	#255	; 0xff
 8009cd6:	bf00      	nop
 8009cd8:	200028f8 	.word	0x200028f8

08009cdc <__malloc_lock>:
 8009cdc:	4801      	ldr	r0, [pc, #4]	; (8009ce4 <__malloc_lock+0x8>)
 8009cde:	f7ff b87c 	b.w	8008dda <__retarget_lock_acquire_recursive>
 8009ce2:	bf00      	nop
 8009ce4:	200028f4 	.word	0x200028f4

08009ce8 <__malloc_unlock>:
 8009ce8:	4801      	ldr	r0, [pc, #4]	; (8009cf0 <__malloc_unlock+0x8>)
 8009cea:	f7ff b877 	b.w	8008ddc <__retarget_lock_release_recursive>
 8009cee:	bf00      	nop
 8009cf0:	200028f4 	.word	0x200028f4

08009cf4 <_Balloc>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	69c6      	ldr	r6, [r0, #28]
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	b976      	cbnz	r6, 8009d1c <_Balloc+0x28>
 8009cfe:	2010      	movs	r0, #16
 8009d00:	f7ff ff44 	bl	8009b8c <malloc>
 8009d04:	4602      	mov	r2, r0
 8009d06:	61e0      	str	r0, [r4, #28]
 8009d08:	b920      	cbnz	r0, 8009d14 <_Balloc+0x20>
 8009d0a:	4b18      	ldr	r3, [pc, #96]	; (8009d6c <_Balloc+0x78>)
 8009d0c:	4818      	ldr	r0, [pc, #96]	; (8009d70 <_Balloc+0x7c>)
 8009d0e:	216b      	movs	r1, #107	; 0x6b
 8009d10:	f001 f916 	bl	800af40 <__assert_func>
 8009d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d18:	6006      	str	r6, [r0, #0]
 8009d1a:	60c6      	str	r6, [r0, #12]
 8009d1c:	69e6      	ldr	r6, [r4, #28]
 8009d1e:	68f3      	ldr	r3, [r6, #12]
 8009d20:	b183      	cbz	r3, 8009d44 <_Balloc+0x50>
 8009d22:	69e3      	ldr	r3, [r4, #28]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d2a:	b9b8      	cbnz	r0, 8009d5c <_Balloc+0x68>
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	fa01 f605 	lsl.w	r6, r1, r5
 8009d32:	1d72      	adds	r2, r6, #5
 8009d34:	0092      	lsls	r2, r2, #2
 8009d36:	4620      	mov	r0, r4
 8009d38:	f001 f920 	bl	800af7c <_calloc_r>
 8009d3c:	b160      	cbz	r0, 8009d58 <_Balloc+0x64>
 8009d3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d42:	e00e      	b.n	8009d62 <_Balloc+0x6e>
 8009d44:	2221      	movs	r2, #33	; 0x21
 8009d46:	2104      	movs	r1, #4
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f001 f917 	bl	800af7c <_calloc_r>
 8009d4e:	69e3      	ldr	r3, [r4, #28]
 8009d50:	60f0      	str	r0, [r6, #12]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1e4      	bne.n	8009d22 <_Balloc+0x2e>
 8009d58:	2000      	movs	r0, #0
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	6802      	ldr	r2, [r0, #0]
 8009d5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d62:	2300      	movs	r3, #0
 8009d64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d68:	e7f7      	b.n	8009d5a <_Balloc+0x66>
 8009d6a:	bf00      	nop
 8009d6c:	0800bde7 	.word	0x0800bde7
 8009d70:	0800be67 	.word	0x0800be67

08009d74 <_Bfree>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	69c6      	ldr	r6, [r0, #28]
 8009d78:	4605      	mov	r5, r0
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	b976      	cbnz	r6, 8009d9c <_Bfree+0x28>
 8009d7e:	2010      	movs	r0, #16
 8009d80:	f7ff ff04 	bl	8009b8c <malloc>
 8009d84:	4602      	mov	r2, r0
 8009d86:	61e8      	str	r0, [r5, #28]
 8009d88:	b920      	cbnz	r0, 8009d94 <_Bfree+0x20>
 8009d8a:	4b09      	ldr	r3, [pc, #36]	; (8009db0 <_Bfree+0x3c>)
 8009d8c:	4809      	ldr	r0, [pc, #36]	; (8009db4 <_Bfree+0x40>)
 8009d8e:	218f      	movs	r1, #143	; 0x8f
 8009d90:	f001 f8d6 	bl	800af40 <__assert_func>
 8009d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d98:	6006      	str	r6, [r0, #0]
 8009d9a:	60c6      	str	r6, [r0, #12]
 8009d9c:	b13c      	cbz	r4, 8009dae <_Bfree+0x3a>
 8009d9e:	69eb      	ldr	r3, [r5, #28]
 8009da0:	6862      	ldr	r2, [r4, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009da8:	6021      	str	r1, [r4, #0]
 8009daa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	0800bde7 	.word	0x0800bde7
 8009db4:	0800be67 	.word	0x0800be67

08009db8 <__multadd>:
 8009db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbc:	690d      	ldr	r5, [r1, #16]
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	461e      	mov	r6, r3
 8009dc4:	f101 0c14 	add.w	ip, r1, #20
 8009dc8:	2000      	movs	r0, #0
 8009dca:	f8dc 3000 	ldr.w	r3, [ip]
 8009dce:	b299      	uxth	r1, r3
 8009dd0:	fb02 6101 	mla	r1, r2, r1, r6
 8009dd4:	0c1e      	lsrs	r6, r3, #16
 8009dd6:	0c0b      	lsrs	r3, r1, #16
 8009dd8:	fb02 3306 	mla	r3, r2, r6, r3
 8009ddc:	b289      	uxth	r1, r1
 8009dde:	3001      	adds	r0, #1
 8009de0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009de4:	4285      	cmp	r5, r0
 8009de6:	f84c 1b04 	str.w	r1, [ip], #4
 8009dea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dee:	dcec      	bgt.n	8009dca <__multadd+0x12>
 8009df0:	b30e      	cbz	r6, 8009e36 <__multadd+0x7e>
 8009df2:	68a3      	ldr	r3, [r4, #8]
 8009df4:	42ab      	cmp	r3, r5
 8009df6:	dc19      	bgt.n	8009e2c <__multadd+0x74>
 8009df8:	6861      	ldr	r1, [r4, #4]
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	3101      	adds	r1, #1
 8009dfe:	f7ff ff79 	bl	8009cf4 <_Balloc>
 8009e02:	4680      	mov	r8, r0
 8009e04:	b928      	cbnz	r0, 8009e12 <__multadd+0x5a>
 8009e06:	4602      	mov	r2, r0
 8009e08:	4b0c      	ldr	r3, [pc, #48]	; (8009e3c <__multadd+0x84>)
 8009e0a:	480d      	ldr	r0, [pc, #52]	; (8009e40 <__multadd+0x88>)
 8009e0c:	21ba      	movs	r1, #186	; 0xba
 8009e0e:	f001 f897 	bl	800af40 <__assert_func>
 8009e12:	6922      	ldr	r2, [r4, #16]
 8009e14:	3202      	adds	r2, #2
 8009e16:	f104 010c 	add.w	r1, r4, #12
 8009e1a:	0092      	lsls	r2, r2, #2
 8009e1c:	300c      	adds	r0, #12
 8009e1e:	f7fe ffde 	bl	8008dde <memcpy>
 8009e22:	4621      	mov	r1, r4
 8009e24:	4638      	mov	r0, r7
 8009e26:	f7ff ffa5 	bl	8009d74 <_Bfree>
 8009e2a:	4644      	mov	r4, r8
 8009e2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e30:	3501      	adds	r5, #1
 8009e32:	615e      	str	r6, [r3, #20]
 8009e34:	6125      	str	r5, [r4, #16]
 8009e36:	4620      	mov	r0, r4
 8009e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e3c:	0800be56 	.word	0x0800be56
 8009e40:	0800be67 	.word	0x0800be67

08009e44 <__hi0bits>:
 8009e44:	0c03      	lsrs	r3, r0, #16
 8009e46:	041b      	lsls	r3, r3, #16
 8009e48:	b9d3      	cbnz	r3, 8009e80 <__hi0bits+0x3c>
 8009e4a:	0400      	lsls	r0, r0, #16
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e52:	bf04      	itt	eq
 8009e54:	0200      	lsleq	r0, r0, #8
 8009e56:	3308      	addeq	r3, #8
 8009e58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e5c:	bf04      	itt	eq
 8009e5e:	0100      	lsleq	r0, r0, #4
 8009e60:	3304      	addeq	r3, #4
 8009e62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e66:	bf04      	itt	eq
 8009e68:	0080      	lsleq	r0, r0, #2
 8009e6a:	3302      	addeq	r3, #2
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	db05      	blt.n	8009e7c <__hi0bits+0x38>
 8009e70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e74:	f103 0301 	add.w	r3, r3, #1
 8009e78:	bf08      	it	eq
 8009e7a:	2320      	moveq	r3, #32
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	4770      	bx	lr
 8009e80:	2300      	movs	r3, #0
 8009e82:	e7e4      	b.n	8009e4e <__hi0bits+0xa>

08009e84 <__lo0bits>:
 8009e84:	6803      	ldr	r3, [r0, #0]
 8009e86:	f013 0207 	ands.w	r2, r3, #7
 8009e8a:	d00c      	beq.n	8009ea6 <__lo0bits+0x22>
 8009e8c:	07d9      	lsls	r1, r3, #31
 8009e8e:	d422      	bmi.n	8009ed6 <__lo0bits+0x52>
 8009e90:	079a      	lsls	r2, r3, #30
 8009e92:	bf49      	itett	mi
 8009e94:	085b      	lsrmi	r3, r3, #1
 8009e96:	089b      	lsrpl	r3, r3, #2
 8009e98:	6003      	strmi	r3, [r0, #0]
 8009e9a:	2201      	movmi	r2, #1
 8009e9c:	bf5c      	itt	pl
 8009e9e:	6003      	strpl	r3, [r0, #0]
 8009ea0:	2202      	movpl	r2, #2
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	4770      	bx	lr
 8009ea6:	b299      	uxth	r1, r3
 8009ea8:	b909      	cbnz	r1, 8009eae <__lo0bits+0x2a>
 8009eaa:	0c1b      	lsrs	r3, r3, #16
 8009eac:	2210      	movs	r2, #16
 8009eae:	b2d9      	uxtb	r1, r3
 8009eb0:	b909      	cbnz	r1, 8009eb6 <__lo0bits+0x32>
 8009eb2:	3208      	adds	r2, #8
 8009eb4:	0a1b      	lsrs	r3, r3, #8
 8009eb6:	0719      	lsls	r1, r3, #28
 8009eb8:	bf04      	itt	eq
 8009eba:	091b      	lsreq	r3, r3, #4
 8009ebc:	3204      	addeq	r2, #4
 8009ebe:	0799      	lsls	r1, r3, #30
 8009ec0:	bf04      	itt	eq
 8009ec2:	089b      	lsreq	r3, r3, #2
 8009ec4:	3202      	addeq	r2, #2
 8009ec6:	07d9      	lsls	r1, r3, #31
 8009ec8:	d403      	bmi.n	8009ed2 <__lo0bits+0x4e>
 8009eca:	085b      	lsrs	r3, r3, #1
 8009ecc:	f102 0201 	add.w	r2, r2, #1
 8009ed0:	d003      	beq.n	8009eda <__lo0bits+0x56>
 8009ed2:	6003      	str	r3, [r0, #0]
 8009ed4:	e7e5      	b.n	8009ea2 <__lo0bits+0x1e>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	e7e3      	b.n	8009ea2 <__lo0bits+0x1e>
 8009eda:	2220      	movs	r2, #32
 8009edc:	e7e1      	b.n	8009ea2 <__lo0bits+0x1e>
	...

08009ee0 <__i2b>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	f7ff ff05 	bl	8009cf4 <_Balloc>
 8009eea:	4602      	mov	r2, r0
 8009eec:	b928      	cbnz	r0, 8009efa <__i2b+0x1a>
 8009eee:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <__i2b+0x24>)
 8009ef0:	4805      	ldr	r0, [pc, #20]	; (8009f08 <__i2b+0x28>)
 8009ef2:	f240 1145 	movw	r1, #325	; 0x145
 8009ef6:	f001 f823 	bl	800af40 <__assert_func>
 8009efa:	2301      	movs	r3, #1
 8009efc:	6144      	str	r4, [r0, #20]
 8009efe:	6103      	str	r3, [r0, #16]
 8009f00:	bd10      	pop	{r4, pc}
 8009f02:	bf00      	nop
 8009f04:	0800be56 	.word	0x0800be56
 8009f08:	0800be67 	.word	0x0800be67

08009f0c <__multiply>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	4691      	mov	r9, r2
 8009f12:	690a      	ldr	r2, [r1, #16]
 8009f14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	bfb8      	it	lt
 8009f1c:	460b      	movlt	r3, r1
 8009f1e:	460c      	mov	r4, r1
 8009f20:	bfbc      	itt	lt
 8009f22:	464c      	movlt	r4, r9
 8009f24:	4699      	movlt	r9, r3
 8009f26:	6927      	ldr	r7, [r4, #16]
 8009f28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f2c:	68a3      	ldr	r3, [r4, #8]
 8009f2e:	6861      	ldr	r1, [r4, #4]
 8009f30:	eb07 060a 	add.w	r6, r7, sl
 8009f34:	42b3      	cmp	r3, r6
 8009f36:	b085      	sub	sp, #20
 8009f38:	bfb8      	it	lt
 8009f3a:	3101      	addlt	r1, #1
 8009f3c:	f7ff feda 	bl	8009cf4 <_Balloc>
 8009f40:	b930      	cbnz	r0, 8009f50 <__multiply+0x44>
 8009f42:	4602      	mov	r2, r0
 8009f44:	4b44      	ldr	r3, [pc, #272]	; (800a058 <__multiply+0x14c>)
 8009f46:	4845      	ldr	r0, [pc, #276]	; (800a05c <__multiply+0x150>)
 8009f48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009f4c:	f000 fff8 	bl	800af40 <__assert_func>
 8009f50:	f100 0514 	add.w	r5, r0, #20
 8009f54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f58:	462b      	mov	r3, r5
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	4543      	cmp	r3, r8
 8009f5e:	d321      	bcc.n	8009fa4 <__multiply+0x98>
 8009f60:	f104 0314 	add.w	r3, r4, #20
 8009f64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f68:	f109 0314 	add.w	r3, r9, #20
 8009f6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f70:	9202      	str	r2, [sp, #8]
 8009f72:	1b3a      	subs	r2, r7, r4
 8009f74:	3a15      	subs	r2, #21
 8009f76:	f022 0203 	bic.w	r2, r2, #3
 8009f7a:	3204      	adds	r2, #4
 8009f7c:	f104 0115 	add.w	r1, r4, #21
 8009f80:	428f      	cmp	r7, r1
 8009f82:	bf38      	it	cc
 8009f84:	2204      	movcc	r2, #4
 8009f86:	9201      	str	r2, [sp, #4]
 8009f88:	9a02      	ldr	r2, [sp, #8]
 8009f8a:	9303      	str	r3, [sp, #12]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d80c      	bhi.n	8009faa <__multiply+0x9e>
 8009f90:	2e00      	cmp	r6, #0
 8009f92:	dd03      	ble.n	8009f9c <__multiply+0x90>
 8009f94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d05b      	beq.n	800a054 <__multiply+0x148>
 8009f9c:	6106      	str	r6, [r0, #16]
 8009f9e:	b005      	add	sp, #20
 8009fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa4:	f843 2b04 	str.w	r2, [r3], #4
 8009fa8:	e7d8      	b.n	8009f5c <__multiply+0x50>
 8009faa:	f8b3 a000 	ldrh.w	sl, [r3]
 8009fae:	f1ba 0f00 	cmp.w	sl, #0
 8009fb2:	d024      	beq.n	8009ffe <__multiply+0xf2>
 8009fb4:	f104 0e14 	add.w	lr, r4, #20
 8009fb8:	46a9      	mov	r9, r5
 8009fba:	f04f 0c00 	mov.w	ip, #0
 8009fbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009fc2:	f8d9 1000 	ldr.w	r1, [r9]
 8009fc6:	fa1f fb82 	uxth.w	fp, r2
 8009fca:	b289      	uxth	r1, r1
 8009fcc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009fd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009fd4:	f8d9 2000 	ldr.w	r2, [r9]
 8009fd8:	4461      	add	r1, ip
 8009fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fde:	fb0a c20b 	mla	r2, sl, fp, ip
 8009fe2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fe6:	b289      	uxth	r1, r1
 8009fe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fec:	4577      	cmp	r7, lr
 8009fee:	f849 1b04 	str.w	r1, [r9], #4
 8009ff2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ff6:	d8e2      	bhi.n	8009fbe <__multiply+0xb2>
 8009ff8:	9a01      	ldr	r2, [sp, #4]
 8009ffa:	f845 c002 	str.w	ip, [r5, r2]
 8009ffe:	9a03      	ldr	r2, [sp, #12]
 800a000:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a004:	3304      	adds	r3, #4
 800a006:	f1b9 0f00 	cmp.w	r9, #0
 800a00a:	d021      	beq.n	800a050 <__multiply+0x144>
 800a00c:	6829      	ldr	r1, [r5, #0]
 800a00e:	f104 0c14 	add.w	ip, r4, #20
 800a012:	46ae      	mov	lr, r5
 800a014:	f04f 0a00 	mov.w	sl, #0
 800a018:	f8bc b000 	ldrh.w	fp, [ip]
 800a01c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a020:	fb09 220b 	mla	r2, r9, fp, r2
 800a024:	4452      	add	r2, sl
 800a026:	b289      	uxth	r1, r1
 800a028:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a02c:	f84e 1b04 	str.w	r1, [lr], #4
 800a030:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a034:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a038:	f8be 1000 	ldrh.w	r1, [lr]
 800a03c:	fb09 110a 	mla	r1, r9, sl, r1
 800a040:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a044:	4567      	cmp	r7, ip
 800a046:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a04a:	d8e5      	bhi.n	800a018 <__multiply+0x10c>
 800a04c:	9a01      	ldr	r2, [sp, #4]
 800a04e:	50a9      	str	r1, [r5, r2]
 800a050:	3504      	adds	r5, #4
 800a052:	e799      	b.n	8009f88 <__multiply+0x7c>
 800a054:	3e01      	subs	r6, #1
 800a056:	e79b      	b.n	8009f90 <__multiply+0x84>
 800a058:	0800be56 	.word	0x0800be56
 800a05c:	0800be67 	.word	0x0800be67

0800a060 <__pow5mult>:
 800a060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a064:	4615      	mov	r5, r2
 800a066:	f012 0203 	ands.w	r2, r2, #3
 800a06a:	4606      	mov	r6, r0
 800a06c:	460f      	mov	r7, r1
 800a06e:	d007      	beq.n	800a080 <__pow5mult+0x20>
 800a070:	4c25      	ldr	r4, [pc, #148]	; (800a108 <__pow5mult+0xa8>)
 800a072:	3a01      	subs	r2, #1
 800a074:	2300      	movs	r3, #0
 800a076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a07a:	f7ff fe9d 	bl	8009db8 <__multadd>
 800a07e:	4607      	mov	r7, r0
 800a080:	10ad      	asrs	r5, r5, #2
 800a082:	d03d      	beq.n	800a100 <__pow5mult+0xa0>
 800a084:	69f4      	ldr	r4, [r6, #28]
 800a086:	b97c      	cbnz	r4, 800a0a8 <__pow5mult+0x48>
 800a088:	2010      	movs	r0, #16
 800a08a:	f7ff fd7f 	bl	8009b8c <malloc>
 800a08e:	4602      	mov	r2, r0
 800a090:	61f0      	str	r0, [r6, #28]
 800a092:	b928      	cbnz	r0, 800a0a0 <__pow5mult+0x40>
 800a094:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <__pow5mult+0xac>)
 800a096:	481e      	ldr	r0, [pc, #120]	; (800a110 <__pow5mult+0xb0>)
 800a098:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a09c:	f000 ff50 	bl	800af40 <__assert_func>
 800a0a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0a4:	6004      	str	r4, [r0, #0]
 800a0a6:	60c4      	str	r4, [r0, #12]
 800a0a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a0ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0b0:	b94c      	cbnz	r4, 800a0c6 <__pow5mult+0x66>
 800a0b2:	f240 2171 	movw	r1, #625	; 0x271
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f7ff ff12 	bl	8009ee0 <__i2b>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	6003      	str	r3, [r0, #0]
 800a0c6:	f04f 0900 	mov.w	r9, #0
 800a0ca:	07eb      	lsls	r3, r5, #31
 800a0cc:	d50a      	bpl.n	800a0e4 <__pow5mult+0x84>
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff ff1a 	bl	8009f0c <__multiply>
 800a0d8:	4639      	mov	r1, r7
 800a0da:	4680      	mov	r8, r0
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f7ff fe49 	bl	8009d74 <_Bfree>
 800a0e2:	4647      	mov	r7, r8
 800a0e4:	106d      	asrs	r5, r5, #1
 800a0e6:	d00b      	beq.n	800a100 <__pow5mult+0xa0>
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	b938      	cbnz	r0, 800a0fc <__pow5mult+0x9c>
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff ff0b 	bl	8009f0c <__multiply>
 800a0f6:	6020      	str	r0, [r4, #0]
 800a0f8:	f8c0 9000 	str.w	r9, [r0]
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	e7e4      	b.n	800a0ca <__pow5mult+0x6a>
 800a100:	4638      	mov	r0, r7
 800a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a106:	bf00      	nop
 800a108:	0800bfb0 	.word	0x0800bfb0
 800a10c:	0800bde7 	.word	0x0800bde7
 800a110:	0800be67 	.word	0x0800be67

0800a114 <__lshift>:
 800a114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a118:	460c      	mov	r4, r1
 800a11a:	6849      	ldr	r1, [r1, #4]
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a122:	68a3      	ldr	r3, [r4, #8]
 800a124:	4607      	mov	r7, r0
 800a126:	4691      	mov	r9, r2
 800a128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a12c:	f108 0601 	add.w	r6, r8, #1
 800a130:	42b3      	cmp	r3, r6
 800a132:	db0b      	blt.n	800a14c <__lshift+0x38>
 800a134:	4638      	mov	r0, r7
 800a136:	f7ff fddd 	bl	8009cf4 <_Balloc>
 800a13a:	4605      	mov	r5, r0
 800a13c:	b948      	cbnz	r0, 800a152 <__lshift+0x3e>
 800a13e:	4602      	mov	r2, r0
 800a140:	4b28      	ldr	r3, [pc, #160]	; (800a1e4 <__lshift+0xd0>)
 800a142:	4829      	ldr	r0, [pc, #164]	; (800a1e8 <__lshift+0xd4>)
 800a144:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a148:	f000 fefa 	bl	800af40 <__assert_func>
 800a14c:	3101      	adds	r1, #1
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	e7ee      	b.n	800a130 <__lshift+0x1c>
 800a152:	2300      	movs	r3, #0
 800a154:	f100 0114 	add.w	r1, r0, #20
 800a158:	f100 0210 	add.w	r2, r0, #16
 800a15c:	4618      	mov	r0, r3
 800a15e:	4553      	cmp	r3, sl
 800a160:	db33      	blt.n	800a1ca <__lshift+0xb6>
 800a162:	6920      	ldr	r0, [r4, #16]
 800a164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a168:	f104 0314 	add.w	r3, r4, #20
 800a16c:	f019 091f 	ands.w	r9, r9, #31
 800a170:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a174:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a178:	d02b      	beq.n	800a1d2 <__lshift+0xbe>
 800a17a:	f1c9 0e20 	rsb	lr, r9, #32
 800a17e:	468a      	mov	sl, r1
 800a180:	2200      	movs	r2, #0
 800a182:	6818      	ldr	r0, [r3, #0]
 800a184:	fa00 f009 	lsl.w	r0, r0, r9
 800a188:	4310      	orrs	r0, r2
 800a18a:	f84a 0b04 	str.w	r0, [sl], #4
 800a18e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a192:	459c      	cmp	ip, r3
 800a194:	fa22 f20e 	lsr.w	r2, r2, lr
 800a198:	d8f3      	bhi.n	800a182 <__lshift+0x6e>
 800a19a:	ebac 0304 	sub.w	r3, ip, r4
 800a19e:	3b15      	subs	r3, #21
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	f104 0015 	add.w	r0, r4, #21
 800a1aa:	4584      	cmp	ip, r0
 800a1ac:	bf38      	it	cc
 800a1ae:	2304      	movcc	r3, #4
 800a1b0:	50ca      	str	r2, [r1, r3]
 800a1b2:	b10a      	cbz	r2, 800a1b8 <__lshift+0xa4>
 800a1b4:	f108 0602 	add.w	r6, r8, #2
 800a1b8:	3e01      	subs	r6, #1
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	612e      	str	r6, [r5, #16]
 800a1be:	4621      	mov	r1, r4
 800a1c0:	f7ff fdd8 	bl	8009d74 <_Bfree>
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	e7c5      	b.n	800a15e <__lshift+0x4a>
 800a1d2:	3904      	subs	r1, #4
 800a1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1dc:	459c      	cmp	ip, r3
 800a1de:	d8f9      	bhi.n	800a1d4 <__lshift+0xc0>
 800a1e0:	e7ea      	b.n	800a1b8 <__lshift+0xa4>
 800a1e2:	bf00      	nop
 800a1e4:	0800be56 	.word	0x0800be56
 800a1e8:	0800be67 	.word	0x0800be67

0800a1ec <__mcmp>:
 800a1ec:	b530      	push	{r4, r5, lr}
 800a1ee:	6902      	ldr	r2, [r0, #16]
 800a1f0:	690c      	ldr	r4, [r1, #16]
 800a1f2:	1b12      	subs	r2, r2, r4
 800a1f4:	d10e      	bne.n	800a214 <__mcmp+0x28>
 800a1f6:	f100 0314 	add.w	r3, r0, #20
 800a1fa:	3114      	adds	r1, #20
 800a1fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a200:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a204:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a208:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a20c:	42a5      	cmp	r5, r4
 800a20e:	d003      	beq.n	800a218 <__mcmp+0x2c>
 800a210:	d305      	bcc.n	800a21e <__mcmp+0x32>
 800a212:	2201      	movs	r2, #1
 800a214:	4610      	mov	r0, r2
 800a216:	bd30      	pop	{r4, r5, pc}
 800a218:	4283      	cmp	r3, r0
 800a21a:	d3f3      	bcc.n	800a204 <__mcmp+0x18>
 800a21c:	e7fa      	b.n	800a214 <__mcmp+0x28>
 800a21e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a222:	e7f7      	b.n	800a214 <__mcmp+0x28>

0800a224 <__mdiff>:
 800a224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	460c      	mov	r4, r1
 800a22a:	4606      	mov	r6, r0
 800a22c:	4611      	mov	r1, r2
 800a22e:	4620      	mov	r0, r4
 800a230:	4690      	mov	r8, r2
 800a232:	f7ff ffdb 	bl	800a1ec <__mcmp>
 800a236:	1e05      	subs	r5, r0, #0
 800a238:	d110      	bne.n	800a25c <__mdiff+0x38>
 800a23a:	4629      	mov	r1, r5
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff fd59 	bl	8009cf4 <_Balloc>
 800a242:	b930      	cbnz	r0, 800a252 <__mdiff+0x2e>
 800a244:	4b3a      	ldr	r3, [pc, #232]	; (800a330 <__mdiff+0x10c>)
 800a246:	4602      	mov	r2, r0
 800a248:	f240 2137 	movw	r1, #567	; 0x237
 800a24c:	4839      	ldr	r0, [pc, #228]	; (800a334 <__mdiff+0x110>)
 800a24e:	f000 fe77 	bl	800af40 <__assert_func>
 800a252:	2301      	movs	r3, #1
 800a254:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	bfa4      	itt	ge
 800a25e:	4643      	movge	r3, r8
 800a260:	46a0      	movge	r8, r4
 800a262:	4630      	mov	r0, r6
 800a264:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a268:	bfa6      	itte	ge
 800a26a:	461c      	movge	r4, r3
 800a26c:	2500      	movge	r5, #0
 800a26e:	2501      	movlt	r5, #1
 800a270:	f7ff fd40 	bl	8009cf4 <_Balloc>
 800a274:	b920      	cbnz	r0, 800a280 <__mdiff+0x5c>
 800a276:	4b2e      	ldr	r3, [pc, #184]	; (800a330 <__mdiff+0x10c>)
 800a278:	4602      	mov	r2, r0
 800a27a:	f240 2145 	movw	r1, #581	; 0x245
 800a27e:	e7e5      	b.n	800a24c <__mdiff+0x28>
 800a280:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a284:	6926      	ldr	r6, [r4, #16]
 800a286:	60c5      	str	r5, [r0, #12]
 800a288:	f104 0914 	add.w	r9, r4, #20
 800a28c:	f108 0514 	add.w	r5, r8, #20
 800a290:	f100 0e14 	add.w	lr, r0, #20
 800a294:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a298:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a29c:	f108 0210 	add.w	r2, r8, #16
 800a2a0:	46f2      	mov	sl, lr
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a2ac:	fa11 f88b 	uxtah	r8, r1, fp
 800a2b0:	b299      	uxth	r1, r3
 800a2b2:	0c1b      	lsrs	r3, r3, #16
 800a2b4:	eba8 0801 	sub.w	r8, r8, r1
 800a2b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2c0:	fa1f f888 	uxth.w	r8, r8
 800a2c4:	1419      	asrs	r1, r3, #16
 800a2c6:	454e      	cmp	r6, r9
 800a2c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2cc:	f84a 3b04 	str.w	r3, [sl], #4
 800a2d0:	d8e8      	bhi.n	800a2a4 <__mdiff+0x80>
 800a2d2:	1b33      	subs	r3, r6, r4
 800a2d4:	3b15      	subs	r3, #21
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	3304      	adds	r3, #4
 800a2dc:	3415      	adds	r4, #21
 800a2de:	42a6      	cmp	r6, r4
 800a2e0:	bf38      	it	cc
 800a2e2:	2304      	movcc	r3, #4
 800a2e4:	441d      	add	r5, r3
 800a2e6:	4473      	add	r3, lr
 800a2e8:	469e      	mov	lr, r3
 800a2ea:	462e      	mov	r6, r5
 800a2ec:	4566      	cmp	r6, ip
 800a2ee:	d30e      	bcc.n	800a30e <__mdiff+0xea>
 800a2f0:	f10c 0203 	add.w	r2, ip, #3
 800a2f4:	1b52      	subs	r2, r2, r5
 800a2f6:	f022 0203 	bic.w	r2, r2, #3
 800a2fa:	3d03      	subs	r5, #3
 800a2fc:	45ac      	cmp	ip, r5
 800a2fe:	bf38      	it	cc
 800a300:	2200      	movcc	r2, #0
 800a302:	4413      	add	r3, r2
 800a304:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a308:	b17a      	cbz	r2, 800a32a <__mdiff+0x106>
 800a30a:	6107      	str	r7, [r0, #16]
 800a30c:	e7a4      	b.n	800a258 <__mdiff+0x34>
 800a30e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a312:	fa11 f288 	uxtah	r2, r1, r8
 800a316:	1414      	asrs	r4, r2, #16
 800a318:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a31c:	b292      	uxth	r2, r2
 800a31e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a322:	f84e 2b04 	str.w	r2, [lr], #4
 800a326:	1421      	asrs	r1, r4, #16
 800a328:	e7e0      	b.n	800a2ec <__mdiff+0xc8>
 800a32a:	3f01      	subs	r7, #1
 800a32c:	e7ea      	b.n	800a304 <__mdiff+0xe0>
 800a32e:	bf00      	nop
 800a330:	0800be56 	.word	0x0800be56
 800a334:	0800be67 	.word	0x0800be67

0800a338 <__d2b>:
 800a338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a33c:	460f      	mov	r7, r1
 800a33e:	2101      	movs	r1, #1
 800a340:	ec59 8b10 	vmov	r8, r9, d0
 800a344:	4616      	mov	r6, r2
 800a346:	f7ff fcd5 	bl	8009cf4 <_Balloc>
 800a34a:	4604      	mov	r4, r0
 800a34c:	b930      	cbnz	r0, 800a35c <__d2b+0x24>
 800a34e:	4602      	mov	r2, r0
 800a350:	4b24      	ldr	r3, [pc, #144]	; (800a3e4 <__d2b+0xac>)
 800a352:	4825      	ldr	r0, [pc, #148]	; (800a3e8 <__d2b+0xb0>)
 800a354:	f240 310f 	movw	r1, #783	; 0x30f
 800a358:	f000 fdf2 	bl	800af40 <__assert_func>
 800a35c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a364:	bb2d      	cbnz	r5, 800a3b2 <__d2b+0x7a>
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	f1b8 0300 	subs.w	r3, r8, #0
 800a36c:	d026      	beq.n	800a3bc <__d2b+0x84>
 800a36e:	4668      	mov	r0, sp
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	f7ff fd87 	bl	8009e84 <__lo0bits>
 800a376:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a37a:	b1e8      	cbz	r0, 800a3b8 <__d2b+0x80>
 800a37c:	f1c0 0320 	rsb	r3, r0, #32
 800a380:	fa02 f303 	lsl.w	r3, r2, r3
 800a384:	430b      	orrs	r3, r1
 800a386:	40c2      	lsrs	r2, r0
 800a388:	6163      	str	r3, [r4, #20]
 800a38a:	9201      	str	r2, [sp, #4]
 800a38c:	9b01      	ldr	r3, [sp, #4]
 800a38e:	61a3      	str	r3, [r4, #24]
 800a390:	2b00      	cmp	r3, #0
 800a392:	bf14      	ite	ne
 800a394:	2202      	movne	r2, #2
 800a396:	2201      	moveq	r2, #1
 800a398:	6122      	str	r2, [r4, #16]
 800a39a:	b1bd      	cbz	r5, 800a3cc <__d2b+0x94>
 800a39c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3a0:	4405      	add	r5, r0
 800a3a2:	603d      	str	r5, [r7, #0]
 800a3a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3a8:	6030      	str	r0, [r6, #0]
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	b003      	add	sp, #12
 800a3ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3b6:	e7d6      	b.n	800a366 <__d2b+0x2e>
 800a3b8:	6161      	str	r1, [r4, #20]
 800a3ba:	e7e7      	b.n	800a38c <__d2b+0x54>
 800a3bc:	a801      	add	r0, sp, #4
 800a3be:	f7ff fd61 	bl	8009e84 <__lo0bits>
 800a3c2:	9b01      	ldr	r3, [sp, #4]
 800a3c4:	6163      	str	r3, [r4, #20]
 800a3c6:	3020      	adds	r0, #32
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	e7e5      	b.n	800a398 <__d2b+0x60>
 800a3cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3d4:	6038      	str	r0, [r7, #0]
 800a3d6:	6918      	ldr	r0, [r3, #16]
 800a3d8:	f7ff fd34 	bl	8009e44 <__hi0bits>
 800a3dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3e0:	e7e2      	b.n	800a3a8 <__d2b+0x70>
 800a3e2:	bf00      	nop
 800a3e4:	0800be56 	.word	0x0800be56
 800a3e8:	0800be67 	.word	0x0800be67

0800a3ec <__ssputs_r>:
 800a3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f0:	688e      	ldr	r6, [r1, #8]
 800a3f2:	461f      	mov	r7, r3
 800a3f4:	42be      	cmp	r6, r7
 800a3f6:	680b      	ldr	r3, [r1, #0]
 800a3f8:	4682      	mov	sl, r0
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	4690      	mov	r8, r2
 800a3fe:	d82c      	bhi.n	800a45a <__ssputs_r+0x6e>
 800a400:	898a      	ldrh	r2, [r1, #12]
 800a402:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a406:	d026      	beq.n	800a456 <__ssputs_r+0x6a>
 800a408:	6965      	ldr	r5, [r4, #20]
 800a40a:	6909      	ldr	r1, [r1, #16]
 800a40c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a410:	eba3 0901 	sub.w	r9, r3, r1
 800a414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a418:	1c7b      	adds	r3, r7, #1
 800a41a:	444b      	add	r3, r9
 800a41c:	106d      	asrs	r5, r5, #1
 800a41e:	429d      	cmp	r5, r3
 800a420:	bf38      	it	cc
 800a422:	461d      	movcc	r5, r3
 800a424:	0553      	lsls	r3, r2, #21
 800a426:	d527      	bpl.n	800a478 <__ssputs_r+0x8c>
 800a428:	4629      	mov	r1, r5
 800a42a:	f7ff fbd7 	bl	8009bdc <_malloc_r>
 800a42e:	4606      	mov	r6, r0
 800a430:	b360      	cbz	r0, 800a48c <__ssputs_r+0xa0>
 800a432:	6921      	ldr	r1, [r4, #16]
 800a434:	464a      	mov	r2, r9
 800a436:	f7fe fcd2 	bl	8008dde <memcpy>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a444:	81a3      	strh	r3, [r4, #12]
 800a446:	6126      	str	r6, [r4, #16]
 800a448:	6165      	str	r5, [r4, #20]
 800a44a:	444e      	add	r6, r9
 800a44c:	eba5 0509 	sub.w	r5, r5, r9
 800a450:	6026      	str	r6, [r4, #0]
 800a452:	60a5      	str	r5, [r4, #8]
 800a454:	463e      	mov	r6, r7
 800a456:	42be      	cmp	r6, r7
 800a458:	d900      	bls.n	800a45c <__ssputs_r+0x70>
 800a45a:	463e      	mov	r6, r7
 800a45c:	6820      	ldr	r0, [r4, #0]
 800a45e:	4632      	mov	r2, r6
 800a460:	4641      	mov	r1, r8
 800a462:	f7fe fbf1 	bl	8008c48 <memmove>
 800a466:	68a3      	ldr	r3, [r4, #8]
 800a468:	1b9b      	subs	r3, r3, r6
 800a46a:	60a3      	str	r3, [r4, #8]
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	4433      	add	r3, r6
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	2000      	movs	r0, #0
 800a474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a478:	462a      	mov	r2, r5
 800a47a:	f000 fda7 	bl	800afcc <_realloc_r>
 800a47e:	4606      	mov	r6, r0
 800a480:	2800      	cmp	r0, #0
 800a482:	d1e0      	bne.n	800a446 <__ssputs_r+0x5a>
 800a484:	6921      	ldr	r1, [r4, #16]
 800a486:	4650      	mov	r0, sl
 800a488:	f7ff fb34 	bl	8009af4 <_free_r>
 800a48c:	230c      	movs	r3, #12
 800a48e:	f8ca 3000 	str.w	r3, [sl]
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a498:	81a3      	strh	r3, [r4, #12]
 800a49a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a49e:	e7e9      	b.n	800a474 <__ssputs_r+0x88>

0800a4a0 <_svfiprintf_r>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	4698      	mov	r8, r3
 800a4a6:	898b      	ldrh	r3, [r1, #12]
 800a4a8:	061b      	lsls	r3, r3, #24
 800a4aa:	b09d      	sub	sp, #116	; 0x74
 800a4ac:	4607      	mov	r7, r0
 800a4ae:	460d      	mov	r5, r1
 800a4b0:	4614      	mov	r4, r2
 800a4b2:	d50e      	bpl.n	800a4d2 <_svfiprintf_r+0x32>
 800a4b4:	690b      	ldr	r3, [r1, #16]
 800a4b6:	b963      	cbnz	r3, 800a4d2 <_svfiprintf_r+0x32>
 800a4b8:	2140      	movs	r1, #64	; 0x40
 800a4ba:	f7ff fb8f 	bl	8009bdc <_malloc_r>
 800a4be:	6028      	str	r0, [r5, #0]
 800a4c0:	6128      	str	r0, [r5, #16]
 800a4c2:	b920      	cbnz	r0, 800a4ce <_svfiprintf_r+0x2e>
 800a4c4:	230c      	movs	r3, #12
 800a4c6:	603b      	str	r3, [r7, #0]
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4cc:	e0d0      	b.n	800a670 <_svfiprintf_r+0x1d0>
 800a4ce:	2340      	movs	r3, #64	; 0x40
 800a4d0:	616b      	str	r3, [r5, #20]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d6:	2320      	movs	r3, #32
 800a4d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4e0:	2330      	movs	r3, #48	; 0x30
 800a4e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a688 <_svfiprintf_r+0x1e8>
 800a4e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4ea:	f04f 0901 	mov.w	r9, #1
 800a4ee:	4623      	mov	r3, r4
 800a4f0:	469a      	mov	sl, r3
 800a4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4f6:	b10a      	cbz	r2, 800a4fc <_svfiprintf_r+0x5c>
 800a4f8:	2a25      	cmp	r2, #37	; 0x25
 800a4fa:	d1f9      	bne.n	800a4f0 <_svfiprintf_r+0x50>
 800a4fc:	ebba 0b04 	subs.w	fp, sl, r4
 800a500:	d00b      	beq.n	800a51a <_svfiprintf_r+0x7a>
 800a502:	465b      	mov	r3, fp
 800a504:	4622      	mov	r2, r4
 800a506:	4629      	mov	r1, r5
 800a508:	4638      	mov	r0, r7
 800a50a:	f7ff ff6f 	bl	800a3ec <__ssputs_r>
 800a50e:	3001      	adds	r0, #1
 800a510:	f000 80a9 	beq.w	800a666 <_svfiprintf_r+0x1c6>
 800a514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a516:	445a      	add	r2, fp
 800a518:	9209      	str	r2, [sp, #36]	; 0x24
 800a51a:	f89a 3000 	ldrb.w	r3, [sl]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f000 80a1 	beq.w	800a666 <_svfiprintf_r+0x1c6>
 800a524:	2300      	movs	r3, #0
 800a526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a52a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a52e:	f10a 0a01 	add.w	sl, sl, #1
 800a532:	9304      	str	r3, [sp, #16]
 800a534:	9307      	str	r3, [sp, #28]
 800a536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a53a:	931a      	str	r3, [sp, #104]	; 0x68
 800a53c:	4654      	mov	r4, sl
 800a53e:	2205      	movs	r2, #5
 800a540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a544:	4850      	ldr	r0, [pc, #320]	; (800a688 <_svfiprintf_r+0x1e8>)
 800a546:	f7f5 fe4b 	bl	80001e0 <memchr>
 800a54a:	9a04      	ldr	r2, [sp, #16]
 800a54c:	b9d8      	cbnz	r0, 800a586 <_svfiprintf_r+0xe6>
 800a54e:	06d0      	lsls	r0, r2, #27
 800a550:	bf44      	itt	mi
 800a552:	2320      	movmi	r3, #32
 800a554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a558:	0711      	lsls	r1, r2, #28
 800a55a:	bf44      	itt	mi
 800a55c:	232b      	movmi	r3, #43	; 0x2b
 800a55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a562:	f89a 3000 	ldrb.w	r3, [sl]
 800a566:	2b2a      	cmp	r3, #42	; 0x2a
 800a568:	d015      	beq.n	800a596 <_svfiprintf_r+0xf6>
 800a56a:	9a07      	ldr	r2, [sp, #28]
 800a56c:	4654      	mov	r4, sl
 800a56e:	2000      	movs	r0, #0
 800a570:	f04f 0c0a 	mov.w	ip, #10
 800a574:	4621      	mov	r1, r4
 800a576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a57a:	3b30      	subs	r3, #48	; 0x30
 800a57c:	2b09      	cmp	r3, #9
 800a57e:	d94d      	bls.n	800a61c <_svfiprintf_r+0x17c>
 800a580:	b1b0      	cbz	r0, 800a5b0 <_svfiprintf_r+0x110>
 800a582:	9207      	str	r2, [sp, #28]
 800a584:	e014      	b.n	800a5b0 <_svfiprintf_r+0x110>
 800a586:	eba0 0308 	sub.w	r3, r0, r8
 800a58a:	fa09 f303 	lsl.w	r3, r9, r3
 800a58e:	4313      	orrs	r3, r2
 800a590:	9304      	str	r3, [sp, #16]
 800a592:	46a2      	mov	sl, r4
 800a594:	e7d2      	b.n	800a53c <_svfiprintf_r+0x9c>
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	1d19      	adds	r1, r3, #4
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	9103      	str	r1, [sp, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	bfbb      	ittet	lt
 800a5a2:	425b      	neglt	r3, r3
 800a5a4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5a8:	9307      	strge	r3, [sp, #28]
 800a5aa:	9307      	strlt	r3, [sp, #28]
 800a5ac:	bfb8      	it	lt
 800a5ae:	9204      	strlt	r2, [sp, #16]
 800a5b0:	7823      	ldrb	r3, [r4, #0]
 800a5b2:	2b2e      	cmp	r3, #46	; 0x2e
 800a5b4:	d10c      	bne.n	800a5d0 <_svfiprintf_r+0x130>
 800a5b6:	7863      	ldrb	r3, [r4, #1]
 800a5b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ba:	d134      	bne.n	800a626 <_svfiprintf_r+0x186>
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	1d1a      	adds	r2, r3, #4
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	9203      	str	r2, [sp, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bfb8      	it	lt
 800a5c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5cc:	3402      	adds	r4, #2
 800a5ce:	9305      	str	r3, [sp, #20]
 800a5d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a698 <_svfiprintf_r+0x1f8>
 800a5d4:	7821      	ldrb	r1, [r4, #0]
 800a5d6:	2203      	movs	r2, #3
 800a5d8:	4650      	mov	r0, sl
 800a5da:	f7f5 fe01 	bl	80001e0 <memchr>
 800a5de:	b138      	cbz	r0, 800a5f0 <_svfiprintf_r+0x150>
 800a5e0:	9b04      	ldr	r3, [sp, #16]
 800a5e2:	eba0 000a 	sub.w	r0, r0, sl
 800a5e6:	2240      	movs	r2, #64	; 0x40
 800a5e8:	4082      	lsls	r2, r0
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	3401      	adds	r4, #1
 800a5ee:	9304      	str	r3, [sp, #16]
 800a5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f4:	4825      	ldr	r0, [pc, #148]	; (800a68c <_svfiprintf_r+0x1ec>)
 800a5f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5fa:	2206      	movs	r2, #6
 800a5fc:	f7f5 fdf0 	bl	80001e0 <memchr>
 800a600:	2800      	cmp	r0, #0
 800a602:	d038      	beq.n	800a676 <_svfiprintf_r+0x1d6>
 800a604:	4b22      	ldr	r3, [pc, #136]	; (800a690 <_svfiprintf_r+0x1f0>)
 800a606:	bb1b      	cbnz	r3, 800a650 <_svfiprintf_r+0x1b0>
 800a608:	9b03      	ldr	r3, [sp, #12]
 800a60a:	3307      	adds	r3, #7
 800a60c:	f023 0307 	bic.w	r3, r3, #7
 800a610:	3308      	adds	r3, #8
 800a612:	9303      	str	r3, [sp, #12]
 800a614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a616:	4433      	add	r3, r6
 800a618:	9309      	str	r3, [sp, #36]	; 0x24
 800a61a:	e768      	b.n	800a4ee <_svfiprintf_r+0x4e>
 800a61c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a620:	460c      	mov	r4, r1
 800a622:	2001      	movs	r0, #1
 800a624:	e7a6      	b.n	800a574 <_svfiprintf_r+0xd4>
 800a626:	2300      	movs	r3, #0
 800a628:	3401      	adds	r4, #1
 800a62a:	9305      	str	r3, [sp, #20]
 800a62c:	4619      	mov	r1, r3
 800a62e:	f04f 0c0a 	mov.w	ip, #10
 800a632:	4620      	mov	r0, r4
 800a634:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a638:	3a30      	subs	r2, #48	; 0x30
 800a63a:	2a09      	cmp	r2, #9
 800a63c:	d903      	bls.n	800a646 <_svfiprintf_r+0x1a6>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0c6      	beq.n	800a5d0 <_svfiprintf_r+0x130>
 800a642:	9105      	str	r1, [sp, #20]
 800a644:	e7c4      	b.n	800a5d0 <_svfiprintf_r+0x130>
 800a646:	fb0c 2101 	mla	r1, ip, r1, r2
 800a64a:	4604      	mov	r4, r0
 800a64c:	2301      	movs	r3, #1
 800a64e:	e7f0      	b.n	800a632 <_svfiprintf_r+0x192>
 800a650:	ab03      	add	r3, sp, #12
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	462a      	mov	r2, r5
 800a656:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <_svfiprintf_r+0x1f4>)
 800a658:	a904      	add	r1, sp, #16
 800a65a:	4638      	mov	r0, r7
 800a65c:	f7fd fda2 	bl	80081a4 <_printf_float>
 800a660:	1c42      	adds	r2, r0, #1
 800a662:	4606      	mov	r6, r0
 800a664:	d1d6      	bne.n	800a614 <_svfiprintf_r+0x174>
 800a666:	89ab      	ldrh	r3, [r5, #12]
 800a668:	065b      	lsls	r3, r3, #25
 800a66a:	f53f af2d 	bmi.w	800a4c8 <_svfiprintf_r+0x28>
 800a66e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a670:	b01d      	add	sp, #116	; 0x74
 800a672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a676:	ab03      	add	r3, sp, #12
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	462a      	mov	r2, r5
 800a67c:	4b05      	ldr	r3, [pc, #20]	; (800a694 <_svfiprintf_r+0x1f4>)
 800a67e:	a904      	add	r1, sp, #16
 800a680:	4638      	mov	r0, r7
 800a682:	f7fe f833 	bl	80086ec <_printf_i>
 800a686:	e7eb      	b.n	800a660 <_svfiprintf_r+0x1c0>
 800a688:	0800bfbc 	.word	0x0800bfbc
 800a68c:	0800bfc6 	.word	0x0800bfc6
 800a690:	080081a5 	.word	0x080081a5
 800a694:	0800a3ed 	.word	0x0800a3ed
 800a698:	0800bfc2 	.word	0x0800bfc2

0800a69c <_sungetc_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	1c4b      	adds	r3, r1, #1
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	d103      	bne.n	800a6ac <_sungetc_r+0x10>
 800a6a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	8993      	ldrh	r3, [r2, #12]
 800a6ae:	f023 0320 	bic.w	r3, r3, #32
 800a6b2:	8193      	strh	r3, [r2, #12]
 800a6b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6b6:	6852      	ldr	r2, [r2, #4]
 800a6b8:	b2cd      	uxtb	r5, r1
 800a6ba:	b18b      	cbz	r3, 800a6e0 <_sungetc_r+0x44>
 800a6bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	dd08      	ble.n	800a6d4 <_sungetc_r+0x38>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	1e5a      	subs	r2, r3, #1
 800a6c6:	6022      	str	r2, [r4, #0]
 800a6c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a6cc:	6863      	ldr	r3, [r4, #4]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	6063      	str	r3, [r4, #4]
 800a6d2:	e7e9      	b.n	800a6a8 <_sungetc_r+0xc>
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	f000 fbe8 	bl	800aeaa <__submore>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d0f1      	beq.n	800a6c2 <_sungetc_r+0x26>
 800a6de:	e7e1      	b.n	800a6a4 <_sungetc_r+0x8>
 800a6e0:	6921      	ldr	r1, [r4, #16]
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	b151      	cbz	r1, 800a6fc <_sungetc_r+0x60>
 800a6e6:	4299      	cmp	r1, r3
 800a6e8:	d208      	bcs.n	800a6fc <_sungetc_r+0x60>
 800a6ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a6ee:	42a9      	cmp	r1, r5
 800a6f0:	d104      	bne.n	800a6fc <_sungetc_r+0x60>
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	3201      	adds	r2, #1
 800a6f6:	6023      	str	r3, [r4, #0]
 800a6f8:	6062      	str	r2, [r4, #4]
 800a6fa:	e7d5      	b.n	800a6a8 <_sungetc_r+0xc>
 800a6fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a704:	6363      	str	r3, [r4, #52]	; 0x34
 800a706:	2303      	movs	r3, #3
 800a708:	63a3      	str	r3, [r4, #56]	; 0x38
 800a70a:	4623      	mov	r3, r4
 800a70c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	2301      	movs	r3, #1
 800a714:	e7dc      	b.n	800a6d0 <_sungetc_r+0x34>

0800a716 <__ssrefill_r>:
 800a716:	b510      	push	{r4, lr}
 800a718:	460c      	mov	r4, r1
 800a71a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a71c:	b169      	cbz	r1, 800a73a <__ssrefill_r+0x24>
 800a71e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a722:	4299      	cmp	r1, r3
 800a724:	d001      	beq.n	800a72a <__ssrefill_r+0x14>
 800a726:	f7ff f9e5 	bl	8009af4 <_free_r>
 800a72a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a72c:	6063      	str	r3, [r4, #4]
 800a72e:	2000      	movs	r0, #0
 800a730:	6360      	str	r0, [r4, #52]	; 0x34
 800a732:	b113      	cbz	r3, 800a73a <__ssrefill_r+0x24>
 800a734:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a736:	6023      	str	r3, [r4, #0]
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	2300      	movs	r3, #0
 800a740:	6063      	str	r3, [r4, #4]
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f043 0320 	orr.w	r3, r3, #32
 800a748:	81a3      	strh	r3, [r4, #12]
 800a74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a74e:	e7f3      	b.n	800a738 <__ssrefill_r+0x22>

0800a750 <__ssvfiscanf_r>:
 800a750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a754:	460c      	mov	r4, r1
 800a756:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a75a:	2100      	movs	r1, #0
 800a75c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a760:	49a6      	ldr	r1, [pc, #664]	; (800a9fc <__ssvfiscanf_r+0x2ac>)
 800a762:	91a0      	str	r1, [sp, #640]	; 0x280
 800a764:	f10d 0804 	add.w	r8, sp, #4
 800a768:	49a5      	ldr	r1, [pc, #660]	; (800aa00 <__ssvfiscanf_r+0x2b0>)
 800a76a:	4fa6      	ldr	r7, [pc, #664]	; (800aa04 <__ssvfiscanf_r+0x2b4>)
 800a76c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800aa08 <__ssvfiscanf_r+0x2b8>
 800a770:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a774:	4606      	mov	r6, r0
 800a776:	91a1      	str	r1, [sp, #644]	; 0x284
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	7813      	ldrb	r3, [r2, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 815a 	beq.w	800aa36 <__ssvfiscanf_r+0x2e6>
 800a782:	5cf9      	ldrb	r1, [r7, r3]
 800a784:	f011 0108 	ands.w	r1, r1, #8
 800a788:	f102 0501 	add.w	r5, r2, #1
 800a78c:	d019      	beq.n	800a7c2 <__ssvfiscanf_r+0x72>
 800a78e:	6863      	ldr	r3, [r4, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	dd0f      	ble.n	800a7b4 <__ssvfiscanf_r+0x64>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	5cba      	ldrb	r2, [r7, r2]
 800a79a:	0712      	lsls	r2, r2, #28
 800a79c:	d401      	bmi.n	800a7a2 <__ssvfiscanf_r+0x52>
 800a79e:	462a      	mov	r2, r5
 800a7a0:	e7eb      	b.n	800a77a <__ssvfiscanf_r+0x2a>
 800a7a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a7a4:	3201      	adds	r2, #1
 800a7a6:	9245      	str	r2, [sp, #276]	; 0x114
 800a7a8:	6862      	ldr	r2, [r4, #4]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	3a01      	subs	r2, #1
 800a7ae:	6062      	str	r2, [r4, #4]
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	e7ec      	b.n	800a78e <__ssvfiscanf_r+0x3e>
 800a7b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	4798      	blx	r3
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d0e9      	beq.n	800a794 <__ssvfiscanf_r+0x44>
 800a7c0:	e7ed      	b.n	800a79e <__ssvfiscanf_r+0x4e>
 800a7c2:	2b25      	cmp	r3, #37	; 0x25
 800a7c4:	d012      	beq.n	800a7ec <__ssvfiscanf_r+0x9c>
 800a7c6:	469a      	mov	sl, r3
 800a7c8:	6863      	ldr	r3, [r4, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f340 8091 	ble.w	800a8f2 <__ssvfiscanf_r+0x1a2>
 800a7d0:	6822      	ldr	r2, [r4, #0]
 800a7d2:	7813      	ldrb	r3, [r2, #0]
 800a7d4:	4553      	cmp	r3, sl
 800a7d6:	f040 812e 	bne.w	800aa36 <__ssvfiscanf_r+0x2e6>
 800a7da:	6863      	ldr	r3, [r4, #4]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	6063      	str	r3, [r4, #4]
 800a7e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a7e2:	3201      	adds	r2, #1
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	6022      	str	r2, [r4, #0]
 800a7e8:	9345      	str	r3, [sp, #276]	; 0x114
 800a7ea:	e7d8      	b.n	800a79e <__ssvfiscanf_r+0x4e>
 800a7ec:	9141      	str	r1, [sp, #260]	; 0x104
 800a7ee:	9143      	str	r1, [sp, #268]	; 0x10c
 800a7f0:	7853      	ldrb	r3, [r2, #1]
 800a7f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f4:	bf02      	ittt	eq
 800a7f6:	2310      	moveq	r3, #16
 800a7f8:	1c95      	addeq	r5, r2, #2
 800a7fa:	9341      	streq	r3, [sp, #260]	; 0x104
 800a7fc:	220a      	movs	r2, #10
 800a7fe:	46aa      	mov	sl, r5
 800a800:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a804:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a808:	2b09      	cmp	r3, #9
 800a80a:	d91c      	bls.n	800a846 <__ssvfiscanf_r+0xf6>
 800a80c:	487e      	ldr	r0, [pc, #504]	; (800aa08 <__ssvfiscanf_r+0x2b8>)
 800a80e:	2203      	movs	r2, #3
 800a810:	f7f5 fce6 	bl	80001e0 <memchr>
 800a814:	b138      	cbz	r0, 800a826 <__ssvfiscanf_r+0xd6>
 800a816:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a818:	eba0 0009 	sub.w	r0, r0, r9
 800a81c:	2301      	movs	r3, #1
 800a81e:	4083      	lsls	r3, r0
 800a820:	4313      	orrs	r3, r2
 800a822:	9341      	str	r3, [sp, #260]	; 0x104
 800a824:	4655      	mov	r5, sl
 800a826:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a82a:	2b78      	cmp	r3, #120	; 0x78
 800a82c:	d806      	bhi.n	800a83c <__ssvfiscanf_r+0xec>
 800a82e:	2b57      	cmp	r3, #87	; 0x57
 800a830:	d810      	bhi.n	800a854 <__ssvfiscanf_r+0x104>
 800a832:	2b25      	cmp	r3, #37	; 0x25
 800a834:	d0c7      	beq.n	800a7c6 <__ssvfiscanf_r+0x76>
 800a836:	d857      	bhi.n	800a8e8 <__ssvfiscanf_r+0x198>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d065      	beq.n	800a908 <__ssvfiscanf_r+0x1b8>
 800a83c:	2303      	movs	r3, #3
 800a83e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a840:	230a      	movs	r3, #10
 800a842:	9342      	str	r3, [sp, #264]	; 0x108
 800a844:	e076      	b.n	800a934 <__ssvfiscanf_r+0x1e4>
 800a846:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a848:	fb02 1103 	mla	r1, r2, r3, r1
 800a84c:	3930      	subs	r1, #48	; 0x30
 800a84e:	9143      	str	r1, [sp, #268]	; 0x10c
 800a850:	4655      	mov	r5, sl
 800a852:	e7d4      	b.n	800a7fe <__ssvfiscanf_r+0xae>
 800a854:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a858:	2a20      	cmp	r2, #32
 800a85a:	d8ef      	bhi.n	800a83c <__ssvfiscanf_r+0xec>
 800a85c:	a101      	add	r1, pc, #4	; (adr r1, 800a864 <__ssvfiscanf_r+0x114>)
 800a85e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a862:	bf00      	nop
 800a864:	0800a917 	.word	0x0800a917
 800a868:	0800a83d 	.word	0x0800a83d
 800a86c:	0800a83d 	.word	0x0800a83d
 800a870:	0800a975 	.word	0x0800a975
 800a874:	0800a83d 	.word	0x0800a83d
 800a878:	0800a83d 	.word	0x0800a83d
 800a87c:	0800a83d 	.word	0x0800a83d
 800a880:	0800a83d 	.word	0x0800a83d
 800a884:	0800a83d 	.word	0x0800a83d
 800a888:	0800a83d 	.word	0x0800a83d
 800a88c:	0800a83d 	.word	0x0800a83d
 800a890:	0800a98b 	.word	0x0800a98b
 800a894:	0800a971 	.word	0x0800a971
 800a898:	0800a8ef 	.word	0x0800a8ef
 800a89c:	0800a8ef 	.word	0x0800a8ef
 800a8a0:	0800a8ef 	.word	0x0800a8ef
 800a8a4:	0800a83d 	.word	0x0800a83d
 800a8a8:	0800a92d 	.word	0x0800a92d
 800a8ac:	0800a83d 	.word	0x0800a83d
 800a8b0:	0800a83d 	.word	0x0800a83d
 800a8b4:	0800a83d 	.word	0x0800a83d
 800a8b8:	0800a83d 	.word	0x0800a83d
 800a8bc:	0800a99b 	.word	0x0800a99b
 800a8c0:	0800a969 	.word	0x0800a969
 800a8c4:	0800a90f 	.word	0x0800a90f
 800a8c8:	0800a83d 	.word	0x0800a83d
 800a8cc:	0800a83d 	.word	0x0800a83d
 800a8d0:	0800a997 	.word	0x0800a997
 800a8d4:	0800a83d 	.word	0x0800a83d
 800a8d8:	0800a971 	.word	0x0800a971
 800a8dc:	0800a83d 	.word	0x0800a83d
 800a8e0:	0800a83d 	.word	0x0800a83d
 800a8e4:	0800a917 	.word	0x0800a917
 800a8e8:	3b45      	subs	r3, #69	; 0x45
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d8a6      	bhi.n	800a83c <__ssvfiscanf_r+0xec>
 800a8ee:	2305      	movs	r3, #5
 800a8f0:	e01f      	b.n	800a932 <__ssvfiscanf_r+0x1e2>
 800a8f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	4798      	blx	r3
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	f43f af68 	beq.w	800a7d0 <__ssvfiscanf_r+0x80>
 800a900:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a902:	2800      	cmp	r0, #0
 800a904:	f040 808d 	bne.w	800aa22 <__ssvfiscanf_r+0x2d2>
 800a908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a90c:	e08f      	b.n	800aa2e <__ssvfiscanf_r+0x2de>
 800a90e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a910:	f042 0220 	orr.w	r2, r2, #32
 800a914:	9241      	str	r2, [sp, #260]	; 0x104
 800a916:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a91c:	9241      	str	r2, [sp, #260]	; 0x104
 800a91e:	2210      	movs	r2, #16
 800a920:	2b6f      	cmp	r3, #111	; 0x6f
 800a922:	9242      	str	r2, [sp, #264]	; 0x108
 800a924:	bf34      	ite	cc
 800a926:	2303      	movcc	r3, #3
 800a928:	2304      	movcs	r3, #4
 800a92a:	e002      	b.n	800a932 <__ssvfiscanf_r+0x1e2>
 800a92c:	2300      	movs	r3, #0
 800a92e:	9342      	str	r3, [sp, #264]	; 0x108
 800a930:	2303      	movs	r3, #3
 800a932:	9347      	str	r3, [sp, #284]	; 0x11c
 800a934:	6863      	ldr	r3, [r4, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	dd3d      	ble.n	800a9b6 <__ssvfiscanf_r+0x266>
 800a93a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a93c:	0659      	lsls	r1, r3, #25
 800a93e:	d404      	bmi.n	800a94a <__ssvfiscanf_r+0x1fa>
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	781a      	ldrb	r2, [r3, #0]
 800a944:	5cba      	ldrb	r2, [r7, r2]
 800a946:	0712      	lsls	r2, r2, #28
 800a948:	d43c      	bmi.n	800a9c4 <__ssvfiscanf_r+0x274>
 800a94a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	dc4b      	bgt.n	800a9e8 <__ssvfiscanf_r+0x298>
 800a950:	466b      	mov	r3, sp
 800a952:	4622      	mov	r2, r4
 800a954:	a941      	add	r1, sp, #260	; 0x104
 800a956:	4630      	mov	r0, r6
 800a958:	f000 f872 	bl	800aa40 <_scanf_chars>
 800a95c:	2801      	cmp	r0, #1
 800a95e:	d06a      	beq.n	800aa36 <__ssvfiscanf_r+0x2e6>
 800a960:	2802      	cmp	r0, #2
 800a962:	f47f af1c 	bne.w	800a79e <__ssvfiscanf_r+0x4e>
 800a966:	e7cb      	b.n	800a900 <__ssvfiscanf_r+0x1b0>
 800a968:	2308      	movs	r3, #8
 800a96a:	9342      	str	r3, [sp, #264]	; 0x108
 800a96c:	2304      	movs	r3, #4
 800a96e:	e7e0      	b.n	800a932 <__ssvfiscanf_r+0x1e2>
 800a970:	220a      	movs	r2, #10
 800a972:	e7d5      	b.n	800a920 <__ssvfiscanf_r+0x1d0>
 800a974:	4629      	mov	r1, r5
 800a976:	4640      	mov	r0, r8
 800a978:	f000 fa5e 	bl	800ae38 <__sccl>
 800a97c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a982:	9341      	str	r3, [sp, #260]	; 0x104
 800a984:	4605      	mov	r5, r0
 800a986:	2301      	movs	r3, #1
 800a988:	e7d3      	b.n	800a932 <__ssvfiscanf_r+0x1e2>
 800a98a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a990:	9341      	str	r3, [sp, #260]	; 0x104
 800a992:	2300      	movs	r3, #0
 800a994:	e7cd      	b.n	800a932 <__ssvfiscanf_r+0x1e2>
 800a996:	2302      	movs	r3, #2
 800a998:	e7cb      	b.n	800a932 <__ssvfiscanf_r+0x1e2>
 800a99a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a99c:	06c3      	lsls	r3, r0, #27
 800a99e:	f53f aefe 	bmi.w	800a79e <__ssvfiscanf_r+0x4e>
 800a9a2:	9b00      	ldr	r3, [sp, #0]
 800a9a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a9a6:	1d19      	adds	r1, r3, #4
 800a9a8:	9100      	str	r1, [sp, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	07c0      	lsls	r0, r0, #31
 800a9ae:	bf4c      	ite	mi
 800a9b0:	801a      	strhmi	r2, [r3, #0]
 800a9b2:	601a      	strpl	r2, [r3, #0]
 800a9b4:	e6f3      	b.n	800a79e <__ssvfiscanf_r+0x4e>
 800a9b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	4798      	blx	r3
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0bb      	beq.n	800a93a <__ssvfiscanf_r+0x1ea>
 800a9c2:	e79d      	b.n	800a900 <__ssvfiscanf_r+0x1b0>
 800a9c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a9c6:	3201      	adds	r2, #1
 800a9c8:	9245      	str	r2, [sp, #276]	; 0x114
 800a9ca:	6862      	ldr	r2, [r4, #4]
 800a9cc:	3a01      	subs	r2, #1
 800a9ce:	2a00      	cmp	r2, #0
 800a9d0:	6062      	str	r2, [r4, #4]
 800a9d2:	dd02      	ble.n	800a9da <__ssvfiscanf_r+0x28a>
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	e7b2      	b.n	800a940 <__ssvfiscanf_r+0x1f0>
 800a9da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4630      	mov	r0, r6
 800a9e0:	4798      	blx	r3
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d0ac      	beq.n	800a940 <__ssvfiscanf_r+0x1f0>
 800a9e6:	e78b      	b.n	800a900 <__ssvfiscanf_r+0x1b0>
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	dc0f      	bgt.n	800aa0c <__ssvfiscanf_r+0x2bc>
 800a9ec:	466b      	mov	r3, sp
 800a9ee:	4622      	mov	r2, r4
 800a9f0:	a941      	add	r1, sp, #260	; 0x104
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f000 f87e 	bl	800aaf4 <_scanf_i>
 800a9f8:	e7b0      	b.n	800a95c <__ssvfiscanf_r+0x20c>
 800a9fa:	bf00      	nop
 800a9fc:	0800a69d 	.word	0x0800a69d
 800aa00:	0800a717 	.word	0x0800a717
 800aa04:	0800c02f 	.word	0x0800c02f
 800aa08:	0800bfc2 	.word	0x0800bfc2
 800aa0c:	4b0b      	ldr	r3, [pc, #44]	; (800aa3c <__ssvfiscanf_r+0x2ec>)
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f43f aec5 	beq.w	800a79e <__ssvfiscanf_r+0x4e>
 800aa14:	466b      	mov	r3, sp
 800aa16:	4622      	mov	r2, r4
 800aa18:	a941      	add	r1, sp, #260	; 0x104
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f3af 8000 	nop.w
 800aa20:	e79c      	b.n	800a95c <__ssvfiscanf_r+0x20c>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aa28:	bf18      	it	ne
 800aa2a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800aa2e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800aa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa36:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aa38:	e7f9      	b.n	800aa2e <__ssvfiscanf_r+0x2de>
 800aa3a:	bf00      	nop
 800aa3c:	00000000 	.word	0x00000000

0800aa40 <_scanf_chars>:
 800aa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa44:	4615      	mov	r5, r2
 800aa46:	688a      	ldr	r2, [r1, #8]
 800aa48:	4680      	mov	r8, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	b932      	cbnz	r2, 800aa5c <_scanf_chars+0x1c>
 800aa4e:	698a      	ldr	r2, [r1, #24]
 800aa50:	2a00      	cmp	r2, #0
 800aa52:	bf0c      	ite	eq
 800aa54:	2201      	moveq	r2, #1
 800aa56:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800aa5a:	608a      	str	r2, [r1, #8]
 800aa5c:	6822      	ldr	r2, [r4, #0]
 800aa5e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800aaf0 <_scanf_chars+0xb0>
 800aa62:	06d1      	lsls	r1, r2, #27
 800aa64:	bf5f      	itttt	pl
 800aa66:	681a      	ldrpl	r2, [r3, #0]
 800aa68:	1d11      	addpl	r1, r2, #4
 800aa6a:	6019      	strpl	r1, [r3, #0]
 800aa6c:	6816      	ldrpl	r6, [r2, #0]
 800aa6e:	2700      	movs	r7, #0
 800aa70:	69a0      	ldr	r0, [r4, #24]
 800aa72:	b188      	cbz	r0, 800aa98 <_scanf_chars+0x58>
 800aa74:	2801      	cmp	r0, #1
 800aa76:	d107      	bne.n	800aa88 <_scanf_chars+0x48>
 800aa78:	682a      	ldr	r2, [r5, #0]
 800aa7a:	7811      	ldrb	r1, [r2, #0]
 800aa7c:	6962      	ldr	r2, [r4, #20]
 800aa7e:	5c52      	ldrb	r2, [r2, r1]
 800aa80:	b952      	cbnz	r2, 800aa98 <_scanf_chars+0x58>
 800aa82:	2f00      	cmp	r7, #0
 800aa84:	d031      	beq.n	800aaea <_scanf_chars+0xaa>
 800aa86:	e022      	b.n	800aace <_scanf_chars+0x8e>
 800aa88:	2802      	cmp	r0, #2
 800aa8a:	d120      	bne.n	800aace <_scanf_chars+0x8e>
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	f819 3003 	ldrb.w	r3, [r9, r3]
 800aa94:	071b      	lsls	r3, r3, #28
 800aa96:	d41a      	bmi.n	800aace <_scanf_chars+0x8e>
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	06da      	lsls	r2, r3, #27
 800aa9c:	bf5e      	ittt	pl
 800aa9e:	682b      	ldrpl	r3, [r5, #0]
 800aaa0:	781b      	ldrbpl	r3, [r3, #0]
 800aaa2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aaa6:	682a      	ldr	r2, [r5, #0]
 800aaa8:	686b      	ldr	r3, [r5, #4]
 800aaaa:	3201      	adds	r2, #1
 800aaac:	602a      	str	r2, [r5, #0]
 800aaae:	68a2      	ldr	r2, [r4, #8]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	3a01      	subs	r2, #1
 800aab4:	606b      	str	r3, [r5, #4]
 800aab6:	3701      	adds	r7, #1
 800aab8:	60a2      	str	r2, [r4, #8]
 800aaba:	b142      	cbz	r2, 800aace <_scanf_chars+0x8e>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dcd7      	bgt.n	800aa70 <_scanf_chars+0x30>
 800aac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aac4:	4629      	mov	r1, r5
 800aac6:	4640      	mov	r0, r8
 800aac8:	4798      	blx	r3
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d0d0      	beq.n	800aa70 <_scanf_chars+0x30>
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	f013 0310 	ands.w	r3, r3, #16
 800aad4:	d105      	bne.n	800aae2 <_scanf_chars+0xa2>
 800aad6:	68e2      	ldr	r2, [r4, #12]
 800aad8:	3201      	adds	r2, #1
 800aada:	60e2      	str	r2, [r4, #12]
 800aadc:	69a2      	ldr	r2, [r4, #24]
 800aade:	b102      	cbz	r2, 800aae2 <_scanf_chars+0xa2>
 800aae0:	7033      	strb	r3, [r6, #0]
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	443b      	add	r3, r7
 800aae6:	6123      	str	r3, [r4, #16]
 800aae8:	2000      	movs	r0, #0
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	bf00      	nop
 800aaf0:	0800c02f 	.word	0x0800c02f

0800aaf4 <_scanf_i>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	4698      	mov	r8, r3
 800aafa:	4b74      	ldr	r3, [pc, #464]	; (800accc <_scanf_i+0x1d8>)
 800aafc:	460c      	mov	r4, r1
 800aafe:	4682      	mov	sl, r0
 800ab00:	4616      	mov	r6, r2
 800ab02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab06:	b087      	sub	sp, #28
 800ab08:	ab03      	add	r3, sp, #12
 800ab0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ab0e:	4b70      	ldr	r3, [pc, #448]	; (800acd0 <_scanf_i+0x1dc>)
 800ab10:	69a1      	ldr	r1, [r4, #24]
 800ab12:	4a70      	ldr	r2, [pc, #448]	; (800acd4 <_scanf_i+0x1e0>)
 800ab14:	2903      	cmp	r1, #3
 800ab16:	bf18      	it	ne
 800ab18:	461a      	movne	r2, r3
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	9201      	str	r2, [sp, #4]
 800ab1e:	1e5a      	subs	r2, r3, #1
 800ab20:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ab24:	bf88      	it	hi
 800ab26:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ab2a:	4627      	mov	r7, r4
 800ab2c:	bf82      	ittt	hi
 800ab2e:	eb03 0905 	addhi.w	r9, r3, r5
 800ab32:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ab36:	60a3      	strhi	r3, [r4, #8]
 800ab38:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ab3c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ab40:	bf98      	it	ls
 800ab42:	f04f 0900 	movls.w	r9, #0
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	463d      	mov	r5, r7
 800ab4a:	f04f 0b00 	mov.w	fp, #0
 800ab4e:	6831      	ldr	r1, [r6, #0]
 800ab50:	ab03      	add	r3, sp, #12
 800ab52:	7809      	ldrb	r1, [r1, #0]
 800ab54:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ab58:	2202      	movs	r2, #2
 800ab5a:	f7f5 fb41 	bl	80001e0 <memchr>
 800ab5e:	b328      	cbz	r0, 800abac <_scanf_i+0xb8>
 800ab60:	f1bb 0f01 	cmp.w	fp, #1
 800ab64:	d159      	bne.n	800ac1a <_scanf_i+0x126>
 800ab66:	6862      	ldr	r2, [r4, #4]
 800ab68:	b92a      	cbnz	r2, 800ab76 <_scanf_i+0x82>
 800ab6a:	6822      	ldr	r2, [r4, #0]
 800ab6c:	2308      	movs	r3, #8
 800ab6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab72:	6063      	str	r3, [r4, #4]
 800ab74:	6022      	str	r2, [r4, #0]
 800ab76:	6822      	ldr	r2, [r4, #0]
 800ab78:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ab7c:	6022      	str	r2, [r4, #0]
 800ab7e:	68a2      	ldr	r2, [r4, #8]
 800ab80:	1e51      	subs	r1, r2, #1
 800ab82:	60a1      	str	r1, [r4, #8]
 800ab84:	b192      	cbz	r2, 800abac <_scanf_i+0xb8>
 800ab86:	6832      	ldr	r2, [r6, #0]
 800ab88:	1c51      	adds	r1, r2, #1
 800ab8a:	6031      	str	r1, [r6, #0]
 800ab8c:	7812      	ldrb	r2, [r2, #0]
 800ab8e:	f805 2b01 	strb.w	r2, [r5], #1
 800ab92:	6872      	ldr	r2, [r6, #4]
 800ab94:	3a01      	subs	r2, #1
 800ab96:	2a00      	cmp	r2, #0
 800ab98:	6072      	str	r2, [r6, #4]
 800ab9a:	dc07      	bgt.n	800abac <_scanf_i+0xb8>
 800ab9c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800aba0:	4631      	mov	r1, r6
 800aba2:	4650      	mov	r0, sl
 800aba4:	4790      	blx	r2
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f040 8085 	bne.w	800acb6 <_scanf_i+0x1c2>
 800abac:	f10b 0b01 	add.w	fp, fp, #1
 800abb0:	f1bb 0f03 	cmp.w	fp, #3
 800abb4:	d1cb      	bne.n	800ab4e <_scanf_i+0x5a>
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	b90b      	cbnz	r3, 800abbe <_scanf_i+0xca>
 800abba:	230a      	movs	r3, #10
 800abbc:	6063      	str	r3, [r4, #4]
 800abbe:	6863      	ldr	r3, [r4, #4]
 800abc0:	4945      	ldr	r1, [pc, #276]	; (800acd8 <_scanf_i+0x1e4>)
 800abc2:	6960      	ldr	r0, [r4, #20]
 800abc4:	1ac9      	subs	r1, r1, r3
 800abc6:	f000 f937 	bl	800ae38 <__sccl>
 800abca:	f04f 0b00 	mov.w	fp, #0
 800abce:	68a3      	ldr	r3, [r4, #8]
 800abd0:	6822      	ldr	r2, [r4, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d03d      	beq.n	800ac52 <_scanf_i+0x15e>
 800abd6:	6831      	ldr	r1, [r6, #0]
 800abd8:	6960      	ldr	r0, [r4, #20]
 800abda:	f891 c000 	ldrb.w	ip, [r1]
 800abde:	f810 000c 	ldrb.w	r0, [r0, ip]
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d035      	beq.n	800ac52 <_scanf_i+0x15e>
 800abe6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800abea:	d124      	bne.n	800ac36 <_scanf_i+0x142>
 800abec:	0510      	lsls	r0, r2, #20
 800abee:	d522      	bpl.n	800ac36 <_scanf_i+0x142>
 800abf0:	f10b 0b01 	add.w	fp, fp, #1
 800abf4:	f1b9 0f00 	cmp.w	r9, #0
 800abf8:	d003      	beq.n	800ac02 <_scanf_i+0x10e>
 800abfa:	3301      	adds	r3, #1
 800abfc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ac00:	60a3      	str	r3, [r4, #8]
 800ac02:	6873      	ldr	r3, [r6, #4]
 800ac04:	3b01      	subs	r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	6073      	str	r3, [r6, #4]
 800ac0a:	dd1b      	ble.n	800ac44 <_scanf_i+0x150>
 800ac0c:	6833      	ldr	r3, [r6, #0]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	6033      	str	r3, [r6, #0]
 800ac12:	68a3      	ldr	r3, [r4, #8]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	60a3      	str	r3, [r4, #8]
 800ac18:	e7d9      	b.n	800abce <_scanf_i+0xda>
 800ac1a:	f1bb 0f02 	cmp.w	fp, #2
 800ac1e:	d1ae      	bne.n	800ab7e <_scanf_i+0x8a>
 800ac20:	6822      	ldr	r2, [r4, #0]
 800ac22:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ac26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ac2a:	d1bf      	bne.n	800abac <_scanf_i+0xb8>
 800ac2c:	2310      	movs	r3, #16
 800ac2e:	6063      	str	r3, [r4, #4]
 800ac30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac34:	e7a2      	b.n	800ab7c <_scanf_i+0x88>
 800ac36:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ac3a:	6022      	str	r2, [r4, #0]
 800ac3c:	780b      	ldrb	r3, [r1, #0]
 800ac3e:	f805 3b01 	strb.w	r3, [r5], #1
 800ac42:	e7de      	b.n	800ac02 <_scanf_i+0x10e>
 800ac44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac48:	4631      	mov	r1, r6
 800ac4a:	4650      	mov	r0, sl
 800ac4c:	4798      	blx	r3
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d0df      	beq.n	800ac12 <_scanf_i+0x11e>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	05d9      	lsls	r1, r3, #23
 800ac56:	d50d      	bpl.n	800ac74 <_scanf_i+0x180>
 800ac58:	42bd      	cmp	r5, r7
 800ac5a:	d909      	bls.n	800ac70 <_scanf_i+0x17c>
 800ac5c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ac60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac64:	4632      	mov	r2, r6
 800ac66:	4650      	mov	r0, sl
 800ac68:	4798      	blx	r3
 800ac6a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ac6e:	464d      	mov	r5, r9
 800ac70:	42bd      	cmp	r5, r7
 800ac72:	d028      	beq.n	800acc6 <_scanf_i+0x1d2>
 800ac74:	6822      	ldr	r2, [r4, #0]
 800ac76:	f012 0210 	ands.w	r2, r2, #16
 800ac7a:	d113      	bne.n	800aca4 <_scanf_i+0x1b0>
 800ac7c:	702a      	strb	r2, [r5, #0]
 800ac7e:	6863      	ldr	r3, [r4, #4]
 800ac80:	9e01      	ldr	r6, [sp, #4]
 800ac82:	4639      	mov	r1, r7
 800ac84:	4650      	mov	r0, sl
 800ac86:	47b0      	blx	r6
 800ac88:	f8d8 3000 	ldr.w	r3, [r8]
 800ac8c:	6821      	ldr	r1, [r4, #0]
 800ac8e:	1d1a      	adds	r2, r3, #4
 800ac90:	f8c8 2000 	str.w	r2, [r8]
 800ac94:	f011 0f20 	tst.w	r1, #32
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	d00f      	beq.n	800acbc <_scanf_i+0x1c8>
 800ac9c:	6018      	str	r0, [r3, #0]
 800ac9e:	68e3      	ldr	r3, [r4, #12]
 800aca0:	3301      	adds	r3, #1
 800aca2:	60e3      	str	r3, [r4, #12]
 800aca4:	6923      	ldr	r3, [r4, #16]
 800aca6:	1bed      	subs	r5, r5, r7
 800aca8:	445d      	add	r5, fp
 800acaa:	442b      	add	r3, r5
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	2000      	movs	r0, #0
 800acb0:	b007      	add	sp, #28
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb6:	f04f 0b00 	mov.w	fp, #0
 800acba:	e7ca      	b.n	800ac52 <_scanf_i+0x15e>
 800acbc:	07ca      	lsls	r2, r1, #31
 800acbe:	bf4c      	ite	mi
 800acc0:	8018      	strhmi	r0, [r3, #0]
 800acc2:	6018      	strpl	r0, [r3, #0]
 800acc4:	e7eb      	b.n	800ac9e <_scanf_i+0x1aa>
 800acc6:	2001      	movs	r0, #1
 800acc8:	e7f2      	b.n	800acb0 <_scanf_i+0x1bc>
 800acca:	bf00      	nop
 800accc:	0800b7d8 	.word	0x0800b7d8
 800acd0:	0800b219 	.word	0x0800b219
 800acd4:	0800b131 	.word	0x0800b131
 800acd8:	0800bfdd 	.word	0x0800bfdd

0800acdc <__sflush_r>:
 800acdc:	898a      	ldrh	r2, [r1, #12]
 800acde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace2:	4605      	mov	r5, r0
 800ace4:	0710      	lsls	r0, r2, #28
 800ace6:	460c      	mov	r4, r1
 800ace8:	d458      	bmi.n	800ad9c <__sflush_r+0xc0>
 800acea:	684b      	ldr	r3, [r1, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	dc05      	bgt.n	800acfc <__sflush_r+0x20>
 800acf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dc02      	bgt.n	800acfc <__sflush_r+0x20>
 800acf6:	2000      	movs	r0, #0
 800acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acfe:	2e00      	cmp	r6, #0
 800ad00:	d0f9      	beq.n	800acf6 <__sflush_r+0x1a>
 800ad02:	2300      	movs	r3, #0
 800ad04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad08:	682f      	ldr	r7, [r5, #0]
 800ad0a:	6a21      	ldr	r1, [r4, #32]
 800ad0c:	602b      	str	r3, [r5, #0]
 800ad0e:	d032      	beq.n	800ad76 <__sflush_r+0x9a>
 800ad10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	075a      	lsls	r2, r3, #29
 800ad16:	d505      	bpl.n	800ad24 <__sflush_r+0x48>
 800ad18:	6863      	ldr	r3, [r4, #4]
 800ad1a:	1ac0      	subs	r0, r0, r3
 800ad1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad1e:	b10b      	cbz	r3, 800ad24 <__sflush_r+0x48>
 800ad20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad22:	1ac0      	subs	r0, r0, r3
 800ad24:	2300      	movs	r3, #0
 800ad26:	4602      	mov	r2, r0
 800ad28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad2a:	6a21      	ldr	r1, [r4, #32]
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	47b0      	blx	r6
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	d106      	bne.n	800ad44 <__sflush_r+0x68>
 800ad36:	6829      	ldr	r1, [r5, #0]
 800ad38:	291d      	cmp	r1, #29
 800ad3a:	d82b      	bhi.n	800ad94 <__sflush_r+0xb8>
 800ad3c:	4a29      	ldr	r2, [pc, #164]	; (800ade4 <__sflush_r+0x108>)
 800ad3e:	410a      	asrs	r2, r1
 800ad40:	07d6      	lsls	r6, r2, #31
 800ad42:	d427      	bmi.n	800ad94 <__sflush_r+0xb8>
 800ad44:	2200      	movs	r2, #0
 800ad46:	6062      	str	r2, [r4, #4]
 800ad48:	04d9      	lsls	r1, r3, #19
 800ad4a:	6922      	ldr	r2, [r4, #16]
 800ad4c:	6022      	str	r2, [r4, #0]
 800ad4e:	d504      	bpl.n	800ad5a <__sflush_r+0x7e>
 800ad50:	1c42      	adds	r2, r0, #1
 800ad52:	d101      	bne.n	800ad58 <__sflush_r+0x7c>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b903      	cbnz	r3, 800ad5a <__sflush_r+0x7e>
 800ad58:	6560      	str	r0, [r4, #84]	; 0x54
 800ad5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad5c:	602f      	str	r7, [r5, #0]
 800ad5e:	2900      	cmp	r1, #0
 800ad60:	d0c9      	beq.n	800acf6 <__sflush_r+0x1a>
 800ad62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad66:	4299      	cmp	r1, r3
 800ad68:	d002      	beq.n	800ad70 <__sflush_r+0x94>
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f7fe fec2 	bl	8009af4 <_free_r>
 800ad70:	2000      	movs	r0, #0
 800ad72:	6360      	str	r0, [r4, #52]	; 0x34
 800ad74:	e7c0      	b.n	800acf8 <__sflush_r+0x1c>
 800ad76:	2301      	movs	r3, #1
 800ad78:	4628      	mov	r0, r5
 800ad7a:	47b0      	blx	r6
 800ad7c:	1c41      	adds	r1, r0, #1
 800ad7e:	d1c8      	bne.n	800ad12 <__sflush_r+0x36>
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0c5      	beq.n	800ad12 <__sflush_r+0x36>
 800ad86:	2b1d      	cmp	r3, #29
 800ad88:	d001      	beq.n	800ad8e <__sflush_r+0xb2>
 800ad8a:	2b16      	cmp	r3, #22
 800ad8c:	d101      	bne.n	800ad92 <__sflush_r+0xb6>
 800ad8e:	602f      	str	r7, [r5, #0]
 800ad90:	e7b1      	b.n	800acf6 <__sflush_r+0x1a>
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	e7ad      	b.n	800acf8 <__sflush_r+0x1c>
 800ad9c:	690f      	ldr	r7, [r1, #16]
 800ad9e:	2f00      	cmp	r7, #0
 800ada0:	d0a9      	beq.n	800acf6 <__sflush_r+0x1a>
 800ada2:	0793      	lsls	r3, r2, #30
 800ada4:	680e      	ldr	r6, [r1, #0]
 800ada6:	bf08      	it	eq
 800ada8:	694b      	ldreq	r3, [r1, #20]
 800adaa:	600f      	str	r7, [r1, #0]
 800adac:	bf18      	it	ne
 800adae:	2300      	movne	r3, #0
 800adb0:	eba6 0807 	sub.w	r8, r6, r7
 800adb4:	608b      	str	r3, [r1, #8]
 800adb6:	f1b8 0f00 	cmp.w	r8, #0
 800adba:	dd9c      	ble.n	800acf6 <__sflush_r+0x1a>
 800adbc:	6a21      	ldr	r1, [r4, #32]
 800adbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800adc0:	4643      	mov	r3, r8
 800adc2:	463a      	mov	r2, r7
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b0      	blx	r6
 800adc8:	2800      	cmp	r0, #0
 800adca:	dc06      	bgt.n	800adda <__sflush_r+0xfe>
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add2:	81a3      	strh	r3, [r4, #12]
 800add4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800add8:	e78e      	b.n	800acf8 <__sflush_r+0x1c>
 800adda:	4407      	add	r7, r0
 800addc:	eba8 0800 	sub.w	r8, r8, r0
 800ade0:	e7e9      	b.n	800adb6 <__sflush_r+0xda>
 800ade2:	bf00      	nop
 800ade4:	dfbffffe 	.word	0xdfbffffe

0800ade8 <_fflush_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	690b      	ldr	r3, [r1, #16]
 800adec:	4605      	mov	r5, r0
 800adee:	460c      	mov	r4, r1
 800adf0:	b913      	cbnz	r3, 800adf8 <_fflush_r+0x10>
 800adf2:	2500      	movs	r5, #0
 800adf4:	4628      	mov	r0, r5
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	b118      	cbz	r0, 800ae02 <_fflush_r+0x1a>
 800adfa:	6a03      	ldr	r3, [r0, #32]
 800adfc:	b90b      	cbnz	r3, 800ae02 <_fflush_r+0x1a>
 800adfe:	f7fd fe23 	bl	8008a48 <__sinit>
 800ae02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d0f3      	beq.n	800adf2 <_fflush_r+0xa>
 800ae0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae0c:	07d0      	lsls	r0, r2, #31
 800ae0e:	d404      	bmi.n	800ae1a <_fflush_r+0x32>
 800ae10:	0599      	lsls	r1, r3, #22
 800ae12:	d402      	bmi.n	800ae1a <_fflush_r+0x32>
 800ae14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae16:	f7fd ffe0 	bl	8008dda <__retarget_lock_acquire_recursive>
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	f7ff ff5d 	bl	800acdc <__sflush_r>
 800ae22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae24:	07da      	lsls	r2, r3, #31
 800ae26:	4605      	mov	r5, r0
 800ae28:	d4e4      	bmi.n	800adf4 <_fflush_r+0xc>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	059b      	lsls	r3, r3, #22
 800ae2e:	d4e1      	bmi.n	800adf4 <_fflush_r+0xc>
 800ae30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae32:	f7fd ffd3 	bl	8008ddc <__retarget_lock_release_recursive>
 800ae36:	e7dd      	b.n	800adf4 <_fflush_r+0xc>

0800ae38 <__sccl>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	780b      	ldrb	r3, [r1, #0]
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	2b5e      	cmp	r3, #94	; 0x5e
 800ae40:	bf0b      	itete	eq
 800ae42:	784b      	ldrbeq	r3, [r1, #1]
 800ae44:	1c4a      	addne	r2, r1, #1
 800ae46:	1c8a      	addeq	r2, r1, #2
 800ae48:	2100      	movne	r1, #0
 800ae4a:	bf08      	it	eq
 800ae4c:	2101      	moveq	r1, #1
 800ae4e:	3801      	subs	r0, #1
 800ae50:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ae54:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ae58:	42a8      	cmp	r0, r5
 800ae5a:	d1fb      	bne.n	800ae54 <__sccl+0x1c>
 800ae5c:	b90b      	cbnz	r3, 800ae62 <__sccl+0x2a>
 800ae5e:	1e50      	subs	r0, r2, #1
 800ae60:	bd70      	pop	{r4, r5, r6, pc}
 800ae62:	f081 0101 	eor.w	r1, r1, #1
 800ae66:	54e1      	strb	r1, [r4, r3]
 800ae68:	4610      	mov	r0, r2
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ae70:	2d2d      	cmp	r5, #45	; 0x2d
 800ae72:	d005      	beq.n	800ae80 <__sccl+0x48>
 800ae74:	2d5d      	cmp	r5, #93	; 0x5d
 800ae76:	d016      	beq.n	800aea6 <__sccl+0x6e>
 800ae78:	2d00      	cmp	r5, #0
 800ae7a:	d0f1      	beq.n	800ae60 <__sccl+0x28>
 800ae7c:	462b      	mov	r3, r5
 800ae7e:	e7f2      	b.n	800ae66 <__sccl+0x2e>
 800ae80:	7846      	ldrb	r6, [r0, #1]
 800ae82:	2e5d      	cmp	r6, #93	; 0x5d
 800ae84:	d0fa      	beq.n	800ae7c <__sccl+0x44>
 800ae86:	42b3      	cmp	r3, r6
 800ae88:	dcf8      	bgt.n	800ae7c <__sccl+0x44>
 800ae8a:	3002      	adds	r0, #2
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	3201      	adds	r2, #1
 800ae90:	4296      	cmp	r6, r2
 800ae92:	54a1      	strb	r1, [r4, r2]
 800ae94:	dcfb      	bgt.n	800ae8e <__sccl+0x56>
 800ae96:	1af2      	subs	r2, r6, r3
 800ae98:	3a01      	subs	r2, #1
 800ae9a:	1c5d      	adds	r5, r3, #1
 800ae9c:	42b3      	cmp	r3, r6
 800ae9e:	bfa8      	it	ge
 800aea0:	2200      	movge	r2, #0
 800aea2:	18ab      	adds	r3, r5, r2
 800aea4:	e7e1      	b.n	800ae6a <__sccl+0x32>
 800aea6:	4610      	mov	r0, r2
 800aea8:	e7da      	b.n	800ae60 <__sccl+0x28>

0800aeaa <__submore>:
 800aeaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeae:	460c      	mov	r4, r1
 800aeb0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aeb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aeb6:	4299      	cmp	r1, r3
 800aeb8:	d11d      	bne.n	800aef6 <__submore+0x4c>
 800aeba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aebe:	f7fe fe8d 	bl	8009bdc <_malloc_r>
 800aec2:	b918      	cbnz	r0, 800aecc <__submore+0x22>
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aed0:	63a3      	str	r3, [r4, #56]	; 0x38
 800aed2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aed6:	6360      	str	r0, [r4, #52]	; 0x34
 800aed8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aedc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aee0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800aee4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aee8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aeec:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aef0:	6020      	str	r0, [r4, #0]
 800aef2:	2000      	movs	r0, #0
 800aef4:	e7e8      	b.n	800aec8 <__submore+0x1e>
 800aef6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aef8:	0077      	lsls	r7, r6, #1
 800aefa:	463a      	mov	r2, r7
 800aefc:	f000 f866 	bl	800afcc <_realloc_r>
 800af00:	4605      	mov	r5, r0
 800af02:	2800      	cmp	r0, #0
 800af04:	d0de      	beq.n	800aec4 <__submore+0x1a>
 800af06:	eb00 0806 	add.w	r8, r0, r6
 800af0a:	4601      	mov	r1, r0
 800af0c:	4632      	mov	r2, r6
 800af0e:	4640      	mov	r0, r8
 800af10:	f7fd ff65 	bl	8008dde <memcpy>
 800af14:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800af18:	f8c4 8000 	str.w	r8, [r4]
 800af1c:	e7e9      	b.n	800aef2 <__submore+0x48>
	...

0800af20 <_sbrk_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4d06      	ldr	r5, [pc, #24]	; (800af3c <_sbrk_r+0x1c>)
 800af24:	2300      	movs	r3, #0
 800af26:	4604      	mov	r4, r0
 800af28:	4608      	mov	r0, r1
 800af2a:	602b      	str	r3, [r5, #0]
 800af2c:	f7f6 fb04 	bl	8001538 <_sbrk>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_sbrk_r+0x1a>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_sbrk_r+0x1a>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	200028f0 	.word	0x200028f0

0800af40 <__assert_func>:
 800af40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af42:	4614      	mov	r4, r2
 800af44:	461a      	mov	r2, r3
 800af46:	4b09      	ldr	r3, [pc, #36]	; (800af6c <__assert_func+0x2c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4605      	mov	r5, r0
 800af4c:	68d8      	ldr	r0, [r3, #12]
 800af4e:	b14c      	cbz	r4, 800af64 <__assert_func+0x24>
 800af50:	4b07      	ldr	r3, [pc, #28]	; (800af70 <__assert_func+0x30>)
 800af52:	9100      	str	r1, [sp, #0]
 800af54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af58:	4906      	ldr	r1, [pc, #24]	; (800af74 <__assert_func+0x34>)
 800af5a:	462b      	mov	r3, r5
 800af5c:	f000 f96c 	bl	800b238 <fiprintf>
 800af60:	f000 f97c 	bl	800b25c <abort>
 800af64:	4b04      	ldr	r3, [pc, #16]	; (800af78 <__assert_func+0x38>)
 800af66:	461c      	mov	r4, r3
 800af68:	e7f3      	b.n	800af52 <__assert_func+0x12>
 800af6a:	bf00      	nop
 800af6c:	20000150 	.word	0x20000150
 800af70:	0800bff2 	.word	0x0800bff2
 800af74:	0800bfff 	.word	0x0800bfff
 800af78:	0800c02d 	.word	0x0800c02d

0800af7c <_calloc_r>:
 800af7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af7e:	fba1 2402 	umull	r2, r4, r1, r2
 800af82:	b94c      	cbnz	r4, 800af98 <_calloc_r+0x1c>
 800af84:	4611      	mov	r1, r2
 800af86:	9201      	str	r2, [sp, #4]
 800af88:	f7fe fe28 	bl	8009bdc <_malloc_r>
 800af8c:	9a01      	ldr	r2, [sp, #4]
 800af8e:	4605      	mov	r5, r0
 800af90:	b930      	cbnz	r0, 800afa0 <_calloc_r+0x24>
 800af92:	4628      	mov	r0, r5
 800af94:	b003      	add	sp, #12
 800af96:	bd30      	pop	{r4, r5, pc}
 800af98:	220c      	movs	r2, #12
 800af9a:	6002      	str	r2, [r0, #0]
 800af9c:	2500      	movs	r5, #0
 800af9e:	e7f8      	b.n	800af92 <_calloc_r+0x16>
 800afa0:	4621      	mov	r1, r4
 800afa2:	f7fd fe6b 	bl	8008c7c <memset>
 800afa6:	e7f4      	b.n	800af92 <_calloc_r+0x16>

0800afa8 <__ascii_mbtowc>:
 800afa8:	b082      	sub	sp, #8
 800afaa:	b901      	cbnz	r1, 800afae <__ascii_mbtowc+0x6>
 800afac:	a901      	add	r1, sp, #4
 800afae:	b142      	cbz	r2, 800afc2 <__ascii_mbtowc+0x1a>
 800afb0:	b14b      	cbz	r3, 800afc6 <__ascii_mbtowc+0x1e>
 800afb2:	7813      	ldrb	r3, [r2, #0]
 800afb4:	600b      	str	r3, [r1, #0]
 800afb6:	7812      	ldrb	r2, [r2, #0]
 800afb8:	1e10      	subs	r0, r2, #0
 800afba:	bf18      	it	ne
 800afbc:	2001      	movne	r0, #1
 800afbe:	b002      	add	sp, #8
 800afc0:	4770      	bx	lr
 800afc2:	4610      	mov	r0, r2
 800afc4:	e7fb      	b.n	800afbe <__ascii_mbtowc+0x16>
 800afc6:	f06f 0001 	mvn.w	r0, #1
 800afca:	e7f8      	b.n	800afbe <__ascii_mbtowc+0x16>

0800afcc <_realloc_r>:
 800afcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd0:	4680      	mov	r8, r0
 800afd2:	4614      	mov	r4, r2
 800afd4:	460e      	mov	r6, r1
 800afd6:	b921      	cbnz	r1, 800afe2 <_realloc_r+0x16>
 800afd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afdc:	4611      	mov	r1, r2
 800afde:	f7fe bdfd 	b.w	8009bdc <_malloc_r>
 800afe2:	b92a      	cbnz	r2, 800aff0 <_realloc_r+0x24>
 800afe4:	f7fe fd86 	bl	8009af4 <_free_r>
 800afe8:	4625      	mov	r5, r4
 800afea:	4628      	mov	r0, r5
 800afec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff0:	f000 f93b 	bl	800b26a <_malloc_usable_size_r>
 800aff4:	4284      	cmp	r4, r0
 800aff6:	4607      	mov	r7, r0
 800aff8:	d802      	bhi.n	800b000 <_realloc_r+0x34>
 800affa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800affe:	d812      	bhi.n	800b026 <_realloc_r+0x5a>
 800b000:	4621      	mov	r1, r4
 800b002:	4640      	mov	r0, r8
 800b004:	f7fe fdea 	bl	8009bdc <_malloc_r>
 800b008:	4605      	mov	r5, r0
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d0ed      	beq.n	800afea <_realloc_r+0x1e>
 800b00e:	42bc      	cmp	r4, r7
 800b010:	4622      	mov	r2, r4
 800b012:	4631      	mov	r1, r6
 800b014:	bf28      	it	cs
 800b016:	463a      	movcs	r2, r7
 800b018:	f7fd fee1 	bl	8008dde <memcpy>
 800b01c:	4631      	mov	r1, r6
 800b01e:	4640      	mov	r0, r8
 800b020:	f7fe fd68 	bl	8009af4 <_free_r>
 800b024:	e7e1      	b.n	800afea <_realloc_r+0x1e>
 800b026:	4635      	mov	r5, r6
 800b028:	e7df      	b.n	800afea <_realloc_r+0x1e>
	...

0800b02c <_strtol_l.constprop.0>:
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b032:	d001      	beq.n	800b038 <_strtol_l.constprop.0+0xc>
 800b034:	2b24      	cmp	r3, #36	; 0x24
 800b036:	d906      	bls.n	800b046 <_strtol_l.constprop.0+0x1a>
 800b038:	f7fd fea4 	bl	8008d84 <__errno>
 800b03c:	2316      	movs	r3, #22
 800b03e:	6003      	str	r3, [r0, #0]
 800b040:	2000      	movs	r0, #0
 800b042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b046:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b12c <_strtol_l.constprop.0+0x100>
 800b04a:	460d      	mov	r5, r1
 800b04c:	462e      	mov	r6, r5
 800b04e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b052:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b056:	f017 0708 	ands.w	r7, r7, #8
 800b05a:	d1f7      	bne.n	800b04c <_strtol_l.constprop.0+0x20>
 800b05c:	2c2d      	cmp	r4, #45	; 0x2d
 800b05e:	d132      	bne.n	800b0c6 <_strtol_l.constprop.0+0x9a>
 800b060:	782c      	ldrb	r4, [r5, #0]
 800b062:	2701      	movs	r7, #1
 800b064:	1cb5      	adds	r5, r6, #2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d05b      	beq.n	800b122 <_strtol_l.constprop.0+0xf6>
 800b06a:	2b10      	cmp	r3, #16
 800b06c:	d109      	bne.n	800b082 <_strtol_l.constprop.0+0x56>
 800b06e:	2c30      	cmp	r4, #48	; 0x30
 800b070:	d107      	bne.n	800b082 <_strtol_l.constprop.0+0x56>
 800b072:	782c      	ldrb	r4, [r5, #0]
 800b074:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b078:	2c58      	cmp	r4, #88	; 0x58
 800b07a:	d14d      	bne.n	800b118 <_strtol_l.constprop.0+0xec>
 800b07c:	786c      	ldrb	r4, [r5, #1]
 800b07e:	2310      	movs	r3, #16
 800b080:	3502      	adds	r5, #2
 800b082:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b086:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b08a:	f04f 0e00 	mov.w	lr, #0
 800b08e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b092:	4676      	mov	r6, lr
 800b094:	fb03 8a19 	mls	sl, r3, r9, r8
 800b098:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b09c:	f1bc 0f09 	cmp.w	ip, #9
 800b0a0:	d816      	bhi.n	800b0d0 <_strtol_l.constprop.0+0xa4>
 800b0a2:	4664      	mov	r4, ip
 800b0a4:	42a3      	cmp	r3, r4
 800b0a6:	dd24      	ble.n	800b0f2 <_strtol_l.constprop.0+0xc6>
 800b0a8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b0ac:	d008      	beq.n	800b0c0 <_strtol_l.constprop.0+0x94>
 800b0ae:	45b1      	cmp	r9, r6
 800b0b0:	d31c      	bcc.n	800b0ec <_strtol_l.constprop.0+0xc0>
 800b0b2:	d101      	bne.n	800b0b8 <_strtol_l.constprop.0+0x8c>
 800b0b4:	45a2      	cmp	sl, r4
 800b0b6:	db19      	blt.n	800b0ec <_strtol_l.constprop.0+0xc0>
 800b0b8:	fb06 4603 	mla	r6, r6, r3, r4
 800b0bc:	f04f 0e01 	mov.w	lr, #1
 800b0c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0c4:	e7e8      	b.n	800b098 <_strtol_l.constprop.0+0x6c>
 800b0c6:	2c2b      	cmp	r4, #43	; 0x2b
 800b0c8:	bf04      	itt	eq
 800b0ca:	782c      	ldrbeq	r4, [r5, #0]
 800b0cc:	1cb5      	addeq	r5, r6, #2
 800b0ce:	e7ca      	b.n	800b066 <_strtol_l.constprop.0+0x3a>
 800b0d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b0d4:	f1bc 0f19 	cmp.w	ip, #25
 800b0d8:	d801      	bhi.n	800b0de <_strtol_l.constprop.0+0xb2>
 800b0da:	3c37      	subs	r4, #55	; 0x37
 800b0dc:	e7e2      	b.n	800b0a4 <_strtol_l.constprop.0+0x78>
 800b0de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b0e2:	f1bc 0f19 	cmp.w	ip, #25
 800b0e6:	d804      	bhi.n	800b0f2 <_strtol_l.constprop.0+0xc6>
 800b0e8:	3c57      	subs	r4, #87	; 0x57
 800b0ea:	e7db      	b.n	800b0a4 <_strtol_l.constprop.0+0x78>
 800b0ec:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b0f0:	e7e6      	b.n	800b0c0 <_strtol_l.constprop.0+0x94>
 800b0f2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b0f6:	d105      	bne.n	800b104 <_strtol_l.constprop.0+0xd8>
 800b0f8:	2322      	movs	r3, #34	; 0x22
 800b0fa:	6003      	str	r3, [r0, #0]
 800b0fc:	4646      	mov	r6, r8
 800b0fe:	b942      	cbnz	r2, 800b112 <_strtol_l.constprop.0+0xe6>
 800b100:	4630      	mov	r0, r6
 800b102:	e79e      	b.n	800b042 <_strtol_l.constprop.0+0x16>
 800b104:	b107      	cbz	r7, 800b108 <_strtol_l.constprop.0+0xdc>
 800b106:	4276      	negs	r6, r6
 800b108:	2a00      	cmp	r2, #0
 800b10a:	d0f9      	beq.n	800b100 <_strtol_l.constprop.0+0xd4>
 800b10c:	f1be 0f00 	cmp.w	lr, #0
 800b110:	d000      	beq.n	800b114 <_strtol_l.constprop.0+0xe8>
 800b112:	1e69      	subs	r1, r5, #1
 800b114:	6011      	str	r1, [r2, #0]
 800b116:	e7f3      	b.n	800b100 <_strtol_l.constprop.0+0xd4>
 800b118:	2430      	movs	r4, #48	; 0x30
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1b1      	bne.n	800b082 <_strtol_l.constprop.0+0x56>
 800b11e:	2308      	movs	r3, #8
 800b120:	e7af      	b.n	800b082 <_strtol_l.constprop.0+0x56>
 800b122:	2c30      	cmp	r4, #48	; 0x30
 800b124:	d0a5      	beq.n	800b072 <_strtol_l.constprop.0+0x46>
 800b126:	230a      	movs	r3, #10
 800b128:	e7ab      	b.n	800b082 <_strtol_l.constprop.0+0x56>
 800b12a:	bf00      	nop
 800b12c:	0800c02f 	.word	0x0800c02f

0800b130 <_strtol_r>:
 800b130:	f7ff bf7c 	b.w	800b02c <_strtol_l.constprop.0>

0800b134 <_strtoul_l.constprop.0>:
 800b134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b138:	4f36      	ldr	r7, [pc, #216]	; (800b214 <_strtoul_l.constprop.0+0xe0>)
 800b13a:	4686      	mov	lr, r0
 800b13c:	460d      	mov	r5, r1
 800b13e:	4628      	mov	r0, r5
 800b140:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b144:	5d3e      	ldrb	r6, [r7, r4]
 800b146:	f016 0608 	ands.w	r6, r6, #8
 800b14a:	d1f8      	bne.n	800b13e <_strtoul_l.constprop.0+0xa>
 800b14c:	2c2d      	cmp	r4, #45	; 0x2d
 800b14e:	d130      	bne.n	800b1b2 <_strtoul_l.constprop.0+0x7e>
 800b150:	782c      	ldrb	r4, [r5, #0]
 800b152:	2601      	movs	r6, #1
 800b154:	1c85      	adds	r5, r0, #2
 800b156:	2b00      	cmp	r3, #0
 800b158:	d057      	beq.n	800b20a <_strtoul_l.constprop.0+0xd6>
 800b15a:	2b10      	cmp	r3, #16
 800b15c:	d109      	bne.n	800b172 <_strtoul_l.constprop.0+0x3e>
 800b15e:	2c30      	cmp	r4, #48	; 0x30
 800b160:	d107      	bne.n	800b172 <_strtoul_l.constprop.0+0x3e>
 800b162:	7828      	ldrb	r0, [r5, #0]
 800b164:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b168:	2858      	cmp	r0, #88	; 0x58
 800b16a:	d149      	bne.n	800b200 <_strtoul_l.constprop.0+0xcc>
 800b16c:	786c      	ldrb	r4, [r5, #1]
 800b16e:	2310      	movs	r3, #16
 800b170:	3502      	adds	r5, #2
 800b172:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b176:	2700      	movs	r7, #0
 800b178:	fbb8 f8f3 	udiv	r8, r8, r3
 800b17c:	fb03 f908 	mul.w	r9, r3, r8
 800b180:	ea6f 0909 	mvn.w	r9, r9
 800b184:	4638      	mov	r0, r7
 800b186:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b18a:	f1bc 0f09 	cmp.w	ip, #9
 800b18e:	d815      	bhi.n	800b1bc <_strtoul_l.constprop.0+0x88>
 800b190:	4664      	mov	r4, ip
 800b192:	42a3      	cmp	r3, r4
 800b194:	dd23      	ble.n	800b1de <_strtoul_l.constprop.0+0xaa>
 800b196:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800b19a:	d007      	beq.n	800b1ac <_strtoul_l.constprop.0+0x78>
 800b19c:	4580      	cmp	r8, r0
 800b19e:	d31b      	bcc.n	800b1d8 <_strtoul_l.constprop.0+0xa4>
 800b1a0:	d101      	bne.n	800b1a6 <_strtoul_l.constprop.0+0x72>
 800b1a2:	45a1      	cmp	r9, r4
 800b1a4:	db18      	blt.n	800b1d8 <_strtoul_l.constprop.0+0xa4>
 800b1a6:	fb00 4003 	mla	r0, r0, r3, r4
 800b1aa:	2701      	movs	r7, #1
 800b1ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1b0:	e7e9      	b.n	800b186 <_strtoul_l.constprop.0+0x52>
 800b1b2:	2c2b      	cmp	r4, #43	; 0x2b
 800b1b4:	bf04      	itt	eq
 800b1b6:	782c      	ldrbeq	r4, [r5, #0]
 800b1b8:	1c85      	addeq	r5, r0, #2
 800b1ba:	e7cc      	b.n	800b156 <_strtoul_l.constprop.0+0x22>
 800b1bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b1c0:	f1bc 0f19 	cmp.w	ip, #25
 800b1c4:	d801      	bhi.n	800b1ca <_strtoul_l.constprop.0+0x96>
 800b1c6:	3c37      	subs	r4, #55	; 0x37
 800b1c8:	e7e3      	b.n	800b192 <_strtoul_l.constprop.0+0x5e>
 800b1ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b1ce:	f1bc 0f19 	cmp.w	ip, #25
 800b1d2:	d804      	bhi.n	800b1de <_strtoul_l.constprop.0+0xaa>
 800b1d4:	3c57      	subs	r4, #87	; 0x57
 800b1d6:	e7dc      	b.n	800b192 <_strtoul_l.constprop.0+0x5e>
 800b1d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b1dc:	e7e6      	b.n	800b1ac <_strtoul_l.constprop.0+0x78>
 800b1de:	1c7b      	adds	r3, r7, #1
 800b1e0:	d106      	bne.n	800b1f0 <_strtoul_l.constprop.0+0xbc>
 800b1e2:	2322      	movs	r3, #34	; 0x22
 800b1e4:	f8ce 3000 	str.w	r3, [lr]
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	b932      	cbnz	r2, 800b1fa <_strtoul_l.constprop.0+0xc6>
 800b1ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1f0:	b106      	cbz	r6, 800b1f4 <_strtoul_l.constprop.0+0xc0>
 800b1f2:	4240      	negs	r0, r0
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	d0f9      	beq.n	800b1ec <_strtoul_l.constprop.0+0xb8>
 800b1f8:	b107      	cbz	r7, 800b1fc <_strtoul_l.constprop.0+0xc8>
 800b1fa:	1e69      	subs	r1, r5, #1
 800b1fc:	6011      	str	r1, [r2, #0]
 800b1fe:	e7f5      	b.n	800b1ec <_strtoul_l.constprop.0+0xb8>
 800b200:	2430      	movs	r4, #48	; 0x30
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1b5      	bne.n	800b172 <_strtoul_l.constprop.0+0x3e>
 800b206:	2308      	movs	r3, #8
 800b208:	e7b3      	b.n	800b172 <_strtoul_l.constprop.0+0x3e>
 800b20a:	2c30      	cmp	r4, #48	; 0x30
 800b20c:	d0a9      	beq.n	800b162 <_strtoul_l.constprop.0+0x2e>
 800b20e:	230a      	movs	r3, #10
 800b210:	e7af      	b.n	800b172 <_strtoul_l.constprop.0+0x3e>
 800b212:	bf00      	nop
 800b214:	0800c02f 	.word	0x0800c02f

0800b218 <_strtoul_r>:
 800b218:	f7ff bf8c 	b.w	800b134 <_strtoul_l.constprop.0>

0800b21c <__ascii_wctomb>:
 800b21c:	b149      	cbz	r1, 800b232 <__ascii_wctomb+0x16>
 800b21e:	2aff      	cmp	r2, #255	; 0xff
 800b220:	bf85      	ittet	hi
 800b222:	238a      	movhi	r3, #138	; 0x8a
 800b224:	6003      	strhi	r3, [r0, #0]
 800b226:	700a      	strbls	r2, [r1, #0]
 800b228:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b22c:	bf98      	it	ls
 800b22e:	2001      	movls	r0, #1
 800b230:	4770      	bx	lr
 800b232:	4608      	mov	r0, r1
 800b234:	4770      	bx	lr
	...

0800b238 <fiprintf>:
 800b238:	b40e      	push	{r1, r2, r3}
 800b23a:	b503      	push	{r0, r1, lr}
 800b23c:	4601      	mov	r1, r0
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	4805      	ldr	r0, [pc, #20]	; (800b258 <fiprintf+0x20>)
 800b242:	f853 2b04 	ldr.w	r2, [r3], #4
 800b246:	6800      	ldr	r0, [r0, #0]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	f000 f83f 	bl	800b2cc <_vfiprintf_r>
 800b24e:	b002      	add	sp, #8
 800b250:	f85d eb04 	ldr.w	lr, [sp], #4
 800b254:	b003      	add	sp, #12
 800b256:	4770      	bx	lr
 800b258:	20000150 	.word	0x20000150

0800b25c <abort>:
 800b25c:	b508      	push	{r3, lr}
 800b25e:	2006      	movs	r0, #6
 800b260:	f000 fa0c 	bl	800b67c <raise>
 800b264:	2001      	movs	r0, #1
 800b266:	f7f6 f937 	bl	80014d8 <_exit>

0800b26a <_malloc_usable_size_r>:
 800b26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b26e:	1f18      	subs	r0, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	bfbc      	itt	lt
 800b274:	580b      	ldrlt	r3, [r1, r0]
 800b276:	18c0      	addlt	r0, r0, r3
 800b278:	4770      	bx	lr

0800b27a <__sfputc_r>:
 800b27a:	6893      	ldr	r3, [r2, #8]
 800b27c:	3b01      	subs	r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	b410      	push	{r4}
 800b282:	6093      	str	r3, [r2, #8]
 800b284:	da08      	bge.n	800b298 <__sfputc_r+0x1e>
 800b286:	6994      	ldr	r4, [r2, #24]
 800b288:	42a3      	cmp	r3, r4
 800b28a:	db01      	blt.n	800b290 <__sfputc_r+0x16>
 800b28c:	290a      	cmp	r1, #10
 800b28e:	d103      	bne.n	800b298 <__sfputc_r+0x1e>
 800b290:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b294:	f000 b934 	b.w	800b500 <__swbuf_r>
 800b298:	6813      	ldr	r3, [r2, #0]
 800b29a:	1c58      	adds	r0, r3, #1
 800b29c:	6010      	str	r0, [r2, #0]
 800b29e:	7019      	strb	r1, [r3, #0]
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <__sfputs_r>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460f      	mov	r7, r1
 800b2ae:	4614      	mov	r4, r2
 800b2b0:	18d5      	adds	r5, r2, r3
 800b2b2:	42ac      	cmp	r4, r5
 800b2b4:	d101      	bne.n	800b2ba <__sfputs_r+0x12>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e007      	b.n	800b2ca <__sfputs_r+0x22>
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	463a      	mov	r2, r7
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f7ff ffda 	bl	800b27a <__sfputc_r>
 800b2c6:	1c43      	adds	r3, r0, #1
 800b2c8:	d1f3      	bne.n	800b2b2 <__sfputs_r+0xa>
 800b2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2cc <_vfiprintf_r>:
 800b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d0:	460d      	mov	r5, r1
 800b2d2:	b09d      	sub	sp, #116	; 0x74
 800b2d4:	4614      	mov	r4, r2
 800b2d6:	4698      	mov	r8, r3
 800b2d8:	4606      	mov	r6, r0
 800b2da:	b118      	cbz	r0, 800b2e4 <_vfiprintf_r+0x18>
 800b2dc:	6a03      	ldr	r3, [r0, #32]
 800b2de:	b90b      	cbnz	r3, 800b2e4 <_vfiprintf_r+0x18>
 800b2e0:	f7fd fbb2 	bl	8008a48 <__sinit>
 800b2e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2e6:	07d9      	lsls	r1, r3, #31
 800b2e8:	d405      	bmi.n	800b2f6 <_vfiprintf_r+0x2a>
 800b2ea:	89ab      	ldrh	r3, [r5, #12]
 800b2ec:	059a      	lsls	r2, r3, #22
 800b2ee:	d402      	bmi.n	800b2f6 <_vfiprintf_r+0x2a>
 800b2f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2f2:	f7fd fd72 	bl	8008dda <__retarget_lock_acquire_recursive>
 800b2f6:	89ab      	ldrh	r3, [r5, #12]
 800b2f8:	071b      	lsls	r3, r3, #28
 800b2fa:	d501      	bpl.n	800b300 <_vfiprintf_r+0x34>
 800b2fc:	692b      	ldr	r3, [r5, #16]
 800b2fe:	b99b      	cbnz	r3, 800b328 <_vfiprintf_r+0x5c>
 800b300:	4629      	mov	r1, r5
 800b302:	4630      	mov	r0, r6
 800b304:	f000 f93a 	bl	800b57c <__swsetup_r>
 800b308:	b170      	cbz	r0, 800b328 <_vfiprintf_r+0x5c>
 800b30a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b30c:	07dc      	lsls	r4, r3, #31
 800b30e:	d504      	bpl.n	800b31a <_vfiprintf_r+0x4e>
 800b310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b314:	b01d      	add	sp, #116	; 0x74
 800b316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31a:	89ab      	ldrh	r3, [r5, #12]
 800b31c:	0598      	lsls	r0, r3, #22
 800b31e:	d4f7      	bmi.n	800b310 <_vfiprintf_r+0x44>
 800b320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b322:	f7fd fd5b 	bl	8008ddc <__retarget_lock_release_recursive>
 800b326:	e7f3      	b.n	800b310 <_vfiprintf_r+0x44>
 800b328:	2300      	movs	r3, #0
 800b32a:	9309      	str	r3, [sp, #36]	; 0x24
 800b32c:	2320      	movs	r3, #32
 800b32e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b332:	f8cd 800c 	str.w	r8, [sp, #12]
 800b336:	2330      	movs	r3, #48	; 0x30
 800b338:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b4ec <_vfiprintf_r+0x220>
 800b33c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b340:	f04f 0901 	mov.w	r9, #1
 800b344:	4623      	mov	r3, r4
 800b346:	469a      	mov	sl, r3
 800b348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b34c:	b10a      	cbz	r2, 800b352 <_vfiprintf_r+0x86>
 800b34e:	2a25      	cmp	r2, #37	; 0x25
 800b350:	d1f9      	bne.n	800b346 <_vfiprintf_r+0x7a>
 800b352:	ebba 0b04 	subs.w	fp, sl, r4
 800b356:	d00b      	beq.n	800b370 <_vfiprintf_r+0xa4>
 800b358:	465b      	mov	r3, fp
 800b35a:	4622      	mov	r2, r4
 800b35c:	4629      	mov	r1, r5
 800b35e:	4630      	mov	r0, r6
 800b360:	f7ff ffa2 	bl	800b2a8 <__sfputs_r>
 800b364:	3001      	adds	r0, #1
 800b366:	f000 80a9 	beq.w	800b4bc <_vfiprintf_r+0x1f0>
 800b36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b36c:	445a      	add	r2, fp
 800b36e:	9209      	str	r2, [sp, #36]	; 0x24
 800b370:	f89a 3000 	ldrb.w	r3, [sl]
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 80a1 	beq.w	800b4bc <_vfiprintf_r+0x1f0>
 800b37a:	2300      	movs	r3, #0
 800b37c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b384:	f10a 0a01 	add.w	sl, sl, #1
 800b388:	9304      	str	r3, [sp, #16]
 800b38a:	9307      	str	r3, [sp, #28]
 800b38c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b390:	931a      	str	r3, [sp, #104]	; 0x68
 800b392:	4654      	mov	r4, sl
 800b394:	2205      	movs	r2, #5
 800b396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b39a:	4854      	ldr	r0, [pc, #336]	; (800b4ec <_vfiprintf_r+0x220>)
 800b39c:	f7f4 ff20 	bl	80001e0 <memchr>
 800b3a0:	9a04      	ldr	r2, [sp, #16]
 800b3a2:	b9d8      	cbnz	r0, 800b3dc <_vfiprintf_r+0x110>
 800b3a4:	06d1      	lsls	r1, r2, #27
 800b3a6:	bf44      	itt	mi
 800b3a8:	2320      	movmi	r3, #32
 800b3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ae:	0713      	lsls	r3, r2, #28
 800b3b0:	bf44      	itt	mi
 800b3b2:	232b      	movmi	r3, #43	; 0x2b
 800b3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b3be:	d015      	beq.n	800b3ec <_vfiprintf_r+0x120>
 800b3c0:	9a07      	ldr	r2, [sp, #28]
 800b3c2:	4654      	mov	r4, sl
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	f04f 0c0a 	mov.w	ip, #10
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3d0:	3b30      	subs	r3, #48	; 0x30
 800b3d2:	2b09      	cmp	r3, #9
 800b3d4:	d94d      	bls.n	800b472 <_vfiprintf_r+0x1a6>
 800b3d6:	b1b0      	cbz	r0, 800b406 <_vfiprintf_r+0x13a>
 800b3d8:	9207      	str	r2, [sp, #28]
 800b3da:	e014      	b.n	800b406 <_vfiprintf_r+0x13a>
 800b3dc:	eba0 0308 	sub.w	r3, r0, r8
 800b3e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	9304      	str	r3, [sp, #16]
 800b3e8:	46a2      	mov	sl, r4
 800b3ea:	e7d2      	b.n	800b392 <_vfiprintf_r+0xc6>
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	1d19      	adds	r1, r3, #4
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	9103      	str	r1, [sp, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	bfbb      	ittet	lt
 800b3f8:	425b      	neglt	r3, r3
 800b3fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b3fe:	9307      	strge	r3, [sp, #28]
 800b400:	9307      	strlt	r3, [sp, #28]
 800b402:	bfb8      	it	lt
 800b404:	9204      	strlt	r2, [sp, #16]
 800b406:	7823      	ldrb	r3, [r4, #0]
 800b408:	2b2e      	cmp	r3, #46	; 0x2e
 800b40a:	d10c      	bne.n	800b426 <_vfiprintf_r+0x15a>
 800b40c:	7863      	ldrb	r3, [r4, #1]
 800b40e:	2b2a      	cmp	r3, #42	; 0x2a
 800b410:	d134      	bne.n	800b47c <_vfiprintf_r+0x1b0>
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	1d1a      	adds	r2, r3, #4
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	9203      	str	r2, [sp, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	bfb8      	it	lt
 800b41e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b422:	3402      	adds	r4, #2
 800b424:	9305      	str	r3, [sp, #20]
 800b426:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b4fc <_vfiprintf_r+0x230>
 800b42a:	7821      	ldrb	r1, [r4, #0]
 800b42c:	2203      	movs	r2, #3
 800b42e:	4650      	mov	r0, sl
 800b430:	f7f4 fed6 	bl	80001e0 <memchr>
 800b434:	b138      	cbz	r0, 800b446 <_vfiprintf_r+0x17a>
 800b436:	9b04      	ldr	r3, [sp, #16]
 800b438:	eba0 000a 	sub.w	r0, r0, sl
 800b43c:	2240      	movs	r2, #64	; 0x40
 800b43e:	4082      	lsls	r2, r0
 800b440:	4313      	orrs	r3, r2
 800b442:	3401      	adds	r4, #1
 800b444:	9304      	str	r3, [sp, #16]
 800b446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b44a:	4829      	ldr	r0, [pc, #164]	; (800b4f0 <_vfiprintf_r+0x224>)
 800b44c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b450:	2206      	movs	r2, #6
 800b452:	f7f4 fec5 	bl	80001e0 <memchr>
 800b456:	2800      	cmp	r0, #0
 800b458:	d03f      	beq.n	800b4da <_vfiprintf_r+0x20e>
 800b45a:	4b26      	ldr	r3, [pc, #152]	; (800b4f4 <_vfiprintf_r+0x228>)
 800b45c:	bb1b      	cbnz	r3, 800b4a6 <_vfiprintf_r+0x1da>
 800b45e:	9b03      	ldr	r3, [sp, #12]
 800b460:	3307      	adds	r3, #7
 800b462:	f023 0307 	bic.w	r3, r3, #7
 800b466:	3308      	adds	r3, #8
 800b468:	9303      	str	r3, [sp, #12]
 800b46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46c:	443b      	add	r3, r7
 800b46e:	9309      	str	r3, [sp, #36]	; 0x24
 800b470:	e768      	b.n	800b344 <_vfiprintf_r+0x78>
 800b472:	fb0c 3202 	mla	r2, ip, r2, r3
 800b476:	460c      	mov	r4, r1
 800b478:	2001      	movs	r0, #1
 800b47a:	e7a6      	b.n	800b3ca <_vfiprintf_r+0xfe>
 800b47c:	2300      	movs	r3, #0
 800b47e:	3401      	adds	r4, #1
 800b480:	9305      	str	r3, [sp, #20]
 800b482:	4619      	mov	r1, r3
 800b484:	f04f 0c0a 	mov.w	ip, #10
 800b488:	4620      	mov	r0, r4
 800b48a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b48e:	3a30      	subs	r2, #48	; 0x30
 800b490:	2a09      	cmp	r2, #9
 800b492:	d903      	bls.n	800b49c <_vfiprintf_r+0x1d0>
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0c6      	beq.n	800b426 <_vfiprintf_r+0x15a>
 800b498:	9105      	str	r1, [sp, #20]
 800b49a:	e7c4      	b.n	800b426 <_vfiprintf_r+0x15a>
 800b49c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e7f0      	b.n	800b488 <_vfiprintf_r+0x1bc>
 800b4a6:	ab03      	add	r3, sp, #12
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	4b12      	ldr	r3, [pc, #72]	; (800b4f8 <_vfiprintf_r+0x22c>)
 800b4ae:	a904      	add	r1, sp, #16
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f7fc fe77 	bl	80081a4 <_printf_float>
 800b4b6:	4607      	mov	r7, r0
 800b4b8:	1c78      	adds	r0, r7, #1
 800b4ba:	d1d6      	bne.n	800b46a <_vfiprintf_r+0x19e>
 800b4bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4be:	07d9      	lsls	r1, r3, #31
 800b4c0:	d405      	bmi.n	800b4ce <_vfiprintf_r+0x202>
 800b4c2:	89ab      	ldrh	r3, [r5, #12]
 800b4c4:	059a      	lsls	r2, r3, #22
 800b4c6:	d402      	bmi.n	800b4ce <_vfiprintf_r+0x202>
 800b4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4ca:	f7fd fc87 	bl	8008ddc <__retarget_lock_release_recursive>
 800b4ce:	89ab      	ldrh	r3, [r5, #12]
 800b4d0:	065b      	lsls	r3, r3, #25
 800b4d2:	f53f af1d 	bmi.w	800b310 <_vfiprintf_r+0x44>
 800b4d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4d8:	e71c      	b.n	800b314 <_vfiprintf_r+0x48>
 800b4da:	ab03      	add	r3, sp, #12
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	462a      	mov	r2, r5
 800b4e0:	4b05      	ldr	r3, [pc, #20]	; (800b4f8 <_vfiprintf_r+0x22c>)
 800b4e2:	a904      	add	r1, sp, #16
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f7fd f901 	bl	80086ec <_printf_i>
 800b4ea:	e7e4      	b.n	800b4b6 <_vfiprintf_r+0x1ea>
 800b4ec:	0800bfbc 	.word	0x0800bfbc
 800b4f0:	0800bfc6 	.word	0x0800bfc6
 800b4f4:	080081a5 	.word	0x080081a5
 800b4f8:	0800b2a9 	.word	0x0800b2a9
 800b4fc:	0800bfc2 	.word	0x0800bfc2

0800b500 <__swbuf_r>:
 800b500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b502:	460e      	mov	r6, r1
 800b504:	4614      	mov	r4, r2
 800b506:	4605      	mov	r5, r0
 800b508:	b118      	cbz	r0, 800b512 <__swbuf_r+0x12>
 800b50a:	6a03      	ldr	r3, [r0, #32]
 800b50c:	b90b      	cbnz	r3, 800b512 <__swbuf_r+0x12>
 800b50e:	f7fd fa9b 	bl	8008a48 <__sinit>
 800b512:	69a3      	ldr	r3, [r4, #24]
 800b514:	60a3      	str	r3, [r4, #8]
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	071a      	lsls	r2, r3, #28
 800b51a:	d525      	bpl.n	800b568 <__swbuf_r+0x68>
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	b31b      	cbz	r3, 800b568 <__swbuf_r+0x68>
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	6922      	ldr	r2, [r4, #16]
 800b524:	1a98      	subs	r0, r3, r2
 800b526:	6963      	ldr	r3, [r4, #20]
 800b528:	b2f6      	uxtb	r6, r6
 800b52a:	4283      	cmp	r3, r0
 800b52c:	4637      	mov	r7, r6
 800b52e:	dc04      	bgt.n	800b53a <__swbuf_r+0x3a>
 800b530:	4621      	mov	r1, r4
 800b532:	4628      	mov	r0, r5
 800b534:	f7ff fc58 	bl	800ade8 <_fflush_r>
 800b538:	b9e0      	cbnz	r0, 800b574 <__swbuf_r+0x74>
 800b53a:	68a3      	ldr	r3, [r4, #8]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	60a3      	str	r3, [r4, #8]
 800b540:	6823      	ldr	r3, [r4, #0]
 800b542:	1c5a      	adds	r2, r3, #1
 800b544:	6022      	str	r2, [r4, #0]
 800b546:	701e      	strb	r6, [r3, #0]
 800b548:	6962      	ldr	r2, [r4, #20]
 800b54a:	1c43      	adds	r3, r0, #1
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d004      	beq.n	800b55a <__swbuf_r+0x5a>
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	07db      	lsls	r3, r3, #31
 800b554:	d506      	bpl.n	800b564 <__swbuf_r+0x64>
 800b556:	2e0a      	cmp	r6, #10
 800b558:	d104      	bne.n	800b564 <__swbuf_r+0x64>
 800b55a:	4621      	mov	r1, r4
 800b55c:	4628      	mov	r0, r5
 800b55e:	f7ff fc43 	bl	800ade8 <_fflush_r>
 800b562:	b938      	cbnz	r0, 800b574 <__swbuf_r+0x74>
 800b564:	4638      	mov	r0, r7
 800b566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b568:	4621      	mov	r1, r4
 800b56a:	4628      	mov	r0, r5
 800b56c:	f000 f806 	bl	800b57c <__swsetup_r>
 800b570:	2800      	cmp	r0, #0
 800b572:	d0d5      	beq.n	800b520 <__swbuf_r+0x20>
 800b574:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b578:	e7f4      	b.n	800b564 <__swbuf_r+0x64>
	...

0800b57c <__swsetup_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4b2a      	ldr	r3, [pc, #168]	; (800b628 <__swsetup_r+0xac>)
 800b580:	4605      	mov	r5, r0
 800b582:	6818      	ldr	r0, [r3, #0]
 800b584:	460c      	mov	r4, r1
 800b586:	b118      	cbz	r0, 800b590 <__swsetup_r+0x14>
 800b588:	6a03      	ldr	r3, [r0, #32]
 800b58a:	b90b      	cbnz	r3, 800b590 <__swsetup_r+0x14>
 800b58c:	f7fd fa5c 	bl	8008a48 <__sinit>
 800b590:	89a3      	ldrh	r3, [r4, #12]
 800b592:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b596:	0718      	lsls	r0, r3, #28
 800b598:	d422      	bmi.n	800b5e0 <__swsetup_r+0x64>
 800b59a:	06d9      	lsls	r1, r3, #27
 800b59c:	d407      	bmi.n	800b5ae <__swsetup_r+0x32>
 800b59e:	2309      	movs	r3, #9
 800b5a0:	602b      	str	r3, [r5, #0]
 800b5a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5ac:	e034      	b.n	800b618 <__swsetup_r+0x9c>
 800b5ae:	0758      	lsls	r0, r3, #29
 800b5b0:	d512      	bpl.n	800b5d8 <__swsetup_r+0x5c>
 800b5b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5b4:	b141      	cbz	r1, 800b5c8 <__swsetup_r+0x4c>
 800b5b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5ba:	4299      	cmp	r1, r3
 800b5bc:	d002      	beq.n	800b5c4 <__swsetup_r+0x48>
 800b5be:	4628      	mov	r0, r5
 800b5c0:	f7fe fa98 	bl	8009af4 <_free_r>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	6363      	str	r3, [r4, #52]	; 0x34
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5ce:	81a3      	strh	r3, [r4, #12]
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	6063      	str	r3, [r4, #4]
 800b5d4:	6923      	ldr	r3, [r4, #16]
 800b5d6:	6023      	str	r3, [r4, #0]
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	f043 0308 	orr.w	r3, r3, #8
 800b5de:	81a3      	strh	r3, [r4, #12]
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	b94b      	cbnz	r3, 800b5f8 <__swsetup_r+0x7c>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ee:	d003      	beq.n	800b5f8 <__swsetup_r+0x7c>
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f000 f884 	bl	800b700 <__smakebuf_r>
 800b5f8:	89a0      	ldrh	r0, [r4, #12]
 800b5fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5fe:	f010 0301 	ands.w	r3, r0, #1
 800b602:	d00a      	beq.n	800b61a <__swsetup_r+0x9e>
 800b604:	2300      	movs	r3, #0
 800b606:	60a3      	str	r3, [r4, #8]
 800b608:	6963      	ldr	r3, [r4, #20]
 800b60a:	425b      	negs	r3, r3
 800b60c:	61a3      	str	r3, [r4, #24]
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	b943      	cbnz	r3, 800b624 <__swsetup_r+0xa8>
 800b612:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b616:	d1c4      	bne.n	800b5a2 <__swsetup_r+0x26>
 800b618:	bd38      	pop	{r3, r4, r5, pc}
 800b61a:	0781      	lsls	r1, r0, #30
 800b61c:	bf58      	it	pl
 800b61e:	6963      	ldrpl	r3, [r4, #20]
 800b620:	60a3      	str	r3, [r4, #8]
 800b622:	e7f4      	b.n	800b60e <__swsetup_r+0x92>
 800b624:	2000      	movs	r0, #0
 800b626:	e7f7      	b.n	800b618 <__swsetup_r+0x9c>
 800b628:	20000150 	.word	0x20000150

0800b62c <_raise_r>:
 800b62c:	291f      	cmp	r1, #31
 800b62e:	b538      	push	{r3, r4, r5, lr}
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	d904      	bls.n	800b640 <_raise_r+0x14>
 800b636:	2316      	movs	r3, #22
 800b638:	6003      	str	r3, [r0, #0]
 800b63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b642:	b112      	cbz	r2, 800b64a <_raise_r+0x1e>
 800b644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b648:	b94b      	cbnz	r3, 800b65e <_raise_r+0x32>
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 f830 	bl	800b6b0 <_getpid_r>
 800b650:	462a      	mov	r2, r5
 800b652:	4601      	mov	r1, r0
 800b654:	4620      	mov	r0, r4
 800b656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b65a:	f000 b817 	b.w	800b68c <_kill_r>
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d00a      	beq.n	800b678 <_raise_r+0x4c>
 800b662:	1c59      	adds	r1, r3, #1
 800b664:	d103      	bne.n	800b66e <_raise_r+0x42>
 800b666:	2316      	movs	r3, #22
 800b668:	6003      	str	r3, [r0, #0]
 800b66a:	2001      	movs	r0, #1
 800b66c:	e7e7      	b.n	800b63e <_raise_r+0x12>
 800b66e:	2400      	movs	r4, #0
 800b670:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b674:	4628      	mov	r0, r5
 800b676:	4798      	blx	r3
 800b678:	2000      	movs	r0, #0
 800b67a:	e7e0      	b.n	800b63e <_raise_r+0x12>

0800b67c <raise>:
 800b67c:	4b02      	ldr	r3, [pc, #8]	; (800b688 <raise+0xc>)
 800b67e:	4601      	mov	r1, r0
 800b680:	6818      	ldr	r0, [r3, #0]
 800b682:	f7ff bfd3 	b.w	800b62c <_raise_r>
 800b686:	bf00      	nop
 800b688:	20000150 	.word	0x20000150

0800b68c <_kill_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4d07      	ldr	r5, [pc, #28]	; (800b6ac <_kill_r+0x20>)
 800b690:	2300      	movs	r3, #0
 800b692:	4604      	mov	r4, r0
 800b694:	4608      	mov	r0, r1
 800b696:	4611      	mov	r1, r2
 800b698:	602b      	str	r3, [r5, #0]
 800b69a:	f7f5 ff15 	bl	80014c8 <_kill>
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	d102      	bne.n	800b6a8 <_kill_r+0x1c>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	b103      	cbz	r3, 800b6a8 <_kill_r+0x1c>
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	bd38      	pop	{r3, r4, r5, pc}
 800b6aa:	bf00      	nop
 800b6ac:	200028f0 	.word	0x200028f0

0800b6b0 <_getpid_r>:
 800b6b0:	f7f5 bf08 	b.w	80014c4 <_getpid>

0800b6b4 <__swhatbuf_r>:
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6bc:	2900      	cmp	r1, #0
 800b6be:	b096      	sub	sp, #88	; 0x58
 800b6c0:	4615      	mov	r5, r2
 800b6c2:	461e      	mov	r6, r3
 800b6c4:	da0d      	bge.n	800b6e2 <__swhatbuf_r+0x2e>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b6cc:	f04f 0100 	mov.w	r1, #0
 800b6d0:	bf0c      	ite	eq
 800b6d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b6d6:	2340      	movne	r3, #64	; 0x40
 800b6d8:	2000      	movs	r0, #0
 800b6da:	6031      	str	r1, [r6, #0]
 800b6dc:	602b      	str	r3, [r5, #0]
 800b6de:	b016      	add	sp, #88	; 0x58
 800b6e0:	bd70      	pop	{r4, r5, r6, pc}
 800b6e2:	466a      	mov	r2, sp
 800b6e4:	f000 f848 	bl	800b778 <_fstat_r>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	dbec      	blt.n	800b6c6 <__swhatbuf_r+0x12>
 800b6ec:	9901      	ldr	r1, [sp, #4]
 800b6ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b6f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b6f6:	4259      	negs	r1, r3
 800b6f8:	4159      	adcs	r1, r3
 800b6fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6fe:	e7eb      	b.n	800b6d8 <__swhatbuf_r+0x24>

0800b700 <__smakebuf_r>:
 800b700:	898b      	ldrh	r3, [r1, #12]
 800b702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b704:	079d      	lsls	r5, r3, #30
 800b706:	4606      	mov	r6, r0
 800b708:	460c      	mov	r4, r1
 800b70a:	d507      	bpl.n	800b71c <__smakebuf_r+0x1c>
 800b70c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	6123      	str	r3, [r4, #16]
 800b714:	2301      	movs	r3, #1
 800b716:	6163      	str	r3, [r4, #20]
 800b718:	b002      	add	sp, #8
 800b71a:	bd70      	pop	{r4, r5, r6, pc}
 800b71c:	ab01      	add	r3, sp, #4
 800b71e:	466a      	mov	r2, sp
 800b720:	f7ff ffc8 	bl	800b6b4 <__swhatbuf_r>
 800b724:	9900      	ldr	r1, [sp, #0]
 800b726:	4605      	mov	r5, r0
 800b728:	4630      	mov	r0, r6
 800b72a:	f7fe fa57 	bl	8009bdc <_malloc_r>
 800b72e:	b948      	cbnz	r0, 800b744 <__smakebuf_r+0x44>
 800b730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b734:	059a      	lsls	r2, r3, #22
 800b736:	d4ef      	bmi.n	800b718 <__smakebuf_r+0x18>
 800b738:	f023 0303 	bic.w	r3, r3, #3
 800b73c:	f043 0302 	orr.w	r3, r3, #2
 800b740:	81a3      	strh	r3, [r4, #12]
 800b742:	e7e3      	b.n	800b70c <__smakebuf_r+0xc>
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	6020      	str	r0, [r4, #0]
 800b748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b74c:	81a3      	strh	r3, [r4, #12]
 800b74e:	9b00      	ldr	r3, [sp, #0]
 800b750:	6163      	str	r3, [r4, #20]
 800b752:	9b01      	ldr	r3, [sp, #4]
 800b754:	6120      	str	r0, [r4, #16]
 800b756:	b15b      	cbz	r3, 800b770 <__smakebuf_r+0x70>
 800b758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b75c:	4630      	mov	r0, r6
 800b75e:	f000 f81d 	bl	800b79c <_isatty_r>
 800b762:	b128      	cbz	r0, 800b770 <__smakebuf_r+0x70>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f023 0303 	bic.w	r3, r3, #3
 800b76a:	f043 0301 	orr.w	r3, r3, #1
 800b76e:	81a3      	strh	r3, [r4, #12]
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	431d      	orrs	r5, r3
 800b774:	81a5      	strh	r5, [r4, #12]
 800b776:	e7cf      	b.n	800b718 <__smakebuf_r+0x18>

0800b778 <_fstat_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d07      	ldr	r5, [pc, #28]	; (800b798 <_fstat_r+0x20>)
 800b77c:	2300      	movs	r3, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	4611      	mov	r1, r2
 800b784:	602b      	str	r3, [r5, #0]
 800b786:	f7f5 fecd 	bl	8001524 <_fstat>
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	d102      	bne.n	800b794 <_fstat_r+0x1c>
 800b78e:	682b      	ldr	r3, [r5, #0]
 800b790:	b103      	cbz	r3, 800b794 <_fstat_r+0x1c>
 800b792:	6023      	str	r3, [r4, #0]
 800b794:	bd38      	pop	{r3, r4, r5, pc}
 800b796:	bf00      	nop
 800b798:	200028f0 	.word	0x200028f0

0800b79c <_isatty_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d06      	ldr	r5, [pc, #24]	; (800b7b8 <_isatty_r+0x1c>)
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	602b      	str	r3, [r5, #0]
 800b7a8:	f7f5 fec2 	bl	8001530 <_isatty>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d102      	bne.n	800b7b6 <_isatty_r+0x1a>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	b103      	cbz	r3, 800b7b6 <_isatty_r+0x1a>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	200028f0 	.word	0x200028f0

0800b7bc <_init>:
 800b7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7be:	bf00      	nop
 800b7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c2:	bc08      	pop	{r3}
 800b7c4:	469e      	mov	lr, r3
 800b7c6:	4770      	bx	lr

0800b7c8 <_fini>:
 800b7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ca:	bf00      	nop
 800b7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ce:	bc08      	pop	{r3}
 800b7d0:	469e      	mov	lr, r3
 800b7d2:	4770      	bx	lr
