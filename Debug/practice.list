
practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a40c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  0800a5b0  0800a5b0  0001a5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af50  0800af50  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af58  0800af58  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af58  0800af58  0001af58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0800af60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002480  200002c0  0800b220  000202c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002740  0800b220  00022740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d40a  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000500e  00000000  00000000  0003d73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00042750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000149e  00000000  00000000  00043620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a421  00000000  00000000  00044abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cfd1  00000000  00000000  0005eedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c022  00000000  00000000  0007beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e4c  00000000  00000000  00107ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000d362  00000000  00000000  0010bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00119082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a594 	.word	0x0800a594

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	0800a594 	.word	0x0800a594

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb4:	b500      	push	{lr}
 8000eb6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_DMA_Init+0x40>)
 8000ebc:	9201      	str	r2, [sp, #4]
 8000ebe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ec0:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000ec4:	6319      	str	r1, [r3, #48]	; 0x30
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ecc:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ece:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ed0:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ed4:	f000 fbea 	bl	80016ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f000 fc25 	bl	8001728 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	2011      	movs	r0, #17
 8000ee4:	f000 fbe2 	bl	80016ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ee8:	2011      	movs	r0, #17

}
 8000eea:	b003      	add	sp, #12
 8000eec:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ef0:	f000 bc1a 	b.w	8001728 <HAL_NVIC_EnableIRQ>
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000ef8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	2400      	movs	r4, #0
{
 8000efc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000f02:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <MX_GPIO_Init+0xb8>)
 8000f08:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f0e:	4d29      	ldr	r5, [pc, #164]	; (8000fb4 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	f042 0204 	orr.w	r2, r2, #4
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
 8000f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f18:	f002 0204 	and.w	r2, r2, #4
 8000f1c:	9200      	str	r2, [sp, #0]
 8000f1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f20:	9401      	str	r4, [sp, #4]
 8000f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
 8000f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f2c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f30:	9201      	str	r2, [sp, #4]
 8000f32:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	9402      	str	r4, [sp, #8]
 8000f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f38:	f042 0201 	orr.w	r2, r2, #1
 8000f3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f40:	f002 0201 	and.w	r2, r2, #1
 8000f44:	9202      	str	r2, [sp, #8]
 8000f46:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	9403      	str	r4, [sp, #12]
 8000f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f4c:	f042 0202 	orr.w	r2, r2, #2
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f62:	f000 ff07 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	a904      	add	r1, sp, #16
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8000f74:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f000 fe08 	bl	8001b8c <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	a904      	add	r1, sp, #16
 8000f7e:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2220      	movs	r2, #32
 8000f82:	2301      	movs	r3, #1
 8000f84:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f000 fdfe 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f90:	f44f 7040 	mov.w	r0, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f94:	2312      	movs	r3, #18
 8000f96:	e9cd 0304 	strd	r0, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2203      	movs	r2, #3
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f9c:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	e9cd 4206 	strd	r4, r2, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f000 fdf0 	bl	8001b8c <HAL_GPIO_Init>

}
 8000fac:	b00b      	add	sp, #44	; 0x2c
 8000fae:	bd30      	pop	{r4, r5, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <usart_printf>:
#include <stdio.h>

#define USART_TxBufSize 255
static char USART_TxBuffer[USART_TxBufSize];

HAL_StatusTypeDef usart_printf(const char *format, ...) {
 8000fc0:	b40f      	push	{r0, r1, r2, r3}
 8000fc2:	b510      	push	{r4, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	ab04      	add	r3, sp, #16
    va_list args;
    uint32_t length = 0;

    va_start(args, format);

    length = vsnprintf((char *)USART_TxBuffer, USART_TxBufSize, (char *)format, args);
 8000fc8:	4c08      	ldr	r4, [pc, #32]	; (8000fec <usart_printf+0x2c>)
HAL_StatusTypeDef usart_printf(const char *format, ...) {
 8000fca:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8000fce:	9301      	str	r3, [sp, #4]
    length = vsnprintf((char *)USART_TxBuffer, USART_TxBufSize, (char *)format, args);
 8000fd0:	21ff      	movs	r1, #255	; 0xff
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f006 fd16 	bl	8007a04 <vsniprintf>
    va_end(args);
    return HAL_UART_Transmit_DMA(&huart2, USART_TxBuffer, length);
 8000fd8:	4621      	mov	r1, r4
 8000fda:	b282      	uxth	r2, r0
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <usart_printf+0x30>)
 8000fde:	f002 f9fd 	bl	80033dc <HAL_UART_Transmit_DMA>
}
 8000fe2:	b002      	add	sp, #8
 8000fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe8:	b004      	add	sp, #16
 8000fea:	4770      	bx	lr
 8000fec:	200002dc 	.word	0x200002dc
 8000ff0:	200009a0 	.word	0x200009a0

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	2300      	movs	r3, #0
{
 8000ff8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000ffe:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001002:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001006:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4920      	ldr	r1, [pc, #128]	; (800108c <SystemClock_Config+0x98>)
 800100c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100e:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001012:	4a1f      	ldr	r2, [pc, #124]	; (8001090 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001018:	6408      	str	r0, [r1, #64]	; 0x40
 800101a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800101c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001020:	9101      	str	r1, [sp, #4]
 8001022:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001030:	2001      	movs	r0, #1
 8001032:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001036:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001040:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001046:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104a:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104c:	2104      	movs	r1, #4
 800104e:	2002      	movs	r0, #2
 8001050:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001054:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001056:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 800105a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800105c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f001 fe47 	bl	8002cf0 <HAL_RCC_OscConfig>
 8001062:	b108      	cbz	r0, 8001068 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001066:	e7fe      	b.n	8001066 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	210f      	movs	r1, #15
 800106a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001074:	a803      	add	r0, sp, #12
 8001076:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001078:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800107e:	f002 f84f 	bl	8003120 <HAL_RCC_ClockConfig>
 8001082:	b108      	cbz	r0, 8001088 <SystemClock_Config+0x94>
 8001084:	b672      	cpsid	i
	while (1) {
 8001086:	e7fe      	b.n	8001086 <SystemClock_Config+0x92>
}
 8001088:	b014      	add	sp, #80	; 0x50
 800108a:	bd10      	pop	{r4, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000

08001094 <main>:
{
 8001094:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001098:	f2ad 4dac 	subw	sp, sp, #1196	; 0x4ac
  HAL_Init();
 800109c:	f000 fab6 	bl	800160c <HAL_Init>
  SystemClock_Config();
 80010a0:	f7ff ffa8 	bl	8000ff4 <SystemClock_Config>
  MX_GPIO_Init();
 80010a4:	f7ff ff28 	bl	8000ef8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010a8:	f7ff ff04 	bl	8000eb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010ac:	f000 f9c4 	bl	8001438 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80010b0:	f005 fc22 	bl	80068f8 <MX_USB_DEVICE_Init>
  import_pub_key(&pub_key, pub_data);
 80010b4:	497f      	ldr	r1, [pc, #508]	; (80012b4 <main+0x220>)
 80010b6:	4880      	ldr	r0, [pc, #512]	; (80012b8 <main+0x224>)
 80010b8:	f004 fb10 	bl	80056dc <import_pub_key>
  import_pvt_key(&pvt_key, pvt_data);
 80010bc:	497f      	ldr	r1, [pc, #508]	; (80012bc <main+0x228>)
 80010be:	4880      	ldr	r0, [pc, #512]	; (80012c0 <main+0x22c>)
  const char test_msg[BN_MSG_LEN + 1] = "";
 80010c0:	f04f 0800 	mov.w	r8, #0
  import_pvt_key(&pvt_key, pvt_data);
 80010c4:	f004 fb86 	bl	80057d4 <import_pvt_key>
  montg_init(&montg_domain, &pub_key.mod);
 80010c8:	497b      	ldr	r1, [pc, #492]	; (80012b8 <main+0x224>)
 80010ca:	a8c6      	add	r0, sp, #792	; 0x318
 80010cc:	f004 f9e0 	bl	8005490 <montg_init>
  const char test_msg[BN_MSG_LEN + 1] = "";
 80010d0:	4641      	mov	r1, r8
 80010d2:	223d      	movs	r2, #61	; 0x3d
 80010d4:	a812      	add	r0, sp, #72	; 0x48
 80010d6:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80010da:	f006 fcbb 	bl	8007a54 <memset>
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 80010de:	4641      	mov	r1, r8
 80010e0:	22fd      	movs	r2, #253	; 0xfd
 80010e2:	a845      	add	r0, sp, #276	; 0x114
 80010e4:	f8cd 8110 	str.w	r8, [sp, #272]	; 0x110
 80010e8:	f006 fcb4 	bl	8007a54 <memset>
 80010ec:	4641      	mov	r1, r8
 80010ee:	223d      	movs	r2, #61	; 0x3d
 80010f0:	a823      	add	r0, sp, #140	; 0x8c
 80010f2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80010f6:	f006 fcad 	bl	8007a54 <memset>
  char out_sign[BN_BYTE_SIZE * 2 + 1] = "", out_verify[BN_MSG_LEN + 1] = "";
 80010fa:	4641      	mov	r1, r8
 80010fc:	22fd      	movs	r2, #253	; 0xfd
 80010fe:	a886      	add	r0, sp, #536	; 0x218
 8001100:	f8cd 8214 	str.w	r8, [sp, #532]	; 0x214
 8001104:	f006 fca6 	bl	8007a54 <memset>
 8001108:	4641      	mov	r1, r8
 800110a:	223d      	movs	r2, #61	; 0x3d
 800110c:	a834      	add	r0, sp, #208	; 0xd0
 800110e:	f8cd 80cc 	str.w	r8, [sp, #204]	; 0xcc
 8001112:	f006 fc9f 	bl	8007a54 <memset>
  usart_printf("test packet: ");
 8001116:	486b      	ldr	r0, [pc, #428]	; (80012c4 <main+0x230>)
 8001118:	f7ff ff52 	bl	8000fc0 <usart_printf>
  HAL_Delay(1000);
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	f000 faa0 	bl	8001664 <HAL_Delay>
  usart_printf("%u) %02u.%02u.%02u %02u:%02u:%02u\r\n", packet.plc_number, packet.date.year, packet.date.month, packet.date.day, packet.time.hours, packet.time.minutes, packet.time.seconds);
 8001124:	f04f 083b 	mov.w	r8, #59	; 0x3b
 8001128:	2316      	movs	r3, #22
 800112a:	e9cd 3802 	strd	r3, r8, [sp, #8]
 800112e:	220b      	movs	r2, #11
 8001130:	231c      	movs	r3, #28
 8001132:	e9cd 3200 	strd	r3, r2, [sp]
 8001136:	2115      	movs	r1, #21
 8001138:	2303      	movs	r3, #3
 800113a:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 800113e:	4862      	ldr	r0, [pc, #392]	; (80012c8 <main+0x234>)
 8001140:	f7ff ff3e 	bl	8000fc0 <usart_printf>
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <main+0x238>)
 8001146:	930d      	str	r3, [sp, #52]	; 0x34
 8001148:	2315      	movs	r3, #21
 800114a:	930b      	str	r3, [sp, #44]	; 0x2c
 800114c:	f241 630b 	movw	r3, #5643	; 0x160b
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 8001150:	af44      	add	r7, sp, #272	; 0x110
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 8001152:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  encrypt_buf(&pub_key, &montg_domain, test_msg, sizeof(test_msg), out_enc, sizeof(out_enc));
 8001156:	f240 1301 	movw	r3, #257	; 0x101
 800115a:	9700      	str	r7, [sp, #0]
 800115c:	9301      	str	r3, [sp, #4]
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 800115e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 8001162:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8001166:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
  const char test_msg[BN_MSG_LEN + 1] = "";
 800116a:	ad11      	add	r5, sp, #68	; 0x44
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 800116c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  encrypt_buf(&pub_key, &montg_domain, test_msg, sizeof(test_msg), out_enc, sizeof(out_enc));
 8001170:	2341      	movs	r3, #65	; 0x41
 8001172:	462a      	mov	r2, r5
 8001174:	a9c6      	add	r1, sp, #792	; 0x318
 8001176:	4850      	ldr	r0, [pc, #320]	; (80012b8 <main+0x224>)
  decrypt_buf(&pvt_key, &montg_domain, out_enc, strlen(out_enc), out_dec, sizeof(out_dec));
 8001178:	4698      	mov	r8, r3
  encrypt_buf(&pub_key, &montg_domain, test_msg, sizeof(test_msg), out_enc, sizeof(out_enc));
 800117a:	f004 fbc9 	bl	8005910 <encrypt_buf>
  decrypt_buf(&pvt_key, &montg_domain, out_enc, strlen(out_enc), out_dec, sizeof(out_dec));
 800117e:	4638      	mov	r0, r7
 8001180:	f7ff f87e 	bl	8000280 <strlen>
  char out_enc[BN_BYTE_SIZE * 2 + 1] = "", out_dec[BN_MSG_LEN + 1] = "";
 8001184:	ac22      	add	r4, sp, #136	; 0x88
  decrypt_buf(&pvt_key, &montg_domain, out_enc, strlen(out_enc), out_dec, sizeof(out_dec));
 8001186:	e9cd 4800 	strd	r4, r8, [sp]
 800118a:	4603      	mov	r3, r0
 800118c:	463a      	mov	r2, r7
 800118e:	484c      	ldr	r0, [pc, #304]	; (80012c0 <main+0x22c>)
 8001190:	a9c6      	add	r1, sp, #792	; 0x318
 8001192:	f004 fbeb 	bl	800596c <decrypt_buf>
  memmove(&test_dec_packet, out_dec, sizeof(packet_t));
 8001196:	f89d 208d 	ldrb.w	r2, [sp, #141]	; 0x8d
 800119a:	f89d 108e 	ldrb.w	r1, [sp, #142]	; 0x8e
 800119e:	f89d 0093 	ldrb.w	r0, [sp, #147]	; 0x93
 80011a2:	9206      	str	r2, [sp, #24]
 80011a4:	9107      	str	r1, [sp, #28]
 80011a6:	9008      	str	r0, [sp, #32]
 80011a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011ac:	f89d 3092 	ldrb.w	r3, [sp, #146]	; 0x92
 80011b0:	9309      	str	r3, [sp, #36]	; 0x24
 80011b2:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 80011b6:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 80011ba:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 80011be:	f8bd 7090 	ldrh.w	r7, [sp, #144]	; 0x90
 80011c2:	9305      	str	r3, [sp, #20]
 80011c4:	4604      	mov	r4, r0
  usart_printf("decrypt packet: ");
 80011c6:	4842      	ldr	r0, [pc, #264]	; (80012d0 <main+0x23c>)
 80011c8:	f7ff fefa 	bl	8000fc0 <usart_printf>
  HAL_Delay(1000);
 80011cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d0:	f000 fa48 	bl	8001664 <HAL_Delay>
  usart_printf("%u) %02u.%02u.%02u %02u:%02u:%02u\r\n", packet.plc_number, packet.date.year, packet.date.month, packet.date.day, packet.time.hours, packet.time.minutes, packet.time.seconds);
 80011d4:	9907      	ldr	r1, [sp, #28]
 80011d6:	9a06      	ldr	r2, [sp, #24]
 80011d8:	9b05      	ldr	r3, [sp, #20]
 80011da:	9808      	ldr	r0, [sp, #32]
 80011dc:	9103      	str	r1, [sp, #12]
 80011de:	9202      	str	r2, [sp, #8]
 80011e0:	4621      	mov	r1, r4
 80011e2:	463a      	mov	r2, r7
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	9000      	str	r0, [sp, #0]
 80011e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011ea:	4837      	ldr	r0, [pc, #220]	; (80012c8 <main+0x234>)
 80011ec:	f7ff fee8 	bl	8000fc0 <usart_printf>
  HAL_Delay(1000);
 80011f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f4:	f000 fa36 	bl	8001664 <HAL_Delay>
  test_enc_packet = test_dec_packet;
 80011f8:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80011fc:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
  memset((char*)test_msg, ' ', sizeof(test_msg));
 8001200:	4642      	mov	r2, r8
 8001202:	2120      	movs	r1, #32
 8001204:	4628      	mov	r0, r5
 8001206:	f006 fc25 	bl	8007a54 <memset>
  usart_printf("sign packet: ");
 800120a:	4832      	ldr	r0, [pc, #200]	; (80012d4 <main+0x240>)
 800120c:	f7ff fed8 	bl	8000fc0 <usart_printf>
  HAL_Delay(1000);
 8001210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001214:	f000 fa26 	bl	8001664 <HAL_Delay>
  usart_printf("%u) %02u.%02u.%02u %02u:%02u:%02u\r\n", packet.plc_number, packet.date.year, packet.date.month, packet.date.day, packet.time.hours, packet.time.minutes, packet.time.seconds);
 8001218:	9907      	ldr	r1, [sp, #28]
 800121a:	9a06      	ldr	r2, [sp, #24]
 800121c:	9b05      	ldr	r3, [sp, #20]
 800121e:	9808      	ldr	r0, [sp, #32]
 8001220:	9103      	str	r1, [sp, #12]
 8001222:	9202      	str	r2, [sp, #8]
 8001224:	4621      	mov	r1, r4
 8001226:	463a      	mov	r2, r7
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	9000      	str	r0, [sp, #0]
 800122c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800122e:	4826      	ldr	r0, [pc, #152]	; (80012c8 <main+0x234>)
 8001230:	f7ff fec6 	bl	8000fc0 <usart_printf>
  char out_sign[BN_BYTE_SIZE * 2 + 1] = "", out_verify[BN_MSG_LEN + 1] = "";
 8001234:	f50d 7905 	add.w	r9, sp, #532	; 0x214
  sign_buf(&pvt_key, &montg_domain, test_msg, sizeof(test_msg), out_sign, sizeof(out_sign));
 8001238:	f240 1301 	movw	r3, #257	; 0x101
 800123c:	e9cd 9300 	strd	r9, r3, [sp]
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 8001240:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
  sign_buf(&pvt_key, &montg_domain, test_msg, sizeof(test_msg), out_sign, sizeof(out_sign));
 8001244:	4643      	mov	r3, r8
  memmove((char *) test_msg, &test_enc_packet, sizeof(packet_t));
 8001246:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  sign_buf(&pvt_key, &montg_domain, test_msg, sizeof(test_msg), out_sign, sizeof(out_sign));
 800124a:	462a      	mov	r2, r5
 800124c:	a9c6      	add	r1, sp, #792	; 0x318
 800124e:	481c      	ldr	r0, [pc, #112]	; (80012c0 <main+0x22c>)
 8001250:	f004 fbba 	bl	80059c8 <sign_buf>
  verify_buf(&pub_key, &montg_domain, out_sign, strlen(out_sign), out_verify, sizeof(out_verify));
 8001254:	4648      	mov	r0, r9
 8001256:	f7ff f813 	bl	8000280 <strlen>
  char out_sign[BN_BYTE_SIZE * 2 + 1] = "", out_verify[BN_MSG_LEN + 1] = "";
 800125a:	ae33      	add	r6, sp, #204	; 0xcc
  verify_buf(&pub_key, &montg_domain, out_sign, strlen(out_sign), out_verify, sizeof(out_verify));
 800125c:	4603      	mov	r3, r0
 800125e:	464a      	mov	r2, r9
 8001260:	4815      	ldr	r0, [pc, #84]	; (80012b8 <main+0x224>)
 8001262:	f8cd 8004 	str.w	r8, [sp, #4]
 8001266:	a9c6      	add	r1, sp, #792	; 0x318
 8001268:	9600      	str	r6, [sp, #0]
 800126a:	f004 fbdb 	bl	8005a24 <verify_buf>
  memmove(&test_dec_packet, out_verify, sizeof(packet_t));
 800126e:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8001270:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8001274:	f89d 30d6 	ldrb.w	r3, [sp, #214]	; 0xd6
 8001278:	f89d 70d1 	ldrb.w	r7, [sp, #209]	; 0xd1
 800127c:	f89d 80d2 	ldrb.w	r8, [sp, #210]	; 0xd2
  usart_printf("verify packet: ");
 8001280:	4815      	ldr	r0, [pc, #84]	; (80012d8 <main+0x244>)
  memmove(&test_dec_packet, out_verify, sizeof(packet_t));
 8001282:	9107      	str	r1, [sp, #28]
 8001284:	9206      	str	r2, [sp, #24]
 8001286:	9305      	str	r3, [sp, #20]
 8001288:	f89d 50d0 	ldrb.w	r5, [sp, #208]	; 0xd0
 800128c:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
  usart_printf("verify packet: ");
 8001290:	f7ff fe96 	bl	8000fc0 <usart_printf>
  HAL_Delay(1000);
 8001294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001298:	f000 f9e4 	bl	8001664 <HAL_Delay>
  usart_printf("%u) %02u.%02u.%02u %02u:%02u:%02u\r\n", packet.plc_number, packet.date.year, packet.date.month, packet.date.day, packet.time.hours, packet.time.minutes, packet.time.seconds);
 800129c:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80012a0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <main+0x234>)
 80012a6:	9907      	ldr	r1, [sp, #28]
 80012a8:	9501      	str	r5, [sp, #4]
 80012aa:	9400      	str	r4, [sp, #0]
 80012ac:	f7ff fe88 	bl	8000fc0 <usart_printf>
  while (1) {
 80012b0:	e7fe      	b.n	80012b0 <main+0x21c>
 80012b2:	bf00      	nop
 80012b4:	0800a624 	.word	0x0800a624
 80012b8:	200003dc 	.word	0x200003dc
 80012bc:	0800a6d8 	.word	0x0800a6d8
 80012c0:	200004dc 	.word	0x200004dc
 80012c4:	0800a5e0 	.word	0x0800a5e0
 80012c8:	0800a5bc 	.word	0x0800a5bc
 80012cc:	1c0307e8 	.word	0x1c0307e8
 80012d0:	0800a5f0 	.word	0x0800a5f0
 80012d4:	0800a604 	.word	0x0800a604
 80012d8:	0800a614 	.word	0x0800a614

080012dc <Error_Handler>:
 80012dc:	b672      	cpsid	i
	while (1) {
 80012de:	e7fe      	b.n	80012de <Error_Handler+0x2>

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_MspInit+0x34>)
 80012e4:	2100      	movs	r1, #0
 80012e6:	9100      	str	r1, [sp, #0]
 80012e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012ee:	645a      	str	r2, [r3, #68]	; 0x44
 80012f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012f2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012f6:	9200      	str	r2, [sp, #0]
 80012f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	9101      	str	r1, [sp, #4]
 80012fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	b002      	add	sp, #8
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler>
 800131a:	bf00      	nop

0800131c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <HardFault_Handler>
 800131e:	bf00      	nop

08001320 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler>
 8001322:	bf00      	nop

08001324 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <BusFault_Handler>
 8001326:	bf00      	nop

08001328 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler>
 800132a:	bf00      	nop

0800132c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop

08001330 <DebugMon_Handler>:
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <PendSV_Handler>:
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 b982 	b.w	8001640 <HAL_IncTick>

0800133c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800133c:	4801      	ldr	r0, [pc, #4]	; (8001344 <DMA1_Stream5_IRQHandler+0x8>)
 800133e:	f000 bb4f 	b.w	80019e0 <HAL_DMA_IRQHandler>
 8001342:	bf00      	nop
 8001344:	200008e0 	.word	0x200008e0

08001348 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001348:	4801      	ldr	r0, [pc, #4]	; (8001350 <DMA1_Stream6_IRQHandler+0x8>)
 800134a:	f000 bb49 	b.w	80019e0 <HAL_DMA_IRQHandler>
 800134e:	bf00      	nop
 8001350:	20000940 	.word	0x20000940

08001354 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001354:	4801      	ldr	r0, [pc, #4]	; (800135c <USART2_IRQHandler+0x8>)
 8001356:	f002 b987 	b.w	8003668 <HAL_UART_IRQHandler>
 800135a:	bf00      	nop
 800135c:	200009a0 	.word	0x200009a0

08001360 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001360:	4801      	ldr	r0, [pc, #4]	; (8001368 <OTG_FS_IRQHandler+0x8>)
 8001362:	f000 bdb9 	b.w	8001ed8 <HAL_PCD_IRQHandler>
 8001366:	bf00      	nop
 8001368:	20001ec8 	.word	0x20001ec8

0800136c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800136c:	2001      	movs	r0, #1
 800136e:	4770      	bx	lr

08001370 <_kill>:

int _kill(int pid, int sig)
{
 8001370:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001372:	f006 fbf3 	bl	8007b5c <__errno>
 8001376:	2316      	movs	r3, #22
 8001378:	6003      	str	r3, [r0, #0]
  return -1;
}
 800137a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800137e:	bd08      	pop	{r3, pc}

08001380 <_exit>:

void _exit (int status)
{
 8001380:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001382:	f006 fbeb 	bl	8007b5c <__errno>
 8001386:	2316      	movs	r3, #22
 8001388:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800138a:	e7fe      	b.n	800138a <_exit+0xa>

0800138c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	1e16      	subs	r6, r2, #0
 8001390:	dd07      	ble.n	80013a2 <_read+0x16>
 8001392:	460c      	mov	r4, r1
 8001394:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001396:	f3af 8000 	nop.w
 800139a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	42a5      	cmp	r5, r4
 80013a0:	d1f9      	bne.n	8001396 <_read+0xa>
  }

  return len;
}
 80013a2:	4630      	mov	r0, r6
 80013a4:	bd70      	pop	{r4, r5, r6, pc}
 80013a6:	bf00      	nop

080013a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	1e16      	subs	r6, r2, #0
 80013ac:	dd07      	ble.n	80013be <_write+0x16>
 80013ae:	460c      	mov	r4, r1
 80013b0:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80013b2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80013b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	42ac      	cmp	r4, r5
 80013bc:	d1f9      	bne.n	80013b2 <_write+0xa>
  }
  return len;
}
 80013be:	4630      	mov	r0, r6
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
 80013c2:	bf00      	nop

080013c4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80013cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d0:	604b      	str	r3, [r1, #4]
  return 0;
}
 80013d2:	2000      	movs	r0, #0
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80013d8:	2001      	movs	r0, #1
 80013da:	4770      	bx	lr

080013dc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80013dc:	2000      	movs	r0, #0
 80013de:	4770      	bx	lr

080013e0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e2:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80013e4:	680b      	ldr	r3, [r1, #0]
{
 80013e6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4c0c      	ldr	r4, [pc, #48]	; (800141c <_sbrk+0x3c>)
 80013ea:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80013ec:	b12b      	cbz	r3, 80013fa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4418      	add	r0, r3
 80013f0:	4290      	cmp	r0, r2
 80013f2:	d807      	bhi.n	8001404 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80013f4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <_sbrk+0x40>)
 80013fc:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4418      	add	r0, r3
 8001400:	4290      	cmp	r0, r2
 8001402:	d9f7      	bls.n	80013f4 <_sbrk+0x14>
    errno = ENOMEM;
 8001404:	f006 fbaa 	bl	8007b5c <__errno>
 8001408:	230c      	movs	r3, #12
 800140a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800140c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd10      	pop	{r4, pc}
 8001414:	200008dc 	.word	0x200008dc
 8001418:	20020000 	.word	0x20020000
 800141c:	00000400 	.word	0x00000400
 8001420:	20002740 	.word	0x20002740

08001424 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4a03      	ldr	r2, [pc, #12]	; (8001434 <SystemInit+0x10>)
 8001426:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800142a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800142e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001438:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_USART2_UART_Init+0x30>)
 800143c:	4c0b      	ldr	r4, [pc, #44]	; (800146c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001440:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001444:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8001446:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800144a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800144e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001452:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001456:	f001 ff27 	bl	80032a8 <HAL_UART_Init>
 800145a:	b900      	cbnz	r0, 800145e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145c:	bd10      	pop	{r4, pc}
 800145e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001462:	f7ff bf3b 	b.w	80012dc <Error_Handler>
 8001466:	bf00      	nop
 8001468:	200009a0 	.word	0x200009a0
 800146c:	40004400 	.word	0x40004400

08001470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001470:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_UART_MspInit+0xe8>)
 8001474:	6802      	ldr	r2, [r0, #0]
{
 8001476:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 800147a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001480:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001484:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 8001486:	d001      	beq.n	800148c <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001488:	b008      	add	sp, #32
 800148a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800148c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001490:	9400      	str	r4, [sp, #0]
 8001492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001494:	4e31      	ldr	r6, [pc, #196]	; (800155c <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001496:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
 800149c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	9401      	str	r4, [sp, #4]
 80014a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b8:	220c      	movs	r2, #12
 80014ba:	2302      	movs	r3, #2
 80014bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	9305      	str	r3, [sp, #20]
 80014c4:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	4825      	ldr	r0, [pc, #148]	; (8001560 <HAL_UART_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ca:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f000 fb5c 	bl	8001b8c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014d4:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HAL_UART_MspInit+0xf4>)
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d6:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014dc:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014e0:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014e6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ea:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ee:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014f2:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014f6:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014f8:	f000 f93e 	bl	8001778 <HAL_DMA_Init>
 80014fc:	bb28      	cbnz	r0, 800154a <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80014fe:	4c1a      	ldr	r4, [pc, #104]	; (8001568 <HAL_UART_MspInit+0xf8>)
 8001500:	491a      	ldr	r1, [pc, #104]	; (800156c <HAL_UART_MspInit+0xfc>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001502:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001504:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001508:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800150c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001510:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001512:	2140      	movs	r1, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001514:	6122      	str	r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001516:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001518:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151c:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001520:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001524:	e9c4 3207 	strd	r3, r2, [r4, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001528:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800152c:	f000 f924 	bl	8001778 <HAL_DMA_Init>
 8001530:	b970      	cbnz	r0, 8001550 <HAL_UART_MspInit+0xe0>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001534:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001536:	4611      	mov	r1, r2
 8001538:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800153a:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800153c:	f000 f8b6 	bl	80016ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001540:	2026      	movs	r0, #38	; 0x26
 8001542:	f000 f8f1 	bl	8001728 <HAL_NVIC_EnableIRQ>
}
 8001546:	b008      	add	sp, #32
 8001548:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800154a:	f7ff fec7 	bl	80012dc <Error_Handler>
 800154e:	e7d6      	b.n	80014fe <HAL_UART_MspInit+0x8e>
      Error_Handler();
 8001550:	f7ff fec4 	bl	80012dc <Error_Handler>
 8001554:	e7ed      	b.n	8001532 <HAL_UART_MspInit+0xc2>
 8001556:	bf00      	nop
 8001558:	40004400 	.word	0x40004400
 800155c:	200008e0 	.word	0x200008e0
 8001560:	40020000 	.word	0x40020000
 8001564:	40026088 	.word	0x40026088
 8001568:	20000940 	.word	0x20000940
 800156c:	400260a0 	.word	0x400260a0

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159a:	f7ff ff43 	bl	8001424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f006 fae3 	bl	8007b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff fd77 	bl	8001094 <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80015b4:	0800af60 	.word	0x0800af60
  ldr r2, =_sbss
 80015b8:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80015bc:	20002740 	.word	0x20002740

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_InitTick+0x3c>)
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_InitTick+0x40>)
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
{
 80015ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d4:	fbb0 f0f2 	udiv	r0, r0, r2
 80015d8:	fbb3 f0f0 	udiv	r0, r3, r0
 80015dc:	f000 f8b2 	bl	8001744 <HAL_SYSTICK_Config>
 80015e0:	b908      	cbnz	r0, 80015e6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	2d0f      	cmp	r5, #15
 80015e4:	d901      	bls.n	80015ea <HAL_InitTick+0x26>
    return HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80015e8:	bd38      	pop	{r3, r4, r5, pc}
 80015ea:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	4602      	mov	r2, r0
 80015ee:	4629      	mov	r1, r5
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f4:	f000 f85a 	bl	80016ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_InitTick+0x44>)
 80015fa:	4620      	mov	r0, r4
 80015fc:	601d      	str	r5, [r3, #0]
}
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	20000004 	.word	0x20000004
 8001604:	20000000 	.word	0x20000000
 8001608:	20000008 	.word	0x20000008

0800160c <HAL_Init>:
{
 800160c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_Init+0x30>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001616:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800161e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001626:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 f82d 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	200f      	movs	r0, #15
 8001630:	f7ff ffc8 	bl	80015c4 <HAL_InitTick>
  HAL_MspInit();
 8001634:	f7ff fe54 	bl	80012e0 <HAL_MspInit>
}
 8001638:	2000      	movs	r0, #0
 800163a:	bd08      	pop	{r3, pc}
 800163c:	40023c00 	.word	0x40023c00

08001640 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001640:	4a03      	ldr	r2, [pc, #12]	; (8001650 <HAL_IncTick+0x10>)
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <HAL_IncTick+0x14>)
 8001644:	6811      	ldr	r1, [r2, #0]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	440b      	add	r3, r1
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200009e4 	.word	0x200009e4
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001658:	4b01      	ldr	r3, [pc, #4]	; (8001660 <HAL_GetTick+0x8>)
 800165a:	6818      	ldr	r0, [r3, #0]
}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200009e4 	.word	0x200009e4

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b538      	push	{r3, r4, r5, lr}
 8001666:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff fff6 	bl	8001658 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800166e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001670:	d002      	beq.n	8001678 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_Delay+0x20>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	1b43      	subs	r3, r0, r5
 800167e:	42a3      	cmp	r3, r4
 8001680:	d3fa      	bcc.n	8001678 <HAL_Delay+0x14>
  {
  }
}
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800168a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800168c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001692:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80016a2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_NVIC_SetPriority+0x74>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b6:	f1c3 0e07 	rsb	lr, r3, #7
 80016ba:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c2:	bf28      	it	cs
 80016c4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c8:	f1bc 0f06 	cmp.w	ip, #6
 80016cc:	d91b      	bls.n	8001706 <HAL_NVIC_SetPriority+0x5a>
 80016ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80016d4:	fa0c fc03 	lsl.w	ip, ip, r3
 80016d8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80016e0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80016e4:	ea21 010c 	bic.w	r1, r1, ip
 80016e8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80016ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80016f0:	db0c      	blt.n	800170c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80016f6:	0109      	lsls	r1, r1, #4
 80016f8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80016fc:	b2c9      	uxtb	r1, r1
 80016fe:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001702:	f85d fb04 	ldr.w	pc, [sp], #4
 8001706:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001708:	4613      	mov	r3, r2
 800170a:	e7e7      	b.n	80016dc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_NVIC_SetPriority+0x78>)
 800170e:	f000 000f 	and.w	r0, r0, #15
 8001712:	0109      	lsls	r1, r1, #4
 8001714:	4403      	add	r3, r0
 8001716:	b2c9      	uxtb	r1, r1
 8001718:	7619      	strb	r1, [r3, #24]
 800171a:	f85d fb04 	ldr.w	pc, [sp], #4
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	e000ecfc 	.word	0xe000ecfc

08001728 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001728:	2800      	cmp	r0, #0
 800172a:	db07      	blt.n	800173c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172c:	0941      	lsrs	r1, r0, #5
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_NVIC_EnableIRQ+0x18>)
 8001730:	f000 001f 	and.w	r0, r0, #31
 8001734:	2301      	movs	r3, #1
 8001736:	4083      	lsls	r3, r0
 8001738:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	3801      	subs	r0, #1
 8001746:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800174a:	d210      	bcs.n	800176e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	4c08      	ldr	r4, [pc, #32]	; (8001774 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001754:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800175a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001760:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001762:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001766:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	6119      	str	r1, [r3, #16]
 800176c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2001      	movs	r0, #1
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ff6c 	bl	8001658 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001780:	2c00      	cmp	r4, #0
 8001782:	d052      	beq.n	800182a <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001784:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001786:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001788:	2102      	movs	r1, #2
 800178a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800178e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	4605      	mov	r5, r0
 800179a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179c:	e005      	b.n	80017aa <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800179e:	f7ff ff5b 	bl	8001658 <HAL_GetTick>
 80017a2:	1b43      	subs	r3, r0, r5
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d839      	bhi.n	800181c <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	07d1      	lsls	r1, r2, #31
 80017ae:	d4f6      	bmi.n	800179e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80017b4:	68e1      	ldr	r1, [r4, #12]
 80017b6:	4302      	orrs	r2, r0
 80017b8:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ba:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017be:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c0:	432a      	orrs	r2, r5
 80017c2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c4:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80017c6:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c8:	4302      	orrs	r2, r0
 80017ca:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017cc:	4933      	ldr	r1, [pc, #204]	; (800189c <HAL_DMA_Init+0x124>)
 80017ce:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d0:	6a25      	ldr	r5, [r4, #32]
 80017d2:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d4:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017d8:	2904      	cmp	r1, #4
 80017da:	d028      	beq.n	800182e <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017dc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017de:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e0:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017e4:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017e6:	b2d8      	uxtb	r0, r3
 80017e8:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 80017ea:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017ec:	3810      	subs	r0, #16
 80017ee:	fba2 5200 	umull	r5, r2, r2, r0
 80017f2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017f4:	492b      	ldr	r1, [pc, #172]	; (80018a4 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017fa:	5c89      	ldrb	r1, [r1, r2]
 80017fc:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017fe:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8001802:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001804:	bf88      	it	hi
 8001806:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001808:	223f      	movs	r2, #63	; 0x3f
 800180a:	408a      	lsls	r2, r1
 800180c:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180e:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001810:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8001812:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001814:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001816:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800181a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800181c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800181e:	2220      	movs	r2, #32
 8001820:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001822:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8001826:	4618      	mov	r0, r3
}
 8001828:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
}
 800182c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800182e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8001832:	4329      	orrs	r1, r5
 8001834:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8001836:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001838:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800183a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800183c:	f021 0107 	bic.w	r1, r1, #7
 8001840:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001842:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001846:	2d00      	cmp	r5, #0
 8001848:	d0cd      	beq.n	80017e6 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800184a:	b178      	cbz	r0, 800186c <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800184c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001850:	d016      	beq.n	8001880 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001852:	2a02      	cmp	r2, #2
 8001854:	d903      	bls.n	800185e <HAL_DMA_Init+0xe6>
 8001856:	2a03      	cmp	r2, #3
 8001858:	d1c5      	bne.n	80017e6 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800185a:	01ea      	lsls	r2, r5, #7
 800185c:	d5c3      	bpl.n	80017e6 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 800185e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001860:	2240      	movs	r2, #64	; 0x40
 8001862:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001864:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001868:	4618      	mov	r0, r3
}
 800186a:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800186c:	2a01      	cmp	r2, #1
 800186e:	d003      	beq.n	8001878 <HAL_DMA_Init+0x100>
 8001870:	f032 0202 	bics.w	r2, r2, #2
 8001874:	d1b7      	bne.n	80017e6 <HAL_DMA_Init+0x6e>
 8001876:	e7f0      	b.n	800185a <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001878:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800187c:	d1b3      	bne.n	80017e6 <HAL_DMA_Init+0x6e>
 800187e:	e7ee      	b.n	800185e <HAL_DMA_Init+0xe6>
    switch (tmp)
 8001880:	2a03      	cmp	r2, #3
 8001882:	d8b0      	bhi.n	80017e6 <HAL_DMA_Init+0x6e>
 8001884:	a001      	add	r0, pc, #4	; (adr r0, 800188c <HAL_DMA_Init+0x114>)
 8001886:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800188a:	bf00      	nop
 800188c:	0800185f 	.word	0x0800185f
 8001890:	0800185b 	.word	0x0800185b
 8001894:	0800185f 	.word	0x0800185f
 8001898:	08001879 	.word	0x08001879
 800189c:	f010803f 	.word	0xf010803f
 80018a0:	aaaaaaab 	.word	0xaaaaaaab
 80018a4:	0800a8f4 	.word	0x0800a8f4

080018a8 <HAL_DMA_Start_IT>:
{
 80018a8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80018aa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ae:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80018b0:	2c01      	cmp	r4, #1
 80018b2:	d035      	beq.n	8001920 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 80018b4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80018b8:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80018bc:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 80018be:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80018c2:	d005      	beq.n	80018d0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80018c4:	2300      	movs	r3, #0
 80018c6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80018ca:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 80018cc:	2002      	movs	r0, #2
}
 80018ce:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d0:	2602      	movs	r6, #2
 80018d2:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018d6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d8:	2600      	movs	r6, #0
 80018da:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018dc:	6826      	ldr	r6, [r4, #0]
 80018de:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 80018e2:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80018e4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018e6:	6883      	ldr	r3, [r0, #8]
 80018e8:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80018ea:	bf0e      	itee	eq
 80018ec:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80018ee:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80018f0:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80018f4:	bf08      	it	eq
 80018f6:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f8:	233f      	movs	r3, #63	; 0x3f
 80018fa:	4093      	lsls	r3, r2
 80018fc:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018fe:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001900:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001902:	f043 0316 	orr.w	r3, r3, #22
 8001906:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001908:	b11a      	cbz	r2, 8001912 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001918:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800191a:	6023      	str	r3, [r4, #0]
}
 800191c:	bc70      	pop	{r4, r5, r6}
 800191e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001920:	2002      	movs	r0, #2
}
 8001922:	bc70      	pop	{r4, r5, r6}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop

08001928 <HAL_DMA_Abort>:
{
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800192c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800192e:	f7ff fe93 	bl	8001658 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001932:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001936:	2b02      	cmp	r3, #2
 8001938:	d006      	beq.n	8001948 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800193e:	2300      	movs	r3, #0
 8001940:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001944:	2001      	movs	r0, #1
}
 8001946:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f022 0216 	bic.w	r2, r2, #22
 8001950:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001958:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800195a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800195c:	4605      	mov	r5, r0
 800195e:	b342      	cbz	r2, 80019b2 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	f022 0208 	bic.w	r2, r2, #8
 8001966:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	f022 0201 	bic.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001970:	e005      	b.n	800197e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001972:	f7ff fe71 	bl	8001658 <HAL_GetTick>
 8001976:	1b43      	subs	r3, r0, r5
 8001978:	2b05      	cmp	r3, #5
 800197a:	d810      	bhi.n	800199e <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f013 0301 	ands.w	r3, r3, #1
 8001984:	d1f5      	bne.n	8001972 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001986:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001988:	223f      	movs	r2, #63	; 0x3f
 800198a:	408a      	lsls	r2, r1
  return HAL_OK;
 800198c:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 800198e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001990:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001992:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001994:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001998:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800199c:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800199e:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a0:	2220      	movs	r2, #32
 80019a2:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80019a4:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80019aa:	2300      	movs	r3, #0
 80019ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80019b0:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d1d3      	bne.n	8001960 <HAL_DMA_Abort+0x38>
 80019b8:	e7d6      	b.n	8001968 <HAL_DMA_Abort+0x40>
 80019ba:	bf00      	nop

080019bc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019bc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d003      	beq.n	80019cc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
 80019ca:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80019cc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80019ce:	2305      	movs	r3, #5
 80019d0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 80019da:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80019dc:	6013      	str	r3, [r2, #0]
}
 80019de:	4770      	bx	lr

080019e0 <HAL_DMA_IRQHandler>:
{
 80019e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e2:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 80019e4:	4a67      	ldr	r2, [pc, #412]	; (8001b84 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019e6:	6d87      	ldr	r7, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80019e8:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ee:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80019f0:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f2:	2208      	movs	r2, #8
 80019f4:	409a      	lsls	r2, r3
 80019f6:	422a      	tst	r2, r5
{
 80019f8:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019fa:	d003      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019fc:	6801      	ldr	r1, [r0, #0]
 80019fe:	6808      	ldr	r0, [r1, #0]
 8001a00:	0740      	lsls	r0, r0, #29
 8001a02:	d478      	bmi.n	8001af6 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a04:	2201      	movs	r2, #1
 8001a06:	409a      	lsls	r2, r3
 8001a08:	422a      	tst	r2, r5
 8001a0a:	d003      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a0c:	6821      	ldr	r1, [r4, #0]
 8001a0e:	6949      	ldr	r1, [r1, #20]
 8001a10:	0608      	lsls	r0, r1, #24
 8001a12:	d46a      	bmi.n	8001aea <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a14:	2204      	movs	r2, #4
 8001a16:	409a      	lsls	r2, r3
 8001a18:	422a      	tst	r2, r5
 8001a1a:	d003      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a1c:	6821      	ldr	r1, [r4, #0]
 8001a1e:	6809      	ldr	r1, [r1, #0]
 8001a20:	0789      	lsls	r1, r1, #30
 8001a22:	d45c      	bmi.n	8001ade <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a24:	2210      	movs	r2, #16
 8001a26:	409a      	lsls	r2, r3
 8001a28:	422a      	tst	r2, r5
 8001a2a:	d003      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a2c:	6821      	ldr	r1, [r4, #0]
 8001a2e:	6808      	ldr	r0, [r1, #0]
 8001a30:	0700      	lsls	r0, r0, #28
 8001a32:	d441      	bmi.n	8001ab8 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a34:	2220      	movs	r2, #32
 8001a36:	409a      	lsls	r2, r3
 8001a38:	422a      	tst	r2, r5
 8001a3a:	d014      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a3c:	6821      	ldr	r1, [r4, #0]
 8001a3e:	6808      	ldr	r0, [r1, #0]
 8001a40:	06c0      	lsls	r0, r0, #27
 8001a42:	d510      	bpl.n	8001a66 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a44:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a46:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001a4a:	2a05      	cmp	r2, #5
 8001a4c:	d063      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a4e:	680b      	ldr	r3, [r1, #0]
 8001a50:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a54:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a56:	d07e      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a58:	0319      	lsls	r1, r3, #12
 8001a5a:	f140 8089 	bpl.w	8001b70 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a60:	b10b      	cbz	r3, 8001a66 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8001a62:	4620      	mov	r0, r4
 8001a64:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a68:	b323      	cbz	r3, 8001ab4 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a6c:	07da      	lsls	r2, r3, #31
 8001a6e:	d51a      	bpl.n	8001aa6 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8001a70:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a72:	4945      	ldr	r1, [pc, #276]	; (8001b88 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a74:	2305      	movs	r3, #5
 8001a76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a7a:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a7c:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8001a80:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a84:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e002      	b.n	8001a90 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	07db      	lsls	r3, r3, #31
 8001a8e:	d504      	bpl.n	8001a9a <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001a90:	9b01      	ldr	r3, [sp, #4]
 8001a92:	3301      	adds	r3, #1
 8001a94:	42b3      	cmp	r3, r6
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	d9f7      	bls.n	8001a8a <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001a9c:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001aa2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001aa6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001aa8:	b123      	cbz	r3, 8001ab4 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001aaa:	4620      	mov	r0, r4
}
 8001aac:	b003      	add	sp, #12
 8001aae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001ab2:	4718      	bx	r3
}
 8001ab4:	b003      	add	sp, #12
 8001ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ab8:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aba:	680a      	ldr	r2, [r1, #0]
 8001abc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac0:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac2:	d122      	bne.n	8001b0a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac4:	05d2      	lsls	r2, r2, #23
 8001ac6:	d403      	bmi.n	8001ad0 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac8:	680a      	ldr	r2, [r1, #0]
 8001aca:	f022 0208 	bic.w	r2, r2, #8
 8001ace:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001ad0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d0ae      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ada:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001adc:	e7aa      	b.n	8001a34 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ade:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ae0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001ae2:	f042 0204 	orr.w	r2, r2, #4
 8001ae6:	6562      	str	r2, [r4, #84]	; 0x54
 8001ae8:	e79c      	b.n	8001a24 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aea:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001aee:	f042 0202 	orr.w	r2, r2, #2
 8001af2:	6562      	str	r2, [r4, #84]	; 0x54
 8001af4:	e78e      	b.n	8001a14 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001af6:	6808      	ldr	r0, [r1, #0]
 8001af8:	f020 0004 	bic.w	r0, r0, #4
 8001afc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001afe:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	6562      	str	r2, [r4, #84]	; 0x54
 8001b08:	e77c      	b.n	8001a04 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b0a:	0311      	lsls	r1, r2, #12
 8001b0c:	d5e0      	bpl.n	8001ad0 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d1e0      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0xf6>
 8001b14:	e78e      	b.n	8001a34 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b16:	680a      	ldr	r2, [r1, #0]
 8001b18:	f022 0216 	bic.w	r2, r2, #22
 8001b1c:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b1e:	694a      	ldr	r2, [r1, #20]
 8001b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b24:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b28:	b33a      	cbz	r2, 8001b7a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b2a:	680a      	ldr	r2, [r1, #0]
 8001b2c:	f022 0208 	bic.w	r2, r2, #8
 8001b30:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b32:	223f      	movs	r2, #63	; 0x3f
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8001b38:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001b3c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001b3e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001b40:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001b44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001b48:	2900      	cmp	r1, #0
 8001b4a:	d0b3      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001b4c:	4620      	mov	r0, r4
}
 8001b4e:	b003      	add	sp, #12
 8001b50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8001b54:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b56:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001b5a:	d180      	bne.n	8001a5e <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b5c:	680a      	ldr	r2, [r1, #0]
 8001b5e:	f022 0210 	bic.w	r2, r2, #16
 8001b62:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001b64:	2201      	movs	r2, #1
 8001b66:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001b6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001b6e:	e776      	b.n	8001a5e <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001b70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f af75 	bne.w	8001a62 <HAL_DMA_IRQHandler+0x82>
 8001b78:	e775      	b.n	8001a66 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b7a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	d1d4      	bne.n	8001b2a <HAL_DMA_IRQHandler+0x14a>
 8001b80:	e7d7      	b.n	8001b32 <HAL_DMA_IRQHandler+0x152>
 8001b82:	bf00      	nop
 8001b84:	20000000 	.word	0x20000000
 8001b88:	1b4e81b5 	.word	0x1b4e81b5

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b90:	2200      	movs	r2, #0
 8001b92:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b94:	4e71      	ldr	r6, [pc, #452]	; (8001d5c <HAL_GPIO_Init+0x1d0>)
{
 8001b96:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b98:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8001b9a:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4689      	mov	r9, r1
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	f102 0202 	add.w	r2, r2, #2
 8001baa:	d079      	beq.n	8001ca0 <HAL_GPIO_Init+0x114>
    ioposition = 0x01U << position;
 8001bac:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb0:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001bb4:	43a1      	bics	r1, r4
 8001bb6:	d1f4      	bne.n	8001ba2 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb8:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001bbc:	f00c 0103 	and.w	r1, ip, #3
 8001bc0:	1e4d      	subs	r5, r1, #1
 8001bc2:	2d01      	cmp	r5, #1
 8001bc4:	d96f      	bls.n	8001ca6 <HAL_GPIO_Init+0x11a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc6:	2903      	cmp	r1, #3
 8001bc8:	f040 80b0 	bne.w	8001d2c <HAL_GPIO_Init+0x1a0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bcc:	4091      	lsls	r1, r2
 8001bce:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001bd0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd6:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001bda:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bdc:	d0e1      	beq.n	8001ba2 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	4d60      	ldr	r5, [pc, #384]	; (8001d60 <HAL_GPIO_Init+0x1d4>)
 8001be0:	2100      	movs	r1, #0
 8001be2:	9103      	str	r1, [sp, #12]
 8001be4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001be6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001bea:	6469      	str	r1, [r5, #68]	; 0x44
 8001bec:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001bee:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001bf2:	9103      	str	r1, [sp, #12]
 8001bf4:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf6:	f023 0103 	bic.w	r1, r3, #3
 8001bfa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001bfe:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c02:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c08:	00bf      	lsls	r7, r7, #2
 8001c0a:	f04f 0e0f 	mov.w	lr, #15
 8001c0e:	fa0e fe07 	lsl.w	lr, lr, r7
 8001c12:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c16:	4d53      	ldr	r5, [pc, #332]	; (8001d64 <HAL_GPIO_Init+0x1d8>)
 8001c18:	42a8      	cmp	r0, r5
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xc0>
 8001c1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c20:	42a8      	cmp	r0, r5
 8001c22:	f000 8087 	beq.w	8001d34 <HAL_GPIO_Init+0x1a8>
 8001c26:	4d50      	ldr	r5, [pc, #320]	; (8001d68 <HAL_GPIO_Init+0x1dc>)
 8001c28:	42a8      	cmp	r0, r5
 8001c2a:	f000 8088 	beq.w	8001d3e <HAL_GPIO_Init+0x1b2>
 8001c2e:	4d4f      	ldr	r5, [pc, #316]	; (8001d6c <HAL_GPIO_Init+0x1e0>)
 8001c30:	42a8      	cmp	r0, r5
 8001c32:	f000 808b 	beq.w	8001d4c <HAL_GPIO_Init+0x1c0>
 8001c36:	4d4e      	ldr	r5, [pc, #312]	; (8001d70 <HAL_GPIO_Init+0x1e4>)
 8001c38:	42a8      	cmp	r0, r5
 8001c3a:	bf0c      	ite	eq
 8001c3c:	f04f 0e04 	moveq.w	lr, #4
 8001c40:	f04f 0e07 	movne.w	lr, #7
 8001c44:	fa0e f707 	lsl.w	r7, lr, r7
 8001c48:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4c:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8001c50:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c56:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	bf0c      	ite	eq
 8001c5c:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8001c5e:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8001c62:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001c64:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c66:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	bf0c      	ite	eq
 8001c6c:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8001c6e:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 8001c72:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 8001c74:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c76:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	bf0c      	ite	eq
 8001c7c:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8001c7e:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 8001c82:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c84:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c86:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	bf0c      	ite	eq
 8001c90:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8001c92:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8001c98:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	f102 0202 	add.w	r2, r2, #2
 8001c9e:	d185      	bne.n	8001bac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ca0:	b005      	add	sp, #20
 8001ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca6:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8001caa:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cae:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb2:	2503      	movs	r5, #3
 8001cb4:	fa05 f802 	lsl.w	r8, r5, r2
 8001cb8:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cbc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001cc0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001cc2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc4:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc8:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001ccc:	409f      	lsls	r7, r3
 8001cce:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd2:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 8001cd6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001cd8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cda:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cde:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001ce2:	4097      	lsls	r7, r2
 8001ce4:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce8:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8001cea:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cec:	fa01 f102 	lsl.w	r1, r1, r2
 8001cf0:	f47f af6e 	bne.w	8001bd0 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8001cf4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001cf8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfc:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001d00:	f8de 7020 	ldr.w	r7, [lr, #32]
 8001d04:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d06:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0a:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d0e:	fa07 f708 	lsl.w	r7, r7, r8
 8001d12:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d14:	270f      	movs	r7, #15
 8001d16:	fa07 f808 	lsl.w	r8, r7, r8
 8001d1a:	9f00      	ldr	r7, [sp, #0]
 8001d1c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d20:	9f01      	ldr	r7, [sp, #4]
 8001d22:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8001d26:	f8ce 7020 	str.w	r7, [lr, #32]
 8001d2a:	e751      	b.n	8001bd0 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	2503      	movs	r5, #3
 8001d2e:	4095      	lsls	r5, r2
 8001d30:	43ed      	mvns	r5, r5
 8001d32:	e7d1      	b.n	8001cd8 <HAL_GPIO_Init+0x14c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d34:	fa0a f707 	lsl.w	r7, sl, r7
 8001d38:	ea48 0807 	orr.w	r8, r8, r7
 8001d3c:	e786      	b.n	8001c4c <HAL_GPIO_Init+0xc0>
 8001d3e:	f04f 0e02 	mov.w	lr, #2
 8001d42:	fa0e f707 	lsl.w	r7, lr, r7
 8001d46:	ea48 0807 	orr.w	r8, r8, r7
 8001d4a:	e77f      	b.n	8001c4c <HAL_GPIO_Init+0xc0>
 8001d4c:	f04f 0e03 	mov.w	lr, #3
 8001d50:	fa0e f707 	lsl.w	r7, lr, r7
 8001d54:	ea48 0807 	orr.w	r8, r8, r7
 8001d58:	e778      	b.n	8001c4c <HAL_GPIO_Init+0xc0>
 8001d5a:	bf00      	nop
 8001d5c:	40013c00 	.word	0x40013c00
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	b902      	cbnz	r2, 8001d78 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d76:	0409      	lsls	r1, r1, #16
 8001d78:	6181      	str	r1, [r0, #24]
  }
}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d80:	2800      	cmp	r0, #0
 8001d82:	f000 8085 	beq.w	8001e90 <HAL_PCD_Init+0x114>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d86:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8001d8a:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d8c:	4605      	mov	r5, r0
 8001d8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d076      	beq.n	8001e84 <HAL_PCD_Init+0x108>
 8001d96:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da0:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001da2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8001da6:	bf08      	it	eq
 8001da8:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001daa:	f001 feed 	bl	8003b88 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dae:	f856 eb10 	ldr.w	lr, [r6], #16
 8001db2:	46b4      	mov	ip, r6
 8001db4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001db8:	466c      	mov	r4, sp
 8001dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001dc6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dca:	1d2f      	adds	r7, r5, #4
 8001dcc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001dd0:	4670      	mov	r0, lr
 8001dd2:	f001 fdd5 	bl	8003980 <USB_CoreInit>
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	b130      	cbz	r0, 8001de8 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8001dda:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ddc:	2302      	movs	r3, #2
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001dde:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de0:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8001de4:	b00b      	add	sp, #44	; 0x2c
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001de8:	4601      	mov	r1, r0
 8001dea:	6828      	ldr	r0, [r5, #0]
 8001dec:	f001 fed4 	bl	8003b98 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df0:	6868      	ldr	r0, [r5, #4]
 8001df2:	b358      	cbz	r0, 8001e4c <HAL_PCD_Init+0xd0>
 8001df4:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001df6:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dfa:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001dfc:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001e00:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e04:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e10:	fa5f f28c 	uxtb.w	r2, ip
 8001e14:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e16:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 8001e1a:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e1e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e22:	6559      	str	r1, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e24:	d3ea      	bcc.n	8001dfc <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8001e26:	2200      	movs	r2, #0
 8001e28:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001e2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e30:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8001e32:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e36:	b2cc      	uxtb	r4, r1
 8001e38:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e3a:	e9c3 22a2 	strd	r2, r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8001e3e:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e42:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4a:	d3ed      	bcc.n	8001e28 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e4e:	466c      	mov	r4, sp
 8001e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e56:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001e5a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e5e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e62:	6828      	ldr	r0, [r5, #0]
 8001e64:	f001 fed0 	bl	8003c08 <USB_DevInit>
 8001e68:	4604      	mov	r4, r0
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	d1b5      	bne.n	8001dda <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 8001e6e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001e70:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e74:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e76:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e7a:	f002 fb75 	bl	8004568 <USB_DevDisconnect>
}
 8001e7e:	4620      	mov	r0, r4
 8001e80:	b00b      	add	sp, #44	; 0x2c
 8001e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001e84:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001e88:	f004 fe6c 	bl	8006b64 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8001e8c:	6828      	ldr	r0, [r5, #0]
 8001e8e:	e783      	b.n	8001d98 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8001e90:	2401      	movs	r4, #1
}
 8001e92:	4620      	mov	r0, r4
 8001e94:	b00b      	add	sp, #44	; 0x2c
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e98:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8001e9a:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
 8001e9e:	2b01      	cmp	r3, #1
{
 8001ea0:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ea2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001ea4:	d016      	beq.n	8001ed4 <HAL_PCD_Start+0x3c>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ea6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  __HAL_LOCK(hpcd);
 8001ea8:	2201      	movs	r2, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eaa:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8001eac:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eb0:	d008      	beq.n	8001ec4 <HAL_PCD_Start+0x2c>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8001eb2:	f001 fe61 	bl	8003b78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eb6:	6820      	ldr	r0, [r4, #0]
 8001eb8:	f002 fb46 	bl	8004548 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc

  return HAL_OK;
}
 8001ec2:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ec4:	69a3      	ldr	r3, [r4, #24]
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d0f3      	beq.n	8001eb2 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001eca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	6383      	str	r3, [r0, #56]	; 0x38
 8001ed2:	e7ee      	b.n	8001eb2 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8001ed4:	2002      	movs	r0, #2
}
 8001ed6:	bd10      	pop	{r4, pc}

08001ed8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001edc:	6805      	ldr	r5, [r0, #0]
{
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	f002 fb7e 	bl	80045e4 <USB_GetMode>
 8001ee8:	b110      	cbz	r0, 8001ef0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 8001eea:	b009      	add	sp, #36	; 0x24
 8001eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ef0:	4683      	mov	fp, r0
 8001ef2:	6820      	ldr	r0, [r4, #0]
 8001ef4:	f002 fb48 	bl	8004588 <USB_ReadInterrupts>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d0f6      	beq.n	8001eea <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001efc:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f00:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f02:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001f06:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f0a:	f002 fb3d 	bl	8004588 <USB_ReadInterrupts>
 8001f0e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f12:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f14:	f505 6300 	add.w	r3, r5, #2048	; 0x800
 8001f18:	9303      	str	r3, [sp, #12]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f1a:	bf1e      	ittt	ne
 8001f1c:	6943      	ldrne	r3, [r0, #20]
 8001f1e:	f003 0302 	andne.w	r3, r3, #2
 8001f22:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f24:	f002 fb30 	bl	8004588 <USB_ReadInterrupts>
 8001f28:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f2c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f2e:	d012      	beq.n	8001f56 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f30:	6983      	ldr	r3, [r0, #24]
 8001f32:	f023 0310 	bic.w	r3, r3, #16
 8001f36:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8001f38:	6a2e      	ldr	r6, [r5, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f3a:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8001f3e:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f40:	f006 070f 	and.w	r7, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f44:	f000 83ca 	beq.w	80026dc <HAL_PCD_IRQHandler+0x804>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	f000 8307 	beq.w	800255c <HAL_PCD_IRQHandler+0x684>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f4e:	6983      	ldr	r3, [r0, #24]
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f56:	f002 fb17 	bl	8004588 <USB_ReadInterrupts>
 8001f5a:	0307      	lsls	r7, r0, #12
 8001f5c:	f100 8269 	bmi.w	8002432 <HAL_PCD_IRQHandler+0x55a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f60:	6820      	ldr	r0, [r4, #0]
 8001f62:	f002 fb11 	bl	8004588 <USB_ReadInterrupts>
 8001f66:	0346      	lsls	r6, r0, #13
 8001f68:	f100 8211 	bmi.w	800238e <HAL_PCD_IRQHandler+0x4b6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f6c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f6e:	f002 fb0b 	bl	8004588 <USB_ReadInterrupts>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	f2c0 8182 	blt.w	800227c <HAL_PCD_IRQHandler+0x3a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f78:	6820      	ldr	r0, [r4, #0]
 8001f7a:	f002 fb05 	bl	8004588 <USB_ReadInterrupts>
 8001f7e:	0507      	lsls	r7, r0, #20
 8001f80:	f100 813d 	bmi.w	80021fe <HAL_PCD_IRQHandler+0x326>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f84:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f86:	f002 faff 	bl	8004588 <USB_ReadInterrupts>
 8001f8a:	04c0      	lsls	r0, r0, #19
 8001f8c:	f100 81a0 	bmi.w	80022d0 <HAL_PCD_IRQHandler+0x3f8>
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f90:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f92:	f002 faf9 	bl	8004588 <USB_ReadInterrupts>
 8001f96:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f9a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f9c:	f040 8181 	bne.w	80022a2 <HAL_PCD_IRQHandler+0x3ca>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fa0:	f002 faf2 	bl	8004588 <USB_ReadInterrupts>
 8001fa4:	0701      	lsls	r1, r0, #28
 8001fa6:	f100 81e9 	bmi.w	800237c <HAL_PCD_IRQHandler+0x4a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001faa:	6820      	ldr	r0, [r4, #0]
 8001fac:	f002 faec 	bl	8004588 <USB_ReadInterrupts>
 8001fb0:	0602      	lsls	r2, r0, #24
 8001fb2:	d571      	bpl.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001fb4:	69aa      	ldr	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fb6:	6863      	ldr	r3, [r4, #4]
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fbc:	2b01      	cmp	r3, #1
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001fbe:	61aa      	str	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fc0:	d96a      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fc2:	f894 22a3 	ldrb.w	r2, [r4, #675]	; 0x2a3
 8001fc6:	2a01      	cmp	r2, #1
 8001fc8:	f000 83e9 	beq.w	800279e <HAL_PCD_IRQHandler+0x8c6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d963      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fd0:	f894 22c7 	ldrb.w	r2, [r4, #711]	; 0x2c7
 8001fd4:	2a01      	cmp	r2, #1
 8001fd6:	f000 83fd 	beq.w	80027d4 <HAL_PCD_IRQHandler+0x8fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d95c      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fde:	f894 22eb 	ldrb.w	r2, [r4, #747]	; 0x2eb
 8001fe2:	2a01      	cmp	r2, #1
 8001fe4:	f000 82b3 	beq.w	800254e <HAL_PCD_IRQHandler+0x676>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d955      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fec:	f894 230f 	ldrb.w	r2, [r4, #783]	; 0x30f
 8001ff0:	2a01      	cmp	r2, #1
 8001ff2:	f000 82c6 	beq.w	8002582 <HAL_PCD_IRQHandler+0x6aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d94e      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ffa:	f894 2333 	ldrb.w	r2, [r4, #819]	; 0x333
 8001ffe:	2a01      	cmp	r2, #1
 8002000:	f000 8425 	beq.w	800284e <HAL_PCD_IRQHandler+0x976>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002004:	2b06      	cmp	r3, #6
 8002006:	d947      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002008:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
 800200c:	2a01      	cmp	r2, #1
 800200e:	f000 8432 	beq.w	8002876 <HAL_PCD_IRQHandler+0x99e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002012:	2b07      	cmp	r3, #7
 8002014:	d940      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002016:	f894 237b 	ldrb.w	r2, [r4, #891]	; 0x37b
 800201a:	2a01      	cmp	r2, #1
 800201c:	f000 8448 	beq.w	80028b0 <HAL_PCD_IRQHandler+0x9d8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002020:	2b08      	cmp	r3, #8
 8002022:	d939      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002024:	f894 239f 	ldrb.w	r2, [r4, #927]	; 0x39f
 8002028:	2a01      	cmp	r2, #1
 800202a:	f000 8455 	beq.w	80028d8 <HAL_PCD_IRQHandler+0xa00>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800202e:	2b09      	cmp	r3, #9
 8002030:	d932      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002032:	f894 23c3 	ldrb.w	r2, [r4, #963]	; 0x3c3
 8002036:	2a01      	cmp	r2, #1
 8002038:	f000 8462 	beq.w	8002900 <HAL_PCD_IRQHandler+0xa28>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800203c:	2b0a      	cmp	r3, #10
 800203e:	d92b      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002040:	f894 23e7 	ldrb.w	r2, [r4, #999]	; 0x3e7
 8002044:	2a01      	cmp	r2, #1
 8002046:	f000 846f 	beq.w	8002928 <HAL_PCD_IRQHandler+0xa50>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800204a:	2b0b      	cmp	r3, #11
 800204c:	d924      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800204e:	f894 240b 	ldrb.w	r2, [r4, #1035]	; 0x40b
 8002052:	2a01      	cmp	r2, #1
 8002054:	f000 847c 	beq.w	8002950 <HAL_PCD_IRQHandler+0xa78>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d91d      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800205c:	f894 242f 	ldrb.w	r2, [r4, #1071]	; 0x42f
 8002060:	2a01      	cmp	r2, #1
 8002062:	f000 847d 	beq.w	8002960 <HAL_PCD_IRQHandler+0xa88>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002066:	2b0d      	cmp	r3, #13
 8002068:	d916      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800206a:	f894 2453 	ldrb.w	r2, [r4, #1107]	; 0x453
 800206e:	2a01      	cmp	r2, #1
 8002070:	f000 849d 	beq.w	80029ae <HAL_PCD_IRQHandler+0xad6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002074:	2b0e      	cmp	r3, #14
 8002076:	d90f      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002078:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 800207c:	2a01      	cmp	r2, #1
 800207e:	f000 84a4 	beq.w	80029ca <HAL_PCD_IRQHandler+0xaf2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002082:	2b0f      	cmp	r3, #15
 8002084:	d908      	bls.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002086:	f894 349b 	ldrb.w	r3, [r4, #1179]	; 0x49b
 800208a:	2b01      	cmp	r3, #1
 800208c:	d104      	bne.n	8002098 <HAL_PCD_IRQHandler+0x1c0>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800208e:	6820      	ldr	r0, [r4, #0]
 8002090:	f504 6193 	add.w	r1, r4, #1176	; 0x498
 8002094:	f002 f96e 	bl	8004374 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002098:	6820      	ldr	r0, [r4, #0]
 800209a:	f002 fa75 	bl	8004588 <USB_ReadInterrupts>
 800209e:	02c3      	lsls	r3, r0, #11
 80020a0:	f140 80ab 	bpl.w	80021fa <HAL_PCD_IRQHandler+0x322>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020a4:	6863      	ldr	r3, [r4, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f240 8089 	bls.w	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020ac:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020b0:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	f000 8213 	beq.w	80024e0 <HAL_PCD_IRQHandler+0x608>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d97f      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020be:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020c2:	f8d5 1940 	ldr.w	r1, [r5, #2368]	; 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020c6:	2a01      	cmp	r2, #1
 80020c8:	f000 821d 	beq.w	8002506 <HAL_PCD_IRQHandler+0x62e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d976      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020d0:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020d4:	f8d5 1960 	ldr.w	r1, [r5, #2400]	; 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020d8:	2a01      	cmp	r2, #1
 80020da:	f000 8220 	beq.w	800251e <HAL_PCD_IRQHandler+0x646>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d96d      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020e2:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020e6:	f8d5 1980 	ldr.w	r1, [r5, #2432]	; 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	f000 8223 	beq.w	8002536 <HAL_PCD_IRQHandler+0x65e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d964      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020f4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020f8:	f8d5 19a0 	ldr.w	r1, [r5, #2464]	; 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020fc:	2a01      	cmp	r2, #1
 80020fe:	f000 8342 	beq.w	8002786 <HAL_PCD_IRQHandler+0x8ae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002102:	2b06      	cmp	r3, #6
 8002104:	d95b      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002106:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800210a:	f8d5 19c0 	ldr.w	r1, [r5, #2496]	; 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800210e:	2a01      	cmp	r2, #1
 8002110:	f000 8354 	beq.w	80027bc <HAL_PCD_IRQHandler+0x8e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002114:	2b07      	cmp	r3, #7
 8002116:	d952      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002118:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800211c:	f8d5 19e0 	ldr.w	r1, [r5, #2528]	; 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002120:	2a01      	cmp	r2, #1
 8002122:	f000 835f 	beq.w	80027e4 <HAL_PCD_IRQHandler+0x90c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002126:	2b08      	cmp	r3, #8
 8002128:	d949      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800212a:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800212e:	f8d5 1a00 	ldr.w	r1, [r5, #2560]	; 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002132:	2a01      	cmp	r2, #1
 8002134:	f000 8362 	beq.w	80027fc <HAL_PCD_IRQHandler+0x924>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002138:	2b09      	cmp	r3, #9
 800213a:	d940      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800213c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002140:	f8d5 1a20 	ldr.w	r1, [r5, #2592]	; 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002144:	2a01      	cmp	r2, #1
 8002146:	f000 8376 	beq.w	8002836 <HAL_PCD_IRQHandler+0x95e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800214a:	2b0a      	cmp	r3, #10
 800214c:	d937      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800214e:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002152:	f8d5 1a40 	ldr.w	r1, [r5, #2624]	; 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002156:	2a01      	cmp	r2, #1
 8002158:	f000 8381 	beq.w	800285e <HAL_PCD_IRQHandler+0x986>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800215c:	2b0b      	cmp	r3, #11
 800215e:	d92e      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002160:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002164:	f8d5 1a60 	ldr.w	r1, [r5, #2656]	; 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002168:	2a01      	cmp	r2, #1
 800216a:	f000 8395 	beq.w	8002898 <HAL_PCD_IRQHandler+0x9c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d925      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002172:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002176:	f8d5 1a80 	ldr.w	r1, [r5, #2688]	; 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800217a:	2a01      	cmp	r2, #1
 800217c:	f000 83a0 	beq.w	80028c0 <HAL_PCD_IRQHandler+0x9e8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002180:	2b0d      	cmp	r3, #13
 8002182:	d91c      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002184:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002188:	f8d5 1aa0 	ldr.w	r1, [r5, #2720]	; 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800218c:	2a01      	cmp	r2, #1
 800218e:	f000 83ab 	beq.w	80028e8 <HAL_PCD_IRQHandler+0xa10>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002192:	2b0e      	cmp	r3, #14
 8002194:	d913      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002196:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800219a:	f8d5 1ac0 	ldr.w	r1, [r5, #2752]	; 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800219e:	2a01      	cmp	r2, #1
 80021a0:	f000 83b6 	beq.w	8002910 <HAL_PCD_IRQHandler+0xa38>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d90a      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021a8:	f894 225c 	ldrb.w	r2, [r4, #604]	; 0x25c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021ac:	f8d5 1ae0 	ldr.w	r1, [r5, #2784]	; 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021b0:	2a01      	cmp	r2, #1
 80021b2:	f000 83c1 	beq.w	8002938 <HAL_PCD_IRQHandler+0xa60>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d901      	bls.n	80021be <HAL_PCD_IRQHandler+0x2e6>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021ba:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021be:	6820      	ldr	r0, [r4, #0]
 80021c0:	6943      	ldr	r3, [r0, #20]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021c8:	f002 f9de 	bl	8004588 <USB_ReadInterrupts>
 80021cc:	0287      	lsls	r7, r0, #10
 80021ce:	d421      	bmi.n	8002214 <HAL_PCD_IRQHandler+0x33c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021d0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021d2:	f002 f9d9 	bl	8004588 <USB_ReadInterrupts>
 80021d6:	0040      	lsls	r0, r0, #1
 80021d8:	f100 80c7 	bmi.w	800236a <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021dc:	6820      	ldr	r0, [r4, #0]
 80021de:	f002 f9d3 	bl	8004588 <USB_ReadInterrupts>
 80021e2:	0741      	lsls	r1, r0, #29
 80021e4:	f57f ae81 	bpl.w	8001eea <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021ec:	076a      	lsls	r2, r5, #29
 80021ee:	f100 8296 	bmi.w	800271e <HAL_PCD_IRQHandler+0x846>
      hpcd->Instance->GOTGINT |= RegVal;
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	432a      	orrs	r2, r5
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	e677      	b.n	8001eea <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	e7e4      	b.n	80021c8 <HAL_PCD_IRQHandler+0x2f0>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021fe:	9b03      	ldr	r3, [sp, #12]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	07de      	lsls	r6, r3, #31
 8002204:	f100 8287 	bmi.w	8002716 <HAL_PCD_IRQHandler+0x83e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002208:	6820      	ldr	r0, [r4, #0]
 800220a:	6943      	ldr	r3, [r0, #20]
 800220c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002210:	6143      	str	r3, [r0, #20]
 8002212:	e6b8      	b.n	8001f86 <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002214:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8002218:	f1bc 0f01 	cmp.w	ip, #1
 800221c:	d928      	bls.n	8002270 <HAL_PCD_IRQHandler+0x398>
 800221e:	f505 6232 	add.w	r2, r5, #2848	; 0xb20
 8002222:	4623      	mov	r3, r4
 8002224:	2101      	movs	r1, #1
 8002226:	e006      	b.n	8002236 <HAL_PCD_IRQHandler+0x35e>
 8002228:	3101      	adds	r1, #1
 800222a:	4561      	cmp	r1, ip
 800222c:	f102 0220 	add.w	r2, r2, #32
 8002230:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002234:	d01c      	beq.n	8002270 <HAL_PCD_IRQHandler+0x398>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002236:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800223a:	6816      	ldr	r6, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800223c:	2801      	cmp	r0, #1
 800223e:	d1f3      	bne.n	8002228 <HAL_PCD_IRQHandler+0x350>
 8002240:	2e00      	cmp	r6, #0
 8002242:	daf1      	bge.n	8002228 <HAL_PCD_IRQHandler+0x350>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002244:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 8002248:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 800224c:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002250:	42be      	cmp	r6, r7
 8002252:	d1e9      	bne.n	8002228 <HAL_PCD_IRQHandler+0x350>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002254:	f883 02a3 	strb.w	r0, [r3, #675]	; 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002258:	69a8      	ldr	r0, [r5, #24]
 800225a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800225e:	61a8      	str	r0, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002260:	6968      	ldr	r0, [r5, #20]
 8002262:	0606      	lsls	r6, r0, #24
 8002264:	d4e0      	bmi.n	8002228 <HAL_PCD_IRQHandler+0x350>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002266:	9a03      	ldr	r2, [sp, #12]
 8002268:	6853      	ldr	r3, [r2, #4]
 800226a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226e:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002270:	6820      	ldr	r0, [r4, #0]
 8002272:	6943      	ldr	r3, [r0, #20]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	6143      	str	r3, [r0, #20]
 800227a:	e7aa      	b.n	80021d2 <HAL_PCD_IRQHandler+0x2fa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800227c:	9a03      	ldr	r2, [sp, #12]
 800227e:	6853      	ldr	r3, [r2, #4]
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8002286:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800228a:	2b01      	cmp	r3, #1
 800228c:	f000 8134 	beq.w	80024f8 <HAL_PCD_IRQHandler+0x620>
        HAL_PCD_ResumeCallback(hpcd);
 8002290:	4620      	mov	r0, r4
 8002292:	f004 fcf1 	bl	8006c78 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002296:	6820      	ldr	r0, [r4, #0]
 8002298:	6943      	ldr	r3, [r0, #20]
 800229a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800229e:	6143      	str	r3, [r0, #20]
 80022a0:	e66b      	b.n	8001f7a <HAL_PCD_IRQHandler+0xa2>
      (void)USB_ActivateSetup(hpcd->Instance);
 80022a2:	f002 f9a3 	bl	80045ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022a6:	6820      	ldr	r0, [r4, #0]
 80022a8:	f001 fdf2 	bl	8003e90 <USB_GetDevSpeed>
 80022ac:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022ae:	6826      	ldr	r6, [r4, #0]
 80022b0:	f000 ffd4 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80022b4:	7b22      	ldrb	r2, [r4, #12]
 80022b6:	4601      	mov	r1, r0
 80022b8:	4630      	mov	r0, r6
 80022ba:	f001 fbe3 	bl	8003a84 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80022be:	4620      	mov	r0, r4
 80022c0:	f004 fcb0 	bl	8006c24 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	6943      	ldr	r3, [r0, #20]
 80022c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022cc:	6143      	str	r3, [r0, #20]
 80022ce:	e667      	b.n	8001fa0 <HAL_PCD_IRQHandler+0xc8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022d0:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022d2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022d4:	6853      	ldr	r3, [r2, #4]
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022dc:	2110      	movs	r1, #16
 80022de:	f001 fdad 	bl	8003e3c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e2:	6860      	ldr	r0, [r4, #4]
 80022e4:	b1e0      	cbz	r0, 8002320 <HAL_PCD_IRQHandler+0x448>
 80022e6:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022ea:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80022ee:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80022f6:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022f8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002300:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002304:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002308:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	f10b 0b01 	add.w	fp, fp, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002310:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002314:	4583      	cmp	fp, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002316:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231a:	f103 0320 	add.w	r3, r3, #32
 800231e:	d1e6      	bne.n	80022ee <HAL_PCD_IRQHandler+0x416>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002320:	9903      	ldr	r1, [sp, #12]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002322:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002324:	69cb      	ldr	r3, [r1, #28]
 8002326:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800232a:	61cb      	str	r3, [r1, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800232c:	2a00      	cmp	r2, #0
 800232e:	f040 80cc 	bne.w	80024ca <HAL_PCD_IRQHandler+0x5f2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002332:	694b      	ldr	r3, [r1, #20]
 8002334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002338:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800233c:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800233e:	690b      	ldr	r3, [r1, #16]
 8002340:	f043 030b 	orr.w	r3, r3, #11
 8002344:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002346:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800234a:	7c21      	ldrb	r1, [r4, #16]
 800234c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800234e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002352:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002356:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800235a:	f002 f959 	bl	8004610 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800235e:	6820      	ldr	r0, [r4, #0]
 8002360:	6943      	ldr	r3, [r0, #20]
 8002362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002366:	6143      	str	r3, [r0, #20]
 8002368:	e613      	b.n	8001f92 <HAL_PCD_IRQHandler+0xba>
      HAL_PCD_ConnectCallback(hpcd);
 800236a:	4620      	mov	r0, r4
 800236c:	f004 fc90 	bl	8006c90 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002370:	6820      	ldr	r0, [r4, #0]
 8002372:	6943      	ldr	r3, [r0, #20]
 8002374:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002378:	6143      	str	r3, [r0, #20]
 800237a:	e730      	b.n	80021de <HAL_PCD_IRQHandler+0x306>
      HAL_PCD_SOFCallback(hpcd);
 800237c:	4620      	mov	r0, r4
 800237e:	f004 fc4d 	bl	8006c1c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002382:	6820      	ldr	r0, [r4, #0]
 8002384:	6943      	ldr	r3, [r0, #20]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	6143      	str	r3, [r0, #20]
 800238c:	e60e      	b.n	8001fac <HAL_PCD_IRQHandler+0xd4>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800238e:	6820      	ldr	r0, [r4, #0]
 8002390:	f002 f906 	bl	80045a0 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8002394:	4680      	mov	r8, r0
 8002396:	2800      	cmp	r0, #0
 8002398:	f43f ade8 	beq.w	8001f6c <HAL_PCD_IRQHandler+0x94>
      epnum = 0U;
 800239c:	f04f 0a00 	mov.w	sl, #0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023a0:	6820      	ldr	r0, [r4, #0]
              ep->is_iso_incomplete = 0U;
 80023a2:	9504      	str	r5, [sp, #16]
 80023a4:	4627      	mov	r7, r4
 80023a6:	f505 6910 	add.w	r9, r5, #2304	; 0x900
 80023aa:	4656      	mov	r6, sl
 80023ac:	f8cd b014 	str.w	fp, [sp, #20]
 80023b0:	e009      	b.n	80023c6 <HAL_PCD_IRQHandler+0x4ee>
      while (ep_intr != 0U)
 80023b2:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 80023b6:	f106 0601 	add.w	r6, r6, #1
      while (ep_intr != 0U)
 80023ba:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80023be:	f109 0920 	add.w	r9, r9, #32
 80023c2:	f000 80e5 	beq.w	8002590 <HAL_PCD_IRQHandler+0x6b8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023c6:	f018 0f01 	tst.w	r8, #1
 80023ca:	d0f2      	beq.n	80023b2 <HAL_PCD_IRQHandler+0x4da>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023cc:	fa5f fa86 	uxtb.w	sl, r6
 80023d0:	4651      	mov	r1, sl
 80023d2:	f002 f8f7 	bl	80045c4 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023d6:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023d8:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023da:	d513      	bpl.n	8002404 <HAL_PCD_IRQHandler+0x52c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023dc:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023de:	2001      	movs	r0, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023e0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023e2:	f006 020f 	and.w	r2, r6, #15
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023ea:	ea23 0302 	bic.w	r3, r3, r2
 80023ee:	634b      	str	r3, [r1, #52]	; 0x34
            if (hpcd->Init.dma_enable == 1U)
 80023f0:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023f2:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 80023f6:	4281      	cmp	r1, r0
 80023f8:	f000 8196 	beq.w	8002728 <HAL_PCD_IRQHandler+0x850>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023fc:	4651      	mov	r1, sl
 80023fe:	4620      	mov	r0, r4
 8002400:	f004 fc02 	bl	8006c08 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002404:	072b      	lsls	r3, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002406:	bf44      	itt	mi
 8002408:	2308      	movmi	r3, #8
 800240a:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800240e:	06e8      	lsls	r0, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002410:	bf44      	itt	mi
 8002412:	2310      	movmi	r3, #16
 8002414:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002418:	0669      	lsls	r1, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800241a:	bf44      	itt	mi
 800241c:	2340      	movmi	r3, #64	; 0x40
 800241e:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002422:	07aa      	lsls	r2, r5, #30
 8002424:	f100 814d 	bmi.w	80026c2 <HAL_PCD_IRQHandler+0x7ea>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002428:	062b      	lsls	r3, r5, #24
 800242a:	f100 80f5 	bmi.w	8002618 <HAL_PCD_IRQHandler+0x740>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800242e:	6820      	ldr	r0, [r4, #0]
 8002430:	e7bf      	b.n	80023b2 <HAL_PCD_IRQHandler+0x4da>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002432:	6820      	ldr	r0, [r4, #0]
 8002434:	f002 f8ac 	bl	8004590 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8002438:	4606      	mov	r6, r0
 800243a:	2800      	cmp	r0, #0
 800243c:	f43f ad90 	beq.w	8001f60 <HAL_PCD_IRQHandler+0x88>
 8002440:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 8002444:	46a2      	mov	sl, r4
      epnum = 0U;
 8002446:	f04f 0900 	mov.w	r9, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800244a:	f8cd b010 	str.w	fp, [sp, #16]
 800244e:	e008      	b.n	8002462 <HAL_PCD_IRQHandler+0x58a>
      while (ep_intr != 0U)
 8002450:	0876      	lsrs	r6, r6, #1
        epnum++;
 8002452:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8002456:	f107 0720 	add.w	r7, r7, #32
 800245a:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 800245e:	f000 809a 	beq.w	8002596 <HAL_PCD_IRQHandler+0x6be>
        if ((ep_intr & 0x1U) != 0U)
 8002462:	07f0      	lsls	r0, r6, #31
 8002464:	d5f4      	bpl.n	8002450 <HAL_PCD_IRQHandler+0x578>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002466:	fa5f fb89 	uxtb.w	fp, r9
 800246a:	6820      	ldr	r0, [r4, #0]
 800246c:	4659      	mov	r1, fp
 800246e:	f002 f89f 	bl	80045b0 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002472:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002476:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002478:	f040 80af 	bne.w	80025da <HAL_PCD_IRQHandler+0x702>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800247c:	f018 0f08 	tst.w	r8, #8
 8002480:	f040 808c 	bne.w	800259c <HAL_PCD_IRQHandler+0x6c4>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002484:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002488:	bf1c      	itt	ne
 800248a:	2210      	movne	r2, #16
 800248c:	60ba      	strne	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800248e:	f018 0f02 	tst.w	r8, #2
 8002492:	d00e      	beq.n	80024b2 <HAL_PCD_IRQHandler+0x5da>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002494:	696a      	ldr	r2, [r5, #20]
 8002496:	0611      	lsls	r1, r2, #24
 8002498:	d504      	bpl.n	80024a4 <HAL_PCD_IRQHandler+0x5cc>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800249a:	9b03      	ldr	r3, [sp, #12]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a2:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 80024a4:	f89a 227f 	ldrb.w	r2, [sl, #639]	; 0x27f
 80024a8:	2a01      	cmp	r2, #1
 80024aa:	f000 817f 	beq.w	80027ac <HAL_PCD_IRQHandler+0x8d4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024ae:	2302      	movs	r3, #2
 80024b0:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024b2:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024b6:	bf1c      	itt	ne
 80024b8:	2320      	movne	r3, #32
 80024ba:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024bc:	f418 5f00 	tst.w	r8, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024c0:	bf1c      	itt	ne
 80024c2:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 80024c6:	60bb      	strne	r3, [r7, #8]
 80024c8:	e7c2      	b.n	8002450 <HAL_PCD_IRQHandler+0x578>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024ca:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80024ce:	f043 030b 	orr.w	r3, r3, #11
 80024d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024d6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80024d8:	f043 030b 	orr.w	r3, r3, #11
 80024dc:	644b      	str	r3, [r1, #68]	; 0x44
 80024de:	e732      	b.n	8002346 <HAL_PCD_IRQHandler+0x46e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024e0:	2900      	cmp	r1, #0
 80024e2:	f6bf adea 	bge.w	80020ba <HAL_PCD_IRQHandler+0x1e2>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e6:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024e8:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024ec:	f851 0b60 	ldr.w	r0, [r1], #96
 80024f0:	f001 ff40 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024f4:	6863      	ldr	r3, [r4, #4]
 80024f6:	e5e0      	b.n	80020ba <HAL_PCD_IRQHandler+0x1e2>
        hpcd->LPM_State = LPM_L0;
 80024f8:	2100      	movs	r1, #0
 80024fa:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024fe:	4620      	mov	r0, r4
 8002500:	f000 fbf4 	bl	8002cec <HAL_PCDEx_LPM_Callback>
 8002504:	e6c7      	b.n	8002296 <HAL_PCD_IRQHandler+0x3be>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002506:	2900      	cmp	r1, #0
 8002508:	f6bf ade0 	bge.w	80020cc <HAL_PCD_IRQHandler+0x1f4>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800250c:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800250e:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002512:	f851 0b84 	ldr.w	r0, [r1], #132
 8002516:	f001 ff2d 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800251a:	6863      	ldr	r3, [r4, #4]
 800251c:	e5d6      	b.n	80020cc <HAL_PCD_IRQHandler+0x1f4>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800251e:	2900      	cmp	r1, #0
 8002520:	f6bf addd 	bge.w	80020de <HAL_PCD_IRQHandler+0x206>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002524:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002526:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800252a:	f851 0ba8 	ldr.w	r0, [r1], #168
 800252e:	f001 ff21 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002532:	6863      	ldr	r3, [r4, #4]
 8002534:	e5d3      	b.n	80020de <HAL_PCD_IRQHandler+0x206>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002536:	2900      	cmp	r1, #0
 8002538:	f6bf adda 	bge.w	80020f0 <HAL_PCD_IRQHandler+0x218>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253c:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800253e:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002542:	f851 0bcc 	ldr.w	r0, [r1], #204
 8002546:	f001 ff15 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800254a:	6863      	ldr	r3, [r4, #4]
 800254c:	e5d0      	b.n	80020f0 <HAL_PCD_IRQHandler+0x218>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800254e:	6820      	ldr	r0, [r4, #0]
 8002550:	f504 713a 	add.w	r1, r4, #744	; 0x2e8
 8002554:	f001 ff0e 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	e545      	b.n	8001fe8 <HAL_PCD_IRQHandler+0x110>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800255c:	2208      	movs	r2, #8
 800255e:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8002562:	4628      	mov	r0, r5
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002564:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002568:	f001 ff5e 	bl	8004428 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800256c:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8002570:	f3c6 130a 	ubfx	r3, r6, #4, #11
 8002574:	f8d2 129c 	ldr.w	r1, [r2, #668]	; 0x29c
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002578:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800257a:	440b      	add	r3, r1
 800257c:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 8002580:	e4e5      	b.n	8001f4e <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002582:	6820      	ldr	r0, [r4, #0]
 8002584:	f504 7143 	add.w	r1, r4, #780	; 0x30c
 8002588:	f001 fef4 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800258c:	6863      	ldr	r3, [r4, #4]
 800258e:	e532      	b.n	8001ff6 <HAL_PCD_IRQHandler+0x11e>
 8002590:	e9dd 5b04 	ldrd	r5, fp, [sp, #16]
 8002594:	e4eb      	b.n	8001f6e <HAL_PCD_IRQHandler+0x96>
 8002596:	f8dd b010 	ldr.w	fp, [sp, #16]
 800259a:	e4e1      	b.n	8001f60 <HAL_PCD_IRQHandler+0x88>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259c:	6821      	ldr	r1, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800259e:	4bbc      	ldr	r3, [pc, #752]	; (8002890 <HAL_PCD_IRQHandler+0x9b8>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025a0:	2208      	movs	r2, #8
 80025a2:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025a4:	f501 6230 	add.w	r2, r1, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025aa:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ae:	4299      	cmp	r1, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025b0:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b2:	f240 80ca 	bls.w	800274a <HAL_PCD_IRQHandler+0x872>
 80025b6:	0400      	lsls	r0, r0, #16
 80025b8:	d502      	bpl.n	80025c0 <HAL_PCD_IRQHandler+0x6e8>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025be:	6091      	str	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025c0:	4620      	mov	r0, r4
 80025c2:	f004 fb11 	bl	8006be8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025c6:	6921      	ldr	r1, [r4, #16]
 80025c8:	2901      	cmp	r1, #1
 80025ca:	f47f af5b 	bne.w	8002484 <HAL_PCD_IRQHandler+0x5ac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ce:	6820      	ldr	r0, [r4, #0]
 80025d0:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80025d4:	f002 f81c 	bl	8004610 <USB_EP0_OutStart>
 80025d8:	e754      	b.n	8002484 <HAL_PCD_IRQHandler+0x5ac>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025da:	6820      	ldr	r0, [r4, #0]
  if (hpcd->Init.dma_enable == 1U)
 80025dc:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025de:	2201      	movs	r2, #1
 80025e0:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025e2:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 80025e6:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 80025ea:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025ec:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025f0:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 80025f2:	f000 80ae 	beq.w	8002752 <HAL_PCD_IRQHandler+0x87a>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025f6:	49a7      	ldr	r1, [pc, #668]	; (8002894 <HAL_PCD_IRQHandler+0x9bc>)
 80025f8:	458c      	cmp	ip, r1
 80025fa:	f000 810b 	beq.w	8002814 <HAL_PCD_IRQHandler+0x93c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025fe:	f1b9 0f00 	cmp.w	r9, #0
 8002602:	d104      	bne.n	800260e <HAL_PCD_IRQHandler+0x736>
 8002604:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
 8002608:	2a00      	cmp	r2, #0
 800260a:	f000 81d8 	beq.w	80029be <HAL_PCD_IRQHandler+0xae6>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800260e:	4659      	mov	r1, fp
 8002610:	4620      	mov	r0, r4
 8002612:	f004 faef 	bl	8006bf4 <HAL_PCD_DataOutStageCallback>
 8002616:	e731      	b.n	800247c <HAL_PCD_IRQHandler+0x5a4>
  if (ep->xfer_count > ep->xfer_len)
 8002618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800261a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261c:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8002620:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002622:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8002624:	f63f aec5 	bhi.w	80023b2 <HAL_PCD_IRQHandler+0x4da>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002628:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
 800262c:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8002630:	4696      	mov	lr, r2
 8002632:	6992      	ldr	r2, [r2, #24]
  len32b = (len + 3U) / 4U;
 8002634:	6cb9      	ldr	r1, [r7, #72]	; 0x48
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002636:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800263a:	fa1f fc82 	uxth.w	ip, r2
  len = ep->xfer_len - ep->xfer_count;
 800263e:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 8002640:	428a      	cmp	r2, r1
 8002642:	bf28      	it	cs
 8002644:	460a      	movcs	r2, r1
 8002646:	3203      	adds	r2, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002648:	ebbc 0f92 	cmp.w	ip, r2, lsr #2
 800264c:	f0c0 8097 	bcc.w	800277e <HAL_PCD_IRQHandler+0x8a6>
 8002650:	4652      	mov	r2, sl
 8002652:	9606      	str	r6, [sp, #24]
 8002654:	46ca      	mov	sl, r9
 8002656:	4626      	mov	r6, r4
 8002658:	46c1      	mov	r9, r8
 800265a:	4674      	mov	r4, lr
 800265c:	4690      	mov	r8, r2
 800265e:	e019      	b.n	8002694 <HAL_PCD_IRQHandler+0x7bc>
    len = ep->xfer_len - ep->xfer_count;
 8002660:	1aed      	subs	r5, r5, r3
 8002662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002664:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002666:	429d      	cmp	r5, r3
 8002668:	bf28      	it	cs
 800266a:	461d      	movcs	r5, r3
 800266c:	7c33      	ldrb	r3, [r6, #16]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	4642      	mov	r2, r8
 8002672:	b2ab      	uxth	r3, r5
 8002674:	4658      	mov	r0, fp
 8002676:	f001 fec1 	bl	80043fc <USB_WritePacket>
    ep->xfer_buff  += len;
 800267a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800267c:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800267e:	442b      	add	r3, r5
 8002680:	64fb      	str	r3, [r7, #76]	; 0x4c
    ep->xfer_count += len;
 8002682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002684:	b289      	uxth	r1, r1
    ep->xfer_count += len;
 8002686:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8002688:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800268a:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800268e:	65fb      	str	r3, [r7, #92]	; 0x5c
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002690:	d36d      	bcc.n	800276e <HAL_PCD_IRQHandler+0x896>
  if (ep->xfer_len <= ep->xfer_count)
 8002692:	6d7d      	ldr	r5, [r7, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002694:	42ab      	cmp	r3, r5
 8002696:	d3e3      	bcc.n	8002660 <HAL_PCD_IRQHandler+0x788>
 8002698:	4634      	mov	r4, r6
 800269a:	9e06      	ldr	r6, [sp, #24]
 800269c:	f8d4 b000 	ldr.w	fp, [r4]
 80026a0:	46c8      	mov	r8, r9
 80026a2:	46d1      	mov	r9, sl
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026a4:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026a6:	f006 020f 	and.w	r2, r6, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026aa:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026ae:	2501      	movs	r5, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026b0:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026b4:	fa05 f202 	lsl.w	r2, r5, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026b8:	ea23 0302 	bic.w	r3, r3, r2
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026bc:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026be:	634b      	str	r3, [r1, #52]	; 0x34
 80026c0:	e677      	b.n	80023b2 <HAL_PCD_IRQHandler+0x4da>
            (void)USB_FlushTxFifo(USBx, epnum);
 80026c2:	9804      	ldr	r0, [sp, #16]
 80026c4:	4631      	mov	r1, r6
 80026c6:	f001 fbb9 	bl	8003e3c <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80026ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	f000 80a8 	beq.w	8002824 <HAL_PCD_IRQHandler+0x94c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026d4:	2302      	movs	r3, #2
 80026d6:	f8c9 3008 	str.w	r3, [r9, #8]
 80026da:	e6a5      	b.n	8002428 <HAL_PCD_IRQHandler+0x550>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026e0:	421e      	tst	r6, r3
 80026e2:	f43f ac34 	beq.w	8001f4e <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026e6:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 80026ea:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80026ee:	f3c6 120a 	ubfx	r2, r6, #4, #11
 80026f2:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80026f6:	4628      	mov	r0, r5
 80026f8:	4616      	mov	r6, r2
 80026fa:	f001 fe95 	bl	8004428 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026fe:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002702:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002704:	4433      	add	r3, r6
 8002706:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800270a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800270e:	4433      	add	r3, r6
 8002710:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002714:	e41b      	b.n	8001f4e <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 8002716:	4620      	mov	r0, r4
 8002718:	f004 fa96 	bl	8006c48 <HAL_PCD_SuspendCallback>
 800271c:	e574      	b.n	8002208 <HAL_PCD_IRQHandler+0x330>
        HAL_PCD_DisconnectCallback(hpcd);
 800271e:	4620      	mov	r0, r4
 8002720:	f004 faba 	bl	8006c98 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	e564      	b.n	80021f2 <HAL_PCD_IRQHandler+0x31a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002728:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800272c:	4413      	add	r3, r2
 800272e:	64fb      	str	r3, [r7, #76]	; 0x4c
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002730:	2e00      	cmp	r6, #0
 8002732:	f47f ae63 	bne.w	80023fc <HAL_PCD_IRQHandler+0x524>
 8002736:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002738:	2b00      	cmp	r3, #0
 800273a:	f47f ae5f 	bne.w	80023fc <HAL_PCD_IRQHandler+0x524>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800273e:	6820      	ldr	r0, [r4, #0]
 8002740:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8002744:	f001 ff64 	bl	8004610 <USB_EP0_OutStart>
 8002748:	e658      	b.n	80023fc <HAL_PCD_IRQHandler+0x524>
  HAL_PCD_SetupStageCallback(hpcd);
 800274a:	4620      	mov	r0, r4
 800274c:	f004 fa4c 	bl	8006be8 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002750:	e698      	b.n	8002484 <HAL_PCD_IRQHandler+0x5ac>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002752:	0719      	lsls	r1, r3, #28
 8002754:	f140 8097 	bpl.w	8002886 <HAL_PCD_IRQHandler+0x9ae>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002758:	494d      	ldr	r1, [pc, #308]	; (8002890 <HAL_PCD_IRQHandler+0x9b8>)
 800275a:	458c      	cmp	ip, r1
 800275c:	f67f ae8e 	bls.w	800247c <HAL_PCD_IRQHandler+0x5a4>
 8002760:	0418      	lsls	r0, r3, #16
 8002762:	f57f ae8b 	bpl.w	800247c <HAL_PCD_IRQHandler+0x5a4>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276a:	6091      	str	r1, [r2, #8]
 800276c:	e686      	b.n	800247c <HAL_PCD_IRQHandler+0x5a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800276e:	4634      	mov	r4, r6
  if (ep->xfer_len <= ep->xfer_count)
 8002770:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002772:	f8d4 b000 	ldr.w	fp, [r4]
 8002776:	9e06      	ldr	r6, [sp, #24]
 8002778:	46c8      	mov	r8, r9
 800277a:	4658      	mov	r0, fp
 800277c:	46d1      	mov	r9, sl
  if (ep->xfer_len <= ep->xfer_count)
 800277e:	429d      	cmp	r5, r3
 8002780:	f63f ae17 	bhi.w	80023b2 <HAL_PCD_IRQHandler+0x4da>
 8002784:	e78e      	b.n	80026a4 <HAL_PCD_IRQHandler+0x7cc>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002786:	2900      	cmp	r1, #0
 8002788:	f6bf acbb 	bge.w	8002102 <HAL_PCD_IRQHandler+0x22a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278c:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800278e:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002792:	f851 0bf0 	ldr.w	r0, [r1], #240
 8002796:	f001 fded 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800279a:	6863      	ldr	r3, [r4, #4]
 800279c:	e4b1      	b.n	8002102 <HAL_PCD_IRQHandler+0x22a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800279e:	6820      	ldr	r0, [r4, #0]
 80027a0:	f504 7128 	add.w	r1, r4, #672	; 0x2a0
 80027a4:	f001 fde6 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027a8:	6863      	ldr	r3, [r4, #4]
 80027aa:	e40f      	b.n	8001fcc <HAL_PCD_IRQHandler+0xf4>
              ep->is_iso_incomplete = 0U;
 80027ac:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027ae:	4659      	mov	r1, fp
              ep->is_iso_incomplete = 0U;
 80027b0:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027b4:	4620      	mov	r0, r4
 80027b6:	f004 fa63 	bl	8006c80 <HAL_PCD_ISOOUTIncompleteCallback>
 80027ba:	e678      	b.n	80024ae <HAL_PCD_IRQHandler+0x5d6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027bc:	2900      	cmp	r1, #0
 80027be:	f6bf aca9 	bge.w	8002114 <HAL_PCD_IRQHandler+0x23c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027c2:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027c4:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027c8:	f504 718a 	add.w	r1, r4, #276	; 0x114
 80027cc:	f001 fdd2 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027d0:	6863      	ldr	r3, [r4, #4]
 80027d2:	e49f      	b.n	8002114 <HAL_PCD_IRQHandler+0x23c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027d4:	6820      	ldr	r0, [r4, #0]
 80027d6:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 80027da:	f001 fdcb 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027de:	6863      	ldr	r3, [r4, #4]
 80027e0:	f7ff bbfb 	b.w	8001fda <HAL_PCD_IRQHandler+0x102>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027e4:	2900      	cmp	r1, #0
 80027e6:	f6bf ac9e 	bge.w	8002126 <HAL_PCD_IRQHandler+0x24e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027ea:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027ec:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027f0:	f504 719c 	add.w	r1, r4, #312	; 0x138
 80027f4:	f001 fdbe 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027f8:	6863      	ldr	r3, [r4, #4]
 80027fa:	e494      	b.n	8002126 <HAL_PCD_IRQHandler+0x24e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027fc:	2900      	cmp	r1, #0
 80027fe:	f6bf ac9b 	bge.w	8002138 <HAL_PCD_IRQHandler+0x260>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002802:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002804:	f884 215f 	strb.w	r2, [r4, #351]	; 0x15f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002808:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 800280c:	f001 fdb2 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002810:	6863      	ldr	r3, [r4, #4]
 8002812:	e491      	b.n	8002138 <HAL_PCD_IRQHandler+0x260>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002814:	0419      	lsls	r1, r3, #16
 8002816:	d4a6      	bmi.n	8002766 <HAL_PCD_IRQHandler+0x88e>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002818:	069b      	lsls	r3, r3, #26
 800281a:	f57f aef8 	bpl.w	800260e <HAL_PCD_IRQHandler+0x736>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800281e:	2120      	movs	r1, #32
 8002820:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002822:	e6f4      	b.n	800260e <HAL_PCD_IRQHandler+0x736>
              ep->is_iso_incomplete = 0U;
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800282c:	4651      	mov	r1, sl
 800282e:	4620      	mov	r0, r4
 8002830:	f004 fa2a 	bl	8006c88 <HAL_PCD_ISOINIncompleteCallback>
 8002834:	e74e      	b.n	80026d4 <HAL_PCD_IRQHandler+0x7fc>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002836:	2900      	cmp	r1, #0
 8002838:	f6bf ac87 	bge.w	800214a <HAL_PCD_IRQHandler+0x272>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800283c:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800283e:	f884 2183 	strb.w	r2, [r4, #387]	; 0x183
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002842:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 8002846:	f001 fd95 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800284a:	6863      	ldr	r3, [r4, #4]
 800284c:	e47d      	b.n	800214a <HAL_PCD_IRQHandler+0x272>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800284e:	6820      	ldr	r0, [r4, #0]
 8002850:	f504 714c 	add.w	r1, r4, #816	; 0x330
 8002854:	f001 fd8e 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002858:	6863      	ldr	r3, [r4, #4]
 800285a:	f7ff bbd3 	b.w	8002004 <HAL_PCD_IRQHandler+0x12c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800285e:	2900      	cmp	r1, #0
 8002860:	f6bf ac7c 	bge.w	800215c <HAL_PCD_IRQHandler+0x284>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002864:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002866:	f884 21a7 	strb.w	r2, [r4, #423]	; 0x1a7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800286a:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 800286e:	f001 fd81 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002872:	6863      	ldr	r3, [r4, #4]
 8002874:	e472      	b.n	800215c <HAL_PCD_IRQHandler+0x284>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002876:	6820      	ldr	r0, [r4, #0]
 8002878:	f504 7155 	add.w	r1, r4, #852	; 0x354
 800287c:	f001 fd7a 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002880:	6863      	ldr	r3, [r4, #4]
 8002882:	f7ff bbc6 	b.w	8002012 <HAL_PCD_IRQHandler+0x13a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002886:	0699      	lsls	r1, r3, #26
 8002888:	d572      	bpl.n	8002970 <HAL_PCD_IRQHandler+0xa98>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800288a:	2120      	movs	r1, #32
 800288c:	6091      	str	r1, [r2, #8]
 800288e:	e5f5      	b.n	800247c <HAL_PCD_IRQHandler+0x5a4>
 8002890:	4f54300a 	.word	0x4f54300a
 8002894:	4f54310a 	.word	0x4f54310a
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002898:	2900      	cmp	r1, #0
 800289a:	f6bf ac68 	bge.w	800216e <HAL_PCD_IRQHandler+0x296>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800289e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028a0:	f884 21cb 	strb.w	r2, [r4, #459]	; 0x1cb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028a4:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 80028a8:	f001 fd64 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	e45e      	b.n	800216e <HAL_PCD_IRQHandler+0x296>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028b0:	6820      	ldr	r0, [r4, #0]
 80028b2:	f504 715e 	add.w	r1, r4, #888	; 0x378
 80028b6:	f001 fd5d 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ba:	6863      	ldr	r3, [r4, #4]
 80028bc:	f7ff bbb0 	b.w	8002020 <HAL_PCD_IRQHandler+0x148>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028c0:	2900      	cmp	r1, #0
 80028c2:	f6bf ac5d 	bge.w	8002180 <HAL_PCD_IRQHandler+0x2a8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028c6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028c8:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028cc:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 80028d0:	f001 fd50 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d4:	6863      	ldr	r3, [r4, #4]
 80028d6:	e453      	b.n	8002180 <HAL_PCD_IRQHandler+0x2a8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	f504 7167 	add.w	r1, r4, #924	; 0x39c
 80028de:	f001 fd49 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e2:	6863      	ldr	r3, [r4, #4]
 80028e4:	f7ff bba3 	b.w	800202e <HAL_PCD_IRQHandler+0x156>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e8:	2900      	cmp	r1, #0
 80028ea:	f6bf ac52 	bge.w	8002192 <HAL_PCD_IRQHandler+0x2ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028ee:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028f0:	f884 2213 	strb.w	r2, [r4, #531]	; 0x213
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028f4:	f504 7104 	add.w	r1, r4, #528	; 0x210
 80028f8:	f001 fd3c 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028fc:	6863      	ldr	r3, [r4, #4]
 80028fe:	e448      	b.n	8002192 <HAL_PCD_IRQHandler+0x2ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002900:	6820      	ldr	r0, [r4, #0]
 8002902:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 8002906:	f001 fd35 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800290a:	6863      	ldr	r3, [r4, #4]
 800290c:	f7ff bb96 	b.w	800203c <HAL_PCD_IRQHandler+0x164>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002910:	2900      	cmp	r1, #0
 8002912:	f6bf ac47 	bge.w	80021a4 <HAL_PCD_IRQHandler+0x2cc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002916:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002918:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800291c:	f504 710d 	add.w	r1, r4, #564	; 0x234
 8002920:	f001 fd28 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002924:	6863      	ldr	r3, [r4, #4]
 8002926:	e43d      	b.n	80021a4 <HAL_PCD_IRQHandler+0x2cc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002928:	6820      	ldr	r0, [r4, #0]
 800292a:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 800292e:	f001 fd21 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002932:	6863      	ldr	r3, [r4, #4]
 8002934:	f7ff bb89 	b.w	800204a <HAL_PCD_IRQHandler+0x172>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002938:	2900      	cmp	r1, #0
 800293a:	f6bf ac3c 	bge.w	80021b6 <HAL_PCD_IRQHandler+0x2de>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800293e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002940:	f884 225b 	strb.w	r2, [r4, #603]	; 0x25b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002944:	f504 7116 	add.w	r1, r4, #600	; 0x258
 8002948:	f001 fd14 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800294c:	6863      	ldr	r3, [r4, #4]
 800294e:	e432      	b.n	80021b6 <HAL_PCD_IRQHandler+0x2de>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002950:	6820      	ldr	r0, [r4, #0]
 8002952:	f504 6181 	add.w	r1, r4, #1032	; 0x408
 8002956:	f001 fd0d 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800295a:	6863      	ldr	r3, [r4, #4]
 800295c:	f7ff bb7c 	b.w	8002058 <HAL_PCD_IRQHandler+0x180>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002960:	6820      	ldr	r0, [r4, #0]
 8002962:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8002966:	f001 fd05 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296a:	6863      	ldr	r3, [r4, #4]
 800296c:	f7ff bb7b 	b.w	8002066 <HAL_PCD_IRQHandler+0x18e>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002970:	f013 0f28 	tst.w	r3, #40	; 0x28
 8002974:	f47f ad82 	bne.w	800247c <HAL_PCD_IRQHandler+0x5a4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002978:	491b      	ldr	r1, [pc, #108]	; (80029e8 <HAL_PCD_IRQHandler+0xb10>)
 800297a:	458c      	cmp	ip, r1
 800297c:	d902      	bls.n	8002984 <HAL_PCD_IRQHandler+0xaac>
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	f53f aef1 	bmi.w	8002766 <HAL_PCD_IRQHandler+0x88e>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002984:	6911      	ldr	r1, [r2, #16]
 8002986:	f8da 2298 	ldr.w	r2, [sl, #664]	; 0x298
 800298a:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800298e:	1a52      	subs	r2, r2, r1
 8002990:	f8ca 229c 	str.w	r2, [sl, #668]	; 0x29c
        if (epnum == 0U)
 8002994:	f1b9 0f00 	cmp.w	r9, #0
 8002998:	f47f ae39 	bne.w	800260e <HAL_PCD_IRQHandler+0x736>
          if (ep->xfer_len == 0U)
 800299c:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
 80029a0:	b1d9      	cbz	r1, 80029da <HAL_PCD_IRQHandler+0xb02>
            ep->xfer_buff += ep->xfer_count;
 80029a2:	f8d4 128c 	ldr.w	r1, [r4, #652]	; 0x28c
 80029a6:	4411      	add	r1, r2
 80029a8:	f8c4 128c 	str.w	r1, [r4, #652]	; 0x28c
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029ac:	e62f      	b.n	800260e <HAL_PCD_IRQHandler+0x736>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029ae:	6820      	ldr	r0, [r4, #0]
 80029b0:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 80029b4:	f001 fcde 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	f7ff bb5b 	b.w	8002074 <HAL_PCD_IRQHandler+0x19c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029be:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80029c2:	4649      	mov	r1, r9
 80029c4:	f001 fe24 	bl	8004610 <USB_EP0_OutStart>
 80029c8:	e621      	b.n	800260e <HAL_PCD_IRQHandler+0x736>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029ca:	6820      	ldr	r0, [r4, #0]
 80029cc:	f204 4174 	addw	r1, r4, #1140	; 0x474
 80029d0:	f001 fcd0 	bl	8004374 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	f7ff bb54 	b.w	8002082 <HAL_PCD_IRQHandler+0x1aa>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029da:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80029de:	2101      	movs	r1, #1
 80029e0:	f001 fe16 	bl	8004610 <USB_EP0_OutStart>
 80029e4:	e613      	b.n	800260e <HAL_PCD_IRQHandler+0x736>
 80029e6:	bf00      	nop
 80029e8:	4f54300a 	.word	0x4f54300a

080029ec <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80029ec:	f890 24bc 	ldrb.w	r2, [r0, #1212]	; 0x4bc
 80029f0:	2a01      	cmp	r2, #1
 80029f2:	d00d      	beq.n	8002a10 <HAL_PCD_SetAddress+0x24>
{
 80029f4:	b510      	push	{r4, lr}
 80029f6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80029f8:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029fa:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80029fc:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a00:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a04:	f001 fd90 	bl	8004528 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8002a0e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002a10:	2002      	movs	r0, #2
}
 8002a12:	4770      	bx	lr

08002a14 <HAL_PCD_EP_Open>:
{
 8002a14:	b510      	push	{r4, lr}
 8002a16:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8002a1a:	0609      	lsls	r1, r1, #24
{
 8002a1c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002a1e:	d427      	bmi.n	8002a70 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a20:	f04f 0c24 	mov.w	ip, #36	; 0x24
 8002a24:	fb0c 0c0e 	mla	ip, ip, lr, r0
 8002a28:	f50c 711f 	add.w	r1, ip, #636	; 0x27c
    ep->is_in = 0U;
 8002a2c:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8002a30:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002a34:	2000      	movs	r0, #0
 8002a36:	f88c 027d 	strb.w	r0, [ip, #637]	; 0x27d
  ep->maxpacket = ep_mps;
 8002a3a:	60ca      	str	r2, [r1, #12]
  if (ep->is_in != 0U)
 8002a3c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8002a42:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8002a44:	b10a      	cbz	r2, 8002a4a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8002a46:	f8a1 e008 	strh.w	lr, [r1, #8]
  if (ep_type == EP_TYPE_BULK)
 8002a4a:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002a4c:	bf04      	itt	eq
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8002a52:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d018      	beq.n	8002a8c <HAL_PCD_EP_Open+0x78>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a60:	6820      	ldr	r0, [r4, #0]
 8002a62:	f001 fa21 	bl	8003ea8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a66:	2300      	movs	r3, #0
 8002a68:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  return ret;
 8002a6c:	4618      	mov	r0, r3
}
 8002a6e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a70:	2024      	movs	r0, #36	; 0x24
 8002a72:	fb00 400e 	mla	r0, r0, lr, r4
 8002a76:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8002a7a:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8002a7e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002a82:	f04f 0c01 	mov.w	ip, #1
 8002a86:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 8002a8a:	e7d6      	b.n	8002a3a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8002a8c:	2002      	movs	r0, #2
}
 8002a8e:	bd10      	pop	{r4, pc}

08002a90 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002a90:	f001 030f 	and.w	r3, r1, #15
    ep->is_in = 1U;
 8002a94:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8002a98:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a9c:	f04f 0124 	mov.w	r1, #36	; 0x24
{
 8002aa0:	b510      	push	{r4, lr}
    ep->is_in = 1U;
 8002aa2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8002aa6:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa8:	fb01 0103 	mla	r1, r1, r3, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002aac:	d113      	bne.n	8002ad6 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ab8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002aba:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d012      	beq.n	8002ae8 <HAL_PCD_EP_Close+0x58>
 8002ac2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ac4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002ac6:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002aca:	f001 fa39 	bl	8003f40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8002ad4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad6:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ade:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002ae0:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d1ec      	bne.n	8002ac2 <HAL_PCD_EP_Close+0x32>
 8002ae8:	2002      	movs	r0, #2
}
 8002aea:	bd10      	pop	{r4, pc}

08002aec <HAL_PCD_EP_Receive>:
{
 8002aec:	b510      	push	{r4, lr}
 8002aee:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8002af2:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8002af6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afa:	2124      	movs	r1, #36	; 0x24
  ep->xfer_len = len;
 8002afc:	f8cc 3294 	str.w	r3, [ip, #660]	; 0x294
  ep->xfer_count = 0U;
 8002b00:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8002b02:	f8cc 228c 	str.w	r2, [ip, #652]	; 0x28c
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b06:	f88c 427c 	strb.w	r4, [ip, #636]	; 0x27c
  ep->xfer_count = 0U;
 8002b0a:	f8cc 329c 	str.w	r3, [ip, #668]	; 0x29c
  ep->is_in = 0U;
 8002b0e:	f88c 327d 	strb.w	r3, [ip, #637]	; 0x27d
  if (hpcd->Init.dma_enable == 1U)
 8002b12:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b14:	fb01 0104 	mla	r1, r1, r4, r0
  if (hpcd->Init.dma_enable == 1U)
 8002b18:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002b1a:	bf08      	it	eq
 8002b1c:	f8cc 2290 	streq.w	r2, [ip, #656]	; 0x290
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b20:	6800      	ldr	r0, [r0, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b26:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b28:	b91c      	cbnz	r4, 8002b32 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b2a:	f001 fb77 	bl	800421c <USB_EP0StartXfer>
}
 8002b2e:	2000      	movs	r0, #0
 8002b30:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b32:	f001 fa67 	bl	8004004 <USB_EPStartXfer>
}
 8002b36:	2000      	movs	r0, #0
 8002b38:	bd10      	pop	{r4, pc}
 8002b3a:	bf00      	nop

08002b3c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b3c:	f001 010f 	and.w	r1, r1, #15
 8002b40:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002b44:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8002b48:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop

08002b50 <HAL_PCD_EP_Transmit>:
{
 8002b50:	b510      	push	{r4, lr}
 8002b52:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8002b56:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8002b5a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5e:	2124      	movs	r1, #36	; 0x24
  ep->xfer_len = len;
 8002b60:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->xfer_count = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  ep->is_in = 1U;
 8002b6a:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8002b6c:	f8cc 204c 	str.w	r2, [ip, #76]	; 0x4c
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b70:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 8002b74:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8002b78:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7a:	fb01 0104 	mla	r1, r1, r4, r0
  if (hpcd->Init.dma_enable == 1U)
 8002b7e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002b80:	bf08      	it	eq
 8002b82:	f8cc 2050 	streq.w	r2, [ip, #80]	; 0x50
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b86:	6800      	ldr	r0, [r0, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b88:	313c      	adds	r1, #60	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b8a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b8c:	b91c      	cbnz	r4, 8002b96 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b8e:	f001 fb45 	bl	800421c <USB_EP0StartXfer>
}
 8002b92:	2000      	movs	r0, #0
 8002b94:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b96:	f001 fa35 	bl	8004004 <USB_EPStartXfer>
}
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	bd10      	pop	{r4, pc}
 8002b9e:	bf00      	nop

08002ba0 <HAL_PCD_EP_SetStall>:
{
 8002ba0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ba2:	6843      	ldr	r3, [r0, #4]
 8002ba4:	f001 050f 	and.w	r5, r1, #15
 8002ba8:	429d      	cmp	r5, r3
 8002baa:	d833      	bhi.n	8002c14 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8002bac:	060b      	lsls	r3, r1, #24
 8002bae:	4604      	mov	r4, r0
 8002bb0:	d41c      	bmi.n	8002bec <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8002bb2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8002bb6:	2224      	movs	r2, #36	; 0x24
 8002bb8:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8002bbc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8002bc0:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  ep->is_stall = 1U;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bce:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002bd0:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d01b      	beq.n	8002c10 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bd8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002bda:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bde:	f001 fc49 	bl	8004474 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002be2:	b1cd      	cbz	r5, 8002c18 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8002bec:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf0:	2124      	movs	r1, #36	; 0x24
 8002bf2:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8002bf6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002bfa:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bfc:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8002c02:	2301      	movs	r3, #1
 8002c04:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c06:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002c08:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d1e3      	bne.n	8002bd8 <HAL_PCD_EP_SetStall+0x38>
 8002c10:	2002      	movs	r0, #2
}
 8002c12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
}
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c18:	7c21      	ldrb	r1, [r4, #16]
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8002c20:	f001 fcf6 	bl	8004610 <USB_EP0_OutStart>
 8002c24:	e7de      	b.n	8002be4 <HAL_PCD_EP_SetStall+0x44>
 8002c26:	bf00      	nop

08002c28 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c28:	6842      	ldr	r2, [r0, #4]
{
 8002c2a:	b538      	push	{r3, r4, r5, lr}
 8002c2c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d82e      	bhi.n	8002c92 <HAL_PCD_EP_ClrStall+0x6a>
    ep->is_in = 1U;
 8002c34:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8002c38:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c3c:	f04f 0124 	mov.w	r1, #36	; 0x24
 8002c40:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8002c42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c46:	fb01 0103 	mla	r1, r1, r3, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002c4a:	d115      	bne.n	8002c78 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c4c:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8002c50:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8002c52:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8002c54:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->is_stall = 0U;
 8002c58:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002c5c:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d014      	beq.n	8002c8e <HAL_PCD_EP_ClrStall+0x66>
 8002c64:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c66:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002c68:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c6c:	f001 fc30 	bl	80044d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c70:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
  return HAL_OK;
 8002c74:	4628      	mov	r0, r5
}
 8002c76:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8002c7a:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 8002c7c:	2500      	movs	r5, #0
    ep->is_in = 1U;
 8002c7e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->is_stall = 0U;
 8002c82:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c84:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002c86:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d1ea      	bne.n	8002c64 <HAL_PCD_EP_ClrStall+0x3c>
 8002c8e:	2002      	movs	r0, #2
}
 8002c90:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002c92:	2001      	movs	r0, #1
}
 8002c94:	bd38      	pop	{r3, r4, r5, pc}
 8002c96:	bf00      	nop

08002c98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c98:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c9a:	6804      	ldr	r4, [r0, #0]
 8002c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8002c9e:	b931      	cbnz	r1, 8002cae <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ca0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8002ca4:	62a2      	str	r2, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cac:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8002cb0:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cb2:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_PCDEx_SetTxFiFo+0x38>
 8002cb8:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cba:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8002cbe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8002cc2:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cc4:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cca:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002cce:	d3f4      	bcc.n	8002cba <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002cd0:	3140      	adds	r1, #64	; 0x40
 8002cd2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8002cd6:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 8002cda:	6062      	str	r2, [r4, #4]
}
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002ce4:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8002ce6:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002ce8:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002cea:	4770      	bx	lr

08002cec <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	f000 81a2 	beq.w	800303a <HAL_RCC_OscConfig+0x34a>
{
 8002cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	6803      	ldr	r3, [r0, #0]
 8002cfc:	07dd      	lsls	r5, r3, #31
{
 8002cfe:	b082      	sub	sp, #8
 8002d00:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	d52f      	bpl.n	8002d64 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d04:	499e      	ldr	r1, [pc, #632]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002d06:	688a      	ldr	r2, [r1, #8]
 8002d08:	f002 020c 	and.w	r2, r2, #12
 8002d0c:	2a04      	cmp	r2, #4
 8002d0e:	f000 80ed 	beq.w	8002eec <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d12:	688a      	ldr	r2, [r1, #8]
 8002d14:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d18:	2a08      	cmp	r2, #8
 8002d1a:	f000 80e3 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1e:	6863      	ldr	r3, [r4, #4]
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d24:	f000 80ec 	beq.w	8002f00 <HAL_RCC_OscConfig+0x210>
 8002d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d2c:	f000 8175 	beq.w	800301a <HAL_RCC_OscConfig+0x32a>
 8002d30:	4d93      	ldr	r5, [pc, #588]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002d32:	682a      	ldr	r2, [r5, #0]
 8002d34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d38:	602a      	str	r2, [r5, #0]
 8002d3a:	682a      	ldr	r2, [r5, #0]
 8002d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d40:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 80e1 	bne.w	8002f0a <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fc86 	bl	8001658 <HAL_GetTick>
 8002d4c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e005      	b.n	8002d5c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe fc82 	bl	8001658 <HAL_GetTick>
 8002d54:	1b80      	subs	r0, r0, r6
 8002d56:	2864      	cmp	r0, #100	; 0x64
 8002d58:	f200 8101 	bhi.w	8002f5e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	039b      	lsls	r3, r3, #14
 8002d60:	d4f6      	bmi.n	8002d50 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	079f      	lsls	r7, r3, #30
 8002d66:	d528      	bpl.n	8002dba <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d68:	4a85      	ldr	r2, [pc, #532]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002d6a:	6891      	ldr	r1, [r2, #8]
 8002d6c:	f011 0f0c 	tst.w	r1, #12
 8002d70:	f000 8090 	beq.w	8002e94 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d74:	6891      	ldr	r1, [r2, #8]
 8002d76:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d7a:	2908      	cmp	r1, #8
 8002d7c:	f000 8086 	beq.w	8002e8c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d80:	68e3      	ldr	r3, [r4, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 810e 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b7e      	ldr	r3, [pc, #504]	; (8002f84 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8a:	4e7d      	ldr	r6, [pc, #500]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d90:	f7fe fc62 	bl	8001658 <HAL_GetTick>
 8002d94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d98:	f7fe fc5e 	bl	8001658 <HAL_GetTick>
 8002d9c:	1b40      	subs	r0, r0, r5
 8002d9e:	2802      	cmp	r0, #2
 8002da0:	f200 80dd 	bhi.w	8002f5e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	6833      	ldr	r3, [r6, #0]
 8002da6:	0798      	lsls	r0, r3, #30
 8002da8:	d5f6      	bpl.n	8002d98 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	6833      	ldr	r3, [r6, #0]
 8002dac:	6922      	ldr	r2, [r4, #16]
 8002dae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002db2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002db6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	071a      	lsls	r2, r3, #28
 8002dbc:	d451      	bmi.n	8002e62 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbe:	0758      	lsls	r0, r3, #29
 8002dc0:	d52f      	bpl.n	8002e22 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc2:	4a6f      	ldr	r2, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002dc4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002dc6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002dca:	d07f      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002dcc:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4e6e      	ldr	r6, [pc, #440]	; (8002f88 <HAL_RCC_OscConfig+0x298>)
 8002dd0:	6833      	ldr	r3, [r6, #0]
 8002dd2:	05d9      	lsls	r1, r3, #23
 8002dd4:	f140 80b3 	bpl.w	8002f3e <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	68a3      	ldr	r3, [r4, #8]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	f000 80c3 	beq.w	8002f66 <HAL_RCC_OscConfig+0x276>
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	f000 812c 	beq.w	800303e <HAL_RCC_OscConfig+0x34e>
 8002de6:	4e66      	ldr	r6, [pc, #408]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002de8:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	6732      	str	r2, [r6, #112]	; 0x70
 8002df0:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002df2:	f022 0204 	bic.w	r2, r2, #4
 8002df6:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 80b9 	bne.w	8002f70 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fc2b 	bl	8001658 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e06:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e08:	e005      	b.n	8002e16 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe fc25 	bl	8001658 <HAL_GetTick>
 8002e0e:	1bc0      	subs	r0, r0, r7
 8002e10:	4540      	cmp	r0, r8
 8002e12:	f200 80a4 	bhi.w	8002f5e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e16:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002e18:	0798      	lsls	r0, r3, #30
 8002e1a:	d4f6      	bmi.n	8002e0a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1c:	2d00      	cmp	r5, #0
 8002e1e:	f040 8106 	bne.w	800302e <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e22:	69a0      	ldr	r0, [r4, #24]
 8002e24:	b1c8      	cbz	r0, 8002e5a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e26:	4d56      	ldr	r5, [pc, #344]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002e28:	68ab      	ldr	r3, [r5, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	f000 80c9 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e34:	4b53      	ldr	r3, [pc, #332]	; (8002f84 <HAL_RCC_OscConfig+0x294>)
 8002e36:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e38:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3c:	f000 8109 	beq.w	8003052 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe fc0a 	bl	8001658 <HAL_GetTick>
 8002e44:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	e005      	b.n	8002e54 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fc06 	bl	8001658 <HAL_GetTick>
 8002e4c:	1b00      	subs	r0, r0, r4
 8002e4e:	2802      	cmp	r0, #2
 8002e50:	f200 8085 	bhi.w	8002f5e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	019b      	lsls	r3, r3, #6
 8002e58:	d4f6      	bmi.n	8002e48 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2000      	movs	r0, #0
}
 8002e5c:	b002      	add	sp, #8
 8002e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e62:	6963      	ldr	r3, [r4, #20]
 8002e64:	b30b      	cbz	r3, 8002eaa <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e68:	4e45      	ldr	r6, [pc, #276]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002e70:	f7fe fbf2 	bl	8001658 <HAL_GetTick>
 8002e74:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	e004      	b.n	8002e82 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fe fbee 	bl	8001658 <HAL_GetTick>
 8002e7c:	1b40      	subs	r0, r0, r5
 8002e7e:	2802      	cmp	r0, #2
 8002e80:	d86d      	bhi.n	8002f5e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002e84:	079b      	lsls	r3, r3, #30
 8002e86:	d5f7      	bpl.n	8002e78 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	e798      	b.n	8002dbe <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8c:	6852      	ldr	r2, [r2, #4]
 8002e8e:	0256      	lsls	r6, r2, #9
 8002e90:	f53f af76 	bmi.w	8002d80 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e94:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	0795      	lsls	r5, r2, #30
 8002e9a:	d544      	bpl.n	8002f26 <HAL_RCC_OscConfig+0x236>
 8002e9c:	68e2      	ldr	r2, [r4, #12]
 8002e9e:	2a01      	cmp	r2, #1
 8002ea0:	d041      	beq.n	8002f26 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8002ea2:	2001      	movs	r0, #1
}
 8002ea4:	b002      	add	sp, #8
 8002ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	4a36      	ldr	r2, [pc, #216]	; (8002f84 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	4e34      	ldr	r6, [pc, #208]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8002eae:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fbd1 	bl	8001658 <HAL_GetTick>
 8002eb6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e004      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fe fbcd 	bl	8001658 <HAL_GetTick>
 8002ebe:	1b40      	subs	r0, r0, r5
 8002ec0:	2802      	cmp	r0, #2
 8002ec2:	d84c      	bhi.n	8002f5e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002ec6:	079f      	lsls	r7, r3, #30
 8002ec8:	d4f7      	bmi.n	8002eba <HAL_RCC_OscConfig+0x1ca>
 8002eca:	e7dd      	b.n	8002e88 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ee0:	2501      	movs	r5, #1
 8002ee2:	e774      	b.n	8002dce <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee4:	684a      	ldr	r2, [r1, #4]
 8002ee6:	0250      	lsls	r0, r2, #9
 8002ee8:	f57f af19 	bpl.w	8002d1e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	0391      	lsls	r1, r2, #14
 8002ef2:	f57f af37 	bpl.w	8002d64 <HAL_RCC_OscConfig+0x74>
 8002ef6:	6862      	ldr	r2, [r4, #4]
 8002ef8:	2a00      	cmp	r2, #0
 8002efa:	f47f af33 	bne.w	8002d64 <HAL_RCC_OscConfig+0x74>
 8002efe:	e7d0      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f00:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002f02:	6813      	ldr	r3, [r2, #0]
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fba5 	bl	8001658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4e1c      	ldr	r6, [pc, #112]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8002f10:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	e004      	b.n	8002f1e <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe fba0 	bl	8001658 <HAL_GetTick>
 8002f18:	1b40      	subs	r0, r0, r5
 8002f1a:	2864      	cmp	r0, #100	; 0x64
 8002f1c:	d81f      	bhi.n	8002f5e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	6833      	ldr	r3, [r6, #0]
 8002f20:	039a      	lsls	r2, r3, #14
 8002f22:	d5f7      	bpl.n	8002f14 <HAL_RCC_OscConfig+0x224>
 8002f24:	e71d      	b.n	8002d62 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	4916      	ldr	r1, [pc, #88]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002f28:	6920      	ldr	r0, [r4, #16]
 8002f2a:	680a      	ldr	r2, [r1, #0]
 8002f2c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002f30:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002f34:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	071a      	lsls	r2, r3, #28
 8002f38:	f57f af41 	bpl.w	8002dbe <HAL_RCC_OscConfig+0xce>
 8002f3c:	e791      	b.n	8002e62 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	6833      	ldr	r3, [r6, #0]
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002f46:	f7fe fb87 	bl	8001658 <HAL_GetTick>
 8002f4a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	6833      	ldr	r3, [r6, #0]
 8002f4e:	05da      	lsls	r2, r3, #23
 8002f50:	f53f af42 	bmi.w	8002dd8 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fe fb80 	bl	8001658 <HAL_GetTick>
 8002f58:	1bc0      	subs	r0, r0, r7
 8002f5a:	2802      	cmp	r0, #2
 8002f5c:	d9f6      	bls.n	8002f4c <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8002f5e:	2003      	movs	r0, #3
}
 8002f60:	b002      	add	sp, #8
 8002f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f66:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
 8002f68:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002f70:	f7fe fb72 	bl	8001658 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	4f02      	ldr	r7, [pc, #8]	; (8002f80 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8002f76:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	e00b      	b.n	8002f96 <HAL_RCC_OscConfig+0x2a6>
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	42470000 	.word	0x42470000
 8002f88:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fb64 	bl	8001658 <HAL_GetTick>
 8002f90:	1b80      	subs	r0, r0, r6
 8002f92:	4540      	cmp	r0, r8
 8002f94:	d8e3      	bhi.n	8002f5e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f98:	079b      	lsls	r3, r3, #30
 8002f9a:	d5f7      	bpl.n	8002f8c <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8002f9c:	2d00      	cmp	r5, #0
 8002f9e:	f43f af40 	beq.w	8002e22 <HAL_RCC_OscConfig+0x132>
 8002fa2:	e044      	b.n	800302e <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8002fa4:	4a42      	ldr	r2, [pc, #264]	; (80030b0 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	4e43      	ldr	r6, [pc, #268]	; (80030b4 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8002fa8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002faa:	f7fe fb55 	bl	8001658 <HAL_GetTick>
 8002fae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb0:	e004      	b.n	8002fbc <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fb51 	bl	8001658 <HAL_GetTick>
 8002fb6:	1b40      	subs	r0, r0, r5
 8002fb8:	2802      	cmp	r0, #2
 8002fba:	d8d0      	bhi.n	8002f5e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbc:	6833      	ldr	r3, [r6, #0]
 8002fbe:	0799      	lsls	r1, r3, #30
 8002fc0:	d4f7      	bmi.n	8002fb2 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	e6f9      	b.n	8002dba <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc6:	2801      	cmp	r0, #1
 8002fc8:	f43f af48 	beq.w	8002e5c <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002fcc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fce:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd4:	4291      	cmp	r1, r2
 8002fd6:	f47f af64 	bne.w	8002ea2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fdc:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe0:	4291      	cmp	r1, r2
 8002fe2:	f47f af5e 	bne.w	8002ea2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fe8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002fec:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fee:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002ff2:	f47f af56 	bne.w	8002ea2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ff8:	0852      	lsrs	r2, r2, #1
 8002ffa:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002ffe:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003000:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003004:	f47f af4d 	bne.w	8002ea2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003008:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800300a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8003012:	bf14      	ite	ne
 8003014:	2001      	movne	r0, #1
 8003016:	2000      	moveq	r0, #0
 8003018:	e720      	b.n	8002e5c <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301a:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <HAL_RCC_OscConfig+0x3c4>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800302a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800302c:	e76d      	b.n	8002f0a <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800302e:	4a21      	ldr	r2, [pc, #132]	; (80030b4 <HAL_RCC_OscConfig+0x3c4>)
 8003030:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003036:	6413      	str	r3, [r2, #64]	; 0x40
 8003038:	e6f3      	b.n	8002e22 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 800303a:	2001      	movs	r0, #1
}
 800303c:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCC_OscConfig+0x3c4>)
 8003040:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003042:	f042 0204 	orr.w	r2, r2, #4
 8003046:	671a      	str	r2, [r3, #112]	; 0x70
 8003048:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003050:	e78e      	b.n	8002f70 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8003052:	f7fe fb01 	bl	8001658 <HAL_GetTick>
 8003056:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003058:	e005      	b.n	8003066 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fe fafd 	bl	8001658 <HAL_GetTick>
 800305e:	1b80      	subs	r0, r0, r6
 8003060:	2802      	cmp	r0, #2
 8003062:	f63f af7c 	bhi.w	8002f5e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	0199      	lsls	r1, r3, #6
 800306a:	d4f6      	bmi.n	800305a <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800306c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003070:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003072:	430b      	orrs	r3, r1
 8003074:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003078:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800307c:	0852      	lsrs	r2, r2, #1
 800307e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003082:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003084:	490a      	ldr	r1, [pc, #40]	; (80030b0 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003086:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800308a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800308e:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003090:	f7fe fae2 	bl	8001658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	4d07      	ldr	r5, [pc, #28]	; (80030b4 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8003096:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003098:	e005      	b.n	80030a6 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309a:	f7fe fadd 	bl	8001658 <HAL_GetTick>
 800309e:	1b00      	subs	r0, r0, r4
 80030a0:	2802      	cmp	r0, #2
 80030a2:	f63f af5c 	bhi.w	8002f5e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	019a      	lsls	r2, r3, #6
 80030aa:	d5f6      	bpl.n	800309a <HAL_RCC_OscConfig+0x3aa>
 80030ac:	e6d5      	b.n	8002e5a <HAL_RCC_OscConfig+0x16a>
 80030ae:	bf00      	nop
 80030b0:	42470000 	.word	0x42470000
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b8:	4916      	ldr	r1, [pc, #88]	; (8003114 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80030ba:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030bc:	688b      	ldr	r3, [r1, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d01b      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x46>
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d117      	bne.n	80030fa <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030cc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d8:	d113      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030da:	480f      	ldr	r0, [pc, #60]	; (8003118 <HAL_RCC_GetSysClockFreq+0x60>)
 80030dc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80030e0:	fba1 0100 	umull	r0, r1, r1, r0
 80030e4:	f7fd fd68 	bl	8000bb8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_RCC_GetSysClockFreq+0x5c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80030f0:	3301      	adds	r3, #1
 80030f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80030f4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80030f8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80030fa:	4807      	ldr	r0, [pc, #28]	; (8003118 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80030fc:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fe:	4807      	ldr	r0, [pc, #28]	; (800311c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003100:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003102:	4806      	ldr	r0, [pc, #24]	; (800311c <HAL_RCC_GetSysClockFreq+0x64>)
 8003104:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003108:	2300      	movs	r3, #0
 800310a:	fba1 0100 	umull	r0, r1, r1, r0
 800310e:	f7fd fd53 	bl	8000bb8 <__aeabi_uldivmod>
 8003112:	e7e9      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x30>
 8003114:	40023800 	.word	0x40023800
 8003118:	00f42400 	.word	0x00f42400
 800311c:	007a1200 	.word	0x007a1200

08003120 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003120:	2800      	cmp	r0, #0
 8003122:	f000 8087 	beq.w	8003234 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003126:	4a48      	ldr	r2, [pc, #288]	; (8003248 <HAL_RCC_ClockConfig+0x128>)
 8003128:	6813      	ldr	r3, [r2, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	428b      	cmp	r3, r1
{
 8003130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003134:	460d      	mov	r5, r1
 8003136:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	d209      	bcs.n	800314e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	b2cb      	uxtb	r3, r1
 800313c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	6813      	ldr	r3, [r2, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	428b      	cmp	r3, r1
 8003146:	d002      	beq.n	800314e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003148:	2001      	movs	r0, #1
}
 800314a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	0798      	lsls	r0, r3, #30
 8003152:	d514      	bpl.n	800317e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	0759      	lsls	r1, r3, #29
 8003156:	d504      	bpl.n	8003162 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	493c      	ldr	r1, [pc, #240]	; (800324c <HAL_RCC_ClockConfig+0x12c>)
 800315a:	688a      	ldr	r2, [r1, #8]
 800315c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003160:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003162:	071a      	lsls	r2, r3, #28
 8003164:	d504      	bpl.n	8003170 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003166:	4939      	ldr	r1, [pc, #228]	; (800324c <HAL_RCC_ClockConfig+0x12c>)
 8003168:	688a      	ldr	r2, [r1, #8]
 800316a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800316e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003170:	4936      	ldr	r1, [pc, #216]	; (800324c <HAL_RCC_ClockConfig+0x12c>)
 8003172:	68a0      	ldr	r0, [r4, #8]
 8003174:	688a      	ldr	r2, [r1, #8]
 8003176:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800317a:	4302      	orrs	r2, r0
 800317c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	07df      	lsls	r7, r3, #31
 8003180:	d521      	bpl.n	80031c6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	6862      	ldr	r2, [r4, #4]
 8003184:	2a01      	cmp	r2, #1
 8003186:	d057      	beq.n	8003238 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003188:	1e93      	subs	r3, r2, #2
 800318a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318c:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_RCC_ClockConfig+0x12c>)
 800318e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003190:	d94d      	bls.n	800322e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	0799      	lsls	r1, r3, #30
 8003194:	d5d8      	bpl.n	8003148 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4e2d      	ldr	r6, [pc, #180]	; (800324c <HAL_RCC_ClockConfig+0x12c>)
 8003198:	68b3      	ldr	r3, [r6, #8]
 800319a:	f023 0303 	bic.w	r3, r3, #3
 800319e:	4313      	orrs	r3, r2
 80031a0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80031a2:	f7fe fa59 	bl	8001658 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80031aa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ac:	e004      	b.n	80031b8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ae:	f7fe fa53 	bl	8001658 <HAL_GetTick>
 80031b2:	1bc0      	subs	r0, r0, r7
 80031b4:	4540      	cmp	r0, r8
 80031b6:	d844      	bhi.n	8003242 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b8:	68b3      	ldr	r3, [r6, #8]
 80031ba:	6862      	ldr	r2, [r4, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80031c4:	d1f3      	bne.n	80031ae <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c6:	4a20      	ldr	r2, [pc, #128]	; (8003248 <HAL_RCC_ClockConfig+0x128>)
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	42ab      	cmp	r3, r5
 80031d0:	d906      	bls.n	80031e0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	b2eb      	uxtb	r3, r5
 80031d4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	42ab      	cmp	r3, r5
 80031de:	d1b3      	bne.n	8003148 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	075a      	lsls	r2, r3, #29
 80031e4:	d506      	bpl.n	80031f4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e6:	4919      	ldr	r1, [pc, #100]	; (800324c <HAL_RCC_ClockConfig+0x12c>)
 80031e8:	68e0      	ldr	r0, [r4, #12]
 80031ea:	688a      	ldr	r2, [r1, #8]
 80031ec:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80031f0:	4302      	orrs	r2, r0
 80031f2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	071b      	lsls	r3, r3, #28
 80031f6:	d507      	bpl.n	8003208 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <HAL_RCC_ClockConfig+0x12c>)
 80031fa:	6921      	ldr	r1, [r4, #16]
 80031fc:	6893      	ldr	r3, [r2, #8]
 80031fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003202:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003206:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003208:	f7ff ff56 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 800320c:	4a0f      	ldr	r2, [pc, #60]	; (800324c <HAL_RCC_ClockConfig+0x12c>)
 800320e:	4c10      	ldr	r4, [pc, #64]	; (8003250 <HAL_RCC_ClockConfig+0x130>)
 8003210:	6892      	ldr	r2, [r2, #8]
 8003212:	4910      	ldr	r1, [pc, #64]	; (8003254 <HAL_RCC_ClockConfig+0x134>)
 8003214:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003218:	4603      	mov	r3, r0
 800321a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800321c:	480e      	ldr	r0, [pc, #56]	; (8003258 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800321e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003220:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003222:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003224:	f7fe f9ce 	bl	80015c4 <HAL_InitTick>
  return HAL_OK;
 8003228:	2000      	movs	r0, #0
}
 800322a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	0198      	lsls	r0, r3, #6
 8003230:	d4b1      	bmi.n	8003196 <HAL_RCC_ClockConfig+0x76>
 8003232:	e789      	b.n	8003148 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003234:	2001      	movs	r0, #1
}
 8003236:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_RCC_ClockConfig+0x12c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	039e      	lsls	r6, r3, #14
 800323e:	d4aa      	bmi.n	8003196 <HAL_RCC_ClockConfig+0x76>
 8003240:	e782      	b.n	8003148 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003242:	2003      	movs	r0, #3
 8003244:	e781      	b.n	800314a <HAL_RCC_ClockConfig+0x2a>
 8003246:	bf00      	nop
 8003248:	40023c00 	.word	0x40023c00
 800324c:	40023800 	.word	0x40023800
 8003250:	0800a8dc 	.word	0x0800a8dc
 8003254:	20000000 	.word	0x20000000
 8003258:	20000008 	.word	0x20000008

0800325c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800325c:	4b01      	ldr	r3, [pc, #4]	; (8003264 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000000 	.word	0x20000000

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800326a:	4905      	ldr	r1, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003270:	6808      	ldr	r0, [r1, #0]
 8003272:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003276:	5cd3      	ldrb	r3, [r2, r3]
}
 8003278:	40d8      	lsrs	r0, r3
 800327a:	4770      	bx	lr
 800327c:	40023800 	.word	0x40023800
 8003280:	20000000 	.word	0x20000000
 8003284:	0800a8ec 	.word	0x0800a8ec

08003288 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800328a:	4905      	ldr	r1, [pc, #20]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003290:	6808      	ldr	r0, [r1, #0]
 8003292:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003296:	5cd3      	ldrb	r3, [r2, r3]
}
 8003298:	40d8      	lsrs	r0, r3
 800329a:	4770      	bx	lr
 800329c:	40023800 	.word	0x40023800
 80032a0:	20000000 	.word	0x20000000
 80032a4:	0800a8ec 	.word	0x0800a8ec

080032a8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a8:	2800      	cmp	r0, #0
 80032aa:	f000 808f 	beq.w	80033cc <HAL_UART_Init+0x124>
{
 80032ae:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032b4:	4604      	mov	r4, r0
 80032b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8081 	beq.w	80033c2 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032c0:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032c2:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80032c4:	2224      	movs	r2, #36	; 0x24
 80032c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032d0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d2:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032d4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80032da:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032dc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032de:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032e0:	4302      	orrs	r2, r0
 80032e2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80032e4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032e6:	4302      	orrs	r2, r0
 80032e8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80032ea:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80032ee:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032f2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032fc:	4934      	ldr	r1, [pc, #208]	; (80033d0 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003302:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003304:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003306:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003308:	d035      	beq.n	8003376 <HAL_UART_Init+0xce>
 800330a:	4a32      	ldr	r2, [pc, #200]	; (80033d4 <HAL_UART_Init+0x12c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d032      	beq.n	8003376 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003310:	f7ff ffaa 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003314:	69e3      	ldr	r3, [r4, #28]
 8003316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331a:	d032      	beq.n	8003382 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	2119      	movs	r1, #25
 8003320:	009a      	lsls	r2, r3, #2
 8003322:	fba0 0101 	umull	r0, r1, r0, r1
 8003326:	0f9b      	lsrs	r3, r3, #30
 8003328:	f7fd fc46 	bl	8000bb8 <__aeabi_uldivmod>
 800332c:	492a      	ldr	r1, [pc, #168]	; (80033d8 <HAL_UART_Init+0x130>)
 800332e:	fba1 3200 	umull	r3, r2, r1, r0
 8003332:	0952      	lsrs	r2, r2, #5
 8003334:	2564      	movs	r5, #100	; 0x64
 8003336:	fb05 0012 	mls	r0, r5, r2, r0
 800333a:	0100      	lsls	r0, r0, #4
 800333c:	3032      	adds	r0, #50	; 0x32
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	fba1 1000 	umull	r1, r0, r1, r0
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 800334a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003352:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800335c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003360:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003362:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003366:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800336a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800336e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8003372:	4628      	mov	r0, r5
}
 8003374:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003376:	f7ff ff87 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800337a:	69e3      	ldr	r3, [r4, #28]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	d1cc      	bne.n	800331c <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003382:	6862      	ldr	r2, [r4, #4]
 8003384:	2119      	movs	r1, #25
 8003386:	1892      	adds	r2, r2, r2
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	415b      	adcs	r3, r3
 800338e:	fba0 0101 	umull	r0, r1, r0, r1
 8003392:	f7fd fc11 	bl	8000bb8 <__aeabi_uldivmod>
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_UART_Init+0x130>)
 8003398:	fba3 2500 	umull	r2, r5, r3, r0
 800339c:	096d      	lsrs	r5, r5, #5
 800339e:	2264      	movs	r2, #100	; 0x64
 80033a0:	fb02 0215 	mls	r2, r2, r5, r0
 80033a4:	00d2      	lsls	r2, r2, #3
 80033a6:	3232      	adds	r2, #50	; 0x32
 80033a8:	fba3 3202 	umull	r3, r2, r3, r2
 80033ac:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80033b0:	0912      	lsrs	r2, r2, #4
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80033b8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80033bc:	440a      	add	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	e7c4      	b.n	800334c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80033c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80033c6:	f7fe f853 	bl	8001470 <HAL_UART_MspInit>
 80033ca:	e779      	b.n	80032c0 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80033cc:	2001      	movs	r0, #1
}
 80033ce:	4770      	bx	lr
 80033d0:	40011000 	.word	0x40011000
 80033d4:	40011400 	.word	0x40011400
 80033d8:	51eb851f 	.word	0x51eb851f

080033dc <HAL_UART_Transmit_DMA>:
{
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80033e0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80033e4:	2820      	cmp	r0, #32
 80033e6:	d135      	bne.n	8003454 <HAL_UART_Transmit_DMA+0x78>
    if ((pData == NULL) || (Size == 0U))
 80033e8:	b391      	cbz	r1, 8003450 <HAL_UART_Transmit_DMA+0x74>
 80033ea:	b38a      	cbz	r2, 8003450 <HAL_UART_Transmit_DMA+0x74>
    __HAL_LOCK(huart);
 80033ec:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80033f0:	2801      	cmp	r0, #1
 80033f2:	d02f      	beq.n	8003454 <HAL_UART_Transmit_DMA+0x78>
 80033f4:	2001      	movs	r0, #1
    huart->TxXferCount = Size;
 80033f6:	84e2      	strh	r2, [r4, #38]	; 0x26
    __HAL_LOCK(huart);
 80033f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    huart->TxXferSize = Size;
 80033fc:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80033fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003400:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8003460 <HAL_UART_Transmit_DMA+0x84>
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003404:	4f14      	ldr	r7, [pc, #80]	; (8003458 <HAL_UART_Transmit_DMA+0x7c>)
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003406:	4e15      	ldr	r6, [pc, #84]	; (800345c <HAL_UART_Transmit_DMA+0x80>)
    huart->pTxBuffPtr = pData;
 8003408:	6221      	str	r1, [r4, #32]
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800340a:	4613      	mov	r3, r2
 800340c:	6822      	ldr	r2, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003410:	f04f 0e21 	mov.w	lr, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003414:	6425      	str	r5, [r4, #64]	; 0x40
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003416:	3204      	adds	r2, #4
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003418:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800341c:	e9c0 c70f 	strd	ip, r7, [r0, #60]	; 0x3c
    huart->hdmatx->XferAbortCallback = NULL;
 8003420:	e9c0 6513 	strd	r6, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003424:	f7fe fa40 	bl	80018a8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	f06f 0340 	mvn.w	r3, #64	; 0x40
 800342e:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8003430:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003434:	f102 0314 	add.w	r3, r2, #20
 8003438:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	f102 0014 	add.w	r0, r2, #20
 8003444:	e840 3100 	strex	r1, r3, [r0]
 8003448:	2900      	cmp	r1, #0
 800344a:	d1f3      	bne.n	8003434 <HAL_UART_Transmit_DMA+0x58>
    return HAL_OK;
 800344c:	2000      	movs	r0, #0
}
 800344e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003450:	2001      	movs	r0, #1
}
 8003452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003454:	2002      	movs	r0, #2
}
 8003456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003458:	080034b9 	.word	0x080034b9
 800345c:	080034cd 	.word	0x080034cd
 8003460:	08003469 	.word	0x08003469

08003464 <HAL_UART_TxCpltCallback>:
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop

08003468 <UART_DMATransmitCplt>:
{
 8003468:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800346a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003474:	d11a      	bne.n	80034ac <UART_DMATransmitCplt+0x44>
    huart->TxXferCount = 0x00U;
 8003476:	6802      	ldr	r2, [r0, #0]
 8003478:	84c3      	strh	r3, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	f102 0314 	add.w	r3, r2, #20
 800347e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	f102 0014 	add.w	r0, r2, #20
 800348a:	e840 3100 	strex	r1, r3, [r0]
 800348e:	2900      	cmp	r1, #0
 8003490:	d1f3      	bne.n	800347a <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	f102 030c 	add.w	r3, r2, #12
 8003496:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800349a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	f102 000c 	add.w	r0, r2, #12
 80034a2:	e840 3100 	strex	r1, r3, [r0]
 80034a6:	2900      	cmp	r1, #0
 80034a8:	d1f3      	bne.n	8003492 <UART_DMATransmitCplt+0x2a>
}
 80034aa:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80034ac:	f7ff ffda 	bl	8003464 <HAL_UART_TxCpltCallback>
}
 80034b0:	bd08      	pop	{r3, pc}
 80034b2:	bf00      	nop

080034b4 <HAL_UART_TxHalfCpltCallback>:
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop

080034b8 <UART_DMATxHalfCplt>:
{
 80034b8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80034ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80034bc:	f7ff fffa 	bl	80034b4 <HAL_UART_TxHalfCpltCallback>
}
 80034c0:	bd08      	pop	{r3, pc}
 80034c2:	bf00      	nop

080034c4 <HAL_UART_RxCpltCallback>:
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop

080034c8 <HAL_UART_ErrorCallback>:
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop

080034cc <UART_DMAError>:
{
 80034cc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034d0:	6803      	ldr	r3, [r0, #0]
 80034d2:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034d4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80034d8:	2a21      	cmp	r2, #33	; 0x21
 80034da:	d00b      	beq.n	80034f4 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034dc:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034de:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80034e2:	2a22      	cmp	r2, #34	; 0x22
 80034e4:	d01e      	beq.n	8003524 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80034e8:	f043 0310 	orr.w	r3, r3, #16
 80034ec:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80034ee:	f7ff ffeb 	bl	80034c8 <HAL_UART_ErrorCallback>
}
 80034f2:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034f4:	0609      	lsls	r1, r1, #24
 80034f6:	d5f1      	bpl.n	80034dc <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80034f8:	2200      	movs	r2, #0
 80034fa:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	f103 020c 	add.w	r2, r3, #12
 8003500:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003504:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	f103 0c0c 	add.w	ip, r3, #12
 800350c:	e84c 2100 	strex	r1, r2, [ip]
 8003510:	2900      	cmp	r1, #0
 8003512:	d1f3      	bne.n	80034fc <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8003514:	2220      	movs	r2, #32
 8003516:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800351c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003520:	2a22      	cmp	r2, #34	; 0x22
 8003522:	d1e0      	bne.n	80034e6 <UART_DMAError+0x1a>
 8003524:	064a      	lsls	r2, r1, #25
 8003526:	d5de      	bpl.n	80034e6 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8003528:	2200      	movs	r2, #0
 800352a:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	f103 020c 	add.w	r2, r3, #12
 8003530:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003534:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	f103 0c0c 	add.w	ip, r3, #12
 800353c:	e84c 2100 	strex	r1, r2, [ip]
 8003540:	2900      	cmp	r1, #0
 8003542:	d1f3      	bne.n	800352c <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	f103 0214 	add.w	r2, r3, #20
 8003548:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	f103 0c14 	add.w	ip, r3, #20
 8003554:	e84c 2100 	strex	r1, r2, [ip]
 8003558:	2900      	cmp	r1, #0
 800355a:	d1f3      	bne.n	8003544 <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800355c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800355e:	2a01      	cmp	r2, #1
 8003560:	d005      	beq.n	800356e <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 8003562:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003564:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003566:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356a:	6303      	str	r3, [r0, #48]	; 0x30
}
 800356c:	e7bb      	b.n	80034e6 <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	f103 020c 	add.w	r2, r3, #12
 8003572:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003576:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	f103 0c0c 	add.w	ip, r3, #12
 800357e:	e84c 2100 	strex	r1, r2, [ip]
 8003582:	2900      	cmp	r1, #0
 8003584:	d1f3      	bne.n	800356e <UART_DMAError+0xa2>
 8003586:	e7ec      	b.n	8003562 <UART_DMAError+0x96>

08003588 <UART_DMAAbortOnError>:
{
 8003588:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800358a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800358c:	2300      	movs	r3, #0
 800358e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003590:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003592:	f7ff ff99 	bl	80034c8 <HAL_UART_ErrorCallback>
}
 8003596:	bd08      	pop	{r3, pc}

08003598 <HAL_UARTEx_RxEventCallback>:
}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop

0800359c <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359c:	6883      	ldr	r3, [r0, #8]
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a2:	d044      	beq.n	800362e <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035a4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d039      	beq.n	800361e <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035aa:	6803      	ldr	r3, [r0, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80035b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80035b6:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 80035b8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 80035ba:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29b      	uxth	r3, r3
 80035c0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d132      	bne.n	800362c <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035c6:	6802      	ldr	r2, [r0, #0]
 80035c8:	68d1      	ldr	r1, [r2, #12]
 80035ca:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80035ce:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035d0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035d2:	68d1      	ldr	r1, [r2, #12]
 80035d4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80035d8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035da:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80035dc:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035e0:	f021 0101 	bic.w	r1, r1, #1
 80035e4:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80035e6:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80035ec:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80035ee:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f0:	d127      	bne.n	8003642 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f2:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	f102 030c 	add.w	r3, r2, #12
 80035f8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	f102 0c0c 	add.w	ip, r2, #12
 8003604:	e84c 3100 	strex	r1, r3, [ip]
 8003608:	2900      	cmp	r1, #0
 800360a:	d1f3      	bne.n	80035f4 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	06db      	lsls	r3, r3, #27
 8003610:	d421      	bmi.n	8003656 <UART_Receive_IT.part.0.isra.0+0xba>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003612:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003614:	f7ff ffc0 	bl	8003598 <HAL_UARTEx_RxEventCallback>
}
 8003618:	b003      	add	sp, #12
 800361a:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800361e:	6903      	ldr	r3, [r0, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1c2      	bne.n	80035aa <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003624:	6803      	ldr	r3, [r0, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	7013      	strb	r3, [r2, #0]
 800362a:	e7c3      	b.n	80035b4 <UART_Receive_IT.part.0.isra.0+0x18>
 800362c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362e:	6903      	ldr	r3, [r0, #16]
 8003630:	b963      	cbnz	r3, 800364c <UART_Receive_IT.part.0.isra.0+0xb0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003632:	6803      	ldr	r3, [r0, #0]
 8003634:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363c:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8003640:	e7ba      	b.n	80035b8 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8003642:	f7ff ff3f 	bl	80034c4 <HAL_UART_RxCpltCallback>
}
 8003646:	b003      	add	sp, #12
 8003648:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800364c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800364e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	7013      	strb	r3, [r2, #0]
 8003654:	e7ae      	b.n	80035b4 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003656:	2300      	movs	r3, #0
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	6853      	ldr	r3, [r2, #4]
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	9b01      	ldr	r3, [sp, #4]
 8003664:	e7d5      	b.n	8003612 <UART_Receive_IT.part.0.isra.0+0x76>
 8003666:	bf00      	nop

08003668 <HAL_UART_IRQHandler>:
{
 8003668:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800366a:	6803      	ldr	r3, [r0, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003670:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003672:	f012 0f0f 	tst.w	r2, #15
{
 8003676:	b083      	sub	sp, #12
 8003678:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800367a:	d16e      	bne.n	800375a <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800367c:	0695      	lsls	r5, r2, #26
 800367e:	d502      	bpl.n	8003686 <HAL_UART_IRQHandler+0x1e>
 8003680:	068d      	lsls	r5, r1, #26
 8003682:	f100 80b2 	bmi.w	80037ea <HAL_UART_IRQHandler+0x182>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003686:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003688:	2801      	cmp	r0, #1
 800368a:	d00b      	beq.n	80036a4 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800368c:	0610      	lsls	r0, r2, #24
 800368e:	d502      	bpl.n	8003696 <HAL_UART_IRQHandler+0x2e>
 8003690:	060d      	lsls	r5, r1, #24
 8003692:	f100 80b4 	bmi.w	80037fe <HAL_UART_IRQHandler+0x196>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003696:	0650      	lsls	r0, r2, #25
 8003698:	d502      	bpl.n	80036a0 <HAL_UART_IRQHandler+0x38>
 800369a:	064a      	lsls	r2, r1, #25
 800369c:	f100 80ce 	bmi.w	800383c <HAL_UART_IRQHandler+0x1d4>
}
 80036a0:	b003      	add	sp, #12
 80036a2:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036a4:	06d5      	lsls	r5, r2, #27
 80036a6:	d5f1      	bpl.n	800368c <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036a8:	06c8      	lsls	r0, r1, #27
 80036aa:	d5ef      	bpl.n	800368c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ac:	2200      	movs	r2, #0
 80036ae:	9201      	str	r2, [sp, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	9201      	str	r2, [sp, #4]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	9201      	str	r2, [sp, #4]
 80036b8:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	0655      	lsls	r5, r2, #25
 80036be:	f140 8117 	bpl.w	80038f0 <HAL_UART_IRQHandler+0x288>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80036c4:	6802      	ldr	r2, [r0, #0]
 80036c6:	6852      	ldr	r2, [r2, #4]
 80036c8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80036ca:	2a00      	cmp	r2, #0
 80036cc:	d0e8      	beq.n	80036a0 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80036d0:	4291      	cmp	r1, r2
 80036d2:	d9e5      	bls.n	80036a0 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 80036d4:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036d6:	69c2      	ldr	r2, [r0, #28]
 80036d8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80036dc:	d036      	beq.n	800374c <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	f103 020c 	add.w	r2, r3, #12
 80036e2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	f103 050c 	add.w	r5, r3, #12
 80036ee:	e845 2100 	strex	r1, r2, [r5]
 80036f2:	2900      	cmp	r1, #0
 80036f4:	d1f3      	bne.n	80036de <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	f103 0214 	add.w	r2, r3, #20
 80036fa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	f103 0514 	add.w	r5, r3, #20
 8003706:	e845 2100 	strex	r1, r2, [r5]
 800370a:	2900      	cmp	r1, #0
 800370c:	d1f3      	bne.n	80036f6 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	f103 0214 	add.w	r2, r3, #20
 8003712:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	f103 0514 	add.w	r5, r3, #20
 800371e:	e845 2100 	strex	r1, r2, [r5]
 8003722:	2900      	cmp	r1, #0
 8003724:	d1f3      	bne.n	800370e <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8003726:	2220      	movs	r2, #32
 8003728:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372c:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	f103 020c 	add.w	r2, r3, #12
 8003732:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003736:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	f103 050c 	add.w	r5, r3, #12
 800373e:	e845 2100 	strex	r1, r2, [r5]
 8003742:	2900      	cmp	r1, #0
 8003744:	d1f3      	bne.n	800372e <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003746:	f7fe f8ef 	bl	8001928 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800374a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800374c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800374e:	1ac9      	subs	r1, r1, r3
 8003750:	4620      	mov	r0, r4
 8003752:	b289      	uxth	r1, r1
 8003754:	f7ff ff20 	bl	8003598 <HAL_UARTEx_RxEventCallback>
 8003758:	e7a2      	b.n	80036a0 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800375a:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800375e:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8003762:	4328      	orrs	r0, r5
 8003764:	d08f      	beq.n	8003686 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003766:	07d0      	lsls	r0, r2, #31
 8003768:	d505      	bpl.n	8003776 <HAL_UART_IRQHandler+0x10e>
 800376a:	05c8      	lsls	r0, r1, #23
 800376c:	d503      	bpl.n	8003776 <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800376e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003770:	f040 0001 	orr.w	r0, r0, #1
 8003774:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003776:	0750      	lsls	r0, r2, #29
 8003778:	d532      	bpl.n	80037e0 <HAL_UART_IRQHandler+0x178>
 800377a:	b14d      	cbz	r5, 8003790 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800377c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800377e:	f040 0002 	orr.w	r0, r0, #2
 8003782:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003784:	0790      	lsls	r0, r2, #30
 8003786:	d503      	bpl.n	8003790 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003788:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800378a:	f040 0004 	orr.w	r0, r0, #4
 800378e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003790:	0710      	lsls	r0, r2, #28
 8003792:	d507      	bpl.n	80037a4 <HAL_UART_IRQHandler+0x13c>
 8003794:	f001 0020 	and.w	r0, r1, #32
 8003798:	4328      	orrs	r0, r5
 800379a:	d003      	beq.n	80037a4 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800379c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800379e:	f040 0008 	orr.w	r0, r0, #8
 80037a2:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80037a6:	2800      	cmp	r0, #0
 80037a8:	f43f af7a 	beq.w	80036a0 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ac:	0690      	lsls	r0, r2, #26
 80037ae:	d509      	bpl.n	80037c4 <HAL_UART_IRQHandler+0x15c>
 80037b0:	0689      	lsls	r1, r1, #26
 80037b2:	d507      	bpl.n	80037c4 <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037b4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80037b8:	2a22      	cmp	r2, #34	; 0x22
 80037ba:	d103      	bne.n	80037c4 <HAL_UART_IRQHandler+0x15c>
 80037bc:	4620      	mov	r0, r4
 80037be:	f7ff feed 	bl	800359c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037c8:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037cc:	f001 0108 	and.w	r1, r1, #8
 80037d0:	ea52 0501 	orrs.w	r5, r2, r1
 80037d4:	d13d      	bne.n	8003852 <HAL_UART_IRQHandler+0x1ea>
        HAL_UART_ErrorCallback(huart);
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7ff fe76 	bl	80034c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037dc:	6425      	str	r5, [r4, #64]	; 0x40
 80037de:	e75f      	b.n	80036a0 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e0:	0790      	lsls	r0, r2, #30
 80037e2:	d5d5      	bpl.n	8003790 <HAL_UART_IRQHandler+0x128>
 80037e4:	2d00      	cmp	r5, #0
 80037e6:	d1cf      	bne.n	8003788 <HAL_UART_IRQHandler+0x120>
 80037e8:	e7d2      	b.n	8003790 <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ea:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80037ee:	2b22      	cmp	r3, #34	; 0x22
 80037f0:	f47f af56 	bne.w	80036a0 <HAL_UART_IRQHandler+0x38>
}
 80037f4:	b003      	add	sp, #12
 80037f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037fa:	f7ff becf 	b.w	800359c <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037fe:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003802:	2a21      	cmp	r2, #33	; 0x21
 8003804:	f47f af4c 	bne.w	80036a0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003808:	68a2      	ldr	r2, [r4, #8]
 800380a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800380e:	f000 80a8 	beq.w	8003962 <HAL_UART_IRQHandler+0x2fa>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003812:	6a22      	ldr	r2, [r4, #32]
 8003814:	1c51      	adds	r1, r2, #1
 8003816:	6221      	str	r1, [r4, #32]
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800381c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800381e:	3a01      	subs	r2, #1
 8003820:	b292      	uxth	r2, r2
 8003822:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003824:	2a00      	cmp	r2, #0
 8003826:	f47f af3b 	bne.w	80036a0 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003830:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	e731      	b.n	80036a0 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800383c:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800383e:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003844:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003846:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003848:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800384c:	f7ff fe0a 	bl	8003464 <HAL_UART_TxCpltCallback>
    return;
 8003850:	e726      	b.n	80036a0 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	f103 020c 	add.w	r2, r3, #12
 8003856:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800385a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	f103 000c 	add.w	r0, r3, #12
 8003862:	e840 2100 	strex	r1, r2, [r0]
 8003866:	2900      	cmp	r1, #0
 8003868:	d1f3      	bne.n	8003852 <HAL_UART_IRQHandler+0x1ea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	f103 0214 	add.w	r2, r3, #20
 800386e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003872:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	f103 0014 	add.w	r0, r3, #20
 800387a:	e840 2100 	strex	r1, r2, [r0]
 800387e:	2900      	cmp	r1, #0
 8003880:	d1f3      	bne.n	800386a <HAL_UART_IRQHandler+0x202>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003882:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003884:	2a01      	cmp	r2, #1
 8003886:	d022      	beq.n	80038ce <HAL_UART_IRQHandler+0x266>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003888:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800388a:	2120      	movs	r1, #32
 800388c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	0652      	lsls	r2, r2, #25
 8003896:	d527      	bpl.n	80038e8 <HAL_UART_IRQHandler+0x280>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	f103 0214 	add.w	r2, r3, #20
 800389c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	f103 0014 	add.w	r0, r3, #20
 80038a8:	e840 2100 	strex	r1, r2, [r0]
 80038ac:	2900      	cmp	r1, #0
 80038ae:	d1f3      	bne.n	8003898 <HAL_UART_IRQHandler+0x230>
          if (huart->hdmarx != NULL)
 80038b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80038b2:	b1c8      	cbz	r0, 80038e8 <HAL_UART_IRQHandler+0x280>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <HAL_UART_IRQHandler+0x314>)
 80038b6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038b8:	f7fe f880 	bl	80019bc <HAL_DMA_Abort_IT>
 80038bc:	2800      	cmp	r0, #0
 80038be:	f43f aeef 	beq.w	80036a0 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80038c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 80038c6:	b003      	add	sp, #12
 80038c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038cc:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	f103 020c 	add.w	r2, r3, #12
 80038d2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	f103 000c 	add.w	r0, r3, #12
 80038de:	e840 2100 	strex	r1, r2, [r0]
 80038e2:	2900      	cmp	r1, #0
 80038e4:	d1f3      	bne.n	80038ce <HAL_UART_IRQHandler+0x266>
 80038e6:	e7cf      	b.n	8003888 <HAL_UART_IRQHandler+0x220>
            HAL_UART_ErrorCallback(huart);
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff fded 	bl	80034c8 <HAL_UART_ErrorCallback>
 80038ee:	e6d7      	b.n	80036a0 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 80038f2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f4:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 80038f6:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80038fa:	2a00      	cmp	r2, #0
 80038fc:	f43f aed0 	beq.w	80036a0 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003900:	1a41      	subs	r1, r0, r1
 8003902:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003904:	2900      	cmp	r1, #0
 8003906:	f43f aecb 	beq.w	80036a0 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	f103 020c 	add.w	r2, r3, #12
 800390e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003912:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	f103 050c 	add.w	r5, r3, #12
 800391a:	e845 2000 	strex	r0, r2, [r5]
 800391e:	2800      	cmp	r0, #0
 8003920:	d1f3      	bne.n	800390a <HAL_UART_IRQHandler+0x2a2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	f103 0214 	add.w	r2, r3, #20
 8003926:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	f103 0514 	add.w	r5, r3, #20
 8003932:	e845 2000 	strex	r0, r2, [r5]
 8003936:	2800      	cmp	r0, #0
 8003938:	d1f3      	bne.n	8003922 <HAL_UART_IRQHandler+0x2ba>
        huart->RxState = HAL_UART_STATE_READY;
 800393a:	2220      	movs	r2, #32
 800393c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003940:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	f103 020c 	add.w	r2, r3, #12
 8003946:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	f103 050c 	add.w	r5, r3, #12
 8003952:	e845 2000 	strex	r0, r2, [r5]
 8003956:	2800      	cmp	r0, #0
 8003958:	d1f3      	bne.n	8003942 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800395a:	4620      	mov	r0, r4
 800395c:	f7ff fe1c 	bl	8003598 <HAL_UARTEx_RxEventCallback>
 8003960:	e69e      	b.n	80036a0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003962:	6922      	ldr	r2, [r4, #16]
 8003964:	2a00      	cmp	r2, #0
 8003966:	f47f af54 	bne.w	8003812 <HAL_UART_IRQHandler+0x1aa>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800396a:	6a22      	ldr	r2, [r4, #32]
 800396c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003970:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003974:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003976:	6222      	str	r2, [r4, #32]
 8003978:	e750      	b.n	800381c <HAL_UART_IRQHandler+0x1b4>
 800397a:	bf00      	nop
 800397c:	08003589 	.word	0x08003589

08003980 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003980:	b084      	sub	sp, #16
 8003982:	b082      	sub	sp, #8
 8003984:	f10d 0c0c 	add.w	ip, sp, #12
 8003988:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800398c:	9a08      	ldr	r2, [sp, #32]
 800398e:	2a01      	cmp	r2, #1
{
 8003990:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003992:	d12c      	bne.n	80039ee <USB_CoreInit+0x6e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003994:	6b82      	ldr	r2, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8003996:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003998:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800399c:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800399e:	68c2      	ldr	r2, [r0, #12]
 80039a0:	f422 0284 	bic.w	r2, r2, #4325376	; 0x420000
 80039a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a8:	60c2      	str	r2, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039aa:	68c2      	ldr	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80039ac:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039ae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80039b2:	60c2      	str	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80039b4:	d05f      	beq.n	8003a76 <USB_CoreInit+0xf6>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 80039b6:	2200      	movs	r2, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 80039b8:	4931      	ldr	r1, [pc, #196]	; (8003a80 <USB_CoreInit+0x100>)
  __IO uint32_t count = 0U;
 80039ba:	9200      	str	r2, [sp, #0]
 80039bc:	e002      	b.n	80039c4 <USB_CoreInit+0x44>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	db2d      	blt.n	8003a20 <USB_CoreInit+0xa0>
    count++;
 80039c4:	9a00      	ldr	r2, [sp, #0]
 80039c6:	3201      	adds	r2, #1
 80039c8:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 80039ca:	9a00      	ldr	r2, [sp, #0]
 80039cc:	428a      	cmp	r2, r1
 80039ce:	d9f6      	bls.n	80039be <USB_CoreInit+0x3e>
      return HAL_TIMEOUT;
 80039d0:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 80039d2:	9a06      	ldr	r2, [sp, #24]
 80039d4:	2a01      	cmp	r2, #1
 80039d6:	d107      	bne.n	80039e8 <USB_CoreInit+0x68>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	f042 0206 	orr.w	r2, r2, #6
 80039de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	f042 0220 	orr.w	r2, r2, #32
 80039e6:	609a      	str	r2, [r3, #8]
}
 80039e8:	b002      	add	sp, #8
 80039ea:	b004      	add	sp, #16
 80039ec:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039ee:	68c2      	ldr	r2, [r0, #12]
    if (count > 200000U)
 80039f0:	4923      	ldr	r1, [pc, #140]	; (8003a80 <USB_CoreInit+0x100>)
  __IO uint32_t count = 0U;
 80039f2:	2000      	movs	r0, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f8:	60da      	str	r2, [r3, #12]
  __IO uint32_t count = 0U;
 80039fa:	9001      	str	r0, [sp, #4]
 80039fc:	e002      	b.n	8003a04 <USB_CoreInit+0x84>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	2a00      	cmp	r2, #0
 8003a02:	db25      	blt.n	8003a50 <USB_CoreInit+0xd0>
    count++;
 8003a04:	9a01      	ldr	r2, [sp, #4]
 8003a06:	3201      	adds	r2, #1
 8003a08:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8003a0a:	9a01      	ldr	r2, [sp, #4]
 8003a0c:	428a      	cmp	r2, r1
 8003a0e:	d9f6      	bls.n	80039fe <USB_CoreInit+0x7e>
      return HAL_TIMEOUT;
 8003a10:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 8003a12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a14:	b9ba      	cbnz	r2, 8003a46 <USB_CoreInit+0xc6>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a1e:	e7d8      	b.n	80039d2 <USB_CoreInit+0x52>

  /* Core Soft Reset */
  count = 0U;
 8003a20:	2200      	movs	r2, #0
 8003a22:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a24:	691a      	ldr	r2, [r3, #16]

  do
  {
    count++;

    if (count > 200000U)
 8003a26:	4916      	ldr	r1, [pc, #88]	; (8003a80 <USB_CoreInit+0x100>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	611a      	str	r2, [r3, #16]
 8003a2e:	e003      	b.n	8003a38 <USB_CoreInit+0xb8>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a30:	6918      	ldr	r0, [r3, #16]
 8003a32:	f010 0001 	ands.w	r0, r0, #1
 8003a36:	d0cc      	beq.n	80039d2 <USB_CoreInit+0x52>
    count++;
 8003a38:	9a00      	ldr	r2, [sp, #0]
 8003a3a:	3201      	adds	r2, #1
 8003a3c:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8003a3e:	9a00      	ldr	r2, [sp, #0]
 8003a40:	428a      	cmp	r2, r1
 8003a42:	d9f5      	bls.n	8003a30 <USB_CoreInit+0xb0>
 8003a44:	e7c4      	b.n	80039d0 <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a4e:	e7c0      	b.n	80039d2 <USB_CoreInit+0x52>
  count = 0U;
 8003a50:	2200      	movs	r2, #0
 8003a52:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a54:	691a      	ldr	r2, [r3, #16]
    if (count > 200000U)
 8003a56:	490a      	ldr	r1, [pc, #40]	; (8003a80 <USB_CoreInit+0x100>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	e003      	b.n	8003a68 <USB_CoreInit+0xe8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a60:	6918      	ldr	r0, [r3, #16]
 8003a62:	f010 0001 	ands.w	r0, r0, #1
 8003a66:	d0d4      	beq.n	8003a12 <USB_CoreInit+0x92>
    count++;
 8003a68:	9a01      	ldr	r2, [sp, #4]
 8003a6a:	3201      	adds	r2, #1
 8003a6c:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8003a6e:	9a01      	ldr	r2, [sp, #4]
 8003a70:	428a      	cmp	r2, r1
 8003a72:	d9f5      	bls.n	8003a60 <USB_CoreInit+0xe0>
 8003a74:	e7cc      	b.n	8003a10 <USB_CoreInit+0x90>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a76:	68c2      	ldr	r2, [r0, #12]
 8003a78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003a7c:	60c2      	str	r2, [r0, #12]
 8003a7e:	e79a      	b.n	80039b6 <USB_CoreInit+0x36>
 8003a80:	00030d40 	.word	0x00030d40

08003a84 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003a84:	2a02      	cmp	r2, #2
{
 8003a86:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8003a88:	d00a      	beq.n	8003aa0 <USB_SetTurnaroundTime+0x1c>
 8003a8a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003a94:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	430a      	orrs	r2, r1
}
 8003a9a:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a9c:	60da      	str	r2, [r3, #12]
}
 8003a9e:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003aa0:	4a26      	ldr	r2, [pc, #152]	; (8003b3c <USB_SetTurnaroundTime+0xb8>)
 8003aa2:	4827      	ldr	r0, [pc, #156]	; (8003b40 <USB_SetTurnaroundTime+0xbc>)
 8003aa4:	440a      	add	r2, r1
 8003aa6:	4282      	cmp	r2, r0
 8003aa8:	d932      	bls.n	8003b10 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003aaa:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <USB_SetTurnaroundTime+0xc0>)
 8003aac:	4826      	ldr	r0, [pc, #152]	; (8003b48 <USB_SetTurnaroundTime+0xc4>)
 8003aae:	440a      	add	r2, r1
 8003ab0:	4282      	cmp	r2, r0
 8003ab2:	d930      	bls.n	8003b16 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ab4:	4825      	ldr	r0, [pc, #148]	; (8003b4c <USB_SetTurnaroundTime+0xc8>)
 8003ab6:	f5a1 0274 	sub.w	r2, r1, #15990784	; 0xf40000
 8003aba:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003abe:	4282      	cmp	r2, r0
 8003ac0:	d92c      	bls.n	8003b1c <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ac2:	4823      	ldr	r0, [pc, #140]	; (8003b50 <USB_SetTurnaroundTime+0xcc>)
 8003ac4:	f1a1 7283 	sub.w	r2, r1, #17170432	; 0x1060000
 8003ac8:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8003acc:	4282      	cmp	r2, r0
 8003ace:	d328      	bcc.n	8003b22 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ad0:	4a20      	ldr	r2, [pc, #128]	; (8003b54 <USB_SetTurnaroundTime+0xd0>)
 8003ad2:	4821      	ldr	r0, [pc, #132]	; (8003b58 <USB_SetTurnaroundTime+0xd4>)
 8003ad4:	440a      	add	r2, r1
 8003ad6:	4282      	cmp	r2, r0
 8003ad8:	d926      	bls.n	8003b28 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003ada:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <USB_SetTurnaroundTime+0xd8>)
 8003adc:	4820      	ldr	r0, [pc, #128]	; (8003b60 <USB_SetTurnaroundTime+0xdc>)
 8003ade:	440a      	add	r2, r1
 8003ae0:	4282      	cmp	r2, r0
 8003ae2:	d324      	bcc.n	8003b2e <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <USB_SetTurnaroundTime+0xe0>)
 8003ae6:	4820      	ldr	r0, [pc, #128]	; (8003b68 <USB_SetTurnaroundTime+0xe4>)
 8003ae8:	440a      	add	r2, r1
 8003aea:	4282      	cmp	r2, r0
 8003aec:	d3cd      	bcc.n	8003a8a <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003aee:	481f      	ldr	r0, [pc, #124]	; (8003b6c <USB_SetTurnaroundTime+0xe8>)
 8003af0:	f1a1 72b7 	sub.w	r2, r1, #23986176	; 0x16e0000
 8003af4:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8003af8:	4282      	cmp	r2, r0
 8003afa:	d31b      	bcc.n	8003b34 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003afc:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <USB_SetTurnaroundTime+0xec>)
 8003afe:	481d      	ldr	r0, [pc, #116]	; (8003b74 <USB_SetTurnaroundTime+0xf0>)
 8003b00:	440a      	add	r2, r1
 8003b02:	4282      	cmp	r2, r0
 8003b04:	bf34      	ite	cc
 8003b06:	f44f 51e0 	movcc.w	r1, #7168	; 0x1c00
 8003b0a:	f44f 51c0 	movcs.w	r1, #6144	; 0x1800
 8003b0e:	e7be      	b.n	8003a8e <USB_SetTurnaroundTime+0xa>
 8003b10:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8003b14:	e7bb      	b.n	8003a8e <USB_SetTurnaroundTime+0xa>
 8003b16:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8003b1a:	e7b8      	b.n	8003a8e <USB_SetTurnaroundTime+0xa>
 8003b1c:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8003b20:	e7b5      	b.n	8003a8e <USB_SetTurnaroundTime+0xa>
 8003b22:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003b26:	e7b2      	b.n	8003a8e <USB_SetTurnaroundTime+0xa>
 8003b28:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8003b2c:	e7af      	b.n	8003a8e <USB_SetTurnaroundTime+0xa>
 8003b2e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8003b32:	e7ac      	b.n	8003a8e <USB_SetTurnaroundTime+0xa>
 8003b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b38:	e7a9      	b.n	8003a8e <USB_SetTurnaroundTime+0xa>
 8003b3a:	bf00      	nop
 8003b3c:	ff275340 	.word	0xff275340
 8003b40:	000c34ff 	.word	0x000c34ff
 8003b44:	ff1b1e40 	.word	0xff1b1e40
 8003b48:	000f423f 	.word	0x000f423f
 8003b4c:	00124f7f 	.word	0x00124f7f
 8003b50:	0013d620 	.word	0x0013d620
 8003b54:	fee5b660 	.word	0xfee5b660
 8003b58:	0016e35f 	.word	0x0016e35f
 8003b5c:	feced300 	.word	0xfeced300
 8003b60:	001b7740 	.word	0x001b7740
 8003b64:	feb35bc0 	.word	0xfeb35bc0
 8003b68:	002191c0 	.word	0x002191c0
 8003b6c:	00387520 	.word	0x00387520
 8003b70:	fe5954e0 	.word	0xfe5954e0
 8003b74:	00419ce0 	.word	0x00419ce0

08003b78 <USB_EnableGlobalInt>:
{
 8003b78:	4603      	mov	r3, r0
}
 8003b7a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop

08003b88 <USB_DisableGlobalInt>:
{
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop

08003b98 <USB_SetCurrentMode>:
{
 8003b98:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b9a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003b9c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b9e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 8003ba2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ba4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003ba6:	d018      	beq.n	8003bda <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 8003ba8:	b9a9      	cbnz	r1, 8003bd6 <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003baa:	68c3      	ldr	r3, [r0, #12]
 8003bac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t ms = 0U;
 8003bb0:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bb2:	60c3      	str	r3, [r0, #12]
 8003bb4:	e001      	b.n	8003bba <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003bb6:	2c32      	cmp	r4, #50	; 0x32
 8003bb8:	d00d      	beq.n	8003bd6 <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f7fd fd52 	bl	8001664 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8003bc0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003bc2:	07db      	lsls	r3, r3, #31
      ms++;
 8003bc4:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003bc8:	d4f5      	bmi.n	8003bb6 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8003bca:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8003bce:	fab0 f080 	clz	r0, r0
 8003bd2:	0940      	lsrs	r0, r0, #5
}
 8003bd4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
}
 8003bd8:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bda:	68c3      	ldr	r3, [r0, #12]
 8003bdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  uint32_t ms = 0U;
 8003be0:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003be2:	60c3      	str	r3, [r0, #12]
 8003be4:	e001      	b.n	8003bea <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003be6:	2c32      	cmp	r4, #50	; 0x32
 8003be8:	d0f5      	beq.n	8003bd6 <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 8003bea:	2001      	movs	r0, #1
 8003bec:	f7fd fd3a 	bl	8001664 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8003bf0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003bf2:	07da      	lsls	r2, r3, #31
      ms++;
 8003bf4:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003bf8:	d5f5      	bpl.n	8003be6 <USB_SetCurrentMode+0x4e>
    return HAL_ERROR;
 8003bfa:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8003bfe:	fab0 f080 	clz	r0, r0
 8003c02:	0940      	lsrs	r0, r0, #5
 8003c04:	e7e6      	b.n	8003bd4 <USB_SetCurrentMode+0x3c>
 8003c06:	bf00      	nop

08003c08 <USB_DevInit>:
{
 8003c08:	b084      	sub	sp, #16
 8003c0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	ac0b      	add	r4, sp, #44	; 0x2c
 8003c12:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003c14:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
{
 8003c1e:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 8003c20:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 8003c24:	460c      	mov	r4, r1
 8003c26:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8003c2a:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 8003c2e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003c32:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8003c36:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 8003c3a:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
 8003c3e:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8003c42:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
 8003c46:	f8c0 212c 	str.w	r2, [r0, #300]	; 0x12c
 8003c4a:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
 8003c4e:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
 8003c52:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 8003c56:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8003c5a:	2d00      	cmp	r5, #0
 8003c5c:	f040 80ad 	bne.w	8003dba <USB_DevInit+0x1b2>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c60:	f8d0 2804 	ldr.w	r2, [r0, #2052]	; 0x804
 8003c64:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 8003c68:	f042 0202 	orr.w	r2, r2, #2
 8003c6c:	f8cc 2004 	str.w	r2, [ip, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c70:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003c72:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003c76:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c78:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003c7a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003c7e:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c80:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003c82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c86:	6382      	str	r2, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c8e:	f8dc 2000 	ldr.w	r2, [ip]
 8003c92:	f8cc 2000 	str.w	r2, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c98:	2a01      	cmp	r2, #1
 8003c9a:	f000 80bc 	beq.w	8003e16 <USB_DevInit+0x20e>
  USBx_DEVICE->DCFG |= speed;
 8003c9e:	f8dc 2000 	ldr.w	r2, [ip]
 8003ca2:	f042 0203 	orr.w	r2, r2, #3
 8003ca6:	f8cc 2000 	str.w	r2, [ip]
  __IO uint32_t count = 0U;
 8003caa:	2200      	movs	r2, #0
    if (count > 200000U)
 8003cac:	4961      	ldr	r1, [pc, #388]	; (8003e34 <USB_DevInit+0x22c>)
  __IO uint32_t count = 0U;
 8003cae:	9200      	str	r2, [sp, #0]
 8003cb0:	e003      	b.n	8003cba <USB_DevInit+0xb2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	2a00      	cmp	r2, #0
 8003cb6:	f2c0 809b 	blt.w	8003df0 <USB_DevInit+0x1e8>
    count++;
 8003cba:	9a00      	ldr	r2, [sp, #0]
 8003cbc:	3201      	adds	r2, #1
 8003cbe:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8003cc0:	9a00      	ldr	r2, [sp, #0]
 8003cc2:	428a      	cmp	r2, r1
 8003cc4:	d9f5      	bls.n	8003cb2 <USB_DevInit+0xaa>
    ret = HAL_ERROR;
 8003cc6:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 8003cc8:	2200      	movs	r2, #0
    if (count > 200000U)
 8003cca:	495a      	ldr	r1, [pc, #360]	; (8003e34 <USB_DevInit+0x22c>)
  __IO uint32_t count = 0U;
 8003ccc:	9201      	str	r2, [sp, #4]
 8003cce:	e002      	b.n	8003cd6 <USB_DevInit+0xce>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	db7c      	blt.n	8003dd0 <USB_DevInit+0x1c8>
    count++;
 8003cd6:	9a01      	ldr	r2, [sp, #4]
 8003cd8:	3201      	adds	r2, #1
 8003cda:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8003cdc:	9a01      	ldr	r2, [sp, #4]
 8003cde:	428a      	cmp	r2, r1
 8003ce0:	d9f6      	bls.n	8003cd0 <USB_DevInit+0xc8>
    ret = HAL_ERROR;
 8003ce2:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	f8cc 1010 	str.w	r1, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003cea:	f8cc 1014 	str.w	r1, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cee:	f8cc 101c 	str.w	r1, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cf2:	b1e4      	cbz	r4, 8003d2e <USB_DevInit+0x126>
 8003cf4:	f503 6210 	add.w	r2, r3, #2304	; 0x900
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cf8:	460f      	mov	r7, r1
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cfa:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cfe:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d02:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8003d06:	e008      	b.n	8003d1a <USB_DevInit+0x112>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d08:	6017      	str	r7, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d0a:	3101      	adds	r1, #1
 8003d0c:	428c      	cmp	r4, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d0e:	6117      	str	r7, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d10:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d14:	f102 0220 	add.w	r2, r2, #32
 8003d18:	d031      	beq.n	8003d7e <USB_DevInit+0x176>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d1a:	6816      	ldr	r6, [r2, #0]
 8003d1c:	2e00      	cmp	r6, #0
 8003d1e:	daf3      	bge.n	8003d08 <USB_DevInit+0x100>
      if (i == 0U)
 8003d20:	b111      	cbz	r1, 8003d28 <USB_DevInit+0x120>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d22:	f8c2 8000 	str.w	r8, [r2]
 8003d26:	e7f0      	b.n	8003d0a <USB_DevInit+0x102>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d28:	f8c2 9000 	str.w	r9, [r2]
 8003d2c:	e7ed      	b.n	8003d0a <USB_DevInit+0x102>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d2e:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8003d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d36:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx->GINTMSK = 0U;
 8003d3a:	2100      	movs	r1, #0
  if (cfg.dma_enable == 0U)
 8003d3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK = 0U;
 8003d3e:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d40:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
 8003d44:	6159      	str	r1, [r3, #20]
  if (cfg.dma_enable == 0U)
 8003d46:	b91a      	cbnz	r2, 8003d50 <USB_DevInit+0x148>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	f042 0210 	orr.w	r2, r2, #16
 8003d4e:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	4a39      	ldr	r2, [pc, #228]	; (8003e38 <USB_DevInit+0x230>)
 8003d54:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 8003d56:	9911      	ldr	r1, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d58:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 8003d5a:	b119      	cbz	r1, 8003d64 <USB_DevInit+0x15c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	f042 0208 	orr.w	r2, r2, #8
 8003d62:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003d64:	2d01      	cmp	r5, #1
 8003d66:	d105      	bne.n	8003d74 <USB_DevInit+0x16c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d6e:	f042 0204 	orr.w	r2, r2, #4
 8003d72:	619a      	str	r2, [r3, #24]
}
 8003d74:	b003      	add	sp, #12
 8003d76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d7a:	b004      	add	sp, #16
 8003d7c:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d84:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d86:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d8a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d8e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8003d92:	e008      	b.n	8003da6 <USB_DevInit+0x19e>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d94:	6017      	str	r7, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d96:	3101      	adds	r1, #1
 8003d98:	428c      	cmp	r4, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d9a:	6117      	str	r7, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d9c:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003da0:	f102 0220 	add.w	r2, r2, #32
 8003da4:	d0c3      	beq.n	8003d2e <USB_DevInit+0x126>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003da6:	6816      	ldr	r6, [r2, #0]
 8003da8:	2e00      	cmp	r6, #0
 8003daa:	daf3      	bge.n	8003d94 <USB_DevInit+0x18c>
      if (i == 0U)
 8003dac:	b111      	cbz	r1, 8003db4 <USB_DevInit+0x1ac>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003dae:	f8c2 8000 	str.w	r8, [r2]
 8003db2:	e7f0      	b.n	8003d96 <USB_DevInit+0x18e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003db4:	f8c2 9000 	str.w	r9, [r2]
 8003db8:	e7ed      	b.n	8003d96 <USB_DevInit+0x18e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003dba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003dbc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003dc0:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003dc2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003dc4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dc8:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003dcc:	6382      	str	r2, [r0, #56]	; 0x38
 8003dce:	e75b      	b.n	8003c88 <USB_DevInit+0x80>
  count = 0U;
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dd4:	2210      	movs	r2, #16
    if (count > 200000U)
 8003dd6:	4917      	ldr	r1, [pc, #92]	; (8003e34 <USB_DevInit+0x22c>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dd8:	611a      	str	r2, [r3, #16]
 8003dda:	e002      	b.n	8003de2 <USB_DevInit+0x1da>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	06d2      	lsls	r2, r2, #27
 8003de0:	d580      	bpl.n	8003ce4 <USB_DevInit+0xdc>
    count++;
 8003de2:	9a01      	ldr	r2, [sp, #4]
 8003de4:	3201      	adds	r2, #1
 8003de6:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8003de8:	9a01      	ldr	r2, [sp, #4]
 8003dea:	428a      	cmp	r2, r1
 8003dec:	d9f6      	bls.n	8003ddc <USB_DevInit+0x1d4>
 8003dee:	e778      	b.n	8003ce2 <USB_DevInit+0xda>
  count = 0U;
 8003df0:	2200      	movs	r2, #0
 8003df2:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003df4:	f44f 6284 	mov.w	r2, #1056	; 0x420
    if (count > 200000U)
 8003df8:	490e      	ldr	r1, [pc, #56]	; (8003e34 <USB_DevInit+0x22c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dfa:	611a      	str	r2, [r3, #16]
 8003dfc:	e004      	b.n	8003e08 <USB_DevInit+0x200>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dfe:	6918      	ldr	r0, [r3, #16]
 8003e00:	f010 0020 	ands.w	r0, r0, #32
 8003e04:	f43f af60 	beq.w	8003cc8 <USB_DevInit+0xc0>
    count++;
 8003e08:	9a00      	ldr	r2, [sp, #0]
 8003e0a:	3201      	adds	r2, #1
 8003e0c:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8003e0e:	9a00      	ldr	r2, [sp, #0]
 8003e10:	428a      	cmp	r2, r1
 8003e12:	d9f4      	bls.n	8003dfe <USB_DevInit+0x1f6>
 8003e14:	e757      	b.n	8003cc6 <USB_DevInit+0xbe>
    if (cfg.speed == USBD_HS_SPEED)
 8003e16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e18:	b922      	cbnz	r2, 8003e24 <USB_DevInit+0x21c>
  USBx_DEVICE->DCFG |= speed;
 8003e1a:	f8dc 2000 	ldr.w	r2, [ip]
 8003e1e:	f8cc 2000 	str.w	r2, [ip]
  return HAL_OK;
 8003e22:	e742      	b.n	8003caa <USB_DevInit+0xa2>
  USBx_DEVICE->DCFG |= speed;
 8003e24:	f8dc 2000 	ldr.w	r2, [ip]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	f8cc 2000 	str.w	r2, [ip]
  return HAL_OK;
 8003e30:	e73b      	b.n	8003caa <USB_DevInit+0xa2>
 8003e32:	bf00      	nop
 8003e34:	00030d40 	.word	0x00030d40
 8003e38:	803c3800 	.word	0x803c3800

08003e3c <USB_FlushTxFifo>:
{
 8003e3c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003e3e:	2300      	movs	r3, #0
    if (count > 200000U)
 8003e40:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	e002      	b.n	8003e4c <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e46:	6903      	ldr	r3, [r0, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db08      	blt.n	8003e5e <USB_FlushTxFifo+0x22>
    count++;
 8003e4c:	9b01      	ldr	r3, [sp, #4]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003e52:	9b01      	ldr	r3, [sp, #4]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d9f6      	bls.n	8003e46 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8003e58:	2003      	movs	r0, #3
}
 8003e5a:	b002      	add	sp, #8
 8003e5c:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e5e:	0189      	lsls	r1, r1, #6
  count = 0U;
 8003e60:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e62:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8003e66:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003e68:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e6a:	6101      	str	r1, [r0, #16]
 8003e6c:	e003      	b.n	8003e76 <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e6e:	6903      	ldr	r3, [r0, #16]
 8003e70:	f013 0320 	ands.w	r3, r3, #32
 8003e74:	d006      	beq.n	8003e84 <USB_FlushTxFifo+0x48>
    count++;
 8003e76:	9b01      	ldr	r3, [sp, #4]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003e7c:	9b01      	ldr	r3, [sp, #4]
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d9f5      	bls.n	8003e6e <USB_FlushTxFifo+0x32>
 8003e82:	e7e9      	b.n	8003e58 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 8003e84:	4618      	mov	r0, r3
}
 8003e86:	b002      	add	sp, #8
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	00030d40 	.word	0x00030d40

08003e90 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e90:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e94:	f013 0006 	ands.w	r0, r3, #6
 8003e98:	d004      	beq.n	8003ea4 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8003e9a:	f013 0f02 	tst.w	r3, #2
 8003e9e:	bf14      	ite	ne
 8003ea0:	2002      	movne	r0, #2
 8003ea2:	200f      	moveq	r0, #15
}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop

08003ea8 <USB_ActivateEndpoint>:
{
 8003ea8:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8003eaa:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003eac:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d022      	beq.n	8003ef8 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003eb2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8003eb6:	f002 0c0f 	and.w	ip, r2, #15
 8003eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ebe:	fa03 f30c 	lsl.w	r3, r3, ip
 8003ec2:	4323      	orrs	r3, r4
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ec4:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ec8:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ecc:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	d40e      	bmi.n	8003ef2 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ed4:	68cb      	ldr	r3, [r1, #12]
 8003ed6:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
                                    ((uint32_t)ep->type << 18) |
 8003eda:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee0:	4303      	orrs	r3, r0
 8003ee2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eee:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
}
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	bc30      	pop	{r4, r5}
 8003ef6:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ef8:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8003efc:	f002 0c0f 	and.w	ip, r2, #15
 8003f00:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f04:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8003f08:	432b      	orrs	r3, r5
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f0a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f0e:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f10:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003f14:	041c      	lsls	r4, r3, #16
 8003f16:	d4ec      	bmi.n	8003ef2 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f18:	68cb      	ldr	r3, [r1, #12]
 8003f1a:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f1e:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f24:	4323      	orrs	r3, r4
 8003f26:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003f2a:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8003f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f36:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003f3a:	bc30      	pop	{r4, r5}
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	4770      	bx	lr

08003f40 <USB_DeactivateEndpoint>:
{
 8003f40:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8003f42:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003f44:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003f46:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f48:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8003f4c:	d02c      	beq.n	8003fa8 <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f4e:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8003f52:	2900      	cmp	r1, #0
 8003f54:	db1b      	blt.n	8003f8e <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f56:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8003f5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	ea24 0403 	bic.w	r4, r4, r3
 8003f6a:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f6e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f72:	4922      	ldr	r1, [pc, #136]	; (8003ffc <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f74:	ea24 0303 	bic.w	r3, r4, r3
 8003f78:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f7c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
}
 8003f80:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f84:	4019      	ands	r1, r3
}
 8003f86:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f88:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8003f8c:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f8e:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8003f92:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003f96:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f9a:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8003f9e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003fa2:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 8003fa6:	e7d6      	b.n	8003f56 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fa8:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8003fac:	2900      	cmp	r1, #0
 8003fae:	da0b      	bge.n	8003fc8 <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fb0:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8003fb4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003fb8:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fbc:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8003fc0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003fc4:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fc8:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8003fcc:	f003 040f 	and.w	r4, r3, #15
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	40a3      	lsls	r3, r4
 8003fd4:	ea21 0103 	bic.w	r1, r1, r3
 8003fd8:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fdc:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fe0:	4907      	ldr	r1, [pc, #28]	; (8004000 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fe2:	ea24 0303 	bic.w	r3, r4, r3
 8003fe6:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fea:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
}
 8003fee:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ff2:	4019      	ands	r1, r3
}
 8003ff4:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ff6:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 8003ffa:	4770      	bx	lr
 8003ffc:	eff37800 	.word	0xeff37800
 8004000:	ec337800 	.word	0xec337800

08004004 <USB_EPStartXfer>:
{
 8004004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8004008:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800400a:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800400e:	2c01      	cmp	r4, #1
 8004010:	d04f      	beq.n	80040b2 <USB_EPStartXfer+0xae>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004012:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8004016:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 800401a:	691c      	ldr	r4, [r3, #16]
 800401c:	0ce4      	lsrs	r4, r4, #19
 800401e:	04e4      	lsls	r4, r4, #19
 8004020:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004022:	691c      	ldr	r4, [r3, #16]
 8004024:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8004028:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800402c:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 800402e:	698c      	ldr	r4, [r1, #24]
 8004030:	b374      	cbz	r4, 8004090 <USB_EPStartXfer+0x8c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004032:	68cd      	ldr	r5, [r1, #12]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004034:	4e78      	ldr	r6, [pc, #480]	; (8004218 <USB_EPStartXfer+0x214>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004036:	442c      	add	r4, r5
 8004038:	3c01      	subs	r4, #1
 800403a:	fbb4 f4f5 	udiv	r4, r4, r5
 800403e:	b2a4      	uxth	r4, r4
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004040:	fb04 f505 	mul.w	r5, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004044:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8004048:	691e      	ldr	r6, [r3, #16]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800404a:	61cd      	str	r5, [r1, #28]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800404c:	4334      	orrs	r4, r6
 800404e:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004050:	691c      	ldr	r4, [r3, #16]
 8004052:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004056:	4325      	orrs	r5, r4
    if (dma == 1U)
 8004058:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800405a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800405c:	d024      	beq.n	80040a8 <USB_EPStartXfer+0xa4>
    if (ep->type == EP_TYPE_ISOC)
 800405e:	790b      	ldrb	r3, [r1, #4]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10c      	bne.n	800407e <USB_EPStartXfer+0x7a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004064:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8004068:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800406c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8004070:	bf0c      	ite	eq
 8004072:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004076:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800407a:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800407e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8004082:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004086:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 800408a:	2000      	movs	r0, #0
 800408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004090:	68cc      	ldr	r4, [r1, #12]
 8004092:	691d      	ldr	r5, [r3, #16]
 8004094:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004098:	432c      	orrs	r4, r5
 800409a:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800409c:	691c      	ldr	r4, [r3, #16]
    if (dma == 1U)
 800409e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040a0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80040a4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80040a6:	d1da      	bne.n	800405e <USB_EPStartXfer+0x5a>
      if ((uint32_t)ep->xfer_buff != 0U)
 80040a8:	690a      	ldr	r2, [r1, #16]
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	d0d7      	beq.n	800405e <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040ae:	615a      	str	r2, [r3, #20]
 80040b0:	e7d5      	b.n	800405e <USB_EPStartXfer+0x5a>
    if (ep->xfer_len == 0U)
 80040b2:	698e      	ldr	r6, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040b4:	eb00 154c 	add.w	r5, r0, ip, lsl #5
    if (ep->xfer_len == 0U)
 80040b8:	b3de      	cbz	r6, 8004132 <USB_EPStartXfer+0x12e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040ba:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040be:	68cf      	ldr	r7, [r1, #12]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040c0:	0cdb      	lsrs	r3, r3, #19
 80040c2:	04db      	lsls	r3, r3, #19
 80040c4:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040c8:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
 80040cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040d4:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040d8:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <USB_EPStartXfer+0x214>)
 80040da:	f8d5 8910 	ldr.w	r8, [r5, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040de:	eb06 0e07 	add.w	lr, r6, r7
 80040e2:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80040e6:	fbbe fef7 	udiv	lr, lr, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040ea:	ea03 43ce 	and.w	r3, r3, lr, lsl #19
 80040ee:	ea43 0308 	orr.w	r3, r3, r8
 80040f2:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040f6:	f8d5 7910 	ldr.w	r7, [r5, #2320]	; 0x910
 80040fa:	f3c6 0312 	ubfx	r3, r6, #0, #19
 80040fe:	433b      	orrs	r3, r7
 8004100:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8004104:	790f      	ldrb	r7, [r1, #4]
 8004106:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004108:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800410c:	d053      	beq.n	80041b6 <USB_EPStartXfer+0x1b2>
    if (dma == 1U)
 800410e:	2a01      	cmp	r2, #1
 8004110:	d06d      	beq.n	80041ee <USB_EPStartXfer+0x1ea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004112:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8004116:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800411a:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800411e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8004122:	f00c 0c0f 	and.w	ip, ip, #15
 8004126:	fa04 f30c 	lsl.w	r3, r4, ip
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8004130:	e7ab      	b.n	800408a <USB_EPStartXfer+0x86>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004132:	f8d5 4910 	ldr.w	r4, [r5, #2320]	; 0x910
 8004136:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800413a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800413e:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004142:	f8d5 4910 	ldr.w	r4, [r5, #2320]	; 0x910
 8004146:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800414a:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800414e:	f8d5 4910 	ldr.w	r4, [r5, #2320]	; 0x910
 8004152:	0ce4      	lsrs	r4, r4, #19
 8004154:	04e4      	lsls	r4, r4, #19
 8004156:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
    if (dma == 1U)
 800415a:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800415c:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8004160:	790f      	ldrb	r7, [r1, #4]
    if (dma == 1U)
 8004162:	d039      	beq.n	80041d8 <USB_EPStartXfer+0x1d4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004164:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004168:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800416a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800416e:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004172:	d18a      	bne.n	800408a <USB_EPStartXfer+0x86>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004174:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8004178:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800417c:	681c      	ldr	r4, [r3, #0]
 800417e:	bf0c      	ite	eq
 8004180:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004184:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8004188:	601c      	str	r4, [r3, #0]
  if (dma == 0U)
 800418a:	2a00      	cmp	r2, #0
 800418c:	f47f af7d 	bne.w	800408a <USB_EPStartXfer+0x86>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004190:	b2b6      	uxth	r6, r6
 8004192:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 8004194:	08b6      	lsrs	r6, r6, #2
 8004196:	f43f af78 	beq.w	800408a <USB_EPStartXfer+0x86>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800419a:	690b      	ldr	r3, [r1, #16]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800419c:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 80041a0:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 80041a4:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 80041a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ac:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 80041b0:	428b      	cmp	r3, r1
 80041b2:	d1f9      	bne.n	80041a8 <USB_EPStartXfer+0x1a4>
 80041b4:	e769      	b.n	800408a <USB_EPStartXfer+0x86>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041b6:	691c      	ldr	r4, [r3, #16]
 80041b8:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 80041bc:	611c      	str	r4, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041be:	691c      	ldr	r4, [r3, #16]
    if (dma == 1U)
 80041c0:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041c2:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80041c6:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80041c8:	d016      	beq.n	80041f8 <USB_EPStartXfer+0x1f4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ca:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 80041ce:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80041d2:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80041d6:	e7cd      	b.n	8004174 <USB_EPStartXfer+0x170>
      if ((uint32_t)ep->dma_addr != 0U)
 80041d8:	694a      	ldr	r2, [r1, #20]
 80041da:	b95a      	cbnz	r2, 80041f4 <USB_EPStartXfer+0x1f0>
      if (ep->type == EP_TYPE_ISOC)
 80041dc:	2f01      	cmp	r7, #1
 80041de:	d00e      	beq.n	80041fe <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	2000      	movs	r0, #0
 80041ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 80041ee:	694a      	ldr	r2, [r1, #20]
 80041f0:	2a00      	cmp	r2, #0
 80041f2:	d0f5      	beq.n	80041e0 <USB_EPStartXfer+0x1dc>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041f4:	615a      	str	r2, [r3, #20]
 80041f6:	e7f1      	b.n	80041dc <USB_EPStartXfer+0x1d8>
      if ((uint32_t)ep->dma_addr != 0U)
 80041f8:	694a      	ldr	r2, [r1, #20]
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	d1fa      	bne.n	80041f4 <USB_EPStartXfer+0x1f0>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041fe:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004202:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	bf0c      	ite	eq
 800420a:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800420e:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e7e4      	b.n	80041e0 <USB_EPStartXfer+0x1dc>
 8004216:	bf00      	nop
 8004218:	1ff80000 	.word	0x1ff80000

0800421c <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800421c:	784b      	ldrb	r3, [r1, #1]
 800421e:	2b01      	cmp	r3, #1
{
 8004220:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t epnum = (uint32_t)ep->num;
 8004222:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004224:	d028      	beq.n	8004278 <USB_EP0StartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004226:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800422a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800422e:	691c      	ldr	r4, [r3, #16]
 8004230:	0ce4      	lsrs	r4, r4, #19
 8004232:	04e4      	lsls	r4, r4, #19
 8004234:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004236:	691c      	ldr	r4, [r3, #16]
 8004238:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800423c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8004240:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8004242:	698c      	ldr	r4, [r1, #24]
 8004244:	b9ac      	cbnz	r4, 8004272 <USB_EP0StartXfer+0x56>
      if (ep->xfer_len > ep->maxpacket)
 8004246:	68cc      	ldr	r4, [r1, #12]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004248:	691d      	ldr	r5, [r3, #16]
    ep->xfer_size = ep->maxpacket;
 800424a:	61cc      	str	r4, [r1, #28]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800424c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004250:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004252:	691d      	ldr	r5, [r3, #16]
 8004254:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004258:	432c      	orrs	r4, r5
    if (dma == 1U)
 800425a:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800425c:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800425e:	d043      	beq.n	80042e8 <USB_EP0StartXfer+0xcc>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004260:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004264:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004268:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800426c:	2000      	movs	r0, #0
 800426e:	bcf0      	pop	{r4, r5, r6, r7}
 8004270:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8004272:	68cc      	ldr	r4, [r1, #12]
 8004274:	618c      	str	r4, [r1, #24]
 8004276:	e7e7      	b.n	8004248 <USB_EP0StartXfer+0x2c>
    if (ep->xfer_len == 0U)
 8004278:	698d      	ldr	r5, [r1, #24]
 800427a:	2d00      	cmp	r5, #0
 800427c:	d039      	beq.n	80042f2 <USB_EP0StartXfer+0xd6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800427e:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
      if (ep->xfer_len > ep->maxpacket)
 8004282:	68ce      	ldr	r6, [r1, #12]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004284:	f8dc 3910 	ldr.w	r3, [ip, #2320]	; 0x910
 8004288:	0cdb      	lsrs	r3, r3, #19
 800428a:	04db      	lsls	r3, r3, #19
 800428c:	f8cc 3910 	str.w	r3, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004290:	f8dc 3910 	ldr.w	r3, [ip, #2320]	; 0x910
 8004294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
      if (ep->xfer_len > ep->maxpacket)
 800429c:	42b5      	cmp	r5, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800429e:	f8cc 3910 	str.w	r3, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042a2:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
      if (ep->xfer_len > ep->maxpacket)
 80042a6:	d952      	bls.n	800434e <USB_EP0StartXfer+0x132>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042a8:	691d      	ldr	r5, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 80042aa:	618e      	str	r6, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042ac:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80042b0:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042b2:	691f      	ldr	r7, [r3, #16]
 80042b4:	f3c6 0512 	ubfx	r5, r6, #0, #19
 80042b8:	433d      	orrs	r5, r7
    if (dma == 1U)
 80042ba:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042bc:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80042be:	d03c      	beq.n	800433a <USB_EP0StartXfer+0x11e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042c0:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 80042c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c8:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80042cc:	2e00      	cmp	r6, #0
 80042ce:	d0cd      	beq.n	800426c <USB_EP0StartXfer+0x50>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042d0:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80042d4:	f004 040f 	and.w	r4, r4, #15
 80042d8:	2301      	movs	r3, #1
 80042da:	40a3      	lsls	r3, r4
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 80042e2:	bcf0      	pop	{r4, r5, r6, r7}
 80042e4:	2000      	movs	r0, #0
 80042e6:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 80042e8:	690a      	ldr	r2, [r1, #16]
 80042ea:	2a00      	cmp	r2, #0
 80042ec:	d0b8      	beq.n	8004260 <USB_EP0StartXfer+0x44>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042ee:	615a      	str	r2, [r3, #20]
 80042f0:	e7b6      	b.n	8004260 <USB_EP0StartXfer+0x44>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042f2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    if (dma == 1U)
 80042f6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042f8:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 80042fc:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8004300:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8004304:	f8c0 4910 	str.w	r4, [r0, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004308:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 800430c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004310:	f8c0 4910 	str.w	r4, [r0, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004314:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 8004318:	ea4f 44d4 	mov.w	r4, r4, lsr #19
 800431c:	ea4f 44c4 	mov.w	r4, r4, lsl #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004320:	f500 6310 	add.w	r3, r0, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004324:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004326:	d008      	beq.n	800433a <USB_EP0StartXfer+0x11e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004328:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800432c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004330:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8004334:	bcf0      	pop	{r4, r5, r6, r7}
 8004336:	2000      	movs	r0, #0
 8004338:	4770      	bx	lr
      if ((uint32_t)ep->dma_addr != 0U)
 800433a:	694a      	ldr	r2, [r1, #20]
 800433c:	b102      	cbz	r2, 8004340 <USB_EP0StartXfer+0x124>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800433e:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8004346:	2000      	movs	r0, #0
 8004348:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800434a:	601a      	str	r2, [r3, #0]
}
 800434c:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800434e:	691e      	ldr	r6, [r3, #16]
 8004350:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8004354:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004356:	691e      	ldr	r6, [r3, #16]
 8004358:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800435c:	4335      	orrs	r5, r6
    if (dma == 1U)
 800435e:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004360:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004362:	d0ea      	beq.n	800433a <USB_EP0StartXfer+0x11e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004364:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8004368:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800436c:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8004370:	e7ae      	b.n	80042d0 <USB_EP0StartXfer+0xb4>
 8004372:	bf00      	nop

08004374 <USB_EPStopXfer>:
  if (ep->is_in == 1U)
 8004374:	784b      	ldrb	r3, [r1, #1]
{
 8004376:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004378:	2200      	movs	r2, #0
  if (ep->is_in == 1U)
 800437a:	2b01      	cmp	r3, #1
  __IO uint32_t count = 0U;
 800437c:	9201      	str	r2, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800437e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004380:	d020      	beq.n	80043c4 <USB_EPStopXfer+0x50>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004382:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8004386:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800438a:	6803      	ldr	r3, [r0, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	db02      	blt.n	8004396 <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 8004390:	2000      	movs	r0, #0
}
 8004392:	b002      	add	sp, #8
 8004394:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004396:	6803      	ldr	r3, [r0, #0]
 8004398:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800439c:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800439e:	6803      	ldr	r3, [r0, #0]
 80043a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        if (count > 10000U)
 80043a4:	f242 7210 	movw	r2, #10000	; 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80043a8:	6003      	str	r3, [r0, #0]
 80043aa:	e002      	b.n	80043b2 <USB_EPStopXfer+0x3e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80043ac:	6803      	ldr	r3, [r0, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	daee      	bge.n	8004390 <USB_EPStopXfer+0x1c>
        count++;
 80043b2:	9b01      	ldr	r3, [sp, #4]
 80043b4:	3301      	adds	r3, #1
 80043b6:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80043b8:	9b01      	ldr	r3, [sp, #4]
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d9f6      	bls.n	80043ac <USB_EPStopXfer+0x38>
          ret = HAL_ERROR;
 80043be:	2001      	movs	r0, #1
}
 80043c0:	b002      	add	sp, #8
 80043c2:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043c4:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80043c8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	dade      	bge.n	8004390 <USB_EPStopXfer+0x1c>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80043d8:	601a      	str	r2, [r3, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
        if (count > 10000U)
 80043e0:	f242 7110 	movw	r1, #10000	; 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	e002      	b.n	80043ee <USB_EPStopXfer+0x7a>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	2a00      	cmp	r2, #0
 80043ec:	dad0      	bge.n	8004390 <USB_EPStopXfer+0x1c>
        count++;
 80043ee:	9a01      	ldr	r2, [sp, #4]
 80043f0:	3201      	adds	r2, #1
 80043f2:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 80043f4:	9a01      	ldr	r2, [sp, #4]
 80043f6:	428a      	cmp	r2, r1
 80043f8:	d9f6      	bls.n	80043e8 <USB_EPStopXfer+0x74>
 80043fa:	e7e0      	b.n	80043be <USB_EPStopXfer+0x4a>

080043fc <USB_WritePacket>:
{
 80043fc:	b410      	push	{r4}
 80043fe:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8004402:	b964      	cbnz	r4, 800441e <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004404:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	d009      	beq.n	800441e <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800440a:	3201      	adds	r2, #1
 800440c:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004410:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004414:	f851 2b04 	ldr.w	r2, [r1], #4
 8004418:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800441a:	428b      	cmp	r3, r1
 800441c:	d1fa      	bne.n	8004414 <USB_WritePacket+0x18>
}
 800441e:	2000      	movs	r0, #0
 8004420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop

08004428 <USB_ReadPacket>:
{
 8004428:	b530      	push	{r4, r5, lr}
  for (i = 0U; i < count32b; i++)
 800442a:	ea5f 0e92 	movs.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800442e:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8004432:	d00b      	beq.n	800444c <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004434:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8004438:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8004444:	459e      	cmp	lr, r3
 8004446:	d1f9      	bne.n	800443c <USB_ReadPacket+0x14>
    pDest++;
 8004448:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 800444c:	b17d      	cbz	r5, 800446e <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800444e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 8004452:	1e6b      	subs	r3, r5, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004454:	6802      	ldr	r2, [r0, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004456:	700a      	strb	r2, [r1, #0]
      remaining_bytes--;
 8004458:	b29b      	uxth	r3, r3
    } while (remaining_bytes != 0U);
 800445a:	b13b      	cbz	r3, 800446c <USB_ReadPacket+0x44>
 800445c:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800445e:	ea4f 2012 	mov.w	r0, r2, lsr #8
 8004462:	bf18      	it	ne
 8004464:	0c12      	lsrne	r2, r2, #16
 8004466:	7048      	strb	r0, [r1, #1]
 8004468:	bf18      	it	ne
 800446a:	708a      	strbne	r2, [r1, #2]
      pDest++;
 800446c:	4429      	add	r1, r5
}
 800446e:	4608      	mov	r0, r1
 8004470:	bd30      	pop	{r4, r5, pc}
 8004472:	bf00      	nop

08004474 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8004474:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004476:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004478:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800447a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800447e:	d00c      	beq.n	800449a <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004480:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004484:	2a00      	cmp	r2, #0
 8004486:	db00      	blt.n	800448a <USB_EPSetStall+0x16>
 8004488:	b9d3      	cbnz	r3, 80044c0 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800448a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800448e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004492:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004496:	2000      	movs	r0, #0
 8004498:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800449a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800449e:	2a00      	cmp	r2, #0
 80044a0:	db06      	blt.n	80044b0 <USB_EPSetStall+0x3c>
 80044a2:	b12b      	cbz	r3, 80044b0 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80044a4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80044a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044ac:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80044b0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80044b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044b8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80044bc:	2000      	movs	r0, #0
 80044be:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80044c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80044c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80044cc:	e7dd      	b.n	800448a <USB_EPSetStall+0x16>
 80044ce:	bf00      	nop

080044d0 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80044d0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80044d2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80044d4:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044d6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80044da:	d013      	beq.n	8004504 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044dc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80044e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044e4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80044e8:	790b      	ldrb	r3, [r1, #4]
 80044ea:	3b02      	subs	r3, #2
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d901      	bls.n	80044f4 <USB_EPClearStall+0x24>
}
 80044f0:	2000      	movs	r0, #0
 80044f2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80044f4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004500:	2000      	movs	r0, #0
 8004502:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004504:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004508:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800450c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004510:	790b      	ldrb	r3, [r1, #4]
 8004512:	3b02      	subs	r3, #2
 8004514:	2b01      	cmp	r3, #1
 8004516:	d8eb      	bhi.n	80044f0 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004518:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004520:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8004524:	2000      	movs	r0, #0
 8004526:	4770      	bx	lr

08004528 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004528:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800452c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004530:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004534:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004538:	0109      	lsls	r1, r1, #4
 800453a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800453e:	4319      	orrs	r1, r3
 8004540:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004544:	2000      	movs	r0, #0
 8004546:	4770      	bx	lr

08004548 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004548:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 800454c:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800454e:	f022 0203 	bic.w	r2, r2, #3
 8004552:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004556:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800455a:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 800455e:	f023 0302 	bic.w	r3, r3, #2
}
 8004562:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004564:	604b      	str	r3, [r1, #4]
}
 8004566:	4770      	bx	lr

08004568 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004568:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 800456c:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800456e:	f022 0203 	bic.w	r2, r2, #3
 8004572:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004576:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800457a:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 800457e:	f043 0302 	orr.w	r3, r3, #2
}
 8004582:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004584:	604b      	str	r3, [r1, #4]
}
 8004586:	4770      	bx	lr

08004588 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004588:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800458a:	6980      	ldr	r0, [r0, #24]
}
 800458c:	4010      	ands	r0, r2
 800458e:	4770      	bx	lr

08004590 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004590:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004594:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004598:	69c0      	ldr	r0, [r0, #28]
 800459a:	4018      	ands	r0, r3
}
 800459c:	0c00      	lsrs	r0, r0, #16
 800459e:	4770      	bx	lr

080045a0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80045a0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80045a4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80045a8:	69c0      	ldr	r0, [r0, #28]
 80045aa:	4018      	ands	r0, r3
}
 80045ac:	b280      	uxth	r0, r0
 80045ae:	4770      	bx	lr

080045b0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80045b0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80045b4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80045b8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80045bc:	6940      	ldr	r0, [r0, #20]
}
 80045be:	4010      	ands	r0, r2
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop

080045c4 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80045c4:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80045c8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80045cc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80045d0:	f001 010f 	and.w	r1, r1, #15
 80045d4:	40cb      	lsrs	r3, r1
 80045d6:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80045d8:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	4313      	orrs	r3, r2
}
 80045e0:	4018      	ands	r0, r3
 80045e2:	4770      	bx	lr

080045e4 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80045e4:	6940      	ldr	r0, [r0, #20]
}
 80045e6:	f000 0001 	and.w	r0, r0, #1
 80045ea:	4770      	bx	lr

080045ec <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80045ec:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
{
 80045f0:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80045f2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80045f6:	f022 0207 	bic.w	r2, r2, #7
 80045fa:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80045fe:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8004602:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 8004606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
}
 800460a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800460c:	604b      	str	r3, [r1, #4]
}
 800460e:	4770      	bx	lr

08004610 <USB_EP0_OutStart>:
{
 8004610:	b410      	push	{r4}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <USB_EP0_OutStart+0x54>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004614:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004616:	429c      	cmp	r4, r3
 8004618:	d81a      	bhi.n	8004650 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800461a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004622:	6903      	ldr	r3, [r0, #16]
 8004624:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004628:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800462a:	6903      	ldr	r3, [r0, #16]
 800462c:	f043 0318 	orr.w	r3, r3, #24
 8004630:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004632:	6903      	ldr	r3, [r0, #16]
  if (dma == 1U)
 8004634:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004636:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800463a:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800463c:	d104      	bne.n	8004648 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800463e:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004640:	6803      	ldr	r3, [r0, #0]
 8004642:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004646:	6003      	str	r3, [r0, #0]
}
 8004648:	2000      	movs	r0, #0
 800464a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800464e:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004650:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004654:	2b00      	cmp	r3, #0
 8004656:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800465a:	dae0      	bge.n	800461e <USB_EP0_OutStart+0xe>
}
 800465c:	2000      	movs	r0, #0
 800465e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	4f54300a 	.word	0x4f54300a

08004668 <asn1_get_int>:
#include "asn1.h"
#include <stdint.h>

int asn1_get_int(const uint8_t *buffer, const uint8_t **int_ptr, size_t *nbytes) {
    if (buffer[0] != ASN1_INTEGER) {
 8004668:	f890 c000 	ldrb.w	ip, [r0]
 800466c:	f1bc 0f02 	cmp.w	ip, #2
 8004670:	d12d      	bne.n	80046ce <asn1_get_int+0x66>
int asn1_get_int(const uint8_t *buffer, const uint8_t **int_ptr, size_t *nbytes) {
 8004672:	b570      	push	{r4, r5, r6, lr}
        return -1;
    }

    size_t int_index = 2 + (buffer[1] & ~0x7F ? buffer[1] & 0x7F : 0);
 8004674:	7843      	ldrb	r3, [r0, #1]
 8004676:	4604      	mov	r4, r0
 8004678:	0618      	lsls	r0, r3, #24
 800467a:	d40f      	bmi.n	800469c <asn1_get_int+0x34>
 800467c:	4660      	mov	r0, ip
    size_t data_bytes = asn1_get_len(buffer + 1);

    if (buffer[int_index] == 0 && data_bytes > 1) {
 800467e:	1825      	adds	r5, r4, r0
 8004680:	5c26      	ldrb	r6, [r4, r0]
 8004682:	bb06      	cbnz	r6, 80046c6 <asn1_get_int+0x5e>
 8004684:	2b01      	cmp	r3, #1
 8004686:	d91e      	bls.n	80046c6 <asn1_get_int+0x5e>
        ++int_index;
 8004688:	f100 0c01 	add.w	ip, r0, #1
        --data_bytes;
 800468c:	3b01      	subs	r3, #1
    }

    *int_ptr = buffer + int_index;
 800468e:	eb04 050c 	add.w	r5, r4, ip
    *nbytes = data_bytes;

    return *nbytes + int_index;
 8004692:	eb0c 0003 	add.w	r0, ip, r3
    *int_ptr = buffer + int_index;
 8004696:	600d      	str	r5, [r1, #0]
    *nbytes = data_bytes;
 8004698:	6013      	str	r3, [r2, #0]
}
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    size_t int_index = 2 + (buffer[1] & ~0x7F ? buffer[1] & 0x7F : 0);
 80046a0:	1c98      	adds	r0, r3, #2
    *int_ptr = buffer + int_index;
 80046a2:	1825      	adds	r5, r4, r0

size_t asn1_get_len(const uint8_t *buffer) {
    size_t len = buffer[0];
    if (buffer[0] & ~0x7F) {
        len = 0;
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f6      	beq.n	8004696 <asn1_get_int+0x2e>
 80046a8:	f104 0c01 	add.w	ip, r4, #1
 80046ac:	eb0c 0503 	add.w	r5, ip, r3
        len = 0;
 80046b0:	2300      	movs	r3, #0
            len = len << 8 | buffer[i];
 80046b2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80046b6:	4565      	cmp	r5, ip
            len = len << 8 | buffer[i];
 80046b8:	ea4e 2303 	orr.w	r3, lr, r3, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80046bc:	d1f9      	bne.n	80046b2 <asn1_get_int+0x4a>
    if (buffer[int_index] == 0 && data_bytes > 1) {
 80046be:	5c26      	ldrb	r6, [r4, r0]
 80046c0:	1825      	adds	r5, r4, r0
 80046c2:	2e00      	cmp	r6, #0
 80046c4:	d0de      	beq.n	8004684 <asn1_get_int+0x1c>
    *int_ptr = buffer + int_index;
 80046c6:	600d      	str	r5, [r1, #0]
    return *nbytes + int_index;
 80046c8:	4418      	add	r0, r3
    *nbytes = data_bytes;
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 80046ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80046d2:	4770      	bx	lr

080046d4 <asn1_get_padding_pub_key>:
    if (buffer[i] != ASN1_SEQUENCE) {
 80046d4:	7803      	ldrb	r3, [r0, #0]
 80046d6:	2b30      	cmp	r3, #48	; 0x30
 80046d8:	d12a      	bne.n	8004730 <asn1_get_padding_pub_key+0x5c>
    if (buffer[i] & 0x80) {
 80046da:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80046de:	7842      	ldrb	r2, [r0, #1]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	db28      	blt.n	8004736 <asn1_get_padding_pub_key+0x62>
 80046e4:	2202      	movs	r2, #2
    ++i;
 80046e6:	2301      	movs	r3, #1
    if (buffer[i] != ASN1_SEQUENCE) {
 80046e8:	5c82      	ldrb	r2, [r0, r2]
 80046ea:	2a30      	cmp	r2, #48	; 0x30
 80046ec:	d120      	bne.n	8004730 <asn1_get_padding_pub_key+0x5c>
    ++i;
 80046ee:	1c9a      	adds	r2, r3, #2
    i += asn1_get_len(buffer + i) + 1;
 80046f0:	1881      	adds	r1, r0, r2
    size_t len = buffer[0];
 80046f2:	5c82      	ldrb	r2, [r0, r2]
    if (buffer[0] & ~0x7F) {
 80046f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80046f8:	d122      	bne.n	8004740 <asn1_get_padding_pub_key+0x6c>
        }
    }

    return len;
 80046fa:	3303      	adds	r3, #3
    i += asn1_get_len(buffer + i) + 1;
 80046fc:	4413      	add	r3, r2
    if (buffer[i] != ASN1_BIT_STRING) {
 80046fe:	5cc2      	ldrb	r2, [r0, r3]
 8004700:	2a03      	cmp	r2, #3
 8004702:	d115      	bne.n	8004730 <asn1_get_padding_pub_key+0x5c>
    ++i;
 8004704:	3301      	adds	r3, #1
    if (buffer[i] & 0x80) {
 8004706:	56c1      	ldrsb	r1, [r0, r3]
 8004708:	5cc2      	ldrb	r2, [r0, r3]
 800470a:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 800470c:	bfbc      	itt	lt
 800470e:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 8004712:	189b      	addlt	r3, r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 8004714:	18c2      	adds	r2, r0, r3
 8004716:	7892      	ldrb	r2, [r2, #2]
 8004718:	2a30      	cmp	r2, #48	; 0x30
 800471a:	d109      	bne.n	8004730 <asn1_get_padding_pub_key+0x5c>
    ++i;
 800471c:	3303      	adds	r3, #3
    if (buffer[i] & 0x80) {
 800471e:	56c1      	ldrsb	r1, [r0, r3]
 8004720:	5cc2      	ldrb	r2, [r0, r3]
 8004722:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8004724:	bfbc      	itt	lt
 8004726:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 800472a:	189b      	addlt	r3, r3, r2
    ++i;
 800472c:	1c58      	adds	r0, r3, #1
    return i;
 800472e:	4770      	bx	lr
        return -1;
 8004730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004734:	4770      	bx	lr
        i += buffer[i] & 0x7F;
 8004736:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800473a:	1c53      	adds	r3, r2, #1
    ++i;
 800473c:	3202      	adds	r2, #2
 800473e:	e7d3      	b.n	80046e8 <asn1_get_padding_pub_key+0x14>
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004740:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8004744:	d0d9      	beq.n	80046fa <asn1_get_padding_pub_key+0x26>
size_t asn1_get_padding_pub_key(const uint8_t *buffer) {
 8004746:	b500      	push	{lr}
 8004748:	eb01 0e02 	add.w	lr, r1, r2
        len = 0;
 800474c:	2200      	movs	r2, #0
            len = len << 8 | buffer[i];
 800474e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004752:	458e      	cmp	lr, r1
            len = len << 8 | buffer[i];
 8004754:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004758:	d1f9      	bne.n	800474e <asn1_get_padding_pub_key+0x7a>
    return len;
 800475a:	3303      	adds	r3, #3
    i += asn1_get_len(buffer + i) + 1;
 800475c:	4413      	add	r3, r2
    if (buffer[i] != ASN1_BIT_STRING) {
 800475e:	5cc2      	ldrb	r2, [r0, r3]
 8004760:	2a03      	cmp	r2, #3
 8004762:	d116      	bne.n	8004792 <asn1_get_padding_pub_key+0xbe>
    ++i;
 8004764:	3301      	adds	r3, #1
    if (buffer[i] & 0x80) {
 8004766:	56c1      	ldrsb	r1, [r0, r3]
 8004768:	5cc2      	ldrb	r2, [r0, r3]
 800476a:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 800476c:	bfbc      	itt	lt
 800476e:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 8004772:	189b      	addlt	r3, r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 8004774:	18c2      	adds	r2, r0, r3
 8004776:	7892      	ldrb	r2, [r2, #2]
 8004778:	2a30      	cmp	r2, #48	; 0x30
 800477a:	d10a      	bne.n	8004792 <asn1_get_padding_pub_key+0xbe>
    ++i;
 800477c:	3303      	adds	r3, #3
    if (buffer[i] & 0x80) {
 800477e:	56c1      	ldrsb	r1, [r0, r3]
 8004780:	5cc2      	ldrb	r2, [r0, r3]
 8004782:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8004784:	bfbc      	itt	lt
 8004786:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 800478a:	189b      	addlt	r3, r3, r2
    ++i;
 800478c:	1c58      	adds	r0, r3, #1
}
 800478e:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
 8004792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004796:	f85d fb04 	ldr.w	pc, [sp], #4
 800479a:	bf00      	nop

0800479c <asn1_get_padding_pvt_key>:
    if (buffer[i] != ASN1_SEQUENCE) {
 800479c:	7803      	ldrb	r3, [r0, #0]
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d14f      	bne.n	8004842 <asn1_get_padding_pvt_key+0xa6>
    if (buffer[i] & 0x80) {
 80047a2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80047a6:	7842      	ldrb	r2, [r0, #1]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db4d      	blt.n	8004848 <asn1_get_padding_pvt_key+0xac>
 80047ac:	2202      	movs	r2, #2
    ++i;
 80047ae:	2301      	movs	r3, #1
    if (buffer[i] != ASN1_INTEGER) {
 80047b0:	5c82      	ldrb	r2, [r0, r2]
 80047b2:	2a02      	cmp	r2, #2
 80047b4:	d145      	bne.n	8004842 <asn1_get_padding_pvt_key+0xa6>
size_t asn1_get_padding_pvt_key(const uint8_t *buffer) {
 80047b6:	b500      	push	{lr}
    ++i;
 80047b8:	1c9a      	adds	r2, r3, #2
    i += asn1_get_len(buffer + i) + 1;
 80047ba:	1881      	adds	r1, r0, r2
    size_t len = buffer[0];
 80047bc:	5c82      	ldrb	r2, [r0, r2]
    if (buffer[0] & ~0x7F) {
 80047be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047c2:	d00b      	beq.n	80047dc <asn1_get_padding_pvt_key+0x40>
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80047c4:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80047c8:	d008      	beq.n	80047dc <asn1_get_padding_pvt_key+0x40>
 80047ca:	eb01 0e02 	add.w	lr, r1, r2
        len = 0;
 80047ce:	2200      	movs	r2, #0
            len = len << 8 | buffer[i];
 80047d0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80047d4:	458e      	cmp	lr, r1
            len = len << 8 | buffer[i];
 80047d6:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80047da:	d1f9      	bne.n	80047d0 <asn1_get_padding_pvt_key+0x34>
    return len;
 80047dc:	3303      	adds	r3, #3
    i += asn1_get_len(buffer + i) + 1;
 80047de:	4413      	add	r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 80047e0:	5cc2      	ldrb	r2, [r0, r3]
 80047e2:	2a30      	cmp	r2, #48	; 0x30
 80047e4:	d135      	bne.n	8004852 <asn1_get_padding_pvt_key+0xb6>
    ++i;
 80047e6:	1c5a      	adds	r2, r3, #1
    i += asn1_get_len(buffer + i) + 1;
 80047e8:	1881      	adds	r1, r0, r2
    size_t len = buffer[0];
 80047ea:	5c82      	ldrb	r2, [r0, r2]
    if (buffer[0] & ~0x7F) {
 80047ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047f0:	d00b      	beq.n	800480a <asn1_get_padding_pvt_key+0x6e>
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 80047f2:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80047f6:	d008      	beq.n	800480a <asn1_get_padding_pvt_key+0x6e>
 80047f8:	eb01 0e02 	add.w	lr, r1, r2
        len = 0;
 80047fc:	2200      	movs	r2, #0
            len = len << 8 | buffer[i];
 80047fe:	f811 cf01 	ldrb.w	ip, [r1, #1]!
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004802:	458e      	cmp	lr, r1
            len = len << 8 | buffer[i];
 8004804:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
        for (size_t i = 1; i <= (buffer[0] & 0x7F); ++i) {
 8004808:	d1f9      	bne.n	80047fe <asn1_get_padding_pvt_key+0x62>
    return len;
 800480a:	3302      	adds	r3, #2
    i += asn1_get_len(buffer + i) + 1;
 800480c:	4413      	add	r3, r2
    if (buffer[i] != ASN1_OCTET_STRING) {
 800480e:	5cc2      	ldrb	r2, [r0, r3]
 8004810:	2a04      	cmp	r2, #4
 8004812:	d11e      	bne.n	8004852 <asn1_get_padding_pvt_key+0xb6>
    ++i;
 8004814:	3301      	adds	r3, #1
    if (buffer[i] & 0x80) {
 8004816:	56c1      	ldrsb	r1, [r0, r3]
 8004818:	5cc2      	ldrb	r2, [r0, r3]
 800481a:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 800481c:	bfbc      	itt	lt
 800481e:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 8004822:	189b      	addlt	r3, r3, r2
    if (buffer[i] != ASN1_SEQUENCE) {
 8004824:	18c2      	adds	r2, r0, r3
 8004826:	7852      	ldrb	r2, [r2, #1]
 8004828:	2a30      	cmp	r2, #48	; 0x30
 800482a:	d112      	bne.n	8004852 <asn1_get_padding_pvt_key+0xb6>
    ++i;
 800482c:	3302      	adds	r3, #2
    if (buffer[i] & 0x80) {
 800482e:	56c1      	ldrsb	r1, [r0, r3]
 8004830:	5cc2      	ldrb	r2, [r0, r3]
 8004832:	2900      	cmp	r1, #0
        i += buffer[i] & 0x7F;
 8004834:	bfbc      	itt	lt
 8004836:	f002 027f 	andlt.w	r2, r2, #127	; 0x7f
 800483a:	189b      	addlt	r3, r3, r2
    ++i;
 800483c:	1c58      	adds	r0, r3, #1
}
 800483e:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
 8004842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004846:	4770      	bx	lr
        i += buffer[i] & 0x7F;
 8004848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800484c:	1c53      	adds	r3, r2, #1
    ++i;
 800484e:	3202      	adds	r2, #2
 8004850:	e7ae      	b.n	80047b0 <asn1_get_padding_pvt_key+0x14>
        return -1;
 8004852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004856:	f85d fb04 	ldr.w	pc, [sp], #4
 800485a:	bf00      	nop

0800485c <base64_read>:
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
};

int base64_read(const uint8_t *in, const size_t in_size, uint8_t *out, const size_t out_size) {
 800485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (out_size < in_size * 4 / 3) {
 8004860:	4d26      	ldr	r5, [pc, #152]	; (80048fc <base64_read+0xa0>)
 8004862:	008c      	lsls	r4, r1, #2
 8004864:	fba5 5404 	umull	r5, r4, r5, r4
 8004868:	ebb3 0f54 	cmp.w	r3, r4, lsr #1
 800486c:	d33f      	bcc.n	80048ee <base64_read+0x92>
        return 0;
    }

    size_t w = 0;
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 800486e:	ea4f 0854 	mov.w	r8, r4, lsr #1
 8004872:	2900      	cmp	r1, #0
 8004874:	d03e      	beq.n	80048f4 <base64_read+0x98>
 8004876:	4c22      	ldr	r4, [pc, #136]	; (8004900 <base64_read+0xa4>)
 8004878:	4684      	mov	ip, r0
 800487a:	4696      	mov	lr, r2
 800487c:	2600      	movs	r6, #0
 800487e:	f1c2 0701 	rsb	r7, r2, #1
        out[w + 0] = (v64[in[r + 0]] << 2) | (v64[in[r + 1]] >> 4);
 8004882:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8004886:	f89c 0000 	ldrb.w	r0, [ip]
 800488a:	f934 5015 	ldrsh.w	r5, [r4, r5, lsl #1]
 800488e:	f934 0010 	ldrsh.w	r0, [r4, r0, lsl #1]
 8004892:	112d      	asrs	r5, r5, #4
 8004894:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
 8004898:	f88e 5000 	strb.w	r5, [lr]
        out[w + 1] = (v64[in[r + 1]] << 4) | (v64[in[r + 2]] >> 2);
 800489c:	f89c 5002 	ldrb.w	r5, [ip, #2]
 80048a0:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80048a4:	f934 5015 	ldrsh.w	r5, [r4, r5, lsl #1]
 80048a8:	f934 0010 	ldrsh.w	r0, [r4, r0, lsl #1]
 80048ac:	10ad      	asrs	r5, r5, #2
 80048ae:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 80048b2:	f88e 5001 	strb.w	r5, [lr, #1]
        out[w + 2] = (v64[in[r + 2]] << 6) | (v64[in[r + 3]] >> 0);
 80048b6:	f89c 5002 	ldrb.w	r5, [ip, #2]
 80048ba:	f89c 0003 	ldrb.w	r0, [ip, #3]
 80048be:	f934 5015 	ldrsh.w	r5, [r4, r5, lsl #1]
 80048c2:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 80048c6:	3604      	adds	r6, #4
        out[w + 2] = (v64[in[r + 2]] << 6) | (v64[in[r + 3]] >> 0);
 80048c8:	ea40 1085 	orr.w	r0, r0, r5, lsl #6
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 80048cc:	42b1      	cmp	r1, r6
        out[w + 2] = (v64[in[r + 2]] << 6) | (v64[in[r + 3]] >> 0);
 80048ce:	f88e 0002 	strb.w	r0, [lr, #2]
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 80048d2:	f10c 0c04 	add.w	ip, ip, #4
 80048d6:	eb07 000e 	add.w	r0, r7, lr
 80048da:	f10e 0e03 	add.w	lr, lr, #3
 80048de:	d8d0      	bhi.n	8004882 <base64_read+0x26>
    }

    if (w - 2 < out_size) {
 80048e0:	4283      	cmp	r3, r0
        out[w - 2] = '\0';
 80048e2:	bf84      	itt	hi
 80048e4:	2300      	movhi	r3, #0
 80048e6:	5413      	strbhi	r3, [r2, r0]
    }

    return in_size * 4 / 3;
 80048e8:	4640      	mov	r0, r8
}
 80048ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0;
 80048ee:	2000      	movs	r0, #0
}
 80048f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (size_t r = 0; r < in_size; r += 4, w += 3) {
 80048f4:	f06f 0001 	mvn.w	r0, #1
 80048f8:	e7f2      	b.n	80048e0 <base64_read+0x84>
 80048fa:	bf00      	nop
 80048fc:	aaaaaaab 	.word	0xaaaaaaab
 8004900:	0800a8fc 	.word	0x0800a8fc

08004904 <bn_div.part.0>:
    bn_memset(z1_ptr, 0, 0, bn_size_shift);
    bn_assign(z1_ptr, bn_size_shift, z0_ptr, 0, in_bn_size + 1);
    bn_add(left, z1_ptr, left, in_bn_size << 1);
}

void bn_div(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8004904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	b0e7      	sub	sp, #412	; 0x19c
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 800490a:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800490e:	ac06      	add	r4, sp, #24
void bn_div(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8004910:	461e      	mov	r6, r3
 8004912:	4680      	mov	r8, r0
 8004914:	460d      	mov	r5, r1
 8004916:	4617      	mov	r7, r2
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004918:	2100      	movs	r1, #0
 800491a:	464a      	mov	r2, r9
 800491c:	4620      	mov	r0, r4
 800491e:	f003 f899 	bl	8007a54 <memset>
    for (size_t i = 0; i < size; i++) {
 8004922:	b12e      	cbz	r6, 8004930 <bn_div.part.0+0x2c>
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 8004924:	2301      	movs	r3, #1
    for (size_t i = 0; i < size; i++) {
 8004926:	429e      	cmp	r6, r3
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	bf1c      	itt	ne
 800492c:	2300      	movne	r3, #0
 800492e:	6063      	strne	r3, [r4, #4]
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004930:	4629      	mov	r1, r5
 8004932:	ad26      	add	r5, sp, #152	; 0x98
 8004934:	464a      	mov	r2, r9
 8004936:	4628      	mov	r0, r5
 8004938:	f003 f93d 	bl	8007bb6 <memcpy>
 800493c:	4641      	mov	r1, r8
 800493e:	464a      	mov	r2, r9
 8004940:	a846      	add	r0, sp, #280	; 0x118
 8004942:	f003 f938 	bl	8007bb6 <memcpy>
    bn_assign(&tmp, 0, bignum1, 0, size);

    uint8_t overflow = 0;
    while (bn_cmp(&denom, bignum1, size) != BN_CMP_LARGER) {
        const BN_DTYPE_TMP half_max = 1 + (BN_DTYPE_TMP)(BN_MAX_VAL / 2);
        if (denom[size - 1] >= half_max) {
 8004946:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
 800494a:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 800494e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8004952:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004956:	46be      	mov	lr, r7
void bn_div(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8004958:	4661      	mov	r1, ip
 800495a:	4642      	mov	r2, r8
 800495c:	4633      	mov	r3, r6
 800495e:	e004      	b.n	800496a <bn_div.part.0+0x66>
bignum_compare_state bn_cmp(const bignum_t *bignum1, const bignum_t *bignum2, size_t size) {
    do {
        --size;
        if ((*bignum1)[size] > (*bignum2)[size]) {
            return BN_CMP_LARGER;
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8004960:	f0c0 8188 	bcc.w	8004c74 <bn_div.part.0+0x370>
            return BN_CMP_SMALLER;
        }
    } while (size != 0);
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8185 	beq.w	8004c74 <bn_div.part.0+0x370>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 800496a:	f852 7d04 	ldr.w	r7, [r2, #-4]!
 800496e:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8004972:	4287      	cmp	r7, r0
        --size;
 8004974:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004978:	d9f2      	bls.n	8004960 <bn_div.part.0+0x5c>
 800497a:	6829      	ldr	r1, [r5, #0]
 800497c:	4677      	mov	r7, lr
 800497e:	462b      	mov	r3, r5
 8004980:	a845      	add	r0, sp, #276	; 0x114
    (*bignum)[0] <<= 1;
}

static void rshift_one_bit(bignum_t *bignum) {
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 8004982:	084a      	lsrs	r2, r1, #1
 8004984:	6859      	ldr	r1, [r3, #4]
 8004986:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800498a:	f843 2b04 	str.w	r2, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 800498e:	4283      	cmp	r3, r0
 8004990:	d1f7      	bne.n	8004982 <bn_div.part.0+0x7e>
    }
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 8004992:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8004994:	6821      	ldr	r1, [r4, #0]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	67eb      	str	r3, [r5, #124]	; 0x7c
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 800499a:	a825      	add	r0, sp, #148	; 0x94
 800499c:	4623      	mov	r3, r4
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 800499e:	084a      	lsrs	r2, r1, #1
 80049a0:	6859      	ldr	r1, [r3, #4]
 80049a2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80049a6:	f843 2b04 	str.w	r2, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 80049aa:	4283      	cmp	r3, r0
 80049ac:	d1f7      	bne.n	800499e <bn_div.part.0+0x9a>
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 80049ae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80049b0:	085b      	lsrs	r3, r3, #1
 80049b2:	67e3      	str	r3, [r4, #124]	; 0x7c
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80049b4:	464a      	mov	r2, r9
 80049b6:	2100      	movs	r1, #0
 80049b8:	4638      	mov	r0, r7
 80049ba:	f003 f84b 	bl	8007a54 <memset>
    for (size_t i = 0; i < size; ++i) {
 80049be:	ab46      	add	r3, sp, #280	; 0x118
 80049c0:	445b      	add	r3, fp
 80049c2:	f1ba 0f03 	cmp.w	sl, #3
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	f3c7 0302 	ubfx	r3, r7, #0, #3
 80049cc:	bf94      	ite	ls
 80049ce:	2200      	movls	r2, #0
 80049d0:	2201      	movhi	r2, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf18      	it	ne
 80049d6:	2200      	movne	r2, #0
 80049d8:	1f3b      	subs	r3, r7, #4
 80049da:	9202      	str	r2, [sp, #8]
 80049dc:	9305      	str	r3, [sp, #20]
 80049de:	aa46      	add	r2, sp, #280	; 0x118
 80049e0:	444b      	add	r3, r9
 80049e2:	eb02 0c09 	add.w	ip, r2, r9
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	ea4f 0e56 	mov.w	lr, r6, lsr #1
 80049ec:	f026 0201 	bic.w	r2, r6, #1
 80049f0:	2e00      	cmp	r6, #0
 80049f2:	f000 813c 	beq.w	8004c6e <bn_div.part.0+0x36a>
 80049f6:	4620      	mov	r0, r4
 80049f8:	2100      	movs	r1, #0
 80049fa:	46a1      	mov	r9, r4
 80049fc:	e002      	b.n	8004a04 <bn_div.part.0+0x100>
 80049fe:	428e      	cmp	r6, r1
 8004a00:	f000 8135 	beq.w	8004c6e <bn_div.part.0+0x36a>
        if ((*bignum)[i] != 0) {
 8004a04:	f850 3b04 	ldr.w	r3, [r0], #4
    for (size_t i = 0; i < size; ++i) {
 8004a08:	3101      	adds	r1, #1
        if ((*bignum)[i] != 0) {
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f7      	beq.n	80049fe <bn_div.part.0+0xfa>
 8004a0e:	464b      	mov	r3, r9
 8004a10:	9801      	ldr	r0, [sp, #4]
 8004a12:	46c1      	mov	r9, r8
 8004a14:	4631      	mov	r1, r6
 8004a16:	469a      	mov	sl, r3
 8004a18:	4693      	mov	fp, r2
 8004a1a:	e002      	b.n	8004a22 <bn_div.part.0+0x11e>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8004a1c:	f0c0 8147 	bcc.w	8004cae <bn_div.part.0+0x3aa>
    } while (size != 0);
 8004a20:	b139      	cbz	r1, 8004a32 <bn_div.part.0+0x12e>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004a22:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8004a26:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8004a2a:	429a      	cmp	r2, r3
        --size;
 8004a2c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004a30:	d9f4      	bls.n	8004a1c <bn_div.part.0+0x118>
 8004a32:	9801      	ldr	r0, [sp, #4]
 8004a34:	46c1      	mov	r9, r8
 8004a36:	4631      	mov	r1, r6
 8004a38:	e002      	b.n	8004a40 <bn_div.part.0+0x13c>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8004a3a:	f0c0 813b 	bcc.w	8004cb4 <bn_div.part.0+0x3b0>
    } while (size != 0);
 8004a3e:	b139      	cbz	r1, 8004a50 <bn_div.part.0+0x14c>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004a40:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8004a44:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8004a48:	429a      	cmp	r2, r3
        --size;
 8004a4a:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004a4e:	d9f4      	bls.n	8004a3a <bn_div.part.0+0x136>
 8004a50:	4653      	mov	r3, sl
 8004a52:	465a      	mov	r2, fp
 8004a54:	46aa      	mov	sl, r5
 8004a56:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	9303      	str	r3, [sp, #12]
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004a5e:	f8d9 3000 	ldr.w	r3, [r9]
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 8004a62:	f85a bb04 	ldr.w	fp, [sl], #4
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004a66:	4241      	negs	r1, r0
 8004a68:	18c9      	adds	r1, r1, r3
 8004a6a:	f080 0001 	eor.w	r0, r0, #1
 8004a6e:	f140 0000 	adc.w	r0, r0, #0
 8004a72:	ebb1 010b 	subs.w	r1, r1, fp
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8004a76:	f849 1b04 	str.w	r1, [r9], #4
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004a7a:	f160 0000 	sbc.w	r0, r0, #0
        borrow = res <= BN_MAX_VAL;
 8004a7e:	fab0 f080 	clz	r0, r0
    for (size_t i = 0; i < size; ++i) {
 8004a82:	45e1      	cmp	r9, ip
        borrow = res <= BN_MAX_VAL;
 8004a84:	ea4f 1050 	mov.w	r0, r0, lsr #5
    for (size_t i = 0; i < size; ++i) {
 8004a88:	d1e9      	bne.n	8004a5e <bn_div.part.0+0x15a>
    for (size_t i = 0; i < size; ++i) {
 8004a8a:	9902      	ldr	r1, [sp, #8]
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	2900      	cmp	r1, #0
 8004a90:	f000 8116 	beq.w	8004cc0 <bn_div.part.0+0x3bc>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	6820      	ldr	r0, [r4, #0]
 8004a98:	4301      	orrs	r1, r0
 8004a9a:	6039      	str	r1, [r7, #0]
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	9907      	ldr	r1, [sp, #28]
 8004aa0:	f1be 0f01 	cmp.w	lr, #1
 8004aa4:	ea41 0100 	orr.w	r1, r1, r0
 8004aa8:	6079      	str	r1, [r7, #4]
    for (size_t i = 0; i < size; ++i) {
 8004aaa:	f240 80b7 	bls.w	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	9808      	ldr	r0, [sp, #32]
 8004ab2:	4301      	orrs	r1, r0
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004aba:	f1be 0f02 	cmp.w	lr, #2
 8004abe:	ea41 0100 	orr.w	r1, r1, r0
 8004ac2:	60f9      	str	r1, [r7, #12]
    for (size_t i = 0; i < size; ++i) {
 8004ac4:	f000 80aa 	beq.w	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004ac8:	6938      	ldr	r0, [r7, #16]
 8004aca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004acc:	4301      	orrs	r1, r0
 8004ace:	6139      	str	r1, [r7, #16]
 8004ad0:	6978      	ldr	r0, [r7, #20]
 8004ad2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ad4:	f1be 0f03 	cmp.w	lr, #3
 8004ad8:	ea41 0100 	orr.w	r1, r1, r0
 8004adc:	6179      	str	r1, [r7, #20]
    for (size_t i = 0; i < size; ++i) {
 8004ade:	f000 809d 	beq.w	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004ae2:	69b9      	ldr	r1, [r7, #24]
 8004ae4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ae6:	4301      	orrs	r1, r0
 8004ae8:	61b9      	str	r1, [r7, #24]
 8004aea:	69f8      	ldr	r0, [r7, #28]
 8004aec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004aee:	f1be 0f04 	cmp.w	lr, #4
 8004af2:	ea41 0100 	orr.w	r1, r1, r0
 8004af6:	61f9      	str	r1, [r7, #28]
    for (size_t i = 0; i < size; ++i) {
 8004af8:	f000 8090 	beq.w	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004afc:	6a38      	ldr	r0, [r7, #32]
 8004afe:	9003      	str	r0, [sp, #12]
 8004b00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b04:	4301      	orrs	r1, r0
 8004b06:	6279      	str	r1, [r7, #36]	; 0x24
 8004b08:	9803      	ldr	r0, [sp, #12]
 8004b0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b0c:	f1be 0f05 	cmp.w	lr, #5
 8004b10:	ea40 0001 	orr.w	r0, r0, r1
 8004b14:	6238      	str	r0, [r7, #32]
 8004b16:	f000 8081 	beq.w	8004c1c <bn_div.part.0+0x318>
 8004b1a:	e9dd 1910 	ldrd	r1, r9, [sp, #64]	; 0x40
 8004b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b20:	4301      	orrs	r1, r0
 8004b22:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b26:	f1be 0f06 	cmp.w	lr, #6
 8004b2a:	ea41 0109 	orr.w	r1, r1, r9
 8004b2e:	62f9      	str	r1, [r7, #44]	; 0x2c
    for (size_t i = 0; i < size; ++i) {
 8004b30:	d074      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b32:	e9dd 1912 	ldrd	r1, r9, [sp, #72]	; 0x48
 8004b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b38:	4301      	orrs	r1, r0
 8004b3a:	6339      	str	r1, [r7, #48]	; 0x30
 8004b3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b3e:	f1be 0f07 	cmp.w	lr, #7
 8004b42:	ea41 0109 	orr.w	r1, r1, r9
 8004b46:	6379      	str	r1, [r7, #52]	; 0x34
    for (size_t i = 0; i < size; ++i) {
 8004b48:	d068      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b4a:	e9dd 1914 	ldrd	r1, r9, [sp, #80]	; 0x50
 8004b4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b50:	4301      	orrs	r1, r0
 8004b52:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b56:	f1be 0f08 	cmp.w	lr, #8
 8004b5a:	ea41 0109 	orr.w	r1, r1, r9
 8004b5e:	63f9      	str	r1, [r7, #60]	; 0x3c
    for (size_t i = 0; i < size; ++i) {
 8004b60:	d05c      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b62:	e9dd 1916 	ldrd	r1, r9, [sp, #88]	; 0x58
 8004b66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004b68:	4301      	orrs	r1, r0
 8004b6a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b6e:	f1be 0f09 	cmp.w	lr, #9
 8004b72:	ea41 0109 	orr.w	r1, r1, r9
 8004b76:	6479      	str	r1, [r7, #68]	; 0x44
    for (size_t i = 0; i < size; ++i) {
 8004b78:	d050      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b7a:	e9dd 1918 	ldrd	r1, r9, [sp, #96]	; 0x60
 8004b7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b80:	4301      	orrs	r1, r0
 8004b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004b86:	f1be 0f0a 	cmp.w	lr, #10
 8004b8a:	ea41 0109 	orr.w	r1, r1, r9
 8004b8e:	64f9      	str	r1, [r7, #76]	; 0x4c
    for (size_t i = 0; i < size; ++i) {
 8004b90:	d044      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004b92:	e9dd 191a 	ldrd	r1, r9, [sp, #104]	; 0x68
 8004b96:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004b98:	4301      	orrs	r1, r0
 8004b9a:	6539      	str	r1, [r7, #80]	; 0x50
 8004b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b9e:	f1be 0f0b 	cmp.w	lr, #11
 8004ba2:	ea41 0109 	orr.w	r1, r1, r9
 8004ba6:	6579      	str	r1, [r7, #84]	; 0x54
    for (size_t i = 0; i < size; ++i) {
 8004ba8:	d038      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004baa:	e9dd 191c 	ldrd	r1, r9, [sp, #112]	; 0x70
 8004bae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004bb0:	4301      	orrs	r1, r0
 8004bb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004bb6:	f1be 0f0c 	cmp.w	lr, #12
 8004bba:	ea41 0109 	orr.w	r1, r1, r9
 8004bbe:	65f9      	str	r1, [r7, #92]	; 0x5c
    for (size_t i = 0; i < size; ++i) {
 8004bc0:	d02c      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004bc2:	e9dd 191e 	ldrd	r1, r9, [sp, #120]	; 0x78
 8004bc6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004bc8:	4301      	orrs	r1, r0
 8004bca:	6639      	str	r1, [r7, #96]	; 0x60
 8004bcc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004bce:	f1be 0f0d 	cmp.w	lr, #13
 8004bd2:	ea41 0109 	orr.w	r1, r1, r9
 8004bd6:	6679      	str	r1, [r7, #100]	; 0x64
    for (size_t i = 0; i < size; ++i) {
 8004bd8:	d020      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004bda:	e9dd 1920 	ldrd	r1, r9, [sp, #128]	; 0x80
 8004bde:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004be0:	4301      	orrs	r1, r0
 8004be2:	66b9      	str	r1, [r7, #104]	; 0x68
 8004be4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004be6:	f1be 0f0e 	cmp.w	lr, #14
 8004bea:	ea41 0109 	orr.w	r1, r1, r9
 8004bee:	66f9      	str	r1, [r7, #108]	; 0x6c
    for (size_t i = 0; i < size; ++i) {
 8004bf0:	d014      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004bf2:	e9dd 1922 	ldrd	r1, r9, [sp, #136]	; 0x88
 8004bf6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004bf8:	4301      	orrs	r1, r0
 8004bfa:	6739      	str	r1, [r7, #112]	; 0x70
 8004bfc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004bfe:	f1be 0f0f 	cmp.w	lr, #15
 8004c02:	ea41 0109 	orr.w	r1, r1, r9
 8004c06:	6779      	str	r1, [r7, #116]	; 0x74
    for (size_t i = 0; i < size; ++i) {
 8004c08:	d008      	beq.n	8004c1c <bn_div.part.0+0x318>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004c0a:	e9dd 1924 	ldrd	r1, r9, [sp, #144]	; 0x90
 8004c0e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004c10:	4301      	orrs	r1, r0
 8004c12:	67b9      	str	r1, [r7, #120]	; 0x78
 8004c14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c16:	ea41 0109 	orr.w	r1, r1, r9
 8004c1a:	67f9      	str	r1, [r7, #124]	; 0x7c
    for (size_t i = 0; i < size; ++i) {
 8004c1c:	4296      	cmp	r6, r2
 8004c1e:	d006      	beq.n	8004c2e <bn_div.part.0+0x32a>
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004c20:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
 8004c24:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8004c28:	4301      	orrs	r1, r0
 8004c2a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    for (size_t i = 0; i < size; ++i) {
 8004c2e:	46a1      	mov	r9, r4
 8004c30:	f859 0b7c 	ldr.w	r0, [r9], #124
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 8004c34:	0841      	lsrs	r1, r0, #1
 8004c36:	6858      	ldr	r0, [r3, #4]
 8004c38:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8004c3c:	f843 1b04 	str.w	r1, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8004c40:	4599      	cmp	r9, r3
 8004c42:	d1f7      	bne.n	8004c34 <bn_div.part.0+0x330>
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 8004c44:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004c46:	6828      	ldr	r0, [r5, #0]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	67e3      	str	r3, [r4, #124]	; 0x7c
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8004c4c:	f50d 798a 	add.w	r9, sp, #276	; 0x114
 8004c50:	462b      	mov	r3, r5
        (*bignum)[i] = ((*bignum)[i] >> 1) | ((*bignum)[i + 1] << (BN_WORD_SIZE * 8 - 1));
 8004c52:	0841      	lsrs	r1, r0, #1
 8004c54:	6858      	ldr	r0, [r3, #4]
 8004c56:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8004c5a:	f843 1b04 	str.w	r1, [r3], #4
    for (size_t i = 0; i < BN_ARRAY_SIZE - 1; ++i) {
 8004c5e:	4599      	cmp	r9, r3
 8004c60:	d1f7      	bne.n	8004c52 <bn_div.part.0+0x34e>
    (*bignum)[BN_ARRAY_SIZE - 1] >>= 1;
 8004c62:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	67eb      	str	r3, [r5, #124]	; 0x7c
    for (size_t i = 0; i < size; ++i) {
 8004c68:	2e00      	cmp	r6, #0
 8004c6a:	f47f aec4 	bne.w	80049f6 <bn_div.part.0+0xf2>
}
 8004c6e:	b067      	add	sp, #412	; 0x19c
 8004c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (denom[size - 1] >= half_max) {
 8004c74:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db2f      	blt.n	8004cdc <bn_div.part.0+0x3d8>
 8004c7c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004c7e:	ab25      	add	r3, sp, #148	; 0x94
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8004c80:	004a      	lsls	r2, r1, #1
 8004c82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c86:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004c8a:	42a3      	cmp	r3, r4
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8004c8c:	605a      	str	r2, [r3, #4]
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004c8e:	d1f7      	bne.n	8004c80 <bn_div.part.0+0x37c>
    (*bignum)[0] <<= 1;
 8004c90:	004b      	lsls	r3, r1, #1
 8004c92:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8004c94:	6023      	str	r3, [r4, #0]
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004c96:	ab45      	add	r3, sp, #276	; 0x114
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8004c98:	004a      	lsls	r2, r1, #1
 8004c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c9e:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004ca2:	42ab      	cmp	r3, r5
        (*bignum)[i] = ((*bignum)[i] << 1) | ((*bignum)[i - 1] >> (BN_WORD_SIZE * 8 - 1));
 8004ca4:	605a      	str	r2, [r3, #4]
    for (size_t i = BN_ARRAY_SIZE - 1; i > 0; --i) {
 8004ca6:	d1f7      	bne.n	8004c98 <bn_div.part.0+0x394>
    (*bignum)[0] <<= 1;
 8004ca8:	0049      	lsls	r1, r1, #1
 8004caa:	6029      	str	r1, [r5, #0]
}
 8004cac:	e654      	b.n	8004958 <bn_div.part.0+0x54>
 8004cae:	4653      	mov	r3, sl
 8004cb0:	465a      	mov	r2, fp
 8004cb2:	e7bc      	b.n	8004c2e <bn_div.part.0+0x32a>
 8004cb4:	9902      	ldr	r1, [sp, #8]
 8004cb6:	4653      	mov	r3, sl
 8004cb8:	465a      	mov	r2, fp
    for (size_t i = 0; i < size; ++i) {
 8004cba:	2900      	cmp	r1, #0
 8004cbc:	f47f aeea 	bne.w	8004a94 <bn_div.part.0+0x190>
 8004cc0:	9905      	ldr	r1, [sp, #20]
 8004cc2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004cc6:	46a1      	mov	r9, r4
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004cc8:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8004ccc:	f859 bb04 	ldr.w	fp, [r9], #4
    for (size_t i = 0; i < size; ++i) {
 8004cd0:	458a      	cmp	sl, r1
        (*bignum_res)[i] = (*bignum1)[i] | (*bignum2)[i];
 8004cd2:	ea40 000b 	orr.w	r0, r0, fp
 8004cd6:	6008      	str	r0, [r1, #0]
    for (size_t i = 0; i < size; ++i) {
 8004cd8:	d1f6      	bne.n	8004cc8 <bn_div.part.0+0x3c4>
 8004cda:	e7a8      	b.n	8004c2e <bn_div.part.0+0x32a>
 8004cdc:	4677      	mov	r7, lr
 8004cde:	e669      	b.n	80049b4 <bn_div.part.0+0xb0>

08004ce0 <bn_inner_karatsuba>:
static void bn_inner_karatsuba(bignum_t *left, const bignum_t *right, const size_t in_bn_size) {
 8004ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce4:	ed2d 8b02 	vpush	{d8}
 8004ce8:	b0c7      	sub	sp, #284	; 0x11c
 8004cea:	466b      	mov	r3, sp
 8004cec:	af00      	add	r7, sp, #0
    if (in_bn_size == 1) {
 8004cee:	2a01      	cmp	r2, #1
static void bn_inner_karatsuba(bignum_t *left, const bignum_t *right, const size_t in_bn_size) {
 8004cf0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004cf4:	ee08 3a10 	vmov	s16, r3
    if (in_bn_size == 1) {
 8004cf8:	f000 8156 	beq.w	8004fa8 <bn_inner_karatsuba+0x2c8>
    for (size_t i = 0; i < size; ++i) {
 8004cfc:	4614      	mov	r4, r2
 8004cfe:	2a00      	cmp	r2, #0
 8004d00:	f000 8146 	beq.w	8004f90 <bn_inner_karatsuba+0x2b0>
 8004d04:	1f05      	subs	r5, r0, #4
 8004d06:	462a      	mov	r2, r5
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e002      	b.n	8004d12 <bn_inner_karatsuba+0x32>
 8004d0c:	429c      	cmp	r4, r3
 8004d0e:	f000 813f 	beq.w	8004f90 <bn_inner_karatsuba+0x2b0>
        if ((*bignum)[i] != 0) {
 8004d12:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for (size_t i = 0; i < size; ++i) {
 8004d16:	3301      	adds	r3, #1
        if ((*bignum)[i] != 0) {
 8004d18:	2900      	cmp	r1, #0
 8004d1a:	d0f7      	beq.n	8004d0c <bn_inner_karatsuba+0x2c>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f1a3 0904 	sub.w	r9, r3, #4
 8004d22:	464a      	mov	r2, r9
 8004d24:	2300      	movs	r3, #0
 8004d26:	e002      	b.n	8004d2e <bn_inner_karatsuba+0x4e>
    for (size_t i = 0; i < size; ++i) {
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	f000 812c 	beq.w	8004f86 <bn_inner_karatsuba+0x2a6>
        if ((*bignum)[i] != 0) {
 8004d2e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for (size_t i = 0; i < size; ++i) {
 8004d32:	3301      	adds	r3, #1
        if ((*bignum)[i] != 0) {
 8004d34:	2900      	cmp	r1, #0
 8004d36:	d0f7      	beq.n	8004d28 <bn_inner_karatsuba+0x48>
    memset(z, 0, z_size * (in_bn_size << 1) * BN_WORD_SIZE);
 8004d38:	0122      	lsls	r2, r4, #4
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	f107 0018 	add.w	r0, r7, #24
 8004d40:	f002 fe88 	bl	8007a54 <memset>
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8004d44:	693b      	ldr	r3, [r7, #16]
    const size_t bn_size_shift = in_bn_size >> 1;
 8004d46:	0866      	lsrs	r6, r4, #1
    bignum_t* z1_ptr = (bignum_t *)((BN_DTYPE *) z + (in_bn_size << 1));
 8004d48:	f107 0218 	add.w	r2, r7, #24
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8004d4c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    bignum_t* z1_ptr = (bignum_t *)((BN_DTYPE *) z + (in_bn_size << 1));
 8004d50:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8004d54:	2100      	movs	r1, #0
 8004d56:	ee08 3a90 	vmov	s17, r3
    bignum_t* z1_ptr = (bignum_t *)((BN_DTYPE *) z + (in_bn_size << 1));
 8004d5a:	60ba      	str	r2, [r7, #8]
    for (size_t i = 0; i + 1 < size; ++i) {
 8004d5c:	f1a3 0804 	sub.w	r8, r3, #4
    bn_add_carry((bignum_t*)*left, (bignum_t*)(*left + bn_size_shift), z0_ptr, bn_size_shift + 1);
 8004d60:	00b2      	lsls	r2, r6, #2
 8004d62:	f107 0318 	add.w	r3, r7, #24
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	469e      	mov	lr, r3
 8004d6a:	46ac      	mov	ip, r5
    uint8_t carry = 0;
 8004d6c:	460a      	mov	r2, r1
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004d6e:	4608      	mov	r0, r1
 8004d70:	469b      	mov	fp, r3
 8004d72:	f858 af04 	ldr.w	sl, [r8, #4]!
 8004d76:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8004d7a:	eb13 030a 	adds.w	r3, r3, sl
 8004d7e:	eb40 0a00 	adc.w	sl, r0, r0
 8004d82:	189b      	adds	r3, r3, r2
 8004d84:	f14a 0200 	adc.w	r2, sl, #0
        carry = tmp > BN_MAX_VAL;
 8004d88:	3a00      	subs	r2, #0
    for (size_t i = 0; i + 1 < size; ++i) {
 8004d8a:	f101 0101 	add.w	r1, r1, #1
        carry = tmp > BN_MAX_VAL;
 8004d8e:	bf18      	it	ne
 8004d90:	2201      	movne	r2, #1
    for (size_t i = 0; i + 1 < size; ++i) {
 8004d92:	428e      	cmp	r6, r1
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8004d94:	f84e 3b04 	str.w	r3, [lr], #4
    for (size_t i = 0; i + 1 < size; ++i) {
 8004d98:	d1eb      	bne.n	8004d72 <bn_inner_karatsuba+0x92>
    (*bignum_res)[size - 1] = carry;
 8004d9a:	f107 0118 	add.w	r1, r7, #24
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8004d9e:	6878      	ldr	r0, [r7, #4]
    (*bignum_res)[size - 1] = carry;
 8004da0:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8004da4:	697a      	ldr	r2, [r7, #20]
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004da6:	f8c7 b00c 	str.w	fp, [r7, #12]
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8004daa:	eb02 0a00 	add.w	sl, r2, r0
    for (size_t i = 0; i + 1 < size; ++i) {
 8004dae:	68ba      	ldr	r2, [r7, #8]
    bn_add_carry((bignum_t*)*right, (bignum_t*)(*right + bn_size_shift), z1_ptr, bn_size_shift + 1);
 8004db0:	2100      	movs	r1, #0
 8004db2:	f1a2 0804 	sub.w	r8, r2, #4
 8004db6:	f1aa 0e04 	sub.w	lr, sl, #4
 8004dba:	46c4      	mov	ip, r8
    uint8_t carry = 0;
 8004dbc:	460a      	mov	r2, r1
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004dbe:	4608      	mov	r0, r1
 8004dc0:	f85e bf04 	ldr.w	fp, [lr, #4]!
 8004dc4:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8004dc8:	eb13 030b 	adds.w	r3, r3, fp
 8004dcc:	eb40 0b00 	adc.w	fp, r0, r0
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	f14b 0b00 	adc.w	fp, fp, #0
        carry = tmp > BN_MAX_VAL;
 8004dd6:	f1bb 0200 	subs.w	r2, fp, #0
    for (size_t i = 0; i + 1 < size; ++i) {
 8004dda:	f101 0101 	add.w	r1, r1, #1
        carry = tmp > BN_MAX_VAL;
 8004dde:	bf18      	it	ne
 8004de0:	2201      	movne	r2, #1
    for (size_t i = 0; i + 1 < size; ++i) {
 8004de2:	428e      	cmp	r6, r1
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8004de4:	f84c 3f04 	str.w	r3, [ip, #4]!
    for (size_t i = 0; i + 1 < size; ++i) {
 8004de8:	d1ea      	bne.n	8004dc0 <bn_inner_karatsuba+0xe0>
    (*bignum_res)[size - 1] = carry;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    bn_inner_karatsuba(z0_ptr, z1_ptr, size);
 8004df0:	469b      	mov	fp, r3
 8004df2:	4619      	mov	r1, r3
    const size_t size = ((*z0_ptr)[bn_size_shift] | (*z1_ptr)[bn_size_shift]) ? in_bn_size : bn_size_shift;
 8004df4:	f107 0318 	add.w	r3, r7, #24
    bn_inner_karatsuba(z0_ptr, z1_ptr, size);
 8004df8:	f107 0018 	add.w	r0, r7, #24
    const size_t size = ((*z0_ptr)[bn_size_shift] | (*z1_ptr)[bn_size_shift]) ? in_bn_size : bn_size_shift;
 8004dfc:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8004e00:	4313      	orrs	r3, r2
    bn_inner_karatsuba(z0_ptr, z1_ptr, size);
 8004e02:	bf14      	ite	ne
 8004e04:	4622      	movne	r2, r4
 8004e06:	4632      	moveq	r2, r6
 8004e08:	f7ff ff6a 	bl	8004ce0 <bn_inner_karatsuba>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	ee18 1a90 	vmov	r1, s17
 8004e12:	4658      	mov	r0, fp
 8004e14:	f002 fecf 	bl	8007bb6 <memcpy>
    bn_inner_karatsuba(z1_ptr, (bignum_t*)(*(bignum_t *)right + bn_size_shift), bn_size_shift);
 8004e18:	4651      	mov	r1, sl
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	4658      	mov	r0, fp
 8004e1e:	f7ff ff5f 	bl	8004ce0 <bn_inner_karatsuba>
    bn_sub(z0_ptr, z1_ptr, z0_ptr, in_bn_size << 1);
 8004e22:	f107 0318 	add.w	r3, r7, #24
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	eb03 0ac4 	add.w	sl, r3, r4, lsl #3
 8004e2c:	00e2      	lsls	r2, r4, #3
 8004e2e:	ea4f 0944 	mov.w	r9, r4, lsl #1
bignum_compare_state bn_cmp(const bignum_t *bignum1, const bignum_t *bignum2, size_t size) {
 8004e32:	603a      	str	r2, [r7, #0]
 8004e34:	eb0b 01c4 	add.w	r1, fp, r4, lsl #3
    bn_sub(z0_ptr, z1_ptr, z0_ptr, in_bn_size << 1);
 8004e38:	4652      	mov	r2, sl
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	4686      	mov	lr, r0
 8004e3e:	46a4      	mov	ip, r4
 8004e40:	e002      	b.n	8004e48 <bn_inner_karatsuba+0x168>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8004e42:	f0c0 80ad 	bcc.w	8004fa0 <bn_inner_karatsuba+0x2c0>
    } while (size != 0);
 8004e46:	b13b      	cbz	r3, 8004e58 <bn_inner_karatsuba+0x178>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004e48:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8004e4c:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8004e50:	4284      	cmp	r4, r0
        --size;
 8004e52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004e56:	d9f4      	bls.n	8004e42 <bn_inner_karatsuba+0x162>
    for (size_t i = 0; i < size; ++i) {
 8004e58:	f8c7 e00c 	str.w	lr, [r7, #12]
 8004e5c:	4664      	mov	r4, ip
 8004e5e:	f1b9 0f00 	cmp.w	r9, #0
 8004e62:	d01c      	beq.n	8004e9e <bn_inner_karatsuba+0x1be>
 8004e64:	2300      	movs	r3, #0
 8004e66:	46c3      	mov	fp, r8
 8004e68:	f107 0c18 	add.w	ip, r7, #24
 8004e6c:	4618      	mov	r0, r3
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 8004e6e:	f85b 1f04 	ldr.w	r1, [fp, #4]!
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 8004e72:	f8dc 2000 	ldr.w	r2, [ip]
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004e76:	f1c3 0e00 	rsb	lr, r3, #0
 8004e7a:	ebbe 0101 	subs.w	r1, lr, r1
 8004e7e:	f083 0301 	eor.w	r3, r3, #1
 8004e82:	f163 0300 	sbc.w	r3, r3, #0
 8004e86:	1889      	adds	r1, r1, r2
 8004e88:	f143 0300 	adc.w	r3, r3, #0
    for (size_t i = 0; i < size; ++i) {
 8004e8c:	3001      	adds	r0, #1
        borrow = res <= BN_MAX_VAL;
 8004e8e:	fab3 f383 	clz	r3, r3
    for (size_t i = 0; i < size; ++i) {
 8004e92:	4581      	cmp	r9, r0
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8004e94:	f84c 1b04 	str.w	r1, [ip], #4
        borrow = res <= BN_MAX_VAL;
 8004e98:	ea4f 1353 	mov.w	r3, r3, lsr #5
    for (size_t i = 0; i < size; ++i) {
 8004e9c:	d1e7      	bne.n	8004e6e <bn_inner_karatsuba+0x18e>
    bn_memset(left, bn_size_shift, 0, in_bn_size + bn_size_shift);
 8004e9e:	19a2      	adds	r2, r4, r6
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004ea0:	0092      	lsls	r2, r2, #2
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	ee18 0a90 	vmov	r0, s17
 8004ea8:	f002 fdd4 	bl	8007a54 <memset>
    bn_inner_karatsuba(left, right, bn_size_shift);
 8004eac:	4632      	mov	r2, r6
 8004eae:	e9d7 6104 	ldrd	r6, r1, [r7, #16]
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7ff ff14 	bl	8004ce0 <bn_inner_karatsuba>
void bn_sub(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 8004eb8:	683a      	ldr	r2, [r7, #0]
    bn_sub(z0_ptr, z1_ptr, z0_ptr, in_bn_size << 1);
 8004eba:	68f9      	ldr	r1, [r7, #12]
 8004ebc:	4432      	add	r2, r6
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	460e      	mov	r6, r1
 8004ec2:	e001      	b.n	8004ec8 <bn_inner_karatsuba+0x1e8>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 8004ec4:	d378      	bcc.n	8004fb8 <bn_inner_karatsuba+0x2d8>
    } while (size != 0);
 8004ec6:	b13b      	cbz	r3, 8004ed8 <bn_inner_karatsuba+0x1f8>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004ec8:	f85a 0d04 	ldr.w	r0, [sl, #-4]!
 8004ecc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004ed0:	4288      	cmp	r0, r1
        --size;
 8004ed2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8004ed6:	d9f5      	bls.n	8004ec4 <bn_inner_karatsuba+0x1e4>
    for (size_t i = 0; i < size; ++i) {
 8004ed8:	f1b9 0f00 	cmp.w	r9, #0
 8004edc:	f000 8087 	beq.w	8004fee <bn_inner_karatsuba+0x30e>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	46ac      	mov	ip, r5
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	617e      	str	r6, [r7, #20]
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 8004ee8:	697a      	ldr	r2, [r7, #20]
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 8004eea:	f85c 6f04 	ldr.w	r6, [ip, #4]!
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 8004eee:	6811      	ldr	r1, [r2, #0]
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004ef0:	425a      	negs	r2, r3
 8004ef2:	1b92      	subs	r2, r2, r6
 8004ef4:	f083 0301 	eor.w	r3, r3, #1
 8004ef8:	f163 0300 	sbc.w	r3, r3, #0
 8004efc:	1852      	adds	r2, r2, r1
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8004efe:	6979      	ldr	r1, [r7, #20]
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8004f00:	f143 0300 	adc.w	r3, r3, #0
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8004f04:	f841 2b04 	str.w	r2, [r1], #4
    for (size_t i = 0; i < size; ++i) {
 8004f08:	3001      	adds	r0, #1
        borrow = res <= BN_MAX_VAL;
 8004f0a:	fab3 f383 	clz	r3, r3
    for (size_t i = 0; i < size; ++i) {
 8004f0e:	4581      	cmp	r9, r0
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 8004f10:	6179      	str	r1, [r7, #20]
        borrow = res <= BN_MAX_VAL;
 8004f12:	ea4f 1353 	mov.w	r3, r3, lsr #5
    for (size_t i = 0; i < size; ++i) {
 8004f16:	d1e7      	bne.n	8004ee8 <bn_inner_karatsuba+0x208>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	68be      	ldr	r6, [r7, #8]
 8004f1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004f20:	00a4      	lsls	r4, r4, #2
 8004f22:	4631      	mov	r1, r6
 8004f24:	4622      	mov	r2, r4
 8004f26:	f002 fe46 	bl	8007bb6 <memcpy>
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004f2a:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4652      	mov	r2, sl
 8004f32:	4630      	mov	r0, r6
 8004f34:	f002 fd8e 	bl	8007a54 <memset>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004f38:	4630      	mov	r0, r6
 8004f3a:	4450      	add	r0, sl
 8004f3c:	1d22      	adds	r2, r4, #4
 8004f3e:	f107 0118 	add.w	r1, r7, #24
 8004f42:	f002 fe38 	bl	8007bb6 <memcpy>
    for (size_t i = 0; i < size; ++i) {
 8004f46:	2200      	movs	r2, #0
 8004f48:	4610      	mov	r0, r2
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 8004f4a:	4614      	mov	r4, r2
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8004f52:	f858 2f04 	ldr.w	r2, [r8, #4]!
 8004f56:	189b      	adds	r3, r3, r2
 8004f58:	eb44 0204 	adc.w	r2, r4, r4
 8004f5c:	185b      	adds	r3, r3, r1
 8004f5e:	f142 0200 	adc.w	r2, r2, #0
        carry = tmp > BN_MAX_VAL;
 8004f62:	1e11      	subs	r1, r2, #0
    for (size_t i = 0; i < size; ++i) {
 8004f64:	f100 0001 	add.w	r0, r0, #1
        carry = tmp > BN_MAX_VAL;
 8004f68:	bf18      	it	ne
 8004f6a:	2101      	movne	r1, #1
    for (size_t i = 0; i < size; ++i) {
 8004f6c:	4581      	cmp	r9, r0
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8004f6e:	602b      	str	r3, [r5, #0]
    for (size_t i = 0; i < size; ++i) {
 8004f70:	d8ed      	bhi.n	8004f4e <bn_inner_karatsuba+0x26e>
        return;
 8004f72:	ee18 3a10 	vmov	r3, s16
}
 8004f76:	f507 778e 	add.w	r7, r7, #284	; 0x11c
        return;
 8004f7a:	469d      	mov	sp, r3
}
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	ecbd 8b02 	vpop	{d8}
 8004f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004f86:	6938      	ldr	r0, [r7, #16]
 8004f88:	00e2      	lsls	r2, r4, #3
 8004f8a:	f002 fd63 	bl	8007a54 <memset>
        return;
 8004f8e:	e7f0      	b.n	8004f72 <bn_inner_karatsuba+0x292>
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	00a2      	lsls	r2, r4, #2
 8004f94:	2100      	movs	r1, #0
 8004f96:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004f9a:	f002 fd5b 	bl	8007a54 <memset>
        return;
 8004f9e:	e7e8      	b.n	8004f72 <bn_inner_karatsuba+0x292>
 8004fa0:	f8c7 e00c 	str.w	lr, [r7, #12]
 8004fa4:	4664      	mov	r4, ip
 8004fa6:	e77a      	b.n	8004e9e <bn_inner_karatsuba+0x1be>
        bn_from_int(left, (BN_DTYPE_TMP)(*left)[0] * (BN_DTYPE_TMP)(*right)[0], 2);
 8004fa8:	680b      	ldr	r3, [r1, #0]
 8004faa:	6939      	ldr	r1, [r7, #16]
 8004fac:	680a      	ldr	r2, [r1, #0]
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 8004fb2:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < size; i++) {
 8004fb6:	e7dc      	b.n	8004f72 <bn_inner_karatsuba+0x292>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	68be      	ldr	r6, [r7, #8]
 8004fbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004fc0:	00a4      	lsls	r4, r4, #2
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	f002 fdf6 	bl	8007bb6 <memcpy>
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8004fca:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4652      	mov	r2, sl
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f002 fd3e 	bl	8007a54 <memset>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004fd8:	4630      	mov	r0, r6
 8004fda:	4450      	add	r0, sl
 8004fdc:	1d22      	adds	r2, r4, #4
 8004fde:	f107 0118 	add.w	r1, r7, #24
 8004fe2:	f002 fde8 	bl	8007bb6 <memcpy>
    for (size_t i = 0; i < size; ++i) {
 8004fe6:	f1b9 0f00 	cmp.w	r9, #0
 8004fea:	d1ac      	bne.n	8004f46 <bn_inner_karatsuba+0x266>
 8004fec:	e7c1      	b.n	8004f72 <bn_inner_karatsuba+0x292>
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	00a2      	lsls	r2, r4, #2
 8004ff4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004ff8:	f002 fddd 	bl	8007bb6 <memcpy>
    for (size_t i = 0; i < size; ++i) {
 8004ffc:	e7b9      	b.n	8004f72 <bn_inner_karatsuba+0x292>
 8004ffe:	bf00      	nop

08005000 <bn_init>:
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005000:	008a      	lsls	r2, r1, #2
 8005002:	2100      	movs	r1, #0
 8005004:	f002 bd26 	b.w	8007a54 <memset>

08005008 <bn_assign>:
{
 8005008:	468c      	mov	ip, r1
 800500a:	4611      	mov	r1, r2
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 800500c:	9a00      	ldr	r2, [sp, #0]
 800500e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8005018:	f002 bdcd 	b.w	8007bb6 <memcpy>

0800501c <bn_from_bytes>:
void bn_from_bytes(bignum_t *bignum, const uint8_t *bytes, const size_t nbytes) {
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4615      	mov	r5, r2
 8005020:	460e      	mov	r6, r1
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	2100      	movs	r1, #0
void bn_from_bytes(bignum_t *bignum, const uint8_t *bytes, const size_t nbytes) {
 8005026:	4604      	mov	r4, r0
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005028:	f002 fd14 	bl	8007a54 <memset>
    if (nbytes > BN_BYTE_SIZE) {
 800502c:	2d80      	cmp	r5, #128	; 0x80
 800502e:	d823      	bhi.n	8005078 <bn_from_bytes+0x5c>
    uint8_t padding = ((nbytes - 1) / BN_WORD_SIZE + 1) * BN_WORD_SIZE - nbytes;
 8005030:	1e6b      	subs	r3, r5, #1
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	3304      	adds	r3, #4
 8005038:	1b5b      	subs	r3, r3, r5
 800503a:	b2db      	uxtb	r3, r3
    for (size_t i = 0; i < nbytes; ++i) {
 800503c:	b1e5      	cbz	r5, 8005078 <bn_from_bytes+0x5c>
 800503e:	1972      	adds	r2, r6, r5
 8005040:	f1c3 0303 	rsb	r3, r3, #3
 8005044:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8005048:	18f1      	adds	r1, r6, r3
 800504a:	1e56      	subs	r6, r2, #1
 800504c:	3a02      	subs	r2, #2
        (*bignum)[(nbytes - 1 - i) / BN_WORD_SIZE] |= (BN_DTYPE)bytes[i] << ((BN_WORD_SIZE - 1 - i - padding) % BN_WORD_SIZE) * 8;
 800504e:	eba2 0e0c 	sub.w	lr, r2, ip
 8005052:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8005056:	eba1 030c 	sub.w	r3, r1, ip
 800505a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	fa00 f303 	lsl.w	r3, r0, r3
 8005068:	f854 002e 	ldr.w	r0, [r4, lr, lsl #2]
    for (size_t i = 0; i < nbytes; ++i) {
 800506c:	4566      	cmp	r6, ip
        (*bignum)[(nbytes - 1 - i) / BN_WORD_SIZE] |= (BN_DTYPE)bytes[i] << ((BN_WORD_SIZE - 1 - i - padding) % BN_WORD_SIZE) * 8;
 800506e:	ea43 0300 	orr.w	r3, r3, r0
 8005072:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
    for (size_t i = 0; i < nbytes; ++i) {
 8005076:	d1ea      	bne.n	800504e <bn_from_bytes+0x32>
}
 8005078:	bd70      	pop	{r4, r5, r6, pc}
 800507a:	bf00      	nop

0800507c <bn_from_string>:
void bn_from_string(bignum_t *bignum, const char *str, const size_t nbytes) {
 800507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005080:	4614      	mov	r4, r2
 8005082:	b082      	sub	sp, #8
 8005084:	460e      	mov	r6, r1
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 8005086:	2280      	movs	r2, #128	; 0x80
 8005088:	2100      	movs	r1, #0
void bn_from_string(bignum_t *bignum, const char *str, const size_t nbytes) {
 800508a:	4605      	mov	r5, r0
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 800508c:	f002 fce2 	bl	8007a54 <memset>
    while (i > 0) {
 8005090:	b19c      	cbz	r4, 80050ba <bn_from_string+0x3e>
        sscanf(&str[i], BN_SSCANF_FORMAT_STR, &tmp);
 8005092:	4f0b      	ldr	r7, [pc, #44]	; (80050c0 <bn_from_string+0x44>)
 8005094:	3d04      	subs	r5, #4
        BN_DTYPE tmp = 0;
 8005096:	f04f 0800 	mov.w	r8, #0
        i = i > sizeof(BN_DTYPE_TMP) ? i - sizeof(BN_DTYPE_TMP) : 0;
 800509a:	2c08      	cmp	r4, #8
 800509c:	bf38      	it	cc
 800509e:	2408      	movcc	r4, #8
 80050a0:	3c08      	subs	r4, #8
        sscanf(&str[i], BN_SSCANF_FORMAT_STR, &tmp);
 80050a2:	aa01      	add	r2, sp, #4
 80050a4:	4639      	mov	r1, r7
 80050a6:	1930      	adds	r0, r6, r4
        BN_DTYPE tmp = 0;
 80050a8:	f8cd 8004 	str.w	r8, [sp, #4]
        sscanf(&str[i], BN_SSCANF_FORMAT_STR, &tmp);
 80050ac:	f002 fc0e 	bl	80078cc <siscanf>
        (*bignum)[j] = tmp;
 80050b0:	9b01      	ldr	r3, [sp, #4]
 80050b2:	f845 3f04 	str.w	r3, [r5, #4]!
    while (i > 0) {
 80050b6:	2c00      	cmp	r4, #0
 80050b8:	d1ef      	bne.n	800509a <bn_from_string+0x1e>
}
 80050ba:	b002      	add	sp, #8
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	0800aafc 	.word	0x0800aafc

080050c4 <bn_from_int>:
void bn_from_int(bignum_t *bignum, const BN_DTYPE_TMP value, size_t size) {
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	9d06      	ldr	r5, [sp, #24]
 80050c8:	4616      	mov	r6, r2
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80050ca:	2100      	movs	r1, #0
 80050cc:	00aa      	lsls	r2, r5, #2
void bn_from_int(bignum_t *bignum, const BN_DTYPE_TMP value, size_t size) {
 80050ce:	4604      	mov	r4, r0
 80050d0:	461f      	mov	r7, r3
    memset((*bignum) + offset, value, count * BN_WORD_SIZE);
 80050d2:	f002 fcbf 	bl	8007a54 <memset>
    for (size_t i = 0; i < size; i++) {
 80050d6:	b11d      	cbz	r5, 80050e0 <bn_from_int+0x1c>
 80050d8:	2d01      	cmp	r5, #1
        (*bignum)[i] = value >> (i * BN_WORD_SIZE * 8);
 80050da:	6026      	str	r6, [r4, #0]
 80050dc:	bf18      	it	ne
 80050de:	6067      	strne	r7, [r4, #4]
}
 80050e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050e2:	bf00      	nop

080050e4 <bn_to_string>:
void bn_to_string(const bignum_t *bignum, char *str, size_t nbytes) {
 80050e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            sprintf(&str[i], BN_SPRINTF_FORMAT_STR, (*bignum)[j]);
 80050e8:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8005128 <bn_to_string+0x44>
void bn_to_string(const bignum_t *bignum, char *str, size_t nbytes) {
 80050ec:	4606      	mov	r6, r0
 80050ee:	4688      	mov	r8, r1
 80050f0:	4617      	mov	r7, r2
 80050f2:	f100 0480 	add.w	r4, r0, #128	; 0x80
    size_t i = 0;
 80050f6:	2500      	movs	r5, #0
 80050f8:	e001      	b.n	80050fe <bn_to_string+0x1a>
    while (j >= 0 && nbytes > i + 1) {
 80050fa:	42b4      	cmp	r4, r6
 80050fc:	d00f      	beq.n	800511e <bn_to_string+0x3a>
 80050fe:	1c6b      	adds	r3, r5, #1
 8005100:	42bb      	cmp	r3, r7
 8005102:	d20c      	bcs.n	800511e <bn_to_string+0x3a>
        if ((*bignum)[j]) {
 8005104:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 8005108:	2a00      	cmp	r2, #0
 800510a:	d0f6      	beq.n	80050fa <bn_to_string+0x16>
            sprintf(&str[i], BN_SPRINTF_FORMAT_STR, (*bignum)[j]);
 800510c:	eb08 0005 	add.w	r0, r8, r5
 8005110:	4649      	mov	r1, r9
 8005112:	f002 fbbb 	bl	800788c <siprintf>
    while (j >= 0 && nbytes > i + 1) {
 8005116:	42b4      	cmp	r4, r6
            i += sizeof(BN_DTYPE_TMP);
 8005118:	f105 0508 	add.w	r5, r5, #8
    while (j >= 0 && nbytes > i + 1) {
 800511c:	d1ef      	bne.n	80050fe <bn_to_string+0x1a>
    str[i] = '\0';
 800511e:	2300      	movs	r3, #0
 8005120:	f808 3005 	strb.w	r3, [r8, r5]
}
 8005124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005128:	0800ab04 	.word	0x0800ab04

0800512c <bn_add>:
    for (size_t i = 0; i < size; ++i) {
 800512c:	b1e3      	cbz	r3, 8005168 <bn_add+0x3c>
void bn_add(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 800512e:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (size_t i = 0; i < size; ++i) {
 8005130:	f04f 0e00 	mov.w	lr, #0
 8005134:	1f14      	subs	r4, r2, #4
 8005136:	1f06      	subs	r6, r0, #4
 8005138:	1f0d      	subs	r5, r1, #4
    uint8_t carry = 0;
 800513a:	4672      	mov	r2, lr
        BN_DTYPE_TMP tmp = (BN_DTYPE_TMP)(*bignum1)[i] + (*bignum2)[i] + carry;
 800513c:	4677      	mov	r7, lr
 800513e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8005142:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005146:	1840      	adds	r0, r0, r1
 8005148:	eb47 0c07 	adc.w	ip, r7, r7
 800514c:	1880      	adds	r0, r0, r2
 800514e:	f14c 0c00 	adc.w	ip, ip, #0
        carry = tmp > BN_MAX_VAL;
 8005152:	f1bc 0200 	subs.w	r2, ip, #0
    for (size_t i = 0; i < size; ++i) {
 8005156:	f10e 0e01 	add.w	lr, lr, #1
        carry = tmp > BN_MAX_VAL;
 800515a:	bf18      	it	ne
 800515c:	2201      	movne	r2, #1
    for (size_t i = 0; i < size; ++i) {
 800515e:	4573      	cmp	r3, lr
        (*bignum_res)[i] = tmp & BN_MAX_VAL;
 8005160:	f844 0f04 	str.w	r0, [r4, #4]!
    for (size_t i = 0; i < size; ++i) {
 8005164:	d1eb      	bne.n	800513e <bn_add+0x12>
}
 8005166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop

0800516c <bn_sub>:
void bn_sub(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8005172:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
 8005176:	461c      	mov	r4, r3
 8005178:	e001      	b.n	800517e <bn_sub+0x12>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 800517a:	d327      	bcc.n	80051cc <bn_sub+0x60>
    } while (size != 0);
 800517c:	b13c      	cbz	r4, 800518e <bn_sub+0x22>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 800517e:	f85e 6d04 	ldr.w	r6, [lr, #-4]!
 8005182:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
 8005186:	42ae      	cmp	r6, r5
        --size;
 8005188:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 800518c:	d9f5      	bls.n	800517a <bn_sub+0xe>
    for (size_t i = 0; i < size; ++i) {
 800518e:	b1eb      	cbz	r3, 80051cc <bn_sub+0x60>
 8005190:	f04f 0c00 	mov.w	ip, #0
 8005194:	1f0d      	subs	r5, r1, #4
 8005196:	1f06      	subs	r6, r0, #4
 8005198:	f1a2 0e04 	sub.w	lr, r2, #4
 800519c:	4661      	mov	r1, ip
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 800519e:	f856 2f04 	ldr.w	r2, [r6, #4]!
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 80051a2:	f855 0f04 	ldr.w	r0, [r5, #4]!
        BN_DTYPE_TMP res = tmp1 - tmp2;
 80051a6:	f1cc 0400 	rsb	r4, ip, #0
 80051aa:	1912      	adds	r2, r2, r4
 80051ac:	f08c 0c01 	eor.w	ip, ip, #1
 80051b0:	f14c 0c00 	adc.w	ip, ip, #0
 80051b4:	1a12      	subs	r2, r2, r0
 80051b6:	f16c 0c00 	sbc.w	ip, ip, #0
    for (size_t i = 0; i < size; ++i) {
 80051ba:	3101      	adds	r1, #1
        borrow = res <= BN_MAX_VAL;
 80051bc:	fabc fc8c 	clz	ip, ip
    for (size_t i = 0; i < size; ++i) {
 80051c0:	428b      	cmp	r3, r1
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 80051c2:	f84e 2f04 	str.w	r2, [lr, #4]!
        borrow = res <= BN_MAX_VAL;
 80051c6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    for (size_t i = 0; i < size; ++i) {
 80051ca:	d1e8      	bne.n	800519e <bn_sub+0x32>
}
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
 80051ce:	bf00      	nop

080051d0 <bn_karatsuba>:
void bn_karatsuba(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4614      	mov	r4, r2
    bn_assign(bignum_res, 0, bignum1, 0, size >> 1);
 80051d4:	085d      	lsrs	r5, r3, #1
void bn_karatsuba(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80051d6:	460e      	mov	r6, r1
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 80051d8:	00aa      	lsls	r2, r5, #2
 80051da:	4601      	mov	r1, r0
 80051dc:	4620      	mov	r0, r4
 80051de:	f002 fcea 	bl	8007bb6 <memcpy>
    bn_inner_karatsuba(bignum_res, bignum2, size >> 1);
 80051e2:	462a      	mov	r2, r5
 80051e4:	4631      	mov	r1, r6
 80051e6:	4620      	mov	r0, r4
}
 80051e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bn_inner_karatsuba(bignum_res, bignum2, size >> 1);
 80051ec:	f7ff bd78 	b.w	8004ce0 <bn_inner_karatsuba>

080051f0 <bn_divmod>:
void bn_divmod(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_div, bignum_t *bignum_mod, size_t size) {
 80051f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051f4:	b0a1      	sub	sp, #132	; 0x84
 80051f6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
    for (size_t i = 0; i < size; ++i) {
 80051f8:	2c00      	cmp	r4, #0
 80051fa:	d055      	beq.n	80052a8 <bn_divmod+0xb8>
 80051fc:	461f      	mov	r7, r3
 80051fe:	1f0b      	subs	r3, r1, #4
 8005200:	4606      	mov	r6, r0
 8005202:	4688      	mov	r8, r1
 8005204:	4691      	mov	r9, r2
 8005206:	469e      	mov	lr, r3
 8005208:	f04f 0c00 	mov.w	ip, #0
 800520c:	e001      	b.n	8005212 <bn_divmod+0x22>
 800520e:	4564      	cmp	r4, ip
 8005210:	d04a      	beq.n	80052a8 <bn_divmod+0xb8>
        if ((*bignum)[i] != 0) {
 8005212:	f85e 5f04 	ldr.w	r5, [lr, #4]!
    for (size_t i = 0; i < size; ++i) {
 8005216:	f10c 0c01 	add.w	ip, ip, #1
        if ((*bignum)[i] != 0) {
 800521a:	2d00      	cmp	r5, #0
 800521c:	d0f7      	beq.n	800520e <bn_divmod+0x1e>
 800521e:	2000      	movs	r0, #0
 8005220:	e001      	b.n	8005226 <bn_divmod+0x36>
    for (size_t i = 0; i < size; ++i) {
 8005222:	4284      	cmp	r4, r0
 8005224:	d00a      	beq.n	800523c <bn_divmod+0x4c>
        if ((*bignum)[i] != 0) {
 8005226:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (size_t i = 0; i < size; ++i) {
 800522a:	3001      	adds	r0, #1
        if ((*bignum)[i] != 0) {
 800522c:	2a00      	cmp	r2, #0
 800522e:	d0f8      	beq.n	8005222 <bn_divmod+0x32>
 8005230:	4623      	mov	r3, r4
 8005232:	464a      	mov	r2, r9
 8005234:	4641      	mov	r1, r8
 8005236:	4630      	mov	r0, r6
 8005238:	f7ff fb64 	bl	8004904 <bn_div.part.0>
    bn_assign(bignum_res, 0, bignum1, 0, size >> 1);
 800523c:	0865      	lsrs	r5, r4, #1
    memcpy((*bignum_dst) + bignum_dst_offset, (*bignum_src) + bignum_src_offset, count * BN_WORD_SIZE);
 800523e:	4649      	mov	r1, r9
 8005240:	00aa      	lsls	r2, r5, #2
 8005242:	4668      	mov	r0, sp
 8005244:	f002 fcb7 	bl	8007bb6 <memcpy>
    bn_inner_karatsuba(bignum_res, bignum2, size >> 1);
 8005248:	462a      	mov	r2, r5
 800524a:	4641      	mov	r1, r8
 800524c:	4668      	mov	r0, sp
 800524e:	f7ff fd47 	bl	8004ce0 <bn_inner_karatsuba>
 8005252:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8005256:	eb0d 0384 	add.w	r3, sp, r4, lsl #2
}
 800525a:	4622      	mov	r2, r4
 800525c:	e001      	b.n	8005262 <bn_divmod+0x72>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 800525e:	d323      	bcc.n	80052a8 <bn_divmod+0xb8>
    } while (size != 0);
 8005260:	b13a      	cbz	r2, 8005272 <bn_divmod+0x82>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8005262:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 8005266:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800526a:	4285      	cmp	r5, r0
        --size;
 800526c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 8005270:	d9f5      	bls.n	800525e <bn_divmod+0x6e>
 8005272:	3e04      	subs	r6, #4
 8005274:	466d      	mov	r5, sp
 8005276:	3f04      	subs	r7, #4
 8005278:	eb06 0484 	add.w	r4, r6, r4, lsl #2
}
 800527c:	2200      	movs	r2, #0
        BN_DTYPE_TMP tmp1 = (BN_DTYPE_TMP)(*bignum1)[i] + BN_MAX_VAL + 1;
 800527e:	f856 1f04 	ldr.w	r1, [r6, #4]!
        BN_DTYPE_TMP tmp2 = (BN_DTYPE_TMP)(*bignum2)[i] + borrow;
 8005282:	f855 3b04 	ldr.w	r3, [r5], #4
        BN_DTYPE_TMP res = tmp1 - tmp2;
 8005286:	4250      	negs	r0, r2
 8005288:	1809      	adds	r1, r1, r0
 800528a:	f082 0201 	eor.w	r2, r2, #1
 800528e:	f142 0200 	adc.w	r2, r2, #0
 8005292:	1ac9      	subs	r1, r1, r3
 8005294:	f162 0200 	sbc.w	r2, r2, #0
        borrow = res <= BN_MAX_VAL;
 8005298:	fab2 f282 	clz	r2, r2
    for (size_t i = 0; i < size; ++i) {
 800529c:	42b4      	cmp	r4, r6
        (*bignum_res)[i] = (BN_DTYPE)(res & BN_MAX_VAL);
 800529e:	f847 1f04 	str.w	r1, [r7, #4]!
        borrow = res <= BN_MAX_VAL;
 80052a2:	ea4f 1252 	mov.w	r2, r2, lsr #5
    for (size_t i = 0; i < size; ++i) {
 80052a6:	d1ea      	bne.n	800527e <bn_divmod+0x8e>
}
 80052a8:	b021      	add	sp, #132	; 0x84
 80052aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052ae:	bf00      	nop

080052b0 <bn_mod>:
    for (size_t i = 0; i < size; ++i) {
 80052b0:	b1ab      	cbz	r3, 80052de <bn_mod+0x2e>
void bn_mod(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80052b2:	b510      	push	{r4, lr}
    for (size_t i = 0; i < size; ++i) {
 80052b4:	f04f 0c00 	mov.w	ip, #0
void bn_mod(const bignum_t *bignum1, const bignum_t *bignum2, bignum_t *bignum_res, size_t size) {
 80052b8:	b0a2      	sub	sp, #136	; 0x88
 80052ba:	f1a1 0e04 	sub.w	lr, r1, #4
 80052be:	e001      	b.n	80052c4 <bn_mod+0x14>
    for (size_t i = 0; i < size; ++i) {
 80052c0:	4563      	cmp	r3, ip
 80052c2:	d00a      	beq.n	80052da <bn_mod+0x2a>
        if ((*bignum)[i] != 0) {
 80052c4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
    for (size_t i = 0; i < size; ++i) {
 80052c8:	f10c 0c01 	add.w	ip, ip, #1
        if ((*bignum)[i] != 0) {
 80052cc:	2c00      	cmp	r4, #0
 80052ce:	d0f7      	beq.n	80052c0 <bn_mod+0x10>
    bn_divmod(bignum1, bignum2, &tmp, bignum_res, size);
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	4613      	mov	r3, r2
 80052d4:	aa02      	add	r2, sp, #8
 80052d6:	f7ff ff8b 	bl	80051f0 <bn_divmod>
}
 80052da:	b022      	add	sp, #136	; 0x88
 80052dc:	bd10      	pop	{r4, pc}
 80052de:	4770      	bx	lr

080052e0 <bn_cmp>:
bignum_compare_state bn_cmp(const bignum_t *bignum1, const bignum_t *bignum2, size_t size) {
 80052e0:	b410      	push	{r4}
 80052e2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80052e6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80052ea:	e001      	b.n	80052f0 <bn_cmp+0x10>
        } else if ((*bignum1)[size] < (*bignum2)[size]) {
 80052ec:	d30c      	bcc.n	8005308 <bn_cmp+0x28>
    } while (size != 0);
 80052ee:	b182      	cbz	r2, 8005312 <bn_cmp+0x32>
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80052f0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80052f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80052f8:	429c      	cmp	r4, r3
        --size;
 80052fa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
        if ((*bignum1)[size] > (*bignum2)[size]) {
 80052fe:	d9f5      	bls.n	80052ec <bn_cmp+0xc>
            return BN_CMP_LARGER;
 8005300:	2001      	movs	r0, #1
}
 8005302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005306:	4770      	bx	lr
            return BN_CMP_SMALLER;
 8005308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800530c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005310:	4770      	bx	lr
    return BN_CMP_EQUAL;
 8005312:	4610      	mov	r0, r2
}
 8005314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop

0800531c <bn_is_zero>:
    for (size_t i = 0; i < size; ++i) {
 800531c:	b159      	cbz	r1, 8005336 <bn_is_zero+0x1a>
 800531e:	3804      	subs	r0, #4
 8005320:	2300      	movs	r3, #0
 8005322:	e001      	b.n	8005328 <bn_is_zero+0xc>
 8005324:	4299      	cmp	r1, r3
 8005326:	d006      	beq.n	8005336 <bn_is_zero+0x1a>
        if ((*bignum)[i] != 0) {
 8005328:	f850 2f04 	ldr.w	r2, [r0, #4]!
    for (size_t i = 0; i < size; ++i) {
 800532c:	3301      	adds	r3, #1
        if ((*bignum)[i] != 0) {
 800532e:	2a00      	cmp	r2, #0
 8005330:	d0f8      	beq.n	8005324 <bn_is_zero+0x8>
            return 0;
 8005332:	2000      	movs	r0, #0
}
 8005334:	4770      	bx	lr
    return 1;
 8005336:	2001      	movs	r0, #1
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop

0800533c <bn_bitcount>:
}

size_t bn_bitcount(const bignum_t *bignum) {
    size_t bits = (BN_BYTE_SIZE << 3) - (BN_WORD_SIZE << 3);
    int i;
    for (i = BN_ARRAY_SIZE - 1; i >= 0 && (*bignum)[i] == 0; --i) {
 800533c:	f100 0180 	add.w	r1, r0, #128	; 0x80
    size_t bits = (BN_BYTE_SIZE << 3) - (BN_WORD_SIZE << 3);
 8005340:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8005344:	e003      	b.n	800534e <bn_bitcount+0x12>
        bits -= BN_WORD_SIZE << 3;
 8005346:	3b20      	subs	r3, #32
    for (i = BN_ARRAY_SIZE - 1; i >= 0 && (*bignum)[i] == 0; --i) {
 8005348:	f113 0f20 	cmn.w	r3, #32
 800534c:	d009      	beq.n	8005362 <bn_bitcount+0x26>
 800534e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005352:	2a00      	cmp	r2, #0
 8005354:	d0f7      	beq.n	8005346 <bn_bitcount+0xa>
    }

    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 8005356:	0852      	lsrs	r2, r2, #1
        bits++;
 8005358:	f103 0301 	add.w	r3, r3, #1
    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 800535c:	d1fb      	bne.n	8005356 <bn_bitcount+0x1a>
    }

    return bits;
}
 800535e:	4618      	mov	r0, r3
 8005360:	4770      	bx	lr
    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 8005362:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005366:	2a00      	cmp	r2, #0
 8005368:	d0f9      	beq.n	800535e <bn_bitcount+0x22>
 800536a:	0852      	lsrs	r2, r2, #1
        bits++;
 800536c:	f103 0301 	add.w	r3, r3, #1
    for (BN_DTYPE value = (*bignum)[i]; value != 0; value >>= 1) {
 8005370:	d1f1      	bne.n	8005356 <bn_bitcount+0x1a>
 8005372:	e7f4      	b.n	800535e <bn_bitcount+0x22>

08005374 <montg_inverse>:
#include <stdio.h>
#include <string.h>
#include <time.h>

// Extended Euclidian algorithm
static void montg_inverse(const bignum_t *val, const bignum_t *mod, bignum_t *res) {
 8005374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005378:	4616      	mov	r6, r2
 800537a:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
    if (bn_cmp(val, mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 800537e:	2220      	movs	r2, #32
static void montg_inverse(const bignum_t *val, const bignum_t *mod, bignum_t *res) {
 8005380:	4604      	mov	r4, r0
 8005382:	4688      	mov	r8, r1
    if (bn_cmp(val, mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 8005384:	f7ff ffac 	bl	80052e0 <bn_cmp>
 8005388:	3001      	adds	r0, #1
 800538a:	d003      	beq.n	8005394 <montg_inverse+0x20>
    if (!sign) {
        bn_sub(mod, res, res, BN_ARRAY_SIZE);
    }

    // Если b != 1 в конце, то res не существует. Данная функция не учитывает этот случай.
}
 800538c:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 8005390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bignum_t n, b, q = {0}, r = {0}, t1 = {0}, t3 = {0};
 8005394:	2280      	movs	r2, #128	; 0x80
 8005396:	2100      	movs	r1, #0
 8005398:	a842      	add	r0, sp, #264	; 0x108
 800539a:	f002 fb5b 	bl	8007a54 <memset>
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	2100      	movs	r1, #0
 80053a2:	a862      	add	r0, sp, #392	; 0x188
 80053a4:	f002 fb56 	bl	8007a54 <memset>
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	2100      	movs	r1, #0
 80053ac:	a882      	add	r0, sp, #520	; 0x208
 80053ae:	f002 fb51 	bl	8007a54 <memset>
 80053b2:	2280      	movs	r2, #128	; 0x80
 80053b4:	2100      	movs	r1, #0
 80053b6:	a8a2      	add	r0, sp, #648	; 0x288
 80053b8:	f002 fb4c 	bl	8007a54 <memset>
    bn_assign(&n, 0, mod, 0, BN_ARRAY_SIZE);
 80053bc:	2520      	movs	r5, #32
 80053be:	2300      	movs	r3, #0
 80053c0:	4619      	mov	r1, r3
 80053c2:	4642      	mov	r2, r8
 80053c4:	a802      	add	r0, sp, #8
 80053c6:	9500      	str	r5, [sp, #0]
 80053c8:	f7ff fe1e 	bl	8005008 <bn_assign>
    bn_assign(&b, 0, val, 0, BN_ARRAY_SIZE);
 80053cc:	2300      	movs	r3, #0
 80053ce:	4619      	mov	r1, r3
 80053d0:	4622      	mov	r2, r4
 80053d2:	a822      	add	r0, sp, #136	; 0x88
 80053d4:	9500      	str	r5, [sp, #0]
 80053d6:	f7ff fe17 	bl	8005008 <bn_assign>
    bn_from_int(res, 1, BN_ARRAY_SIZE);
 80053da:	4630      	mov	r0, r6
 80053dc:	9500      	str	r5, [sp, #0]
 80053de:	2201      	movs	r2, #1
 80053e0:	2300      	movs	r3, #0
 80053e2:	f7ff fe6f 	bl	80050c4 <bn_from_int>
    bn_divmod(&n, &b, &q, &r, BN_ARRAY_SIZE);
 80053e6:	ab62      	add	r3, sp, #392	; 0x188
 80053e8:	aa42      	add	r2, sp, #264	; 0x108
 80053ea:	a922      	add	r1, sp, #136	; 0x88
 80053ec:	a802      	add	r0, sp, #8
 80053ee:	9500      	str	r5, [sp, #0]
 80053f0:	f7ff fefe 	bl	80051f0 <bn_divmod>
    bn_karatsuba(res, &q, &t3, BN_ARRAY_SIZE);
 80053f4:	462b      	mov	r3, r5
 80053f6:	aaa2      	add	r2, sp, #648	; 0x288
 80053f8:	a942      	add	r1, sp, #264	; 0x108
 80053fa:	4630      	mov	r0, r6
    uint8_t sign = 1;
 80053fc:	2701      	movs	r7, #1
    bn_karatsuba(res, &q, &t3, BN_ARRAY_SIZE);
 80053fe:	f7ff fee7 	bl	80051d0 <bn_karatsuba>
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 8005402:	e02e      	b.n	8005462 <montg_inverse+0xee>
        bn_assign(&n, 0, &b, 0, BN_ARRAY_SIZE);
 8005404:	4621      	mov	r1, r4
 8005406:	a802      	add	r0, sp, #8
 8005408:	9500      	str	r5, [sp, #0]
 800540a:	f7ff fdfd 	bl	8005008 <bn_assign>
        bn_assign(&b, 0, &r, 0, BN_ARRAY_SIZE);
 800540e:	4623      	mov	r3, r4
 8005410:	aa62      	add	r2, sp, #392	; 0x188
 8005412:	4621      	mov	r1, r4
 8005414:	a822      	add	r0, sp, #136	; 0x88
 8005416:	9500      	str	r5, [sp, #0]
 8005418:	f7ff fdf6 	bl	8005008 <bn_assign>
        bn_assign(&t1, 0, res, 0, BN_ARRAY_SIZE);
 800541c:	4623      	mov	r3, r4
 800541e:	4632      	mov	r2, r6
 8005420:	4621      	mov	r1, r4
 8005422:	a882      	add	r0, sp, #520	; 0x208
 8005424:	9500      	str	r5, [sp, #0]
 8005426:	f7ff fdef 	bl	8005008 <bn_assign>
        bn_assign(res, 0, &t3, 0, BN_ARRAY_SIZE);
 800542a:	4623      	mov	r3, r4
 800542c:	aaa2      	add	r2, sp, #648	; 0x288
 800542e:	4621      	mov	r1, r4
 8005430:	4630      	mov	r0, r6
 8005432:	9500      	str	r5, [sp, #0]
 8005434:	f7ff fde8 	bl	8005008 <bn_assign>
        bn_divmod(n_ptr, b_ptr, &q, &r, BN_ARRAY_SIZE);
 8005438:	ab62      	add	r3, sp, #392	; 0x188
 800543a:	aa42      	add	r2, sp, #264	; 0x108
 800543c:	a922      	add	r1, sp, #136	; 0x88
 800543e:	a802      	add	r0, sp, #8
 8005440:	9500      	str	r5, [sp, #0]
 8005442:	f7ff fed5 	bl	80051f0 <bn_divmod>
        bn_karatsuba(res, &q, &t3, BN_ARRAY_SIZE);
 8005446:	2320      	movs	r3, #32
 8005448:	aaa2      	add	r2, sp, #648	; 0x288
 800544a:	a942      	add	r1, sp, #264	; 0x108
 800544c:	4630      	mov	r0, r6
 800544e:	f7ff febf 	bl	80051d0 <bn_karatsuba>
        bn_add(&t3, &t1, &t3, BN_ARRAY_SIZE);
 8005452:	aaa2      	add	r2, sp, #648	; 0x288
 8005454:	2320      	movs	r3, #32
 8005456:	a982      	add	r1, sp, #520	; 0x208
 8005458:	4610      	mov	r0, r2
 800545a:	f087 0701 	eor.w	r7, r7, #1
 800545e:	f7ff fe65 	bl	800512c <bn_add>
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 8005462:	2120      	movs	r1, #32
 8005464:	a862      	add	r0, sp, #392	; 0x188
 8005466:	f7ff ff59 	bl	800531c <bn_is_zero>
        bn_assign(&n, 0, &b, 0, BN_ARRAY_SIZE);
 800546a:	aa22      	add	r2, sp, #136	; 0x88
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 800546c:	4604      	mov	r4, r0
        bn_assign(&n, 0, &b, 0, BN_ARRAY_SIZE);
 800546e:	4603      	mov	r3, r0
    while (!bn_is_zero(&r, BN_ARRAY_SIZE)) {
 8005470:	2800      	cmp	r0, #0
 8005472:	d0c7      	beq.n	8005404 <montg_inverse+0x90>
    if (!sign) {
 8005474:	2f00      	cmp	r7, #0
 8005476:	d189      	bne.n	800538c <montg_inverse+0x18>
        bn_sub(mod, res, res, BN_ARRAY_SIZE);
 8005478:	2320      	movs	r3, #32
 800547a:	4632      	mov	r2, r6
 800547c:	4631      	mov	r1, r6
 800547e:	4640      	mov	r0, r8
 8005480:	f7ff fe74 	bl	800516c <bn_sub>
}
 8005484:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 8005488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800548c:	0000      	movs	r0, r0
	...

08005490 <montg_init>:

// mod - RSA key mod
void montg_init(montg_t *md, const bignum_t *mod) {
    if (mod == NULL) {
 8005490:	b351      	cbz	r1, 80054e8 <montg_init+0x58>
void montg_init(montg_t *md, const bignum_t *mod) {
 8005492:	b570      	push	{r4, r5, r6, lr}
        return;
    }

    md->shift = BN_ARRAY_SIZE / 2;    // 512 для ключа 512 бит - лучше передавать ключ вместо mod для инициализации
 8005494:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80054f0 <montg_init+0x60>
 8005498:	ed80 7b60 	vstr	d7, [r0, #384]	; 0x180
    md->shift_byte_size = BN_BYTE_SIZE / 2;
 800549c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80054f8 <montg_init+0x68>
void montg_init(montg_t *md, const bignum_t *mod) {
 80054a0:	b084      	sub	sp, #16
 80054a2:	4604      	mov	r4, r0

    bn_assign(&md->mod, 0, mod, 0, BN_ARRAY_SIZE);
 80054a4:	2300      	movs	r3, #0
 80054a6:	2620      	movs	r6, #32
    md->shift_byte_size = BN_BYTE_SIZE / 2;
 80054a8:	ed80 7b62 	vstr	d7, [r0, #392]	; 0x188
 80054ac:	460a      	mov	r2, r1

    bn_init(&md->r, BN_ARRAY_SIZE);
 80054ae:	f104 0580 	add.w	r5, r4, #128	; 0x80
    bn_assign(&md->mod, 0, mod, 0, BN_ARRAY_SIZE);
 80054b2:	4619      	mov	r1, r3
 80054b4:	9600      	str	r6, [sp, #0]
 80054b6:	f7ff fda7 	bl	8005008 <bn_assign>
    bn_init(&md->r, BN_ARRAY_SIZE);
 80054ba:	4631      	mov	r1, r6
 80054bc:	4628      	mov	r0, r5
 80054be:	f7ff fd9f 	bl	8005000 <bn_init>
    md->r[BN_ARRAY_SIZE / 2] = 1;
 80054c2:	2301      	movs	r3, #1

    bn_sub(&md->r, &md->mod, &md->r_inv, BN_ARRAY_SIZE);
 80054c4:	f504 7280 	add.w	r2, r4, #256	; 0x100
    md->r[BN_ARRAY_SIZE / 2] = 1;
 80054c8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    bn_sub(&md->r, &md->mod, &md->r_inv, BN_ARRAY_SIZE);
 80054cc:	4621      	mov	r1, r4
 80054ce:	4628      	mov	r0, r5
 80054d0:	4633      	mov	r3, r6
 80054d2:	9203      	str	r2, [sp, #12]
 80054d4:	f7ff fe4a 	bl	800516c <bn_sub>
    montg_inverse(&md->r_inv, &md->r, &md->r_inv);
 80054d8:	9a03      	ldr	r2, [sp, #12]
 80054da:	4629      	mov	r1, r5
 80054dc:	4610      	mov	r0, r2
}
 80054de:	b004      	add	sp, #16
 80054e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    montg_inverse(&md->r_inv, &md->r, &md->r_inv);
 80054e4:	f7ff bf46 	b.w	8005374 <montg_inverse>
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	f3af 8000 	nop.w
 80054f0:	00000010 	.word	0x00000010
 80054f4:	00000000 	.word	0x00000000
 80054f8:	00000040 	.word	0x00000040
 80054fc:	00000000 	.word	0x00000000

08005500 <montg_transform>:

void montg_transform(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8005500:	b570      	push	{r4, r5, r6, lr}
    bignum_t temp;
    memmove(temp + md->shift, *val, md->shift_byte_size);
 8005502:	f8d0 6188 	ldr.w	r6, [r0, #392]	; 0x188
void montg_transform(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8005506:	4604      	mov	r4, r0
    memmove(temp + md->shift, *val, md->shift_byte_size);
 8005508:	f8d0 0180 	ldr.w	r0, [r0, #384]	; 0x180
void montg_transform(const montg_t *md, const bignum_t *val, bignum_t *res) {
 800550c:	b0a0      	sub	sp, #128	; 0x80
 800550e:	4615      	mov	r5, r2
    memmove(temp + md->shift, *val, md->shift_byte_size);
 8005510:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
 8005514:	4632      	mov	r2, r6
 8005516:	f002 fb4e 	bl	8007bb6 <memcpy>
    memset(temp, 0, md->shift_byte_size);
 800551a:	4632      	mov	r2, r6
 800551c:	2100      	movs	r1, #0
 800551e:	4668      	mov	r0, sp
 8005520:	f002 fa98 	bl	8007a54 <memset>
    bn_mod(&temp, &md->mod, res, BN_ARRAY_SIZE);
 8005524:	2320      	movs	r3, #32
 8005526:	462a      	mov	r2, r5
 8005528:	4621      	mov	r1, r4
 800552a:	4668      	mov	r0, sp
 800552c:	f7ff fec0 	bl	80052b0 <bn_mod>
}
 8005530:	b020      	add	sp, #128	; 0x80
 8005532:	bd70      	pop	{r4, r5, r6, pc}

08005534 <montg_mul>:
    bignum_t one;
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
    montg_mul(md, val, &one, res);
}

void montg_mul(const montg_t *md, const bignum_t *lhs, const bignum_t *rhs, bignum_t *res) {
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	460d      	mov	r5, r1
 8005538:	b0e2      	sub	sp, #392	; 0x188
 800553a:	4604      	mov	r4, r0
    bignum_t m, m_r_inv, t;
    uint8_t overflow = 0;
    bn_karatsuba(lhs, rhs, &t, BN_ARRAY_SIZE);
 800553c:	4611      	mov	r1, r2
 800553e:	4628      	mov	r0, r5
 8005540:	aa42      	add	r2, sp, #264	; 0x108
void montg_mul(const montg_t *md, const bignum_t *lhs, const bignum_t *rhs, bignum_t *res) {
 8005542:	461d      	mov	r5, r3
    bn_karatsuba(lhs, rhs, &t, BN_ARRAY_SIZE);
 8005544:	2320      	movs	r3, #32
 8005546:	f7ff fe43 	bl	80051d0 <bn_karatsuba>
    bn_assign(res, 0, &t, 0, BN_ARRAY_SIZE);
 800554a:	2620      	movs	r6, #32
 800554c:	2300      	movs	r3, #0
 800554e:	4619      	mov	r1, r3
 8005550:	aa42      	add	r2, sp, #264	; 0x108
 8005552:	4628      	mov	r0, r5
 8005554:	9600      	str	r6, [sp, #0]
 8005556:	f7ff fd57 	bl	8005008 <bn_assign>
    bn_assign(&m, 0, res, 0, BN_ARRAY_SIZE);
 800555a:	2300      	movs	r3, #0
 800555c:	4619      	mov	r1, r3
 800555e:	462a      	mov	r2, r5
 8005560:	a802      	add	r0, sp, #8
 8005562:	9600      	str	r6, [sp, #0]
 8005564:	f7ff fd50 	bl	8005008 <bn_assign>

    memset(m + md->shift, 0, md->shift_byte_size);
 8005568:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 800556c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8005570:	ab02      	add	r3, sp, #8
 8005572:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005576:	2100      	movs	r1, #0
 8005578:	f002 fa6c 	bl	8007a54 <memset>
    bn_karatsuba(&m, &md->r_inv, &m_r_inv, BN_ARRAY_SIZE);
 800557c:	4633      	mov	r3, r6
 800557e:	aa22      	add	r2, sp, #136	; 0x88
 8005580:	f504 7180 	add.w	r1, r4, #256	; 0x100
 8005584:	a802      	add	r0, sp, #8
 8005586:	f7ff fe23 	bl	80051d0 <bn_karatsuba>
    memset(m_r_inv + md->shift, 0, md->shift_byte_size);
 800558a:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 800558e:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8005592:	ab22      	add	r3, sp, #136	; 0x88
 8005594:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005598:	2100      	movs	r1, #0
 800559a:	f002 fa5b 	bl	8007a54 <memset>

    bn_karatsuba(&m_r_inv, &md->mod, &m, BN_ARRAY_SIZE);
 800559e:	4633      	mov	r3, r6
 80055a0:	aa02      	add	r2, sp, #8
 80055a2:	4621      	mov	r1, r4
 80055a4:	a822      	add	r0, sp, #136	; 0x88
 80055a6:	f7ff fe13 	bl	80051d0 <bn_karatsuba>
    bn_add(res, &m, res, BN_ARRAY_SIZE);
 80055aa:	4633      	mov	r3, r6
 80055ac:	462a      	mov	r2, r5
 80055ae:	a902      	add	r1, sp, #8
 80055b0:	4628      	mov	r0, r5
 80055b2:	f7ff fdbb 	bl	800512c <bn_add>

    overflow = bn_cmp(res, &t, BN_ARRAY_SIZE) == BN_CMP_SMALLER && bn_cmp(res, &m, BN_ARRAY_SIZE) == BN_CMP_SMALLER;
 80055b6:	4632      	mov	r2, r6
 80055b8:	a942      	add	r1, sp, #264	; 0x108
 80055ba:	4628      	mov	r0, r5
 80055bc:	f7ff fe90 	bl	80052e0 <bn_cmp>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d020      	beq.n	8005606 <montg_mul+0xd2>

    memmove(*res, *res + md->shift, md->shift_byte_size);
 80055c4:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 80055c8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 80055cc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80055d0:	4628      	mov	r0, r5
 80055d2:	f002 fa25 	bl	8007a20 <memmove>
    memset(*res + md->shift, 0, md->shift_byte_size);
 80055d6:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 80055da:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 80055de:	2100      	movs	r1, #0
 80055e0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80055e4:	f002 fa36 	bl	8007a54 <memset>

    if (overflow) {
        (*res)[BN_ARRAY_SIZE / 2] = 1;
    }

    if (bn_cmp(res, &md->mod, BN_ARRAY_SIZE) != BN_CMP_SMALLER) {
 80055e8:	2220      	movs	r2, #32
 80055ea:	4621      	mov	r1, r4
 80055ec:	4628      	mov	r0, r5
 80055ee:	f7ff fe77 	bl	80052e0 <bn_cmp>
 80055f2:	3001      	adds	r0, #1
 80055f4:	d005      	beq.n	8005602 <montg_mul+0xce>
        bn_sub(res, &md->mod, res, BN_ARRAY_SIZE);
 80055f6:	2320      	movs	r3, #32
 80055f8:	462a      	mov	r2, r5
 80055fa:	4621      	mov	r1, r4
 80055fc:	4628      	mov	r0, r5
 80055fe:	f7ff fdb5 	bl	800516c <bn_sub>
    }
}
 8005602:	b062      	add	sp, #392	; 0x188
 8005604:	bd70      	pop	{r4, r5, r6, pc}
    overflow = bn_cmp(res, &t, BN_ARRAY_SIZE) == BN_CMP_SMALLER && bn_cmp(res, &m, BN_ARRAY_SIZE) == BN_CMP_SMALLER;
 8005606:	4632      	mov	r2, r6
 8005608:	a902      	add	r1, sp, #8
 800560a:	4628      	mov	r0, r5
 800560c:	f7ff fe68 	bl	80052e0 <bn_cmp>
 8005610:	3001      	adds	r0, #1
 8005612:	d1d7      	bne.n	80055c4 <montg_mul+0x90>
    memmove(*res, *res + md->shift, md->shift_byte_size);
 8005614:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 8005618:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800561c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8005620:	4628      	mov	r0, r5
 8005622:	f002 f9fd 	bl	8007a20 <memmove>
    memset(*res + md->shift, 0, md->shift_byte_size);
 8005626:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 800562a:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800562e:	2100      	movs	r1, #0
 8005630:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005634:	f002 fa0e 	bl	8007a54 <memset>
        (*res)[BN_ARRAY_SIZE / 2] = 1;
 8005638:	2301      	movs	r3, #1
 800563a:	642b      	str	r3, [r5, #64]	; 0x40
 800563c:	e7d4      	b.n	80055e8 <montg_mul+0xb4>
 800563e:	bf00      	nop

08005640 <montg_revert>:
void montg_revert(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8005640:	b530      	push	{r4, r5, lr}
 8005642:	b0a5      	sub	sp, #148	; 0x94
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
 8005644:	2320      	movs	r3, #32
void montg_revert(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8005646:	4604      	mov	r4, r0
 8005648:	4615      	mov	r5, r2
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	a804      	add	r0, sp, #16
 800564e:	2201      	movs	r2, #1
 8005650:	2300      	movs	r3, #0
void montg_revert(const montg_t *md, const bignum_t *val, bignum_t *res) {
 8005652:	9103      	str	r1, [sp, #12]
    bn_from_int(&one, 1, BN_ARRAY_SIZE);
 8005654:	f7ff fd36 	bl	80050c4 <bn_from_int>
    montg_mul(md, val, &one, res);
 8005658:	9903      	ldr	r1, [sp, #12]
 800565a:	462b      	mov	r3, r5
 800565c:	aa04      	add	r2, sp, #16
 800565e:	4620      	mov	r0, r4
 8005660:	f7ff ff68 	bl	8005534 <montg_mul>
}
 8005664:	b025      	add	sp, #148	; 0x94
 8005666:	bd30      	pop	{r4, r5, pc}

08005668 <montg_pow>:

void montg_pow(const montg_t *md, const bignum_t *b, const bignum_t *exp, bignum_t *res) {
 8005668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800566c:	b083      	sub	sp, #12
 800566e:	461e      	mov	r6, r3
    bn_assign(res, 0, b, 0, BN_ARRAY_SIZE);
 8005670:	2320      	movs	r3, #32
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	2300      	movs	r3, #0
void montg_pow(const montg_t *md, const bignum_t *b, const bignum_t *exp, bignum_t *res) {
 8005676:	4617      	mov	r7, r2
 8005678:	4689      	mov	r9, r1
    bn_assign(res, 0, b, 0, BN_ARRAY_SIZE);
 800567a:	460a      	mov	r2, r1
void montg_pow(const montg_t *md, const bignum_t *b, const bignum_t *exp, bignum_t *res) {
 800567c:	4680      	mov	r8, r0
    bn_assign(res, 0, b, 0, BN_ARRAY_SIZE);
 800567e:	4619      	mov	r1, r3
 8005680:	4630      	mov	r0, r6
 8005682:	f7ff fcc1 	bl	8005008 <bn_assign>
    
    size_t len = bn_bitcount(exp) - 1;
 8005686:	4638      	mov	r0, r7
 8005688:	f7ff fe58 	bl	800533c <bn_bitcount>
    uint8_t *end = (uint8_t *)(*exp) + len / 8;
    uint8_t *beg = (uint8_t *)(*exp);
    uint8_t mask = 1 << ((len - 1) & 7);
 800568c:	1e83      	subs	r3, r0, #2
 800568e:	f003 0307 	and.w	r3, r3, #7
    size_t len = bn_bitcount(exp) - 1;
 8005692:	3801      	subs	r0, #1

    if (mask == 128) {
 8005694:	2b07      	cmp	r3, #7
    uint8_t *end = (uint8_t *)(*exp) + len / 8;
 8005696:	eb07 05d0 	add.w	r5, r7, r0, lsr #3
    if (mask == 128) {
 800569a:	d00f      	beq.n	80056bc <montg_pow+0x54>
    uint8_t mask = 1 << ((len - 1) & 7);
 800569c:	2401      	movs	r4, #1
 800569e:	409c      	lsls	r4, r3
 80056a0:	b2e4      	uxtb	r4, r4
        end--;
    }

    while (end >= beg) {
 80056a2:	42af      	cmp	r7, r5
 80056a4:	d80f      	bhi.n	80056c6 <montg_pow+0x5e>
        montg_mul(md, res, res, res);
 80056a6:	4633      	mov	r3, r6
 80056a8:	4632      	mov	r2, r6
 80056aa:	4631      	mov	r1, r6
 80056ac:	4640      	mov	r0, r8
 80056ae:	f7ff ff41 	bl	8005534 <montg_mul>
        if (*end & mask) {
 80056b2:	782b      	ldrb	r3, [r5, #0]
 80056b4:	421c      	tst	r4, r3
 80056b6:	d109      	bne.n	80056cc <montg_pow+0x64>
            montg_mul(md, b, res, res);
        }

        mask >>= 1;
        if (!mask) {
 80056b8:	0864      	lsrs	r4, r4, #1
 80056ba:	d1f2      	bne.n	80056a2 <montg_pow+0x3a>
        end--;
 80056bc:	3d01      	subs	r5, #1
    while (end >= beg) {
 80056be:	42af      	cmp	r7, r5
        end--;
 80056c0:	f04f 0480 	mov.w	r4, #128	; 0x80
    while (end >= beg) {
 80056c4:	d9ef      	bls.n	80056a6 <montg_pow+0x3e>
            mask = 128;
            end--;
        }
    }
}
 80056c6:	b003      	add	sp, #12
 80056c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            montg_mul(md, b, res, res);
 80056cc:	4633      	mov	r3, r6
 80056ce:	4632      	mov	r2, r6
 80056d0:	4649      	mov	r1, r9
 80056d2:	4640      	mov	r0, r8
 80056d4:	f7ff ff2e 	bl	8005534 <montg_mul>
 80056d8:	e7ee      	b.n	80056b8 <montg_pow+0x50>
 80056da:	bf00      	nop

080056dc <import_pub_key>:
#include "asn1.h"
#include "base64.h"
#include "bignum.h"
#include "montgomery.h"

void import_pub_key(rsa_pub_key_t *key, const char *data) {
 80056dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char begin[] = "-----BEGIN PUBLIC KEY-----";
 80056e0:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80057d0 <import_pub_key+0xf4>
    const char end[] = "-----END PUBLIC KEY-----";
 80056e4:	4c39      	ldr	r4, [pc, #228]	; (80057cc <import_pub_key+0xf0>)
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 80056e6:	b090      	sub	sp, #64	; 0x40
 80056e8:	460d      	mov	r5, r1
 80056ea:	4606      	mov	r6, r0
    const char begin[] = "-----BEGIN PUBLIC KEY-----";
 80056ec:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 80056f0:	af00      	add	r7, sp, #0
    const char begin[] = "-----BEGIN PUBLIC KEY-----";
 80056f2:	f107 0c24 	add.w	ip, r7, #36	; 0x24
 80056f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80056fa:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80056fe:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005702:	f82c 2b02 	strh.w	r2, [ip], #2
 8005706:	0c12      	lsrs	r2, r2, #16
 8005708:	f88c 2000 	strb.w	r2, [ip]
    const char end[] = "-----END PUBLIC KEY-----";
 800570c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800570e:	f107 0e08 	add.w	lr, r7, #8
 8005712:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005716:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800571a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
void import_pub_key(rsa_pub_key_t *key, const char *data) {
 800571e:	46e8      	mov	r8, sp
    size_t in_size = 2048;
    char pem[in_size];
 8005720:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
    strcpy(pem, data);
 8005724:	4629      	mov	r1, r5
 8005726:	4668      	mov	r0, sp
    const char end[] = "-----END PUBLIC KEY-----";
 8005728:	f88e 2000 	strb.w	r2, [lr]
    strcpy(pem, data);
 800572c:	f002 f9c2 	bl	8007ab4 <stpcpy>
    char pem[in_size];
 8005730:	46e9      	mov	r9, sp
 8005732:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005736:	221a      	movs	r2, #26

    size_t beg_size = strlen(begin);
    size_t end_size = strlen(end);
    size_t pem_size = strlen(pem);
 8005738:	eba0 0a09 	sub.w	sl, r0, r9
    char *beg_pos = strstr(pem, begin);
 800573c:	4668      	mov	r0, sp
 800573e:	f002 f991 	bl	8007a64 <strncmp>
    size_t beg_idx = beg_pos - pem;
    char *end_pos = strstr(pem, end);
 8005742:	f107 0108 	add.w	r1, r7, #8
 8005746:	4604      	mov	r4, r0
 8005748:	4668      	mov	r0, sp
 800574a:	f002 f99d 	bl	8007a88 <strstr>
    size_t end_idx = end_pos - pem;

    if (beg_idx == 0 && end_idx == pem_size - end_size) {
 800574e:	b124      	cbz	r4, 800575a <import_pub_key+0x7e>
            return;
        }
        bn_from_bytes(&key->pub_exp, int_ptr, int_size);
        read_ptr += read_size;
    }
}
 8005750:	3740      	adds	r7, #64	; 0x40
 8005752:	46c5      	mov	sp, r8
 8005754:	46bd      	mov	sp, r7
 8005756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t end_idx = end_pos - pem;
 800575a:	466b      	mov	r3, sp
 800575c:	1ac0      	subs	r0, r0, r3
    if (beg_idx == 0 && end_idx == pem_size - end_size) {
 800575e:	f1aa 0318 	sub.w	r3, sl, #24
 8005762:	4283      	cmp	r3, r0
 8005764:	d1f4      	bne.n	8005750 <import_pub_key+0x74>
        uint8_t buffer[in_size];
 8005766:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
        memset(buffer, 0, in_size);
 800576a:	4621      	mov	r1, r4
 800576c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005770:	4668      	mov	r0, sp
 8005772:	f002 f96f 	bl	8007a54 <memset>
        base64_read((uint8_t *)data + beg_size, pem_size - beg_size - end_size, buffer, in_size);
 8005776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800577a:	f1aa 0132 	sub.w	r1, sl, #50	; 0x32
 800577e:	466a      	mov	r2, sp
 8005780:	f105 001a 	add.w	r0, r5, #26
 8005784:	f7ff f86a 	bl	800485c <base64_read>
        const size_t key_padding = asn1_get_padding_pub_key(buffer);
 8005788:	4668      	mov	r0, sp
 800578a:	f7fe ffa3 	bl	80046d4 <asn1_get_padding_pub_key>
        read_ptr = buffer + key_padding;
 800578e:	eb0d 0500 	add.w	r5, sp, r0
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 8005792:	1d3a      	adds	r2, r7, #4
 8005794:	4639      	mov	r1, r7
 8005796:	4628      	mov	r0, r5
 8005798:	f7fe ff66 	bl	8004668 <asn1_get_int>
        if (read_size == -1) {
 800579c:	1c43      	adds	r3, r0, #1
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 800579e:	4604      	mov	r4, r0
        if (read_size == -1) {
 80057a0:	d0d6      	beq.n	8005750 <import_pub_key+0x74>
        bn_from_bytes(&key->mod, int_ptr, int_size);
 80057a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057a6:	4630      	mov	r0, r6
 80057a8:	f7ff fc38 	bl	800501c <bn_from_bytes>
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80057ac:	1d3a      	adds	r2, r7, #4
 80057ae:	4639      	mov	r1, r7
 80057b0:	1928      	adds	r0, r5, r4
 80057b2:	f7fe ff59 	bl	8004668 <asn1_get_int>
        if (read_size == -1) {
 80057b6:	3001      	adds	r0, #1
 80057b8:	d0ca      	beq.n	8005750 <import_pub_key+0x74>
        bn_from_bytes(&key->pub_exp, int_ptr, int_size);
 80057ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057be:	f106 0080 	add.w	r0, r6, #128	; 0x80
 80057c2:	f7ff fc2b 	bl	800501c <bn_from_bytes>
        read_ptr += read_size;
 80057c6:	46cd      	mov	sp, r9
 80057c8:	e7c2      	b.n	8005750 <import_pub_key+0x74>
 80057ca:	bf00      	nop
 80057cc:	0800ab0c 	.word	0x0800ab0c
 80057d0:	0800ab28 	.word	0x0800ab28

080057d4 <import_pvt_key>:

void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char begin[] = "-----BEGIN PRIVATE KEY-----";
 80057d8:	f8df a130 	ldr.w	sl, [pc, #304]	; 800590c <import_pvt_key+0x138>
    const char end[] = "-----END PRIVATE KEY-----";
 80057dc:	4c4a      	ldr	r4, [pc, #296]	; (8005908 <import_pvt_key+0x134>)
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 80057de:	b0b8      	sub	sp, #224	; 0xe0
 80057e0:	460e      	mov	r6, r1
 80057e2:	4680      	mov	r8, r0
    const char begin[] = "-----BEGIN PRIVATE KEY-----";
 80057e4:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 80057e8:	af00      	add	r7, sp, #0
    const char begin[] = "-----BEGIN PRIVATE KEY-----";
 80057ea:	f107 0e24 	add.w	lr, r7, #36	; 0x24
 80057ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80057f2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80057f6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    const char end[] = "-----END PRIVATE KEY-----";
 80057fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057fc:	f107 0c08 	add.w	ip, r7, #8
 8005800:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005804:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
void import_pvt_key(rsa_pvt_key_t *key, const char *data) {
 8005808:	46e9      	mov	r9, sp
    size_t in_size = 9192;
    char pem[in_size];
 800580a:	f5ad 5d0f 	sub.w	sp, sp, #9152	; 0x23c0
    const char end[] = "-----END PRIVATE KEY-----";
 800580e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    char pem[in_size];
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	466d      	mov	r5, sp
    strcpy(pem, data);
 8005816:	4631      	mov	r1, r6
 8005818:	4628      	mov	r0, r5
    const char end[] = "-----END PRIVATE KEY-----";
 800581a:	f8ac 2000 	strh.w	r2, [ip]
    strcpy(pem, data);
 800581e:	f002 f949 	bl	8007ab4 <stpcpy>

    size_t beg_size = strlen(begin);
    size_t end_size = strlen(end);
    size_t pem_size = strlen(pem);
 8005822:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005826:	221b      	movs	r2, #27
 8005828:	1b44      	subs	r4, r0, r5
    char *beg_pos = strstr(pem, begin);
 800582a:	4628      	mov	r0, r5
 800582c:	f002 f91a 	bl	8007a64 <strncmp>
    size_t beg_idx = beg_pos - pem;
    char *end_pos = strstr(pem, end);
 8005830:	f107 0108 	add.w	r1, r7, #8
 8005834:	4682      	mov	sl, r0
 8005836:	4628      	mov	r0, r5
 8005838:	f002 f926 	bl	8007a88 <strstr>
    size_t end_idx = end_pos - pem;

    if (!(beg_idx == 0 && end_idx == pem_size - end_size)) {
 800583c:	f1ba 0f00 	cmp.w	sl, #0
 8005840:	d004      	beq.n	800584c <import_pvt_key+0x78>
            return;
        }
        bn_from_bytes(targets[i], int_ptr, int_size);
        read_ptr += read_size;
    }
}
 8005842:	37e0      	adds	r7, #224	; 0xe0
        return;
 8005844:	46cd      	mov	sp, r9
}
 8005846:	46bd      	mov	sp, r7
 8005848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t end_idx = end_pos - pem;
 800584c:	1b43      	subs	r3, r0, r5
    if (!(beg_idx == 0 && end_idx == pem_size - end_size)) {
 800584e:	f1a4 0219 	sub.w	r2, r4, #25
 8005852:	429a      	cmp	r2, r3
 8005854:	d1f5      	bne.n	8005842 <import_pvt_key+0x6e>
    uint8_t buffer[in_size];
 8005856:	f5ad 5d0f 	sub.w	sp, sp, #9152	; 0x23c0
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	466d      	mov	r5, sp
    memset(buffer, 0, in_size);
 800585e:	4651      	mov	r1, sl
 8005860:	f242 32e8 	movw	r2, #9192	; 0x23e8
 8005864:	4628      	mov	r0, r5
 8005866:	f002 f8f5 	bl	8007a54 <memset>
    base64_read((uint8_t *)data + beg_size, pem_size - beg_size - end_size, buffer, in_size);
 800586a:	f1a4 0134 	sub.w	r1, r4, #52	; 0x34
 800586e:	462a      	mov	r2, r5
 8005870:	f242 33e8 	movw	r3, #9192	; 0x23e8
 8005874:	f106 001b 	add.w	r0, r6, #27
 8005878:	f7fe fff0 	bl	800485c <base64_read>
    const size_t key_padding = asn1_get_padding_pvt_key(buffer);
 800587c:	4628      	mov	r0, r5
 800587e:	f7fe ff8d 	bl	800479c <asn1_get_padding_pvt_key>
    read_ptr = buffer + key_padding;
 8005882:	4405      	add	r5, r0
    read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 8005884:	1d3a      	adds	r2, r7, #4
 8005886:	4639      	mov	r1, r7
 8005888:	4628      	mov	r0, r5
 800588a:	f7fe feed 	bl	8004668 <asn1_get_int>
    if (read_size == -1) {
 800588e:	1c42      	adds	r2, r0, #1
    read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 8005890:	4604      	mov	r4, r0
    if (read_size == -1) {
 8005892:	d0d6      	beq.n	8005842 <import_pvt_key+0x6e>
    bn_from_bytes(&version, int_ptr, int_size);
 8005894:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005898:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800589c:	f7ff fbbe 	bl	800501c <bn_from_bytes>
    if (!bn_is_zero(&version, BN_ARRAY_SIZE)) {
 80058a0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80058a4:	2120      	movs	r1, #32
 80058a6:	f7ff fd39 	bl	800531c <bn_is_zero>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d0c9      	beq.n	8005842 <import_pvt_key+0x6e>
    bignum_t *targets[] = {&key->mod, &key->pub_exp, &key->pvt_exp, &key->p, &key->q, &key->exp1, &key->exp2, &key->coeff};
 80058ae:	f108 0380 	add.w	r3, r8, #128	; 0x80
 80058b2:	e9c7 8310 	strd	r8, r3, [r7, #64]	; 0x40
 80058b6:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80058ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80058bc:	f508 73c0 	add.w	r3, r8, #384	; 0x180
 80058c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c2:	f508 7300 	add.w	r3, r8, #512	; 0x200
 80058c6:	653b      	str	r3, [r7, #80]	; 0x50
 80058c8:	f508 7320 	add.w	r3, r8, #640	; 0x280
 80058cc:	657b      	str	r3, [r7, #84]	; 0x54
 80058ce:	f508 7240 	add.w	r2, r8, #768	; 0x300
 80058d2:	f508 7360 	add.w	r3, r8, #896	; 0x380
 80058d6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    read_ptr += read_size;
 80058da:	442c      	add	r4, r5
    for (size_t i = 0; i < targets_size; i++) {
 80058dc:	f107 065c 	add.w	r6, r7, #92	; 0x5c
 80058e0:	f107 053c 	add.w	r5, r7, #60	; 0x3c
        read_size = asn1_get_int(read_ptr, &int_ptr, &int_size);
 80058e4:	4620      	mov	r0, r4
 80058e6:	1d3a      	adds	r2, r7, #4
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fe febd 	bl	8004668 <asn1_get_int>
        if (read_size == -1) {
 80058ee:	1c43      	adds	r3, r0, #1
        read_ptr += read_size;
 80058f0:	4404      	add	r4, r0
        if (read_size == -1) {
 80058f2:	d0a6      	beq.n	8005842 <import_pvt_key+0x6e>
        bn_from_bytes(targets[i], int_ptr, int_size);
 80058f4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80058f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058fc:	f7ff fb8e 	bl	800501c <bn_from_bytes>
    for (size_t i = 0; i < targets_size; i++) {
 8005900:	42ae      	cmp	r6, r5
 8005902:	d1ef      	bne.n	80058e4 <import_pvt_key+0x110>
 8005904:	e79d      	b.n	8005842 <import_pvt_key+0x6e>
 8005906:	bf00      	nop
 8005908:	0800ab44 	.word	0x0800ab44
 800590c:	0800ab60 	.word	0x0800ab60

08005910 <encrypt_buf>:

    montg_pow(montg_domain, &bignum_montg_in, &key->pub_exp, &bignum_montg_out);
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
}

void encrypt_buf(const rsa_pub_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t bignum_in_len, char *buffer_out, size_t bignum_out_len) {
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005916:	460c      	mov	r4, r1
 8005918:	4616      	mov	r6, r2
 800591a:	4605      	mov	r5, r0
    bignum_t in_bn, out_bn;
    bn_init(&in_bn, BN_ARRAY_SIZE);
 800591c:	2120      	movs	r1, #32
 800591e:	a802      	add	r0, sp, #8
void encrypt_buf(const rsa_pub_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t bignum_in_len, char *buffer_out, size_t bignum_out_len) {
 8005920:	9301      	str	r3, [sp, #4]
    bn_init(&in_bn, BN_ARRAY_SIZE);
 8005922:	f7ff fb6d 	bl	8005000 <bn_init>

    memmove(in_bn, buffer_in, bignum_in_len * sizeof(char));
 8005926:	9a01      	ldr	r2, [sp, #4]
 8005928:	4631      	mov	r1, r6
 800592a:	a802      	add	r0, sp, #8
 800592c:	f002 f943 	bl	8007bb6 <memcpy>
    montg_transform(montg_domain, bignum_in, &bignum_montg_in);
 8005930:	aa42      	add	r2, sp, #264	; 0x108
 8005932:	a902      	add	r1, sp, #8
 8005934:	4620      	mov	r0, r4
 8005936:	f7ff fde3 	bl	8005500 <montg_transform>
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
 800593a:	a862      	add	r0, sp, #392	; 0x188
 800593c:	2120      	movs	r1, #32
 800593e:	f7ff fb5f 	bl	8005000 <bn_init>
    montg_pow(montg_domain, &bignum_montg_in, &key->pub_exp, &bignum_montg_out);
 8005942:	ab62      	add	r3, sp, #392	; 0x188
 8005944:	f105 0280 	add.w	r2, r5, #128	; 0x80
 8005948:	a942      	add	r1, sp, #264	; 0x108
 800594a:	4620      	mov	r0, r4
 800594c:	f7ff fe8c 	bl	8005668 <montg_pow>
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
 8005950:	aa22      	add	r2, sp, #136	; 0x88
 8005952:	a962      	add	r1, sp, #392	; 0x188
 8005954:	4620      	mov	r0, r4
 8005956:	f7ff fe73 	bl	8005640 <montg_revert>
    encrypt(key, montg_domain, &in_bn, &out_bn);
    bn_to_string(&out_bn, buffer_out, bignum_out_len);
 800595a:	e9dd 1286 	ldrd	r1, r2, [sp, #536]	; 0x218
 800595e:	a822      	add	r0, sp, #136	; 0x88
 8005960:	f7ff fbc0 	bl	80050e4 <bn_to_string>
}
 8005964:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8005968:	bd70      	pop	{r4, r5, r6, pc}
 800596a:	bf00      	nop

0800596c <decrypt_buf>:
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
    montg_pow(montg_domain, &bignum_montg_in, &key->pvt_exp, &bignum_montg_out);
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
}

void decrypt_buf(const rsa_pvt_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005972:	460c      	mov	r4, r1
 8005974:	4616      	mov	r6, r2
 8005976:	4605      	mov	r5, r0
    bignum_t in_bn, out_bn;
    bn_init(&in_bn, BN_ARRAY_SIZE);
 8005978:	2120      	movs	r1, #32
 800597a:	a802      	add	r0, sp, #8
void decrypt_buf(const rsa_pvt_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 800597c:	9301      	str	r3, [sp, #4]
    bn_init(&in_bn, BN_ARRAY_SIZE);
 800597e:	f7ff fb3f 	bl	8005000 <bn_init>

    bn_from_string(&in_bn, buffer_in, buffer_in_len);
 8005982:	9a01      	ldr	r2, [sp, #4]
 8005984:	4631      	mov	r1, r6
 8005986:	a802      	add	r0, sp, #8
 8005988:	f7ff fb78 	bl	800507c <bn_from_string>
    montg_transform(montg_domain, bignum_in, &bignum_montg_in);
 800598c:	aa42      	add	r2, sp, #264	; 0x108
 800598e:	a902      	add	r1, sp, #8
 8005990:	4620      	mov	r0, r4
 8005992:	f7ff fdb5 	bl	8005500 <montg_transform>
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
 8005996:	a862      	add	r0, sp, #392	; 0x188
 8005998:	2120      	movs	r1, #32
 800599a:	f7ff fb31 	bl	8005000 <bn_init>
    montg_pow(montg_domain, &bignum_montg_in, &key->pvt_exp, &bignum_montg_out);
 800599e:	ab62      	add	r3, sp, #392	; 0x188
 80059a0:	f505 7280 	add.w	r2, r5, #256	; 0x100
 80059a4:	a942      	add	r1, sp, #264	; 0x108
 80059a6:	4620      	mov	r0, r4
 80059a8:	f7ff fe5e 	bl	8005668 <montg_pow>
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
 80059ac:	aa22      	add	r2, sp, #136	; 0x88
 80059ae:	a962      	add	r1, sp, #392	; 0x188
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff fe45 	bl	8005640 <montg_revert>
    decrypt(key, montg_domain, &in_bn, &out_bn);
    memmove(buffer_out, out_bn, buffer_out_len * sizeof(uint8_t));
 80059b6:	9a87      	ldr	r2, [sp, #540]	; 0x21c
 80059b8:	9886      	ldr	r0, [sp, #536]	; 0x218
 80059ba:	a922      	add	r1, sp, #136	; 0x88
 80059bc:	f002 f8fb 	bl	8007bb6 <memcpy>
}
 80059c0:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 80059c4:	bd70      	pop	{r4, r5, r6, pc}
 80059c6:	bf00      	nop

080059c8 <sign_buf>:

void sign_buf(const rsa_pvt_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t buffer_in_len, char *buffer_out, size_t buffer_out_len) {
 80059c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ca:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80059ce:	461f      	mov	r7, r3
 80059d0:	460c      	mov	r4, r1
 80059d2:	4616      	mov	r6, r2
 80059d4:	4605      	mov	r5, r0
    bignum_t in_bn = {0}, out_bn;
 80059d6:	2280      	movs	r2, #128	; 0x80
 80059d8:	2100      	movs	r1, #0
 80059da:	4668      	mov	r0, sp
 80059dc:	f002 f83a 	bl	8007a54 <memset>

    memmove(in_bn, buffer_in, buffer_in_len * sizeof(char));
 80059e0:	463a      	mov	r2, r7
 80059e2:	4631      	mov	r1, r6
 80059e4:	4668      	mov	r0, sp
 80059e6:	f002 f8e6 	bl	8007bb6 <memcpy>
    montg_transform(montg_domain, bignum_in, &bignum_montg_in);
 80059ea:	aa40      	add	r2, sp, #256	; 0x100
 80059ec:	4669      	mov	r1, sp
 80059ee:	4620      	mov	r0, r4
 80059f0:	f7ff fd86 	bl	8005500 <montg_transform>
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
 80059f4:	a860      	add	r0, sp, #384	; 0x180
 80059f6:	2120      	movs	r1, #32
 80059f8:	f7ff fb02 	bl	8005000 <bn_init>
    montg_pow(montg_domain, &bignum_montg_in, &key->pvt_exp, &bignum_montg_out);
 80059fc:	ab60      	add	r3, sp, #384	; 0x180
 80059fe:	f505 7280 	add.w	r2, r5, #256	; 0x100
 8005a02:	a940      	add	r1, sp, #256	; 0x100
 8005a04:	4620      	mov	r0, r4
 8005a06:	f7ff fe2f 	bl	8005668 <montg_pow>
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
 8005a0a:	aa20      	add	r2, sp, #128	; 0x80
 8005a0c:	a960      	add	r1, sp, #384	; 0x180
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f7ff fe16 	bl	8005640 <montg_revert>
    decrypt(key, montg_domain, &in_bn, &out_bn);
    bn_to_string(&out_bn, buffer_out, buffer_out_len);
 8005a14:	e9dd 1286 	ldrd	r1, r2, [sp, #536]	; 0x218
 8005a18:	a820      	add	r0, sp, #128	; 0x80
 8005a1a:	f7ff fb63 	bl	80050e4 <bn_to_string>
}
 8005a1e:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 8005a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a24 <verify_buf>:

void verify_buf(const rsa_pub_key_t *key, const montg_t *montg_domain, const char *buffer_in, size_t bignum_in_len, char *buffer_out, size_t bignum_out_len) {
 8005a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a26:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8005a2a:	461f      	mov	r7, r3
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	4616      	mov	r6, r2
 8005a30:	4605      	mov	r5, r0
    bignum_t in_bn = {0}, out_bn;
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	2100      	movs	r1, #0
 8005a36:	4668      	mov	r0, sp
 8005a38:	f002 f80c 	bl	8007a54 <memset>

    bn_from_string(&in_bn, buffer_in, bignum_in_len);
 8005a3c:	463a      	mov	r2, r7
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4668      	mov	r0, sp
 8005a42:	f7ff fb1b 	bl	800507c <bn_from_string>
    montg_transform(montg_domain, bignum_in, &bignum_montg_in);
 8005a46:	aa40      	add	r2, sp, #256	; 0x100
 8005a48:	4669      	mov	r1, sp
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff fd58 	bl	8005500 <montg_transform>
    bn_init(&bignum_montg_out, BN_ARRAY_SIZE);
 8005a50:	a860      	add	r0, sp, #384	; 0x180
 8005a52:	2120      	movs	r1, #32
 8005a54:	f7ff fad4 	bl	8005000 <bn_init>
    montg_pow(montg_domain, &bignum_montg_in, &key->pub_exp, &bignum_montg_out);
 8005a58:	ab60      	add	r3, sp, #384	; 0x180
 8005a5a:	f105 0280 	add.w	r2, r5, #128	; 0x80
 8005a5e:	a940      	add	r1, sp, #256	; 0x100
 8005a60:	4620      	mov	r0, r4
 8005a62:	f7ff fe01 	bl	8005668 <montg_pow>
    montg_revert(montg_domain, &bignum_montg_out, bignum_out);
 8005a66:	aa20      	add	r2, sp, #128	; 0x80
 8005a68:	a960      	add	r1, sp, #384	; 0x180
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7ff fde8 	bl	8005640 <montg_revert>
    encrypt(key, montg_domain, &in_bn, &out_bn);
    memmove(buffer_out, out_bn, bignum_out_len * sizeof(uint8_t));
 8005a70:	9a87      	ldr	r2, [sp, #540]	; 0x21c
 8005a72:	9886      	ldr	r0, [sp, #536]	; 0x218
 8005a74:	a920      	add	r1, sp, #128	; 0x80
 8005a76:	f002 f89e 	bl	8007bb6 <memcpy>
 8005a7a:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 8005a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a80 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a80:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8005a84:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8005a88:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a8a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 8005a8e:	b184      	cbz	r4, 8005ab2 <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a90:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8005a94:	b15b      	cbz	r3, 8005aae <USBD_CDC_EP0_RxReady+0x2e>
 8005a96:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005a9a:	28ff      	cmp	r0, #255	; 0xff
 8005a9c:	d007      	beq.n	8005aae <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005aa8:	23ff      	movs	r3, #255	; 0xff
 8005aaa:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005aae:	2000      	movs	r0, #0
}
 8005ab0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005ab2:	2003      	movs	r0, #3
}
 8005ab4:	bd10      	pop	{r4, pc}
 8005ab6:	bf00      	nop

08005ab8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ab8:	230a      	movs	r3, #10
 8005aba:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8005abc:	4800      	ldr	r0, [pc, #0]	; (8005ac0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005abe:	4770      	bx	lr
 8005ac0:	20000088 	.word	0x20000088

08005ac4 <USBD_CDC_GetFSCfgDesc>:
{
 8005ac4:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ac6:	2182      	movs	r1, #130	; 0x82
{
 8005ac8:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005aca:	480f      	ldr	r0, [pc, #60]	; (8005b08 <USBD_CDC_GetFSCfgDesc+0x44>)
 8005acc:	f000 fbda 	bl	8006284 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ad0:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ad2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ad4:	480c      	ldr	r0, [pc, #48]	; (8005b08 <USBD_CDC_GetFSCfgDesc+0x44>)
 8005ad6:	f000 fbd5 	bl	8006284 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ada:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005adc:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ade:	480a      	ldr	r0, [pc, #40]	; (8005b08 <USBD_CDC_GetFSCfgDesc+0x44>)
 8005ae0:	f000 fbd0 	bl	8006284 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8005ae4:	b10d      	cbz	r5, 8005aea <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8005aea:	b11c      	cbz	r4, 8005af4 <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005aec:	2200      	movs	r2, #0
 8005aee:	2140      	movs	r1, #64	; 0x40
 8005af0:	7121      	strb	r1, [r4, #4]
 8005af2:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8005af4:	b118      	cbz	r0, 8005afe <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005af6:	2200      	movs	r2, #0
 8005af8:	2140      	movs	r1, #64	; 0x40
 8005afa:	7101      	strb	r1, [r0, #4]
 8005afc:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005afe:	2343      	movs	r3, #67	; 0x43
}
 8005b00:	4801      	ldr	r0, [pc, #4]	; (8005b08 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b02:	8033      	strh	r3, [r6, #0]
}
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
 8005b06:	bf00      	nop
 8005b08:	20000044 	.word	0x20000044

08005b0c <USBD_CDC_GetHSCfgDesc>:
{
 8005b0c:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b0e:	2182      	movs	r1, #130	; 0x82
{
 8005b10:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b12:	480f      	ldr	r0, [pc, #60]	; (8005b50 <USBD_CDC_GetHSCfgDesc+0x44>)
 8005b14:	f000 fbb6 	bl	8006284 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b18:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b1a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b1c:	480c      	ldr	r0, [pc, #48]	; (8005b50 <USBD_CDC_GetHSCfgDesc+0x44>)
 8005b1e:	f000 fbb1 	bl	8006284 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b22:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b24:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b26:	480a      	ldr	r0, [pc, #40]	; (8005b50 <USBD_CDC_GetHSCfgDesc+0x44>)
 8005b28:	f000 fbac 	bl	8006284 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8005b2c:	b10d      	cbz	r5, 8005b32 <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005b2e:	2210      	movs	r2, #16
 8005b30:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8005b32:	b11c      	cbz	r4, 8005b3c <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b34:	2100      	movs	r1, #0
 8005b36:	2202      	movs	r2, #2
 8005b38:	7121      	strb	r1, [r4, #4]
 8005b3a:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8005b3c:	b118      	cbz	r0, 8005b46 <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b3e:	2100      	movs	r1, #0
 8005b40:	2202      	movs	r2, #2
 8005b42:	7101      	strb	r1, [r0, #4]
 8005b44:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b46:	2343      	movs	r3, #67	; 0x43
}
 8005b48:	4801      	ldr	r0, [pc, #4]	; (8005b50 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b4a:	8033      	strh	r3, [r6, #0]
}
 8005b4c:	bd70      	pop	{r4, r5, r6, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000044 	.word	0x20000044

08005b54 <USBD_CDC_DataOut>:
{
 8005b54:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b56:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8005b5a:	33b0      	adds	r3, #176	; 0xb0
 8005b5c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b60:	b195      	cbz	r5, 8005b88 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b62:	4604      	mov	r4, r0
 8005b64:	f001 f960 	bl	8006e28 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b68:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b6c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005b74:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005b78:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 8005b7c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005b84:	2000      	movs	r0, #0
}
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8005b88:	2003      	movs	r0, #3
}
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}

08005b8c <USBD_CDC_DataIn>:
{
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	f8d0 42d4 	ldr.w	r4, [r0, #724]	; 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b92:	f8d0 62c8 	ldr.w	r6, [r0, #712]	; 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b96:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8005b9a:	f8de 52c0 	ldr.w	r5, [lr, #704]	; 0x2c0
 8005b9e:	b365      	cbz	r5, 8005bfa <USBD_CDC_DataIn+0x6e>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005ba0:	f001 040f 	and.w	r4, r1, #15
 8005ba4:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8005ba8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8005bac:	460a      	mov	r2, r1
 8005bae:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8005bb2:	b96b      	cbnz	r3, 8005bd0 <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005bb4:	f8de 32c4 	ldr.w	r3, [lr, #708]	; 0x2c4
 8005bb8:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8005bba:	2400      	movs	r4, #0
 8005bbc:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005bc0:	b1cb      	cbz	r3, 8005bf6 <USBD_CDC_DataIn+0x6a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bc2:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8005bc6:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8005bca:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005bcc:	4620      	mov	r0, r4
}
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005bd0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8005bd4:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8005bd8:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8005bda:	fbb3 f6f4 	udiv	r6, r3, r4
 8005bde:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005be2:	2c00      	cmp	r4, #0
 8005be4:	d1e6      	bne.n	8005bb4 <USBD_CDC_DataIn+0x28>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005be6:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005bea:	4623      	mov	r3, r4
 8005bec:	4622      	mov	r2, r4
 8005bee:	f001 f8ff 	bl	8006df0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8005bf2:	4620      	mov	r0, r4
}
 8005bf4:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 8005bf6:	4618      	mov	r0, r3
}
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8005bfa:	2003      	movs	r0, #3
}
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	bf00      	nop

08005c00 <USBD_CDC_Setup>:
{
 8005c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c02:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8005c06:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005c0a:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c0c:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
{
 8005c10:	4604      	mov	r4, r0
  uint8_t ifalt = 0U;
 8005c12:	2000      	movs	r0, #0
 8005c14:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 8005c18:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 8005c1c:	2f00      	cmp	r7, #0
 8005c1e:	d068      	beq.n	8005cf2 <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c20:	f891 c000 	ldrb.w	ip, [r1]
 8005c24:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 8005c28:	460d      	mov	r5, r1
 8005c2a:	d01f      	beq.n	8005c6c <USBD_CDC_Setup+0x6c>
 8005c2c:	2e20      	cmp	r6, #32
 8005c2e:	d007      	beq.n	8005c40 <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 8005c30:	4629      	mov	r1, r5
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 fde6 	bl	8006804 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c38:	2603      	movs	r6, #3
}
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	b003      	add	sp, #12
 8005c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 8005c40:	88ce      	ldrh	r6, [r1, #6]
 8005c42:	b38e      	cbz	r6, 8005ca8 <USBD_CDC_Setup+0xa8>
        if ((req->bmRequest & 0x80U) != 0U)
 8005c44:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8005c48:	d157      	bne.n	8005cfa <USBD_CDC_Setup+0xfa>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c4a:	2e3f      	cmp	r6, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 8005c4c:	784b      	ldrb	r3, [r1, #1]
 8005c4e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c52:	bf95      	itete	ls
 8005c54:	4632      	movls	r2, r6
 8005c56:	2340      	movhi	r3, #64	; 0x40
 8005c58:	b2d3      	uxtbls	r3, r2
 8005c5a:	461a      	movhi	r2, r3
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c5c:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c60:	4639      	mov	r1, r7
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 fe1a 	bl	800689c <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c68:	2600      	movs	r6, #0
 8005c6a:	e7e6      	b.n	8005c3a <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 8005c6c:	784f      	ldrb	r7, [r1, #1]
 8005c6e:	2f0b      	cmp	r7, #11
 8005c70:	d8de      	bhi.n	8005c30 <USBD_CDC_Setup+0x30>
 8005c72:	a301      	add	r3, pc, #4	; (adr r3, 8005c78 <USBD_CDC_Setup+0x78>)
 8005c74:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8005c78:	08005cdb 	.word	0x08005cdb
 8005c7c:	08005c3b 	.word	0x08005c3b
 8005c80:	08005c31 	.word	0x08005c31
 8005c84:	08005c31 	.word	0x08005c31
 8005c88:	08005c31 	.word	0x08005c31
 8005c8c:	08005c31 	.word	0x08005c31
 8005c90:	08005c31 	.word	0x08005c31
 8005c94:	08005c31 	.word	0x08005c31
 8005c98:	08005c31 	.word	0x08005c31
 8005c9c:	08005c31 	.word	0x08005c31
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005cbb 	.word	0x08005cbb
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ca8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005cac:	7848      	ldrb	r0, [r1, #1]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	4632      	mov	r2, r6
 8005cb2:	4798      	blx	r3
}
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	b003      	add	sp, #12
 8005cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cba:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d0bb      	beq.n	8005c3a <USBD_CDC_Setup+0x3a>
 8005cc2:	e7b5      	b.n	8005c30 <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d1b1      	bne.n	8005c30 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f10d 0105 	add.w	r1, sp, #5
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f000 fdcc 	bl	8006870 <USBD_CtlSendData>
 8005cd8:	e7af      	b.n	8005c3a <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cda:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d1a6      	bne.n	8005c30 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f10d 0106 	add.w	r1, sp, #6
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fdc1 	bl	8006870 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005cee:	463e      	mov	r6, r7
 8005cf0:	e7a3      	b.n	8005c3a <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 8005cf2:	2603      	movs	r6, #3
}
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	b003      	add	sp, #12
 8005cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005cfe:	4632      	mov	r2, r6
 8005d00:	4639      	mov	r1, r7
 8005d02:	689b      	ldr	r3, [r3, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d04:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d06:	7868      	ldrb	r0, [r5, #1]
 8005d08:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d0a:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d0c:	2a07      	cmp	r2, #7
 8005d0e:	4639      	mov	r1, r7
 8005d10:	bf28      	it	cs
 8005d12:	2207      	movcs	r2, #7
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fdab 	bl	8006870 <USBD_CtlSendData>
 8005d1a:	e78e      	b.n	8005c3a <USBD_CDC_Setup+0x3a>

08005d1c <USBD_CDC_DeInit>:
{
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005d20:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005d22:	2181      	movs	r1, #129	; 0x81
 8005d24:	f001 f818 	bl	8006d58 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d28:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005d2a:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f001 f813 	bl	8006d58 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005d32:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005d36:	2182      	movs	r1, #130	; 0x82
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f001 f80d 	bl	8006d58 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005d3e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005d42:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005d44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d48:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8005d4c:	b18a      	cbz	r2, 8005d72 <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005d4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005d56:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8005d5a:	33b0      	adds	r3, #176	; 0xb0
 8005d5c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8005d60:	f001 f86a 	bl	8006e38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d64:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8005d68:	33b0      	adds	r3, #176	; 0xb0
 8005d6a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8005d6e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8005d72:	2000      	movs	r0, #0
 8005d74:	bd38      	pop	{r3, r4, r5, pc}
 8005d76:	bf00      	nop

08005d78 <USBD_CDC_Init>:
{
 8005d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7c:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d7e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d82:	f001 f855 	bl	8006e30 <USBD_static_malloc>
  if (hcdc == NULL)
 8005d86:	4605      	mov	r5, r0
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d061      	beq.n	8005e50 <USBD_CDC_Init+0xd8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005d90:	2100      	movs	r1, #0
 8005d92:	f001 fe5f 	bl	8007a54 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d96:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8005d9a:	33b0      	adds	r3, #176	; 0xb0
 8005d9c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da0:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005da2:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da6:	b3d3      	cbz	r3, 8005e1e <USBD_CDC_Init+0xa6>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005da8:	2340      	movs	r3, #64	; 0x40
 8005daa:	2202      	movs	r2, #2
 8005dac:	2181      	movs	r1, #129	; 0x81
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 ffc2 	bl	8006d38 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005db4:	2101      	movs	r1, #1
 8005db6:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005db8:	2340      	movs	r3, #64	; 0x40
 8005dba:	2202      	movs	r2, #2
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 ffbb 	bl	8006d38 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dc2:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dc4:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dc6:	2308      	movs	r3, #8
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dc8:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dcc:	2182      	movs	r1, #130	; 0x82
 8005dce:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dd0:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 ffaf 	bl	8006d38 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dda:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005dde:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005de2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 8005de6:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005de8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  hcdc->RxBuffer = NULL;
 8005dec:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 8005df4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 8005df8:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8005dfc:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 8005e00:	b382      	cbz	r2, 8005e64 <USBD_CDC_Init+0xec>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e02:	f894 8010 	ldrb.w	r8, [r4, #16]
 8005e06:	f1b8 0f00 	cmp.w	r8, #0
 8005e0a:	d118      	bne.n	8005e3e <USBD_CDC_Init+0xc6>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e10:	4639      	mov	r1, r7
 8005e12:	4620      	mov	r0, r4
 8005e14:	f000 fffa 	bl	8006e0c <USBD_LL_PrepareReceive>
}
 8005e18:	4640      	mov	r0, r8
 8005e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e22:	2202      	movs	r2, #2
 8005e24:	2181      	movs	r1, #129	; 0x81
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 ff86 	bl	8006d38 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e34:	2202      	movs	r2, #2
 8005e36:	4620      	mov	r0, r4
 8005e38:	f000 ff7e 	bl	8006d38 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e3c:	e7c1      	b.n	8005dc2 <USBD_CDC_Init+0x4a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e3e:	2340      	movs	r3, #64	; 0x40
 8005e40:	4639      	mov	r1, r7
 8005e42:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 8005e44:	46b0      	mov	r8, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e46:	f000 ffe1 	bl	8006e0c <USBD_LL_PrepareReceive>
}
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e50:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8005e54:	33b0      	adds	r3, #176	; 0xb0
    return (uint8_t)USBD_EMEM;
 8005e56:	f04f 0802 	mov.w	r8, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e5a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 8005e5e:	4640      	mov	r0, r8
 8005e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8005e64:	f04f 0802 	mov.w	r8, #2
 8005e68:	e7d6      	b.n	8005e18 <USBD_CDC_Init+0xa0>
 8005e6a:	bf00      	nop

08005e6c <USBD_CDC_GetOtherSpeedCfgDesc>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	2182      	movs	r1, #130	; 0x82
 8005e70:	4606      	mov	r6, r0
 8005e72:	480f      	ldr	r0, [pc, #60]	; (8005eb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8005e74:	f000 fa06 	bl	8006284 <USBD_GetEpDesc>
 8005e78:	2101      	movs	r1, #1
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	480c      	ldr	r0, [pc, #48]	; (8005eb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8005e7e:	f000 fa01 	bl	8006284 <USBD_GetEpDesc>
 8005e82:	2181      	movs	r1, #129	; 0x81
 8005e84:	4604      	mov	r4, r0
 8005e86:	480a      	ldr	r0, [pc, #40]	; (8005eb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8005e88:	f000 f9fc 	bl	8006284 <USBD_GetEpDesc>
 8005e8c:	b10d      	cbz	r5, 8005e92 <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 8005e8e:	2210      	movs	r2, #16
 8005e90:	71aa      	strb	r2, [r5, #6]
 8005e92:	b11c      	cbz	r4, 8005e9c <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 8005e94:	2200      	movs	r2, #0
 8005e96:	2140      	movs	r1, #64	; 0x40
 8005e98:	7121      	strb	r1, [r4, #4]
 8005e9a:	7162      	strb	r2, [r4, #5]
 8005e9c:	b118      	cbz	r0, 8005ea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2140      	movs	r1, #64	; 0x40
 8005ea2:	7101      	strb	r1, [r0, #4]
 8005ea4:	7142      	strb	r2, [r0, #5]
 8005ea6:	2343      	movs	r3, #67	; 0x43
 8005ea8:	4801      	ldr	r0, [pc, #4]	; (8005eb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8005eaa:	8033      	strh	r3, [r6, #0]
 8005eac:	bd70      	pop	{r4, r5, r6, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000044 	.word	0x20000044

08005eb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005eb4:	4603      	mov	r3, r0
  if (fops == NULL)
 8005eb6:	b139      	cbz	r1, 8005ec8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8005eb8:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8005ebc:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 8005ec0:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 8005ec2:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 8005ec6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005ec8:	2003      	movs	r0, #3
}
 8005eca:	4770      	bx	lr

08005ecc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ecc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8005ed0:	33b0      	adds	r3, #176	; 0xb0
 8005ed2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8005ed6:	b12b      	cbz	r3, 8005ee4 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8005ed8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005edc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005ee4:	2003      	movs	r0, #3
}
 8005ee6:	4770      	bx	lr

08005ee8 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ee8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8005eec:	33b0      	adds	r3, #176	; 0xb0
 8005eee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8005ef2:	b11b      	cbz	r3, 8005efc <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8005ef4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ef8:	2000      	movs	r0, #0
 8005efa:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005efc:	2003      	movs	r0, #3
}
 8005efe:	4770      	bx	lr

08005f00 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f00:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8005f04:	32b0      	adds	r2, #176	; 0xb0
{
 8005f06:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f08:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f0c:	b18a      	cbz	r2, 8005f32 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f0e:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f10:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f14:	b134      	cbz	r4, 8005f24 <USBD_CDC_ReceivePacket+0x24>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f16:	2340      	movs	r3, #64	; 0x40
 8005f18:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f1a:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f1c:	f000 ff76 	bl	8006e0c <USBD_LL_PrepareReceive>
}
 8005f20:	4620      	mov	r0, r4
 8005f22:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f28:	2101      	movs	r1, #1
 8005f2a:	f000 ff6f 	bl	8006e0c <USBD_LL_PrepareReceive>
}
 8005f2e:	4620      	mov	r0, r4
 8005f30:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005f32:	2403      	movs	r4, #3
}
 8005f34:	4620      	mov	r0, r4
 8005f36:	bd10      	pop	{r4, pc}

08005f38 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f38:	b178      	cbz	r0, 8005f5a <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f40:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f44:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f48:	b109      	cbz	r1, 8005f4e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005f4a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8005f54:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f56:	f000 bea3 	b.w	8006ca0 <USBD_LL_Init>

  return ret;
}
 8005f5a:	2003      	movs	r0, #3
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f60:	b510      	push	{r4, lr}
 8005f62:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8005f6a:	b189      	cbz	r1, 8005f90 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f6c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass[0] = pclass;
 8005f6e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f72:	4604      	mov	r4, r0
 8005f74:	b123      	cbz	r3, 8005f80 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f76:	f10d 0006 	add.w	r0, sp, #6
 8005f7a:	4798      	blx	r3
 8005f7c:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f80:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8005f84:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 8005f86:	3301      	adds	r3, #1
 8005f88:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 8005f8c:	b002      	add	sp, #8
 8005f8e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005f90:	2003      	movs	r0, #3
}
 8005f92:	b002      	add	sp, #8
 8005f94:	bd10      	pop	{r4, pc}
 8005f96:	bf00      	nop

08005f98 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f98:	f000 bec0 	b.w	8006d1c <USBD_LL_Start>

08005f9c <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005fa0:	b10b      	cbz	r3, 8005fa6 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop

08005fac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fac:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005fae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8005fb6:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005fb8:	bf18      	it	ne
 8005fba:	2003      	movne	r0, #3
 8005fbc:	bd08      	pop	{r3, pc}
 8005fbe:	bf00      	nop

08005fc0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fc4:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f000 fc0f 	bl	80067ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005fce:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8005fd2:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 8005fd6:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8005fe0:	f001 031f 	and.w	r3, r1, #31
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d009      	beq.n	8005ffc <USBD_LL_SetupStage+0x3c>
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d013      	beq.n	8006014 <USBD_LL_SetupStage+0x54>
 8005fec:	b163      	cbz	r3, 8006008 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8005ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ff8:	f000 bebc 	b.w	8006d74 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4620      	mov	r0, r4
}
 8006000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006004:	f000 bb0e 	b.w	8006624 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006008:	4629      	mov	r1, r5
 800600a:	4620      	mov	r0, r4
}
 800600c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006010:	f000 b94e 	b.w	80062b0 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006014:	4629      	mov	r1, r5
 8006016:	4620      	mov	r0, r4
}
 8006018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800601c:	f000 bb3c 	b.w	8006698 <USBD_StdEPReq>

08006020 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006020:	b510      	push	{r4, lr}
 8006022:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8006024:	b931      	cbnz	r1, 8006034 <USBD_LL_DataOutStage+0x14>
 8006026:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006028:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800602c:	2a03      	cmp	r2, #3
 800602e:	d010      	beq.n	8006052 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8006030:	2000      	movs	r0, #0
 8006032:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006034:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006038:	2b03      	cmp	r3, #3
 800603a:	d1f9      	bne.n	8006030 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 800603c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f4      	beq.n	8006030 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 8006046:	2200      	movs	r2, #0
}
 8006048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 800604c:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006050:	4718      	bx	r3
 8006052:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 8006054:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8006058:	4291      	cmp	r1, r2
 800605a:	d808      	bhi.n	800606e <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006060:	2a03      	cmp	r2, #3
 8006062:	d00e      	beq.n	8006082 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8006064:	4620      	mov	r0, r4
 8006066:	f000 fc2f 	bl	80068c8 <USBD_CtlSendStatus>
}
 800606a:	2000      	movs	r0, #0
 800606c:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800606e:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006070:	428a      	cmp	r2, r1
 8006072:	bf28      	it	cs
 8006074:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 8006076:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800607a:	4661      	mov	r1, ip
 800607c:	f000 fc1c 	bl	80068b8 <USBD_CtlContinueRx>
 8006080:	e7d6      	b.n	8006030 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006082:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8006086:	6912      	ldr	r2, [r2, #16]
 8006088:	2a00      	cmp	r2, #0
 800608a:	d0eb      	beq.n	8006064 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 800608c:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006090:	4790      	blx	r2
 8006092:	e7e7      	b.n	8006064 <USBD_LL_DataOutStage+0x44>

08006094 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006098:	b961      	cbnz	r1, 80060b4 <USBD_LL_DataInStage+0x20>
 800609a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800609c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80060a0:	2a02      	cmp	r2, #2
 80060a2:	d016      	beq.n	80060d2 <USBD_LL_DataInStage+0x3e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80060a4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80060a8:	b113      	cbz	r3, 80060b0 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 80060b0:	2000      	movs	r0, #0
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d1f9      	bne.n	80060b0 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 80060bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f4      	beq.n	80060b0 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 80060c6:	2200      	movs	r2, #0
}
 80060c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80060cc:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80060d0:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80060d2:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 80060d6:	42b2      	cmp	r2, r6
 80060d8:	460d      	mov	r5, r1
 80060da:	d810      	bhi.n	80060fe <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 80060dc:	d01b      	beq.n	8006116 <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060de:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d024      	beq.n	8006130 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060e6:	2180      	movs	r1, #128	; 0x80
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 fe43 	bl	8006d74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 fbf6 	bl	80068e0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 80060f4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0d9      	beq.n	80060b0 <USBD_LL_DataInStage+0x1c>
 80060fc:	e7d5      	b.n	80060aa <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 80060fe:	1b92      	subs	r2, r2, r6
 8006100:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006102:	4619      	mov	r1, r3
 8006104:	f000 fbc2 	bl	800688c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006108:	462b      	mov	r3, r5
 800610a:	462a      	mov	r2, r5
 800610c:	4629      	mov	r1, r5
 800610e:	4620      	mov	r0, r4
 8006110:	f000 fe7c 	bl	8006e0c <USBD_LL_PrepareReceive>
 8006114:	e7c6      	b.n	80060a4 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8006116:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006118:	429a      	cmp	r2, r3
 800611a:	d8e0      	bhi.n	80060de <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 800611c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8006120:	4293      	cmp	r3, r2
 8006122:	d2dc      	bcs.n	80060de <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006124:	460a      	mov	r2, r1
 8006126:	f000 fbb1 	bl	800688c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800612a:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800612e:	e7eb      	b.n	8006108 <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006130:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0d5      	beq.n	80060e6 <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 800613a:	2200      	movs	r2, #0
 800613c:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006140:	4620      	mov	r0, r4
 8006142:	4798      	blx	r3
 8006144:	e7cf      	b.n	80060e6 <USBD_LL_DataInStage+0x52>
 8006146:	bf00      	nop

08006148 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800614a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800614e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006150:	2201      	movs	r2, #1
 8006152:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
{
 8006156:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 8006158:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800615a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800615e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006162:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 8006166:	b11b      	cbz	r3, 8006170 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	b10b      	cbz	r3, 8006170 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800616c:	4798      	blx	r3
 800616e:	b9b0      	cbnz	r0, 800619e <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8006170:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006172:	2200      	movs	r2, #0
 8006174:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006176:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006178:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800617a:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fddb 	bl	8006d38 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006182:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006186:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800618a:	462b      	mov	r3, r5
 800618c:	2200      	movs	r2, #0
 800618e:	2180      	movs	r1, #128	; 0x80
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fdd1 	bl	8006d38 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006196:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006198:	6225      	str	r5, [r4, #32]

  return ret;
}
 800619a:	4638      	mov	r0, r7
 800619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 800619e:	2703      	movs	r7, #3
 80061a0:	e7e7      	b.n	8006172 <USBD_LL_Reset+0x2a>
 80061a2:	bf00      	nop

080061a4 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80061a4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80061a6:	2000      	movs	r0, #0
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop

080061ac <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80061ac:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 80061b0:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061b2:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d

  return USBD_OK;
}
 80061ba:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061bc:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop

080061c4 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d104      	bne.n	80061d6 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061cc:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80061d6:	2000      	movs	r0, #0
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop

080061dc <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061dc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80061e0:	2a03      	cmp	r2, #3
 80061e2:	d001      	beq.n	80061e8 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80061e4:	2000      	movs	r0, #0
 80061e6:	4770      	bx	lr
{
 80061e8:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 80061ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80061ee:	b113      	cbz	r3, 80061f6 <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	b103      	cbz	r3, 80061f6 <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 80061f4:	4798      	blx	r3
}
 80061f6:	2000      	movs	r0, #0
 80061f8:	bd08      	pop	{r3, pc}
 80061fa:	bf00      	nop

080061fc <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 80061fc:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8006200:	32ae      	adds	r2, #174	; 0xae
 8006202:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006206:	b15a      	cbz	r2, 8006220 <USBD_LL_IsoINIncomplete+0x24>
{
 8006208:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800620e:	2b03      	cmp	r3, #3
 8006210:	d001      	beq.n	8006216 <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006212:	2000      	movs	r0, #0
}
 8006214:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006216:	6a13      	ldr	r3, [r2, #32]
 8006218:	b123      	cbz	r3, 8006224 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800621a:	4798      	blx	r3
  return USBD_OK;
 800621c:	2000      	movs	r0, #0
}
 800621e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006220:	2003      	movs	r0, #3
}
 8006222:	4770      	bx	lr
  return USBD_OK;
 8006224:	4618      	mov	r0, r3
}
 8006226:	bd08      	pop	{r3, pc}

08006228 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8006228:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800622c:	32ae      	adds	r2, #174	; 0xae
 800622e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006232:	b15a      	cbz	r2, 800624c <USBD_LL_IsoOUTIncomplete+0x24>
{
 8006234:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006236:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800623a:	2b03      	cmp	r3, #3
 800623c:	d001      	beq.n	8006242 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800623e:	2000      	movs	r0, #0
}
 8006240:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006242:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006244:	b123      	cbz	r3, 8006250 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006246:	4798      	blx	r3
  return USBD_OK;
 8006248:	2000      	movs	r0, #0
}
 800624a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800624c:	2003      	movs	r0, #3
}
 800624e:	4770      	bx	lr
  return USBD_OK;
 8006250:	4618      	mov	r0, r3
}
 8006252:	bd08      	pop	{r3, pc}

08006254 <USBD_LL_DevConnected>:
 8006254:	2000      	movs	r0, #0
 8006256:	4770      	bx	lr

08006258 <USBD_LL_DevDisconnected>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006258:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800625c:	2101      	movs	r1, #1
 800625e:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass[0] != NULL)
 8006262:	b142      	cbz	r2, 8006276 <USBD_LL_DevDisconnected+0x1e>
{
 8006264:	b508      	push	{r3, lr}
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006266:	6852      	ldr	r2, [r2, #4]
 8006268:	7901      	ldrb	r1, [r0, #4]
 800626a:	4790      	blx	r2
 800626c:	b908      	cbnz	r0, 8006272 <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 800626e:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006270:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 8006272:	2003      	movs	r0, #3
}
 8006274:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8006276:	2000      	movs	r0, #0
}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop

0800627c <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800627c:	2000      	movs	r0, #0
 800627e:	4770      	bx	lr

08006280 <USBD_CoreFindEP>:
 8006280:	2000      	movs	r0, #0
 8006282:	4770      	bx	lr

08006284 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006284:	7802      	ldrb	r2, [r0, #0]
 8006286:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800628a:	4594      	cmp	ip, r2
 800628c:	b293      	uxth	r3, r2
 800628e:	d803      	bhi.n	8006298 <USBD_GetEpDesc+0x14>
 8006290:	e00c      	b.n	80062ac <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 8006292:	459c      	cmp	ip, r3
 8006294:	d90a      	bls.n	80062ac <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8006296:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006298:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 800629a:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800629c:	7842      	ldrb	r2, [r0, #1]
 800629e:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 80062a0:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80062a2:	d1f6      	bne.n	8006292 <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 80062a4:	7882      	ldrb	r2, [r0, #2]
 80062a6:	428a      	cmp	r2, r1
 80062a8:	d1f3      	bne.n	8006292 <USBD_GetEpDesc+0xe>
}
 80062aa:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80062ac:	2000      	movs	r0, #0
}
 80062ae:	4770      	bx	lr

080062b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b4:	780c      	ldrb	r4, [r1, #0]
 80062b6:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ba:	2c20      	cmp	r4, #32
{
 80062bc:	b082      	sub	sp, #8
 80062be:	460e      	mov	r6, r1
 80062c0:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c2:	d00f      	beq.n	80062e4 <USBD_StdDevReq+0x34>
 80062c4:	2c40      	cmp	r4, #64	; 0x40
 80062c6:	d00d      	beq.n	80062e4 <USBD_StdDevReq+0x34>
 80062c8:	b1c4      	cbz	r4, 80062fc <USBD_StdDevReq+0x4c>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ca:	2180      	movs	r1, #128	; 0x80
 80062cc:	4628      	mov	r0, r5
 80062ce:	f000 fd51 	bl	8006d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062d2:	2100      	movs	r1, #0
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 fd4d 	bl	8006d74 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80062da:	2400      	movs	r4, #0
}
 80062dc:	4620      	mov	r0, r4
 80062de:	b002      	add	sp, #8
 80062e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062e4:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 80062e8:	33ae      	adds	r3, #174	; 0xae
 80062ea:	4631      	mov	r1, r6
 80062ec:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	4628      	mov	r0, r5
}
 80062f4:	b002      	add	sp, #8
 80062f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062fa:	4718      	bx	r3
      switch (req->bRequest)
 80062fc:	784f      	ldrb	r7, [r1, #1]
 80062fe:	2f09      	cmp	r7, #9
 8006300:	d8e3      	bhi.n	80062ca <USBD_StdDevReq+0x1a>
 8006302:	a301      	add	r3, pc, #4	; (adr r3, 8006308 <USBD_StdDevReq+0x58>)
 8006304:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8006308:	0800636d 	.word	0x0800636d
 800630c:	08006397 	.word	0x08006397
 8006310:	080062cb 	.word	0x080062cb
 8006314:	080063b5 	.word	0x080063b5
 8006318:	080062cb 	.word	0x080062cb
 800631c:	080063d9 	.word	0x080063d9
 8006320:	08006411 	.word	0x08006411
 8006324:	080062cb 	.word	0x080062cb
 8006328:	08006445 	.word	0x08006445
 800632c:	08006331 	.word	0x08006331
  cfgidx = (uint8_t)(req->wValue);
 8006330:	788e      	ldrb	r6, [r1, #2]
 8006332:	4fb5      	ldr	r7, [pc, #724]	; (8006608 <USBD_StdDevReq+0x358>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006334:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8006336:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006338:	f200 8147 	bhi.w	80065ca <USBD_StdDevReq+0x31a>
  switch (pdev->dev_state)
 800633c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006340:	2b02      	cmp	r3, #2
 8006342:	fa5f f883 	uxtb.w	r8, r3
 8006346:	f000 8102 	beq.w	800654e <USBD_StdDevReq+0x29e>
 800634a:	f1b8 0f03 	cmp.w	r8, #3
 800634e:	f000 8113 	beq.w	8006578 <USBD_StdDevReq+0x2c8>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006352:	2180      	movs	r1, #128	; 0x80
 8006354:	f000 fd0e 	bl	8006d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006358:	2100      	movs	r1, #0
 800635a:	4628      	mov	r0, r5
 800635c:	f000 fd0a 	bl	8006d74 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006360:	7839      	ldrb	r1, [r7, #0]
 8006362:	4628      	mov	r0, r5
 8006364:	f7ff fe22 	bl	8005fac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006368:	2403      	movs	r4, #3
      break;
 800636a:	e7b7      	b.n	80062dc <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 800636c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006370:	3b01      	subs	r3, #1
 8006372:	2b02      	cmp	r3, #2
 8006374:	d824      	bhi.n	80063c0 <USBD_StdDevReq+0x110>
      if (req->wLength != 0x2U)
 8006376:	88ca      	ldrh	r2, [r1, #6]
 8006378:	2a02      	cmp	r2, #2
 800637a:	d121      	bne.n	80063c0 <USBD_StdDevReq+0x110>
      if (pdev->dev_remote_wakeup != 0U)
 800637c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8006380:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006382:	2b00      	cmp	r3, #0
 8006384:	bf14      	ite	ne
 8006386:	2303      	movne	r3, #3
 8006388:	2301      	moveq	r3, #1
 800638a:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800638e:	f000 fa6f 	bl	8006870 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006392:	463c      	mov	r4, r7
      break;
 8006394:	e7a2      	b.n	80062dc <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8006396:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800639a:	3b01      	subs	r3, #1
 800639c:	2b02      	cmp	r3, #2
 800639e:	d80f      	bhi.n	80063c0 <USBD_StdDevReq+0x110>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063a0:	884b      	ldrh	r3, [r1, #2]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d19a      	bne.n	80062dc <USBD_StdDevReq+0x2c>
        pdev->dev_remote_wakeup = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80063ac:	4628      	mov	r0, r5
 80063ae:	f000 fa8b 	bl	80068c8 <USBD_CtlSendStatus>
 80063b2:	e793      	b.n	80062dc <USBD_StdDevReq+0x2c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063b4:	884b      	ldrh	r3, [r1, #2]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d0f6      	beq.n	80063a8 <USBD_StdDevReq+0xf8>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	f000 80fe 	beq.w	80065bc <USBD_StdDevReq+0x30c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80063c0:	2180      	movs	r1, #128	; 0x80
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 fcd6 	bl	8006d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80063c8:	2100      	movs	r1, #0
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 fcd2 	bl	8006d74 <USBD_LL_StallEP>
}
 80063d0:	4620      	mov	r0, r4
 80063d2:	b002      	add	sp, #8
 80063d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063d8:	888b      	ldrh	r3, [r1, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <USBD_StdDevReq+0x110>
 80063de:	88cb      	ldrh	r3, [r1, #6]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1ed      	bne.n	80063c0 <USBD_StdDevReq+0x110>
 80063e4:	884e      	ldrh	r6, [r1, #2]
 80063e6:	2e7f      	cmp	r6, #127	; 0x7f
 80063e8:	d8ea      	bhi.n	80063c0 <USBD_StdDevReq+0x110>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d0e6      	beq.n	80063c0 <USBD_StdDevReq+0x110>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80063f2:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80063f4:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063f8:	f000 fcec 	bl	8006dd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063fc:	4628      	mov	r0, r5
 80063fe:	f000 fa63 	bl	80068c8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006402:	2e00      	cmp	r6, #0
 8006404:	f000 8109 	beq.w	800661a <USBD_StdDevReq+0x36a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006408:	2302      	movs	r3, #2
 800640a:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800640e:	e765      	b.n	80062dc <USBD_StdDevReq+0x2c>
  switch (req->wValue >> 8)
 8006410:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006418:	0a13      	lsrs	r3, r2, #8
 800641a:	3b01      	subs	r3, #1
 800641c:	2b06      	cmp	r3, #6
 800641e:	d8cf      	bhi.n	80063c0 <USBD_StdDevReq+0x110>
 8006420:	a101      	add	r1, pc, #4	; (adr r1, 8006428 <USBD_StdDevReq+0x178>)
 8006422:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	080064df 	.word	0x080064df
 800642c:	080064c5 	.word	0x080064c5
 8006430:	080064b5 	.word	0x080064b5
 8006434:	080063c1 	.word	0x080063c1
 8006438:	080063c1 	.word	0x080063c1
 800643c:	080064a1 	.word	0x080064a1
 8006440:	08006469 	.word	0x08006469
  if (req->wLength != 1U)
 8006444:	88ca      	ldrh	r2, [r1, #6]
 8006446:	2a01      	cmp	r2, #1
 8006448:	d1ba      	bne.n	80063c0 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state)
 800644a:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800644e:	2902      	cmp	r1, #2
 8006450:	b2cb      	uxtb	r3, r1
 8006452:	d875      	bhi.n	8006540 <USBD_StdDevReq+0x290>
 8006454:	2b00      	cmp	r3, #0
 8006456:	f43f af38 	beq.w	80062ca <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 800645a:	4601      	mov	r1, r0
 800645c:	2300      	movs	r3, #0
 800645e:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006462:	f000 fa05 	bl	8006870 <USBD_CtlSendData>
        break;
 8006466:	e739      	b.n	80062dc <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006468:	7c03      	ldrb	r3, [r0, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1a8      	bne.n	80063c0 <USBD_StdDevReq+0x110>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800646e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006472:	f10d 0006 	add.w	r0, sp, #6
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800647a:	2307      	movs	r3, #7
 800647c:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800647e:	88f2      	ldrh	r2, [r6, #6]
 8006480:	2a00      	cmp	r2, #0
 8006482:	d093      	beq.n	80063ac <USBD_StdDevReq+0xfc>
    if (len != 0U)
 8006484:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d099      	beq.n	80063c0 <USBD_StdDevReq+0x110>
      len = MIN(len, req->wLength);
 800648c:	429a      	cmp	r2, r3
 800648e:	bf28      	it	cs
 8006490:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006492:	4601      	mov	r1, r0
 8006494:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8006496:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800649a:	f000 f9e9 	bl	8006870 <USBD_CtlSendData>
 800649e:	e71d      	b.n	80062dc <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a0:	7c03      	ldrb	r3, [r0, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d18c      	bne.n	80063c0 <USBD_StdDevReq+0x110>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80064aa:	f10d 0006 	add.w	r0, sp, #6
 80064ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b0:	4798      	blx	r3
  if (err != 0U)
 80064b2:	e7e4      	b.n	800647e <USBD_StdDevReq+0x1ce>
      switch ((uint8_t)(req->wValue))
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	2a05      	cmp	r2, #5
 80064b8:	d882      	bhi.n	80063c0 <USBD_StdDevReq+0x110>
 80064ba:	e8df f002 	tbb	[pc, r2]
 80064be:	353b      	.short	0x353b
 80064c0:	1823292f 	.word	0x1823292f
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064c4:	7c03      	ldrb	r3, [r0, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 8094 	bne.w	80065f4 <USBD_StdDevReq+0x344>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80064cc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80064d0:	f10d 0006 	add.w	r0, sp, #6
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064d8:	2302      	movs	r3, #2
 80064da:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80064dc:	e7cf      	b.n	800647e <USBD_StdDevReq+0x1ce>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80064e2:	7c00      	ldrb	r0, [r0, #16]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f10d 0106 	add.w	r1, sp, #6
 80064ea:	4798      	blx	r3
  if (err != 0U)
 80064ec:	e7c7      	b.n	800647e <USBD_StdDevReq+0x1ce>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f43f af63 	beq.w	80063c0 <USBD_StdDevReq+0x110>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064fa:	7c28      	ldrb	r0, [r5, #16]
 80064fc:	f10d 0106 	add.w	r1, sp, #6
 8006500:	4798      	blx	r3
  if (err != 0U)
 8006502:	e7bc      	b.n	800647e <USBD_StdDevReq+0x1ce>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006504:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f5      	bne.n	80064fa <USBD_StdDevReq+0x24a>
 800650e:	e757      	b.n	80063c0 <USBD_StdDevReq+0x110>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006510:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1ef      	bne.n	80064fa <USBD_StdDevReq+0x24a>
 800651a:	e751      	b.n	80063c0 <USBD_StdDevReq+0x110>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800651c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e9      	bne.n	80064fa <USBD_StdDevReq+0x24a>
 8006526:	e74b      	b.n	80063c0 <USBD_StdDevReq+0x110>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006528:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <USBD_StdDevReq+0x24a>
 8006532:	e745      	b.n	80063c0 <USBD_StdDevReq+0x110>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006534:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1dd      	bne.n	80064fa <USBD_StdDevReq+0x24a>
 800653e:	e73f      	b.n	80063c0 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state)
 8006540:	2b03      	cmp	r3, #3
 8006542:	f47f aec2 	bne.w	80062ca <USBD_StdDevReq+0x1a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006546:	1d01      	adds	r1, r0, #4
 8006548:	f000 f992 	bl	8006870 <USBD_CtlSendData>
        break;
 800654c:	e6c6      	b.n	80062dc <USBD_StdDevReq+0x2c>
      if (cfgidx != 0U)
 800654e:	2e00      	cmp	r6, #0
 8006550:	f43f af2c 	beq.w	80063ac <USBD_StdDevReq+0xfc>
        pdev->dev_config = cfgidx;
 8006554:	2101      	movs	r1, #1
 8006556:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006558:	f7ff fd20 	bl	8005f9c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800655c:	4604      	mov	r4, r0
 800655e:	2800      	cmp	r0, #0
 8006560:	d054      	beq.n	800660c <USBD_StdDevReq+0x35c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006562:	2180      	movs	r1, #128	; 0x80
 8006564:	4628      	mov	r0, r5
 8006566:	f000 fc05 	bl	8006d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800656a:	2100      	movs	r1, #0
 800656c:	4628      	mov	r0, r5
 800656e:	f000 fc01 	bl	8006d74 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006572:	f885 829c 	strb.w	r8, [r5, #668]	; 0x29c
 8006576:	e6b1      	b.n	80062dc <USBD_StdDevReq+0x2c>
      if (cfgidx == 0U)
 8006578:	b386      	cbz	r6, 80065dc <USBD_StdDevReq+0x32c>
      else if (cfgidx != pdev->dev_config)
 800657a:	6841      	ldr	r1, [r0, #4]
 800657c:	2901      	cmp	r1, #1
 800657e:	f43f af15 	beq.w	80063ac <USBD_StdDevReq+0xfc>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006582:	b2c9      	uxtb	r1, r1
 8006584:	f7ff fd12 	bl	8005fac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006588:	7839      	ldrb	r1, [r7, #0]
 800658a:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800658c:	4628      	mov	r0, r5
 800658e:	f7ff fd05 	bl	8005f9c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006592:	4606      	mov	r6, r0
 8006594:	2800      	cmp	r0, #0
 8006596:	f43f af09 	beq.w	80063ac <USBD_StdDevReq+0xfc>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	4628      	mov	r0, r5
 800659e:	f000 fbe9 	bl	8006d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065a2:	2100      	movs	r1, #0
 80065a4:	4628      	mov	r0, r5
 80065a6:	f000 fbe5 	bl	8006d74 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065aa:	7929      	ldrb	r1, [r5, #4]
 80065ac:	4628      	mov	r0, r5
 80065ae:	f7ff fcfd 	bl	8005fac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065b2:	2302      	movs	r3, #2
 80065b4:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80065b8:	4634      	mov	r4, r6
 80065ba:	e68f      	b.n	80062dc <USBD_StdDevReq+0x2c>
    pdev->dev_test_mode = req->wIndex >> 8;
 80065bc:	888b      	ldrh	r3, [r1, #4]
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80065c4:	f000 f980 	bl	80068c8 <USBD_CtlSendStatus>
 80065c8:	e688      	b.n	80062dc <USBD_StdDevReq+0x2c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80065ca:	2180      	movs	r1, #128	; 0x80
 80065cc:	f000 fbd2 	bl	8006d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065d0:	2100      	movs	r1, #0
 80065d2:	4628      	mov	r0, r5
 80065d4:	f000 fbce 	bl	8006d74 <USBD_LL_StallEP>
    return USBD_FAIL;
 80065d8:	2403      	movs	r4, #3
 80065da:	e67f      	b.n	80062dc <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065dc:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065de:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065e0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80065e4:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065e6:	f7ff fce1 	bl	8005fac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065ea:	4628      	mov	r0, r5
 80065ec:	f000 f96c 	bl	80068c8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80065f0:	4634      	mov	r4, r6
 80065f2:	e673      	b.n	80062dc <USBD_StdDevReq+0x2c>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80065f8:	f10d 0006 	add.w	r0, sp, #6
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006600:	2302      	movs	r3, #2
 8006602:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006604:	e73b      	b.n	800647e <USBD_StdDevReq+0x1ce>
 8006606:	bf00      	nop
 8006608:	200009e8 	.word	0x200009e8
          (void)USBD_CtlSendStatus(pdev);
 800660c:	4628      	mov	r0, r5
 800660e:	f000 f95b 	bl	80068c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006612:	2303      	movs	r3, #3
 8006614:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8006618:	e660      	b.n	80062dc <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800661a:	2301      	movs	r3, #1
 800661c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8006620:	e65c      	b.n	80062dc <USBD_StdDevReq+0x2c>
 8006622:	bf00      	nop

08006624 <USBD_StdItfReq>:
{
 8006624:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006626:	780b      	ldrb	r3, [r1, #0]
 8006628:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800662c:	2a40      	cmp	r2, #64	; 0x40
{
 800662e:	460d      	mov	r5, r1
 8006630:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006632:	d00b      	beq.n	800664c <USBD_StdItfReq+0x28>
 8006634:	065b      	lsls	r3, r3, #25
 8006636:	d509      	bpl.n	800664c <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006638:	2180      	movs	r1, #128	; 0x80
 800663a:	f000 fb9b 	bl	8006d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800663e:	2100      	movs	r1, #0
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fb97 	bl	8006d74 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8006646:	2500      	movs	r5, #0
}
 8006648:	4628      	mov	r0, r5
 800664a:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800664c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006650:	3b01      	subs	r3, #1
 8006652:	2b02      	cmp	r3, #2
 8006654:	d802      	bhi.n	800665c <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006656:	7929      	ldrb	r1, [r5, #4]
 8006658:	2901      	cmp	r1, #1
 800665a:	d902      	bls.n	8006662 <USBD_StdItfReq+0x3e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800665c:	2180      	movs	r1, #128	; 0x80
 800665e:	4620      	mov	r0, r4
 8006660:	e7eb      	b.n	800663a <USBD_StdItfReq+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006662:	4620      	mov	r0, r4
 8006664:	f7ff fe0a 	bl	800627c <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006668:	b990      	cbnz	r0, 8006690 <USBD_StdItfReq+0x6c>
              if (pdev->pClass[idx]->Setup != NULL)
 800666a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	b173      	cbz	r3, 8006690 <USBD_StdItfReq+0x6c>
                pdev->classId = idx;
 8006672:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006676:	4629      	mov	r1, r5
 8006678:	4620      	mov	r0, r4
 800667a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800667c:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800667e:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e1      	bne.n	8006648 <USBD_StdItfReq+0x24>
 8006684:	2800      	cmp	r0, #0
 8006686:	d1df      	bne.n	8006648 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8006688:	4620      	mov	r0, r4
 800668a:	f000 f91d 	bl	80068c8 <USBD_CtlSendStatus>
 800668e:	e7db      	b.n	8006648 <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 8006690:	2503      	movs	r5, #3
}
 8006692:	4628      	mov	r0, r5
 8006694:	bd38      	pop	{r3, r4, r5, pc}
 8006696:	bf00      	nop

08006698 <USBD_StdEPReq>:
{
 8006698:	b530      	push	{r4, r5, lr}
 800669a:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800669c:	888a      	ldrh	r2, [r1, #4]
 800669e:	7823      	ldrb	r3, [r4, #0]
 80066a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066a4:	2b20      	cmp	r3, #32
{
 80066a6:	b083      	sub	sp, #12
 80066a8:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 80066aa:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ac:	d01e      	beq.n	80066ec <USBD_StdEPReq+0x54>
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d01c      	beq.n	80066ec <USBD_StdEPReq+0x54>
 80066b2:	b36b      	cbz	r3, 8006710 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80066b4:	2180      	movs	r1, #128	; 0x80
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 fb5c 	bl	8006d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80066bc:	2100      	movs	r1, #0
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 fb58 	bl	8006d74 <USBD_LL_StallEP>
}
 80066c4:	2000      	movs	r0, #0
 80066c6:	b003      	add	sp, #12
 80066c8:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 80066ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	d05d      	beq.n	8006790 <USBD_StdEPReq+0xf8>
 80066d4:	2a03      	cmp	r2, #3
 80066d6:	d1ed      	bne.n	80066b4 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066d8:	8863      	ldrh	r3, [r4, #2]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f2      	bne.n	80066c4 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80066de:	064b      	lsls	r3, r1, #25
 80066e0:	d17a      	bne.n	80067d8 <USBD_StdEPReq+0x140>
                (void)USBD_CtlSendStatus(pdev);
 80066e2:	4628      	mov	r0, r5
 80066e4:	9101      	str	r1, [sp, #4]
 80066e6:	f000 f8ef 	bl	80068c8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066ea:	9901      	ldr	r1, [sp, #4]
 80066ec:	4628      	mov	r0, r5
 80066ee:	f7ff fdc7 	bl	8006280 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d1e6      	bne.n	80066c4 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 80066f6:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 80066fa:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0df      	beq.n	80066c4 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006704:	4621      	mov	r1, r4
 8006706:	4628      	mov	r0, r5
}
 8006708:	b003      	add	sp, #12
 800670a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800670e:	4718      	bx	r3
      switch (req->bRequest)
 8006710:	7863      	ldrb	r3, [r4, #1]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d0d9      	beq.n	80066ca <USBD_StdEPReq+0x32>
 8006716:	2b03      	cmp	r3, #3
 8006718:	d029      	beq.n	800676e <USBD_StdEPReq+0xd6>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1ca      	bne.n	80066b4 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800671e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006722:	2b02      	cmp	r3, #2
 8006724:	b2d8      	uxtb	r0, r3
 8006726:	d03c      	beq.n	80067a2 <USBD_StdEPReq+0x10a>
 8006728:	2803      	cmp	r0, #3
 800672a:	d1c3      	bne.n	80066b4 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800672c:	f001 030f 	and.w	r3, r1, #15
 8006730:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8006734:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006736:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800673a:	d441      	bmi.n	80067c0 <USBD_StdEPReq+0x128>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800673c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0b7      	beq.n	80066b4 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006744:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8006748:	2414      	movs	r4, #20
 800674a:	fb04 5403 	mla	r4, r4, r3, r5
 800674e:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006752:	b12b      	cbz	r3, 8006760 <USBD_StdEPReq+0xc8>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006754:	4628      	mov	r0, r5
 8006756:	f000 fb29 	bl	8006dac <USBD_LL_IsStallEP>
 800675a:	1e03      	subs	r3, r0, #0
 800675c:	bf18      	it	ne
 800675e:	2301      	movne	r3, #1
                pep->status = 0x0000U;
 8006760:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006762:	2202      	movs	r2, #2
 8006764:	4621      	mov	r1, r4
 8006766:	4628      	mov	r0, r5
 8006768:	f000 f882 	bl	8006870 <USBD_CtlSendData>
              break;
 800676c:	e7aa      	b.n	80066c4 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 800676e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006772:	2b02      	cmp	r3, #2
 8006774:	b2da      	uxtb	r2, r3
 8006776:	d00b      	beq.n	8006790 <USBD_StdEPReq+0xf8>
 8006778:	2a03      	cmp	r2, #3
 800677a:	d19b      	bne.n	80066b4 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800677c:	8863      	ldrh	r3, [r4, #2]
 800677e:	b91b      	cbnz	r3, 8006788 <USBD_StdEPReq+0xf0>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006780:	0648      	lsls	r0, r1, #25
 8006782:	d001      	beq.n	8006788 <USBD_StdEPReq+0xf0>
 8006784:	88e3      	ldrh	r3, [r4, #6]
 8006786:	b363      	cbz	r3, 80067e2 <USBD_StdEPReq+0x14a>
              (void)USBD_CtlSendStatus(pdev);
 8006788:	4628      	mov	r0, r5
 800678a:	f000 f89d 	bl	80068c8 <USBD_CtlSendStatus>
              break;
 800678e:	e799      	b.n	80066c4 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006790:	064a      	lsls	r2, r1, #25
 8006792:	d08f      	beq.n	80066b4 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006794:	f000 faee 	bl	8006d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	4628      	mov	r0, r5
 800679c:	f000 faea 	bl	8006d74 <USBD_LL_StallEP>
 80067a0:	e790      	b.n	80066c4 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067a2:	0648      	lsls	r0, r1, #25
 80067a4:	d186      	bne.n	80066b4 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067a6:	0611      	lsls	r1, r2, #24
 80067a8:	bf4c      	ite	mi
 80067aa:	f105 0114 	addmi.w	r1, r5, #20
 80067ae:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067b6:	2202      	movs	r2, #2
 80067b8:	4628      	mov	r0, r5
 80067ba:	f000 f859 	bl	8006870 <USBD_CtlSendData>
              break;
 80067be:	e781      	b.n	80066c4 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f43f af76 	beq.w	80066b4 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067c8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80067cc:	1c5c      	adds	r4, r3, #1
 80067ce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80067d2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80067d6:	e7bc      	b.n	8006752 <USBD_StdEPReq+0xba>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067d8:	9101      	str	r1, [sp, #4]
 80067da:	f000 fad9 	bl	8006d90 <USBD_LL_ClearStallEP>
 80067de:	9901      	ldr	r1, [sp, #4]
 80067e0:	e77f      	b.n	80066e2 <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 fac6 	bl	8006d74 <USBD_LL_StallEP>
 80067e8:	e7ce      	b.n	8006788 <USBD_StdEPReq+0xf0>
 80067ea:	bf00      	nop

080067ec <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80067ec:	780b      	ldrb	r3, [r1, #0]
 80067ee:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80067f0:	784b      	ldrb	r3, [r1, #1]
 80067f2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 80067f4:	884b      	ldrh	r3, [r1, #2]
 80067f6:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 80067f8:	888b      	ldrh	r3, [r1, #4]
 80067fa:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 80067fc:	88cb      	ldrh	r3, [r1, #6]
 80067fe:	80c3      	strh	r3, [r0, #6]
}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop

08006804 <USBD_CtlError>:
{
 8006804:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006806:	2180      	movs	r1, #128	; 0x80
{
 8006808:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800680a:	f000 fab3 	bl	8006d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800680e:	4620      	mov	r0, r4
 8006810:	2100      	movs	r1, #0
}
 8006812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8006816:	f000 baad 	b.w	8006d74 <USBD_LL_StallEP>
 800681a:	bf00      	nop

0800681c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800681c:	b318      	cbz	r0, 8006866 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800681e:	7803      	ldrb	r3, [r0, #0]
{
 8006820:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8006822:	b30b      	cbz	r3, 8006868 <USBD_GetString+0x4c>
 8006824:	4604      	mov	r4, r0
 8006826:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800682a:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800682e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2d00      	cmp	r5, #0
 8006836:	d1f8      	bne.n	800682a <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006838:	3301      	adds	r3, #1
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	b2dc      	uxtb	r4, r3
 800683e:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006840:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8006842:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006844:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8006846:	7804      	ldrb	r4, [r0, #0]
 8006848:	b15c      	cbz	r4, 8006862 <USBD_GetString+0x46>
  idx++;
 800684a:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800684c:	2500      	movs	r5, #0
    idx++;
 800684e:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8006850:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8006852:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 8006854:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8006856:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 800685a:	3302      	adds	r3, #2
 800685c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800685e:	2c00      	cmp	r4, #0
 8006860:	d1f5      	bne.n	800684e <USBD_GetString+0x32>
}
 8006862:	bc30      	pop	{r4, r5}
 8006864:	4770      	bx	lr
 8006866:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8006868:	2402      	movs	r4, #2
 800686a:	4623      	mov	r3, r4
 800686c:	e7e7      	b.n	800683e <USBD_GetString+0x22>
 800686e:	bf00      	nop

08006870 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006870:	b508      	push	{r3, lr}
 8006872:	4613      	mov	r3, r2
 8006874:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006876:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006878:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800687c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006880:	2100      	movs	r1, #0
 8006882:	f000 fab5 	bl	8006df0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006886:	2000      	movs	r0, #0
 8006888:	bd08      	pop	{r3, pc}
 800688a:	bf00      	nop

0800688c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800688c:	b508      	push	{r3, lr}
 800688e:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006890:	460a      	mov	r2, r1
 8006892:	2100      	movs	r1, #0
 8006894:	f000 faac 	bl	8006df0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006898:	2000      	movs	r0, #0
 800689a:	bd08      	pop	{r3, pc}

0800689c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800689c:	b508      	push	{r3, lr}
 800689e:	4613      	mov	r3, r2
 80068a0:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068a2:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80068a4:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068a8:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068ac:	2100      	movs	r1, #0
 80068ae:	f000 faad 	bl	8006e0c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80068b2:	2000      	movs	r0, #0
 80068b4:	bd08      	pop	{r3, pc}
 80068b6:	bf00      	nop

080068b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80068b8:	b508      	push	{r3, lr}
 80068ba:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068bc:	460a      	mov	r2, r1
 80068be:	2100      	movs	r1, #0
 80068c0:	f000 faa4 	bl	8006e0c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80068c4:	2000      	movs	r0, #0
 80068c6:	bd08      	pop	{r3, pc}

080068c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068c8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068ca:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068cc:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068ce:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068d2:	461a      	mov	r2, r3
 80068d4:	4619      	mov	r1, r3
 80068d6:	f000 fa8b 	bl	8006df0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80068da:	2000      	movs	r0, #0
 80068dc:	bd08      	pop	{r3, pc}
 80068de:	bf00      	nop

080068e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068e0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068e2:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068e4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068e6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ea:	461a      	mov	r2, r3
 80068ec:	4619      	mov	r1, r3
 80068ee:	f000 fa8d 	bl	8006e0c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80068f2:	2000      	movs	r0, #0
 80068f4:	bd08      	pop	{r3, pc}
 80068f6:	bf00      	nop

080068f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80068f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80068fa:	4918      	ldr	r1, [pc, #96]	; (800695c <MX_USB_DEVICE_Init+0x64>)
 80068fc:	4818      	ldr	r0, [pc, #96]	; (8006960 <MX_USB_DEVICE_Init+0x68>)
 80068fe:	2200      	movs	r2, #0
 8006900:	f7ff fb1a 	bl	8005f38 <USBD_Init>
 8006904:	b970      	cbnz	r0, 8006924 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006906:	4917      	ldr	r1, [pc, #92]	; (8006964 <MX_USB_DEVICE_Init+0x6c>)
 8006908:	4815      	ldr	r0, [pc, #84]	; (8006960 <MX_USB_DEVICE_Init+0x68>)
 800690a:	f7ff fb29 	bl	8005f60 <USBD_RegisterClass>
 800690e:	b988      	cbnz	r0, 8006934 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006910:	4915      	ldr	r1, [pc, #84]	; (8006968 <MX_USB_DEVICE_Init+0x70>)
 8006912:	4813      	ldr	r0, [pc, #76]	; (8006960 <MX_USB_DEVICE_Init+0x68>)
 8006914:	f7ff face 	bl	8005eb4 <USBD_CDC_RegisterInterface>
 8006918:	b9a0      	cbnz	r0, 8006944 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800691a:	4811      	ldr	r0, [pc, #68]	; (8006960 <MX_USB_DEVICE_Init+0x68>)
 800691c:	f7ff fb3c 	bl	8005f98 <USBD_Start>
 8006920:	b9b8      	cbnz	r0, 8006952 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006922:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006924:	f7fa fcda 	bl	80012dc <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006928:	490e      	ldr	r1, [pc, #56]	; (8006964 <MX_USB_DEVICE_Init+0x6c>)
 800692a:	480d      	ldr	r0, [pc, #52]	; (8006960 <MX_USB_DEVICE_Init+0x68>)
 800692c:	f7ff fb18 	bl	8005f60 <USBD_RegisterClass>
 8006930:	2800      	cmp	r0, #0
 8006932:	d0ed      	beq.n	8006910 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006934:	f7fa fcd2 	bl	80012dc <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006938:	490b      	ldr	r1, [pc, #44]	; (8006968 <MX_USB_DEVICE_Init+0x70>)
 800693a:	4809      	ldr	r0, [pc, #36]	; (8006960 <MX_USB_DEVICE_Init+0x68>)
 800693c:	f7ff faba 	bl	8005eb4 <USBD_CDC_RegisterInterface>
 8006940:	2800      	cmp	r0, #0
 8006942:	d0ea      	beq.n	800691a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8006944:	f7fa fcca 	bl	80012dc <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006948:	4805      	ldr	r0, [pc, #20]	; (8006960 <MX_USB_DEVICE_Init+0x68>)
 800694a:	f7ff fb25 	bl	8005f98 <USBD_Start>
 800694e:	2800      	cmp	r0, #0
 8006950:	d0e7      	beq.n	8006922 <MX_USB_DEVICE_Init+0x2a>
}
 8006952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006956:	f7fa bcc1 	b.w	80012dc <Error_Handler>
 800695a:	bf00      	nop
 800695c:	200000a8 	.word	0x200000a8
 8006960:	200009ec 	.word	0x200009ec
 8006964:	2000000c 	.word	0x2000000c
 8006968:	20000094 	.word	0x20000094

0800696c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800696c:	2000      	movs	r0, #0
 800696e:	4770      	bx	lr

08006970 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006970:	2000      	movs	r0, #0
 8006972:	4770      	bx	lr

08006974 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8006974:	2000      	movs	r0, #0
 8006976:	4770      	bx	lr

08006978 <CDC_Receive_FS>:
{
 8006978:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800697a:	4c05      	ldr	r4, [pc, #20]	; (8006990 <CDC_Receive_FS+0x18>)
{
 800697c:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff fab2 	bl	8005ee8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006984:	4620      	mov	r0, r4
 8006986:	f7ff fabb 	bl	8005f00 <USBD_CDC_ReceivePacket>
}
 800698a:	2000      	movs	r0, #0
 800698c:	bd10      	pop	{r4, pc}
 800698e:	bf00      	nop
 8006990:	200009ec 	.word	0x200009ec

08006994 <CDC_Init_FS>:
{
 8006994:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006996:	4c06      	ldr	r4, [pc, #24]	; (80069b0 <CDC_Init_FS+0x1c>)
 8006998:	4906      	ldr	r1, [pc, #24]	; (80069b4 <CDC_Init_FS+0x20>)
 800699a:	2200      	movs	r2, #0
 800699c:	4620      	mov	r0, r4
 800699e:	f7ff fa95 	bl	8005ecc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80069a2:	4905      	ldr	r1, [pc, #20]	; (80069b8 <CDC_Init_FS+0x24>)
 80069a4:	4620      	mov	r0, r4
 80069a6:	f7ff fa9f 	bl	8005ee8 <USBD_CDC_SetRxBuffer>
}
 80069aa:	2000      	movs	r0, #0
 80069ac:	bd10      	pop	{r4, pc}
 80069ae:	bf00      	nop
 80069b0:	200009ec 	.word	0x200009ec
 80069b4:	200014c8 	.word	0x200014c8
 80069b8:	20000cc8 	.word	0x20000cc8

080069bc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80069bc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80069be:	4801      	ldr	r0, [pc, #4]	; (80069c4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80069c0:	800b      	strh	r3, [r1, #0]
}
 80069c2:	4770      	bx	lr
 80069c4:	200000c4 	.word	0x200000c4

080069c8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80069c8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80069ca:	4801      	ldr	r0, [pc, #4]	; (80069d0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80069cc:	800b      	strh	r3, [r1, #0]
}
 80069ce:	4770      	bx	lr
 80069d0:	200000d8 	.word	0x200000d8

080069d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069d4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80069d6:	4c04      	ldr	r4, [pc, #16]	; (80069e8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80069d8:	4804      	ldr	r0, [pc, #16]	; (80069ec <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 80069da:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80069dc:	4621      	mov	r1, r4
 80069de:	f7ff ff1d 	bl	800681c <USBD_GetString>
  return USBD_StrDesc;
}
 80069e2:	4620      	mov	r0, r4
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	bf00      	nop
 80069e8:	20001cc8 	.word	0x20001cc8
 80069ec:	0800ab7c 	.word	0x0800ab7c

080069f0 <USBD_FS_ProductStrDescriptor>:
{
 80069f0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069f2:	4c04      	ldr	r4, [pc, #16]	; (8006a04 <USBD_FS_ProductStrDescriptor+0x14>)
 80069f4:	4804      	ldr	r0, [pc, #16]	; (8006a08 <USBD_FS_ProductStrDescriptor+0x18>)
{
 80069f6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069f8:	4621      	mov	r1, r4
 80069fa:	f7ff ff0f 	bl	800681c <USBD_GetString>
}
 80069fe:	4620      	mov	r0, r4
 8006a00:	bd10      	pop	{r4, pc}
 8006a02:	bf00      	nop
 8006a04:	20001cc8 	.word	0x20001cc8
 8006a08:	0800ab90 	.word	0x0800ab90

08006a0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a0c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a0e:	4c04      	ldr	r4, [pc, #16]	; (8006a20 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006a10:	4804      	ldr	r0, [pc, #16]	; (8006a24 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 8006a12:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a14:	4621      	mov	r1, r4
 8006a16:	f7ff ff01 	bl	800681c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	bd10      	pop	{r4, pc}
 8006a1e:	bf00      	nop
 8006a20:	20001cc8 	.word	0x20001cc8
 8006a24:	0800aba8 	.word	0x0800aba8

08006a28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a28:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a2a:	4c04      	ldr	r4, [pc, #16]	; (8006a3c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006a2c:	4804      	ldr	r0, [pc, #16]	; (8006a40 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 8006a2e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a30:	4621      	mov	r1, r4
 8006a32:	f7ff fef3 	bl	800681c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006a36:	4620      	mov	r0, r4
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20001cc8 	.word	0x20001cc8
 8006a40:	0800abb4 	.word	0x0800abb4

08006a44 <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a44:	4a45      	ldr	r2, [pc, #276]	; (8006b5c <USBD_FS_SerialStrDescriptor+0x118>)
 8006a46:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	; 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8006a4a:	f8d2 0a18 	ldr.w	r0, [r2, #2584]	; 0xa18
  *length = USB_SIZ_STRING_SERIAL;
 8006a4e:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 8006a52:	181b      	adds	r3, r3, r0
  *length = USB_SIZ_STRING_SERIAL;
 8006a54:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 8006a58:	d101      	bne.n	8006a5e <USBD_FS_SerialStrDescriptor+0x1a>
}
 8006a5a:	4841      	ldr	r0, [pc, #260]	; (8006b60 <USBD_FS_SerialStrDescriptor+0x11c>)
 8006a5c:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a5e:	f8d2 1a14 	ldr.w	r1, [r2, #2580]	; 0xa14

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a62:	4a3f      	ldr	r2, [pc, #252]	; (8006b60 <USBD_FS_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 8006a64:	0f18      	lsrs	r0, r3, #28
 8006a66:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a6a:	bf2c      	ite	cs
 8006a6c:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a6e:	3030      	addcc	r0, #48	; 0x30
 8006a70:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8006a72:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8006a76:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a78:	bf8c      	ite	hi
 8006a7a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a7c:	3030      	addls	r0, #48	; 0x30
 8006a7e:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8006a80:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8006a84:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a86:	bf8c      	ite	hi
 8006a88:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a8a:	3030      	addls	r0, #48	; 0x30
 8006a8c:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 8006a8e:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8006a92:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a94:	bf8c      	ite	hi
 8006a96:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a98:	3030      	addls	r0, #48	; 0x30
 8006a9a:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8006a9c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8006aa0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006aa2:	bf8c      	ite	hi
 8006aa4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006aa6:	3030      	addls	r0, #48	; 0x30
 8006aa8:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 8006aaa:	f3c3 2003 	ubfx	r0, r3, #8, #4
 8006aae:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ab0:	bf8c      	ite	hi
 8006ab2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ab4:	3030      	addls	r0, #48	; 0x30
 8006ab6:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 8006ab8:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8006abc:	2809      	cmp	r0, #9
 8006abe:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ac2:	bf8c      	ite	hi
 8006ac4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ac6:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 8006ac8:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006aca:	bf94      	ite	ls
 8006acc:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ace:	3337      	addhi	r3, #55	; 0x37
 8006ad0:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006ad2:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 8006ad4:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 8006ad8:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 8006ada:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ade:	bf2c      	ite	cs
 8006ae0:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ae2:	3330      	addcc	r3, #48	; 0x30
 8006ae4:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8006ae6:	f3c1 6303 	ubfx	r3, r1, #24, #4
 8006aea:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006aec:	bf8c      	ite	hi
 8006aee:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006af0:	3330      	addls	r3, #48	; 0x30
 8006af2:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8006af4:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8006af8:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8006afa:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006afe:	bf8c      	ite	hi
 8006b00:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b02:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8006b04:	f882 c003 	strb.w	ip, [r2, #3]
 8006b08:	f04f 0c00 	mov.w	ip, #0
 8006b0c:	f882 c005 	strb.w	ip, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b10:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8006b12:	f04f 0c00 	mov.w	ip, #0
 8006b16:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b18:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8006b1a:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8006b1e:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8006b20:	f882 c007 	strb.w	ip, [r2, #7]
 8006b24:	73d0      	strb	r0, [r2, #15]
 8006b26:	f04f 0c00 	mov.w	ip, #0
 8006b2a:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b2e:	bf94      	ite	ls
 8006b30:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b32:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8006b34:	f882 c009 	strb.w	ip, [r2, #9]
 8006b38:	74d0      	strb	r0, [r2, #19]
 8006b3a:	f04f 0c00 	mov.w	ip, #0
 8006b3e:	2000      	movs	r0, #0
 8006b40:	f882 c00b 	strb.w	ip, [r2, #11]
 8006b44:	7550      	strb	r0, [r2, #21]
 8006b46:	f04f 0c00 	mov.w	ip, #0
 8006b4a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b4c:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75d0      	strb	r0, [r2, #23]
 8006b52:	f882 c00d 	strb.w	ip, [r2, #13]
}
 8006b56:	4802      	ldr	r0, [pc, #8]	; (8006b60 <USBD_FS_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 8006b58:	7653      	strb	r3, [r2, #25]
}
 8006b5a:	4770      	bx	lr
 8006b5c:	1fff7000 	.word	0x1fff7000
 8006b60:	200000dc 	.word	0x200000dc

08006b64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b64:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b66:	6803      	ldr	r3, [r0, #0]
{
 8006b68:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b6a:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b70:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006b74:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006b78:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b7a:	d001      	beq.n	8006b80 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b7c:	b009      	add	sp, #36	; 0x24
 8006b7e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b80:	4d17      	ldr	r5, [pc, #92]	; (8006be0 <HAL_PCD_MspInit+0x7c>)
 8006b82:	9400      	str	r4, [sp, #0]
 8006b84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b86:	4817      	ldr	r0, [pc, #92]	; (8006be4 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	632b      	str	r3, [r5, #48]	; 0x30
 8006b8e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b96:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ba0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ba2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ba4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ba6:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ba8:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006baa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bac:	f7fa ffee 	bl	8001b8c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bb0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	636b      	str	r3, [r5, #52]	; 0x34
 8006bb8:	9401      	str	r4, [sp, #4]
 8006bba:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc0:	646b      	str	r3, [r5, #68]	; 0x44
 8006bc2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bc8:	4622      	mov	r2, r4
 8006bca:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bcc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bce:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bd2:	f7fa fd6b 	bl	80016ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006bd6:	2043      	movs	r0, #67	; 0x43
 8006bd8:	f7fa fda6 	bl	8001728 <HAL_NVIC_EnableIRQ>
}
 8006bdc:	b009      	add	sp, #36	; 0x24
 8006bde:	bd30      	pop	{r4, r5, pc}
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40020000 	.word	0x40020000

08006be8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006be8:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 8006bec:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006bf0:	f7ff b9e6 	b.w	8005fc0 <USBD_LL_SetupStage>

08006bf4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006bf4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006bf8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006bfc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006c00:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 8006c04:	f7ff ba0c 	b.w	8006020 <USBD_LL_DataOutStage>

08006c08 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c08:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006c0c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006c10:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c16:	f7ff ba3d 	b.w	8006094 <USBD_LL_DataInStage>
 8006c1a:	bf00      	nop

08006c1c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c1c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006c20:	f7ff badc 	b.w	80061dc <USBD_LL_SOF>

08006c24 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c24:	68c3      	ldr	r3, [r0, #12]
 8006c26:	2b02      	cmp	r3, #2
{
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c2c:	d001      	beq.n	8006c32 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006c2e:	f7fa fb55 	bl	80012dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c32:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 8006c36:	2101      	movs	r1, #1
 8006c38:	f7ff fab4 	bl	80061a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c3c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 8006c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c44:	f7ff ba80 	b.w	8006148 <USBD_LL_Reset>

08006c48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c4c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006c50:	f7ff faac 	bl	80061ac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c54:	6822      	ldr	r2, [r4, #0]
 8006c56:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c62:	6a23      	ldr	r3, [r4, #32]
 8006c64:	b123      	cbz	r3, 8006c70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c66:	4a03      	ldr	r2, [pc, #12]	; (8006c74 <HAL_PCD_SuspendCallback+0x2c>)
 8006c68:	6913      	ldr	r3, [r2, #16]
 8006c6a:	f043 0306 	orr.w	r3, r3, #6
 8006c6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c70:	bd10      	pop	{r4, pc}
 8006c72:	bf00      	nop
 8006c74:	e000ed00 	.word	0xe000ed00

08006c78 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c78:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006c7c:	f7ff baa2 	b.w	80061c4 <USBD_LL_Resume>

08006c80 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c80:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006c84:	f7ff bad0 	b.w	8006228 <USBD_LL_IsoOUTIncomplete>

08006c88 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c88:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006c8c:	f7ff bab6 	b.w	80061fc <USBD_LL_IsoINIncomplete>

08006c90 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c90:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006c94:	f7ff bade 	b.w	8006254 <USBD_LL_DevConnected>

08006c98 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c98:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8006c9c:	f7ff badc 	b.w	8006258 <USBD_LL_DevDisconnected>

08006ca0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ca0:	7802      	ldrb	r2, [r0, #0]
 8006ca2:	b10a      	cbz	r2, 8006ca8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006ca8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8006d08 <USBD_LL_Init+0x68>
  hpcd_USB_OTG_FS.pData = pdev;
 8006cac:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <USBD_LL_Init+0x78>)
{
 8006cae:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006cb0:	ed83 7b06 	vstr	d7, [r3, #24]
 8006cb4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006d10 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006cb8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.pData = pdev;
 8006cbc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006cc0:	2404      	movs	r4, #4
  pdev->pData = &hpcd_USB_OTG_FS;
 8006cc2:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006cc6:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006cc8:	ed83 7b08 	vstr	d7, [r3, #32]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006ccc:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006cce:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006cd0:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006cd4:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cd6:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cd8:	611a      	str	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006cda:	f7fb f84f 	bl	8001d7c <HAL_PCD_Init>
 8006cde:	b978      	cbnz	r0, 8006d00 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006ce0:	2180      	movs	r1, #128	; 0x80
 8006ce2:	480d      	ldr	r0, [pc, #52]	; (8006d18 <USBD_LL_Init+0x78>)
 8006ce4:	f7fb fffe 	bl	8002ce4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006ce8:	2240      	movs	r2, #64	; 0x40
 8006cea:	2100      	movs	r1, #0
 8006cec:	480a      	ldr	r0, [pc, #40]	; (8006d18 <USBD_LL_Init+0x78>)
 8006cee:	f7fb ffd3 	bl	8002c98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006cf2:	2280      	movs	r2, #128	; 0x80
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	4808      	ldr	r0, [pc, #32]	; (8006d18 <USBD_LL_Init+0x78>)
 8006cf8:	f7fb ffce 	bl	8002c98 <HAL_PCDEx_SetTxFiFo>
}
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006d00:	f7fa faec 	bl	80012dc <Error_Handler>
 8006d04:	e7ec      	b.n	8006ce0 <USBD_LL_Init+0x40>
 8006d06:	bf00      	nop
 8006d08:	00000002 	.word	0x00000002
	...
 8006d18:	20001ec8 	.word	0x20001ec8

08006d1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d1e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8006d22:	f7fb f8b9 	bl	8001e98 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006d26:	2803      	cmp	r0, #3
 8006d28:	bf96      	itet	ls
 8006d2a:	4b02      	ldrls	r3, [pc, #8]	; (8006d34 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8006d2c:	2003      	movhi	r0, #3
 8006d2e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006d30:	bd08      	pop	{r3, pc}
 8006d32:	bf00      	nop
 8006d34:	0800abc4 	.word	0x0800abc4

08006d38 <USBD_LL_OpenEP>:
{
 8006d38:	4694      	mov	ip, r2
 8006d3a:	b508      	push	{r3, lr}
 8006d3c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d3e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8006d42:	4663      	mov	r3, ip
 8006d44:	f7fb fe66 	bl	8002a14 <HAL_PCD_EP_Open>
  switch (hal_status)
 8006d48:	2803      	cmp	r0, #3
 8006d4a:	bf96      	itet	ls
 8006d4c:	4b01      	ldrls	r3, [pc, #4]	; (8006d54 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d4e:	2003      	movhi	r0, #3
 8006d50:	5c18      	ldrbls	r0, [r3, r0]
}
 8006d52:	bd08      	pop	{r3, pc}
 8006d54:	0800abc4 	.word	0x0800abc4

08006d58 <USBD_LL_CloseEP>:
{
 8006d58:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d5a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8006d5e:	f7fb fe97 	bl	8002a90 <HAL_PCD_EP_Close>
  switch (hal_status)
 8006d62:	2803      	cmp	r0, #3
 8006d64:	bf96      	itet	ls
 8006d66:	4b02      	ldrls	r3, [pc, #8]	; (8006d70 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d68:	2003      	movhi	r0, #3
 8006d6a:	5c18      	ldrbls	r0, [r3, r0]
}
 8006d6c:	bd08      	pop	{r3, pc}
 8006d6e:	bf00      	nop
 8006d70:	0800abc4 	.word	0x0800abc4

08006d74 <USBD_LL_StallEP>:
{
 8006d74:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d76:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8006d7a:	f7fb ff11 	bl	8002ba0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8006d7e:	2803      	cmp	r0, #3
 8006d80:	bf96      	itet	ls
 8006d82:	4b02      	ldrls	r3, [pc, #8]	; (8006d8c <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d84:	2003      	movhi	r0, #3
 8006d86:	5c18      	ldrbls	r0, [r3, r0]
}
 8006d88:	bd08      	pop	{r3, pc}
 8006d8a:	bf00      	nop
 8006d8c:	0800abc4 	.word	0x0800abc4

08006d90 <USBD_LL_ClearStallEP>:
{
 8006d90:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d92:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8006d96:	f7fb ff47 	bl	8002c28 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8006d9a:	2803      	cmp	r0, #3
 8006d9c:	bf96      	itet	ls
 8006d9e:	4b02      	ldrls	r3, [pc, #8]	; (8006da8 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006da0:	2003      	movhi	r0, #3
 8006da2:	5c18      	ldrbls	r0, [r3, r0]
}
 8006da4:	bd08      	pop	{r3, pc}
 8006da6:	bf00      	nop
 8006da8:	0800abc4 	.word	0x0800abc4

08006dac <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006dac:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006dae:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8006db2:	d406      	bmi.n	8006dc2 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006db4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006db8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006dbc:	f893 027e 	ldrb.w	r0, [r3, #638]	; 0x27e
}
 8006dc0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006dc2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006dc6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006dca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006dce:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8006dd2:	4770      	bx	lr

08006dd4 <USBD_LL_SetUSBAddress>:
{
 8006dd4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006dd6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8006dda:	f7fb fe07 	bl	80029ec <HAL_PCD_SetAddress>
  switch (hal_status)
 8006dde:	2803      	cmp	r0, #3
 8006de0:	bf96      	itet	ls
 8006de2:	4b02      	ldrls	r3, [pc, #8]	; (8006dec <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006de4:	2003      	movhi	r0, #3
 8006de6:	5c18      	ldrbls	r0, [r3, r0]
}
 8006de8:	bd08      	pop	{r3, pc}
 8006dea:	bf00      	nop
 8006dec:	0800abc4 	.word	0x0800abc4

08006df0 <USBD_LL_Transmit>:
{
 8006df0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006df2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8006df6:	f7fb feab 	bl	8002b50 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8006dfa:	2803      	cmp	r0, #3
 8006dfc:	bf96      	itet	ls
 8006dfe:	4b02      	ldrls	r3, [pc, #8]	; (8006e08 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e00:	2003      	movhi	r0, #3
 8006e02:	5c18      	ldrbls	r0, [r3, r0]
}
 8006e04:	bd08      	pop	{r3, pc}
 8006e06:	bf00      	nop
 8006e08:	0800abc4 	.word	0x0800abc4

08006e0c <USBD_LL_PrepareReceive>:
{
 8006e0c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e0e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8006e12:	f7fb fe6b 	bl	8002aec <HAL_PCD_EP_Receive>
  switch (hal_status)
 8006e16:	2803      	cmp	r0, #3
 8006e18:	bf96      	itet	ls
 8006e1a:	4b02      	ldrls	r3, [pc, #8]	; (8006e24 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e1c:	2003      	movhi	r0, #3
 8006e1e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006e20:	bd08      	pop	{r3, pc}
 8006e22:	bf00      	nop
 8006e24:	0800abc4 	.word	0x0800abc4

08006e28 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e28:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8006e2c:	f7fb be86 	b.w	8002b3c <HAL_PCD_EP_GetRxCount>

08006e30 <USBD_static_malloc>:
}
 8006e30:	4800      	ldr	r0, [pc, #0]	; (8006e34 <USBD_static_malloc+0x4>)
 8006e32:	4770      	bx	lr
 8006e34:	200023d4 	.word	0x200023d4

08006e38 <USBD_static_free>:
}
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop

08006e3c <__cvt>:
 8006e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e40:	ec55 4b10 	vmov	r4, r5, d0
 8006e44:	2d00      	cmp	r5, #0
 8006e46:	460e      	mov	r6, r1
 8006e48:	4619      	mov	r1, r3
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	bfbb      	ittet	lt
 8006e4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e52:	461d      	movlt	r5, r3
 8006e54:	2300      	movge	r3, #0
 8006e56:	232d      	movlt	r3, #45	; 0x2d
 8006e58:	700b      	strb	r3, [r1, #0]
 8006e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e60:	4691      	mov	r9, r2
 8006e62:	f023 0820 	bic.w	r8, r3, #32
 8006e66:	bfbc      	itt	lt
 8006e68:	4622      	movlt	r2, r4
 8006e6a:	4614      	movlt	r4, r2
 8006e6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e70:	d005      	beq.n	8006e7e <__cvt+0x42>
 8006e72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e76:	d100      	bne.n	8006e7a <__cvt+0x3e>
 8006e78:	3601      	adds	r6, #1
 8006e7a:	2102      	movs	r1, #2
 8006e7c:	e000      	b.n	8006e80 <__cvt+0x44>
 8006e7e:	2103      	movs	r1, #3
 8006e80:	ab03      	add	r3, sp, #12
 8006e82:	9301      	str	r3, [sp, #4]
 8006e84:	ab02      	add	r3, sp, #8
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	ec45 4b10 	vmov	d0, r4, r5
 8006e8c:	4653      	mov	r3, sl
 8006e8e:	4632      	mov	r2, r6
 8006e90:	f000 ff2a 	bl	8007ce8 <_dtoa_r>
 8006e94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e98:	4607      	mov	r7, r0
 8006e9a:	d102      	bne.n	8006ea2 <__cvt+0x66>
 8006e9c:	f019 0f01 	tst.w	r9, #1
 8006ea0:	d022      	beq.n	8006ee8 <__cvt+0xac>
 8006ea2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ea6:	eb07 0906 	add.w	r9, r7, r6
 8006eaa:	d110      	bne.n	8006ece <__cvt+0x92>
 8006eac:	783b      	ldrb	r3, [r7, #0]
 8006eae:	2b30      	cmp	r3, #48	; 0x30
 8006eb0:	d10a      	bne.n	8006ec8 <__cvt+0x8c>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f7f9 fe0d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ebe:	b918      	cbnz	r0, 8006ec8 <__cvt+0x8c>
 8006ec0:	f1c6 0601 	rsb	r6, r6, #1
 8006ec4:	f8ca 6000 	str.w	r6, [sl]
 8006ec8:	f8da 3000 	ldr.w	r3, [sl]
 8006ecc:	4499      	add	r9, r3
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f7f9 fdff 	bl	8000ad8 <__aeabi_dcmpeq>
 8006eda:	b108      	cbz	r0, 8006ee0 <__cvt+0xa4>
 8006edc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ee0:	2230      	movs	r2, #48	; 0x30
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	454b      	cmp	r3, r9
 8006ee6:	d307      	bcc.n	8006ef8 <__cvt+0xbc>
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eec:	1bdb      	subs	r3, r3, r7
 8006eee:	4638      	mov	r0, r7
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	b004      	add	sp, #16
 8006ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef8:	1c59      	adds	r1, r3, #1
 8006efa:	9103      	str	r1, [sp, #12]
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e7f0      	b.n	8006ee2 <__cvt+0xa6>

08006f00 <__exponent>:
 8006f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f02:	4603      	mov	r3, r0
 8006f04:	2900      	cmp	r1, #0
 8006f06:	bfb8      	it	lt
 8006f08:	4249      	neglt	r1, r1
 8006f0a:	f803 2b02 	strb.w	r2, [r3], #2
 8006f0e:	bfb4      	ite	lt
 8006f10:	222d      	movlt	r2, #45	; 0x2d
 8006f12:	222b      	movge	r2, #43	; 0x2b
 8006f14:	2909      	cmp	r1, #9
 8006f16:	7042      	strb	r2, [r0, #1]
 8006f18:	dd2a      	ble.n	8006f70 <__exponent+0x70>
 8006f1a:	f10d 0207 	add.w	r2, sp, #7
 8006f1e:	4617      	mov	r7, r2
 8006f20:	260a      	movs	r6, #10
 8006f22:	4694      	mov	ip, r2
 8006f24:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f28:	fb06 1415 	mls	r4, r6, r5, r1
 8006f2c:	3430      	adds	r4, #48	; 0x30
 8006f2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f32:	460c      	mov	r4, r1
 8006f34:	2c63      	cmp	r4, #99	; 0x63
 8006f36:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	dcf1      	bgt.n	8006f22 <__exponent+0x22>
 8006f3e:	3130      	adds	r1, #48	; 0x30
 8006f40:	f1ac 0402 	sub.w	r4, ip, #2
 8006f44:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f48:	1c41      	adds	r1, r0, #1
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	42ba      	cmp	r2, r7
 8006f4e:	d30a      	bcc.n	8006f66 <__exponent+0x66>
 8006f50:	f10d 0209 	add.w	r2, sp, #9
 8006f54:	eba2 020c 	sub.w	r2, r2, ip
 8006f58:	42bc      	cmp	r4, r7
 8006f5a:	bf88      	it	hi
 8006f5c:	2200      	movhi	r2, #0
 8006f5e:	4413      	add	r3, r2
 8006f60:	1a18      	subs	r0, r3, r0
 8006f62:	b003      	add	sp, #12
 8006f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f66:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f6e:	e7ed      	b.n	8006f4c <__exponent+0x4c>
 8006f70:	2330      	movs	r3, #48	; 0x30
 8006f72:	3130      	adds	r1, #48	; 0x30
 8006f74:	7083      	strb	r3, [r0, #2]
 8006f76:	70c1      	strb	r1, [r0, #3]
 8006f78:	1d03      	adds	r3, r0, #4
 8006f7a:	e7f1      	b.n	8006f60 <__exponent+0x60>

08006f7c <_printf_float>:
 8006f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f80:	ed2d 8b02 	vpush	{d8}
 8006f84:	b08d      	sub	sp, #52	; 0x34
 8006f86:	460c      	mov	r4, r1
 8006f88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	461f      	mov	r7, r3
 8006f90:	4605      	mov	r5, r0
 8006f92:	f000 fd99 	bl	8007ac8 <_localeconv_r>
 8006f96:	f8d0 a000 	ldr.w	sl, [r0]
 8006f9a:	4650      	mov	r0, sl
 8006f9c:	f7f9 f970 	bl	8000280 <strlen>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	9305      	str	r3, [sp, #20]
 8006fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006fb0:	3307      	adds	r3, #7
 8006fb2:	f023 0307 	bic.w	r3, r3, #7
 8006fb6:	f103 0208 	add.w	r2, r3, #8
 8006fba:	f8c8 2000 	str.w	r2, [r8]
 8006fbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fc6:	9307      	str	r3, [sp, #28]
 8006fc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fcc:	ee08 0a10 	vmov	s16, r0
 8006fd0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fd8:	4b9e      	ldr	r3, [pc, #632]	; (8007254 <_printf_float+0x2d8>)
 8006fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fde:	f7f9 fdad 	bl	8000b3c <__aeabi_dcmpun>
 8006fe2:	bb88      	cbnz	r0, 8007048 <_printf_float+0xcc>
 8006fe4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fe8:	4b9a      	ldr	r3, [pc, #616]	; (8007254 <_printf_float+0x2d8>)
 8006fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fee:	f7f9 fd87 	bl	8000b00 <__aeabi_dcmple>
 8006ff2:	bb48      	cbnz	r0, 8007048 <_printf_float+0xcc>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	f7f9 fd76 	bl	8000aec <__aeabi_dcmplt>
 8007000:	b110      	cbz	r0, 8007008 <_printf_float+0x8c>
 8007002:	232d      	movs	r3, #45	; 0x2d
 8007004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007008:	4a93      	ldr	r2, [pc, #588]	; (8007258 <_printf_float+0x2dc>)
 800700a:	4b94      	ldr	r3, [pc, #592]	; (800725c <_printf_float+0x2e0>)
 800700c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007010:	bf94      	ite	ls
 8007012:	4690      	movls	r8, r2
 8007014:	4698      	movhi	r8, r3
 8007016:	2303      	movs	r3, #3
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	9b05      	ldr	r3, [sp, #20]
 800701c:	f023 0304 	bic.w	r3, r3, #4
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	f04f 0900 	mov.w	r9, #0
 8007026:	9700      	str	r7, [sp, #0]
 8007028:	4633      	mov	r3, r6
 800702a:	aa0b      	add	r2, sp, #44	; 0x2c
 800702c:	4621      	mov	r1, r4
 800702e:	4628      	mov	r0, r5
 8007030:	f000 f9da 	bl	80073e8 <_printf_common>
 8007034:	3001      	adds	r0, #1
 8007036:	f040 8090 	bne.w	800715a <_printf_float+0x1de>
 800703a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800703e:	b00d      	add	sp, #52	; 0x34
 8007040:	ecbd 8b02 	vpop	{d8}
 8007044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007048:	4642      	mov	r2, r8
 800704a:	464b      	mov	r3, r9
 800704c:	4640      	mov	r0, r8
 800704e:	4649      	mov	r1, r9
 8007050:	f7f9 fd74 	bl	8000b3c <__aeabi_dcmpun>
 8007054:	b140      	cbz	r0, 8007068 <_printf_float+0xec>
 8007056:	464b      	mov	r3, r9
 8007058:	2b00      	cmp	r3, #0
 800705a:	bfbc      	itt	lt
 800705c:	232d      	movlt	r3, #45	; 0x2d
 800705e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007062:	4a7f      	ldr	r2, [pc, #508]	; (8007260 <_printf_float+0x2e4>)
 8007064:	4b7f      	ldr	r3, [pc, #508]	; (8007264 <_printf_float+0x2e8>)
 8007066:	e7d1      	b.n	800700c <_printf_float+0x90>
 8007068:	6863      	ldr	r3, [r4, #4]
 800706a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800706e:	9206      	str	r2, [sp, #24]
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	d13f      	bne.n	80070f4 <_printf_float+0x178>
 8007074:	2306      	movs	r3, #6
 8007076:	6063      	str	r3, [r4, #4]
 8007078:	9b05      	ldr	r3, [sp, #20]
 800707a:	6861      	ldr	r1, [r4, #4]
 800707c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007080:	2300      	movs	r3, #0
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	ab0a      	add	r3, sp, #40	; 0x28
 8007086:	e9cd b301 	strd	fp, r3, [sp, #4]
 800708a:	ab09      	add	r3, sp, #36	; 0x24
 800708c:	ec49 8b10 	vmov	d0, r8, r9
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	6022      	str	r2, [r4, #0]
 8007094:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007098:	4628      	mov	r0, r5
 800709a:	f7ff fecf 	bl	8006e3c <__cvt>
 800709e:	9b06      	ldr	r3, [sp, #24]
 80070a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070a2:	2b47      	cmp	r3, #71	; 0x47
 80070a4:	4680      	mov	r8, r0
 80070a6:	d108      	bne.n	80070ba <_printf_float+0x13e>
 80070a8:	1cc8      	adds	r0, r1, #3
 80070aa:	db02      	blt.n	80070b2 <_printf_float+0x136>
 80070ac:	6863      	ldr	r3, [r4, #4]
 80070ae:	4299      	cmp	r1, r3
 80070b0:	dd41      	ble.n	8007136 <_printf_float+0x1ba>
 80070b2:	f1ab 0302 	sub.w	r3, fp, #2
 80070b6:	fa5f fb83 	uxtb.w	fp, r3
 80070ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070be:	d820      	bhi.n	8007102 <_printf_float+0x186>
 80070c0:	3901      	subs	r1, #1
 80070c2:	465a      	mov	r2, fp
 80070c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070c8:	9109      	str	r1, [sp, #36]	; 0x24
 80070ca:	f7ff ff19 	bl	8006f00 <__exponent>
 80070ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070d0:	1813      	adds	r3, r2, r0
 80070d2:	2a01      	cmp	r2, #1
 80070d4:	4681      	mov	r9, r0
 80070d6:	6123      	str	r3, [r4, #16]
 80070d8:	dc02      	bgt.n	80070e0 <_printf_float+0x164>
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	07d2      	lsls	r2, r2, #31
 80070de:	d501      	bpl.n	80070e4 <_printf_float+0x168>
 80070e0:	3301      	adds	r3, #1
 80070e2:	6123      	str	r3, [r4, #16]
 80070e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d09c      	beq.n	8007026 <_printf_float+0xaa>
 80070ec:	232d      	movs	r3, #45	; 0x2d
 80070ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f2:	e798      	b.n	8007026 <_printf_float+0xaa>
 80070f4:	9a06      	ldr	r2, [sp, #24]
 80070f6:	2a47      	cmp	r2, #71	; 0x47
 80070f8:	d1be      	bne.n	8007078 <_printf_float+0xfc>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1bc      	bne.n	8007078 <_printf_float+0xfc>
 80070fe:	2301      	movs	r3, #1
 8007100:	e7b9      	b.n	8007076 <_printf_float+0xfa>
 8007102:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007106:	d118      	bne.n	800713a <_printf_float+0x1be>
 8007108:	2900      	cmp	r1, #0
 800710a:	6863      	ldr	r3, [r4, #4]
 800710c:	dd0b      	ble.n	8007126 <_printf_float+0x1aa>
 800710e:	6121      	str	r1, [r4, #16]
 8007110:	b913      	cbnz	r3, 8007118 <_printf_float+0x19c>
 8007112:	6822      	ldr	r2, [r4, #0]
 8007114:	07d0      	lsls	r0, r2, #31
 8007116:	d502      	bpl.n	800711e <_printf_float+0x1a2>
 8007118:	3301      	adds	r3, #1
 800711a:	440b      	add	r3, r1
 800711c:	6123      	str	r3, [r4, #16]
 800711e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007120:	f04f 0900 	mov.w	r9, #0
 8007124:	e7de      	b.n	80070e4 <_printf_float+0x168>
 8007126:	b913      	cbnz	r3, 800712e <_printf_float+0x1b2>
 8007128:	6822      	ldr	r2, [r4, #0]
 800712a:	07d2      	lsls	r2, r2, #31
 800712c:	d501      	bpl.n	8007132 <_printf_float+0x1b6>
 800712e:	3302      	adds	r3, #2
 8007130:	e7f4      	b.n	800711c <_printf_float+0x1a0>
 8007132:	2301      	movs	r3, #1
 8007134:	e7f2      	b.n	800711c <_printf_float+0x1a0>
 8007136:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800713a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800713c:	4299      	cmp	r1, r3
 800713e:	db05      	blt.n	800714c <_printf_float+0x1d0>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	6121      	str	r1, [r4, #16]
 8007144:	07d8      	lsls	r0, r3, #31
 8007146:	d5ea      	bpl.n	800711e <_printf_float+0x1a2>
 8007148:	1c4b      	adds	r3, r1, #1
 800714a:	e7e7      	b.n	800711c <_printf_float+0x1a0>
 800714c:	2900      	cmp	r1, #0
 800714e:	bfd4      	ite	le
 8007150:	f1c1 0202 	rsble	r2, r1, #2
 8007154:	2201      	movgt	r2, #1
 8007156:	4413      	add	r3, r2
 8007158:	e7e0      	b.n	800711c <_printf_float+0x1a0>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	055a      	lsls	r2, r3, #21
 800715e:	d407      	bmi.n	8007170 <_printf_float+0x1f4>
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	4642      	mov	r2, r8
 8007164:	4631      	mov	r1, r6
 8007166:	4628      	mov	r0, r5
 8007168:	47b8      	blx	r7
 800716a:	3001      	adds	r0, #1
 800716c:	d12c      	bne.n	80071c8 <_printf_float+0x24c>
 800716e:	e764      	b.n	800703a <_printf_float+0xbe>
 8007170:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007174:	f240 80e0 	bls.w	8007338 <_printf_float+0x3bc>
 8007178:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800717c:	2200      	movs	r2, #0
 800717e:	2300      	movs	r3, #0
 8007180:	f7f9 fcaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007184:	2800      	cmp	r0, #0
 8007186:	d034      	beq.n	80071f2 <_printf_float+0x276>
 8007188:	4a37      	ldr	r2, [pc, #220]	; (8007268 <_printf_float+0x2ec>)
 800718a:	2301      	movs	r3, #1
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f af51 	beq.w	800703a <_printf_float+0xbe>
 8007198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800719c:	429a      	cmp	r2, r3
 800719e:	db02      	blt.n	80071a6 <_printf_float+0x22a>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	07d8      	lsls	r0, r3, #31
 80071a4:	d510      	bpl.n	80071c8 <_printf_float+0x24c>
 80071a6:	ee18 3a10 	vmov	r3, s16
 80071aa:	4652      	mov	r2, sl
 80071ac:	4631      	mov	r1, r6
 80071ae:	4628      	mov	r0, r5
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	f43f af41 	beq.w	800703a <_printf_float+0xbe>
 80071b8:	f04f 0800 	mov.w	r8, #0
 80071bc:	f104 091a 	add.w	r9, r4, #26
 80071c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c2:	3b01      	subs	r3, #1
 80071c4:	4543      	cmp	r3, r8
 80071c6:	dc09      	bgt.n	80071dc <_printf_float+0x260>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	079b      	lsls	r3, r3, #30
 80071cc:	f100 8107 	bmi.w	80073de <_printf_float+0x462>
 80071d0:	68e0      	ldr	r0, [r4, #12]
 80071d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d4:	4298      	cmp	r0, r3
 80071d6:	bfb8      	it	lt
 80071d8:	4618      	movlt	r0, r3
 80071da:	e730      	b.n	800703e <_printf_float+0xc2>
 80071dc:	2301      	movs	r3, #1
 80071de:	464a      	mov	r2, r9
 80071e0:	4631      	mov	r1, r6
 80071e2:	4628      	mov	r0, r5
 80071e4:	47b8      	blx	r7
 80071e6:	3001      	adds	r0, #1
 80071e8:	f43f af27 	beq.w	800703a <_printf_float+0xbe>
 80071ec:	f108 0801 	add.w	r8, r8, #1
 80071f0:	e7e6      	b.n	80071c0 <_printf_float+0x244>
 80071f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dc39      	bgt.n	800726c <_printf_float+0x2f0>
 80071f8:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <_printf_float+0x2ec>)
 80071fa:	2301      	movs	r3, #1
 80071fc:	4631      	mov	r1, r6
 80071fe:	4628      	mov	r0, r5
 8007200:	47b8      	blx	r7
 8007202:	3001      	adds	r0, #1
 8007204:	f43f af19 	beq.w	800703a <_printf_float+0xbe>
 8007208:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800720c:	4313      	orrs	r3, r2
 800720e:	d102      	bne.n	8007216 <_printf_float+0x29a>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	07d9      	lsls	r1, r3, #31
 8007214:	d5d8      	bpl.n	80071c8 <_printf_float+0x24c>
 8007216:	ee18 3a10 	vmov	r3, s16
 800721a:	4652      	mov	r2, sl
 800721c:	4631      	mov	r1, r6
 800721e:	4628      	mov	r0, r5
 8007220:	47b8      	blx	r7
 8007222:	3001      	adds	r0, #1
 8007224:	f43f af09 	beq.w	800703a <_printf_float+0xbe>
 8007228:	f04f 0900 	mov.w	r9, #0
 800722c:	f104 0a1a 	add.w	sl, r4, #26
 8007230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007232:	425b      	negs	r3, r3
 8007234:	454b      	cmp	r3, r9
 8007236:	dc01      	bgt.n	800723c <_printf_float+0x2c0>
 8007238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800723a:	e792      	b.n	8007162 <_printf_float+0x1e6>
 800723c:	2301      	movs	r3, #1
 800723e:	4652      	mov	r2, sl
 8007240:	4631      	mov	r1, r6
 8007242:	4628      	mov	r0, r5
 8007244:	47b8      	blx	r7
 8007246:	3001      	adds	r0, #1
 8007248:	f43f aef7 	beq.w	800703a <_printf_float+0xbe>
 800724c:	f109 0901 	add.w	r9, r9, #1
 8007250:	e7ee      	b.n	8007230 <_printf_float+0x2b4>
 8007252:	bf00      	nop
 8007254:	7fefffff 	.word	0x7fefffff
 8007258:	0800abc8 	.word	0x0800abc8
 800725c:	0800abcc 	.word	0x0800abcc
 8007260:	0800abd0 	.word	0x0800abd0
 8007264:	0800abd4 	.word	0x0800abd4
 8007268:	0800ae03 	.word	0x0800ae03
 800726c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800726e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007270:	429a      	cmp	r2, r3
 8007272:	bfa8      	it	ge
 8007274:	461a      	movge	r2, r3
 8007276:	2a00      	cmp	r2, #0
 8007278:	4691      	mov	r9, r2
 800727a:	dc37      	bgt.n	80072ec <_printf_float+0x370>
 800727c:	f04f 0b00 	mov.w	fp, #0
 8007280:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007284:	f104 021a 	add.w	r2, r4, #26
 8007288:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800728a:	9305      	str	r3, [sp, #20]
 800728c:	eba3 0309 	sub.w	r3, r3, r9
 8007290:	455b      	cmp	r3, fp
 8007292:	dc33      	bgt.n	80072fc <_printf_float+0x380>
 8007294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007298:	429a      	cmp	r2, r3
 800729a:	db3b      	blt.n	8007314 <_printf_float+0x398>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	07da      	lsls	r2, r3, #31
 80072a0:	d438      	bmi.n	8007314 <_printf_float+0x398>
 80072a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80072a6:	eba2 0903 	sub.w	r9, r2, r3
 80072aa:	9b05      	ldr	r3, [sp, #20]
 80072ac:	1ad2      	subs	r2, r2, r3
 80072ae:	4591      	cmp	r9, r2
 80072b0:	bfa8      	it	ge
 80072b2:	4691      	movge	r9, r2
 80072b4:	f1b9 0f00 	cmp.w	r9, #0
 80072b8:	dc35      	bgt.n	8007326 <_printf_float+0x3aa>
 80072ba:	f04f 0800 	mov.w	r8, #0
 80072be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072c2:	f104 0a1a 	add.w	sl, r4, #26
 80072c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	eba3 0309 	sub.w	r3, r3, r9
 80072d0:	4543      	cmp	r3, r8
 80072d2:	f77f af79 	ble.w	80071c8 <_printf_float+0x24c>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4652      	mov	r2, sl
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	47b8      	blx	r7
 80072e0:	3001      	adds	r0, #1
 80072e2:	f43f aeaa 	beq.w	800703a <_printf_float+0xbe>
 80072e6:	f108 0801 	add.w	r8, r8, #1
 80072ea:	e7ec      	b.n	80072c6 <_printf_float+0x34a>
 80072ec:	4613      	mov	r3, r2
 80072ee:	4631      	mov	r1, r6
 80072f0:	4642      	mov	r2, r8
 80072f2:	4628      	mov	r0, r5
 80072f4:	47b8      	blx	r7
 80072f6:	3001      	adds	r0, #1
 80072f8:	d1c0      	bne.n	800727c <_printf_float+0x300>
 80072fa:	e69e      	b.n	800703a <_printf_float+0xbe>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	9205      	str	r2, [sp, #20]
 8007304:	47b8      	blx	r7
 8007306:	3001      	adds	r0, #1
 8007308:	f43f ae97 	beq.w	800703a <_printf_float+0xbe>
 800730c:	9a05      	ldr	r2, [sp, #20]
 800730e:	f10b 0b01 	add.w	fp, fp, #1
 8007312:	e7b9      	b.n	8007288 <_printf_float+0x30c>
 8007314:	ee18 3a10 	vmov	r3, s16
 8007318:	4652      	mov	r2, sl
 800731a:	4631      	mov	r1, r6
 800731c:	4628      	mov	r0, r5
 800731e:	47b8      	blx	r7
 8007320:	3001      	adds	r0, #1
 8007322:	d1be      	bne.n	80072a2 <_printf_float+0x326>
 8007324:	e689      	b.n	800703a <_printf_float+0xbe>
 8007326:	9a05      	ldr	r2, [sp, #20]
 8007328:	464b      	mov	r3, r9
 800732a:	4442      	add	r2, r8
 800732c:	4631      	mov	r1, r6
 800732e:	4628      	mov	r0, r5
 8007330:	47b8      	blx	r7
 8007332:	3001      	adds	r0, #1
 8007334:	d1c1      	bne.n	80072ba <_printf_float+0x33e>
 8007336:	e680      	b.n	800703a <_printf_float+0xbe>
 8007338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800733a:	2a01      	cmp	r2, #1
 800733c:	dc01      	bgt.n	8007342 <_printf_float+0x3c6>
 800733e:	07db      	lsls	r3, r3, #31
 8007340:	d53a      	bpl.n	80073b8 <_printf_float+0x43c>
 8007342:	2301      	movs	r3, #1
 8007344:	4642      	mov	r2, r8
 8007346:	4631      	mov	r1, r6
 8007348:	4628      	mov	r0, r5
 800734a:	47b8      	blx	r7
 800734c:	3001      	adds	r0, #1
 800734e:	f43f ae74 	beq.w	800703a <_printf_float+0xbe>
 8007352:	ee18 3a10 	vmov	r3, s16
 8007356:	4652      	mov	r2, sl
 8007358:	4631      	mov	r1, r6
 800735a:	4628      	mov	r0, r5
 800735c:	47b8      	blx	r7
 800735e:	3001      	adds	r0, #1
 8007360:	f43f ae6b 	beq.w	800703a <_printf_float+0xbe>
 8007364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007368:	2200      	movs	r2, #0
 800736a:	2300      	movs	r3, #0
 800736c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007370:	f7f9 fbb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007374:	b9d8      	cbnz	r0, 80073ae <_printf_float+0x432>
 8007376:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800737a:	f108 0201 	add.w	r2, r8, #1
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	47b8      	blx	r7
 8007384:	3001      	adds	r0, #1
 8007386:	d10e      	bne.n	80073a6 <_printf_float+0x42a>
 8007388:	e657      	b.n	800703a <_printf_float+0xbe>
 800738a:	2301      	movs	r3, #1
 800738c:	4652      	mov	r2, sl
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	47b8      	blx	r7
 8007394:	3001      	adds	r0, #1
 8007396:	f43f ae50 	beq.w	800703a <_printf_float+0xbe>
 800739a:	f108 0801 	add.w	r8, r8, #1
 800739e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a0:	3b01      	subs	r3, #1
 80073a2:	4543      	cmp	r3, r8
 80073a4:	dcf1      	bgt.n	800738a <_printf_float+0x40e>
 80073a6:	464b      	mov	r3, r9
 80073a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073ac:	e6da      	b.n	8007164 <_printf_float+0x1e8>
 80073ae:	f04f 0800 	mov.w	r8, #0
 80073b2:	f104 0a1a 	add.w	sl, r4, #26
 80073b6:	e7f2      	b.n	800739e <_printf_float+0x422>
 80073b8:	2301      	movs	r3, #1
 80073ba:	4642      	mov	r2, r8
 80073bc:	e7df      	b.n	800737e <_printf_float+0x402>
 80073be:	2301      	movs	r3, #1
 80073c0:	464a      	mov	r2, r9
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b8      	blx	r7
 80073c8:	3001      	adds	r0, #1
 80073ca:	f43f ae36 	beq.w	800703a <_printf_float+0xbe>
 80073ce:	f108 0801 	add.w	r8, r8, #1
 80073d2:	68e3      	ldr	r3, [r4, #12]
 80073d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073d6:	1a5b      	subs	r3, r3, r1
 80073d8:	4543      	cmp	r3, r8
 80073da:	dcf0      	bgt.n	80073be <_printf_float+0x442>
 80073dc:	e6f8      	b.n	80071d0 <_printf_float+0x254>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	f104 0919 	add.w	r9, r4, #25
 80073e6:	e7f4      	b.n	80073d2 <_printf_float+0x456>

080073e8 <_printf_common>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	4616      	mov	r6, r2
 80073ee:	4699      	mov	r9, r3
 80073f0:	688a      	ldr	r2, [r1, #8]
 80073f2:	690b      	ldr	r3, [r1, #16]
 80073f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073f8:	4293      	cmp	r3, r2
 80073fa:	bfb8      	it	lt
 80073fc:	4613      	movlt	r3, r2
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007404:	4607      	mov	r7, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b10a      	cbz	r2, 800740e <_printf_common+0x26>
 800740a:	3301      	adds	r3, #1
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	0699      	lsls	r1, r3, #26
 8007412:	bf42      	ittt	mi
 8007414:	6833      	ldrmi	r3, [r6, #0]
 8007416:	3302      	addmi	r3, #2
 8007418:	6033      	strmi	r3, [r6, #0]
 800741a:	6825      	ldr	r5, [r4, #0]
 800741c:	f015 0506 	ands.w	r5, r5, #6
 8007420:	d106      	bne.n	8007430 <_printf_common+0x48>
 8007422:	f104 0a19 	add.w	sl, r4, #25
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	6832      	ldr	r2, [r6, #0]
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	42ab      	cmp	r3, r5
 800742e:	dc26      	bgt.n	800747e <_printf_common+0x96>
 8007430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007434:	1e13      	subs	r3, r2, #0
 8007436:	6822      	ldr	r2, [r4, #0]
 8007438:	bf18      	it	ne
 800743a:	2301      	movne	r3, #1
 800743c:	0692      	lsls	r2, r2, #26
 800743e:	d42b      	bmi.n	8007498 <_printf_common+0xb0>
 8007440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007444:	4649      	mov	r1, r9
 8007446:	4638      	mov	r0, r7
 8007448:	47c0      	blx	r8
 800744a:	3001      	adds	r0, #1
 800744c:	d01e      	beq.n	800748c <_printf_common+0xa4>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	6922      	ldr	r2, [r4, #16]
 8007452:	f003 0306 	and.w	r3, r3, #6
 8007456:	2b04      	cmp	r3, #4
 8007458:	bf02      	ittt	eq
 800745a:	68e5      	ldreq	r5, [r4, #12]
 800745c:	6833      	ldreq	r3, [r6, #0]
 800745e:	1aed      	subeq	r5, r5, r3
 8007460:	68a3      	ldr	r3, [r4, #8]
 8007462:	bf0c      	ite	eq
 8007464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007468:	2500      	movne	r5, #0
 800746a:	4293      	cmp	r3, r2
 800746c:	bfc4      	itt	gt
 800746e:	1a9b      	subgt	r3, r3, r2
 8007470:	18ed      	addgt	r5, r5, r3
 8007472:	2600      	movs	r6, #0
 8007474:	341a      	adds	r4, #26
 8007476:	42b5      	cmp	r5, r6
 8007478:	d11a      	bne.n	80074b0 <_printf_common+0xc8>
 800747a:	2000      	movs	r0, #0
 800747c:	e008      	b.n	8007490 <_printf_common+0xa8>
 800747e:	2301      	movs	r3, #1
 8007480:	4652      	mov	r2, sl
 8007482:	4649      	mov	r1, r9
 8007484:	4638      	mov	r0, r7
 8007486:	47c0      	blx	r8
 8007488:	3001      	adds	r0, #1
 800748a:	d103      	bne.n	8007494 <_printf_common+0xac>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	3501      	adds	r5, #1
 8007496:	e7c6      	b.n	8007426 <_printf_common+0x3e>
 8007498:	18e1      	adds	r1, r4, r3
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	2030      	movs	r0, #48	; 0x30
 800749e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074a2:	4422      	add	r2, r4
 80074a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074ac:	3302      	adds	r3, #2
 80074ae:	e7c7      	b.n	8007440 <_printf_common+0x58>
 80074b0:	2301      	movs	r3, #1
 80074b2:	4622      	mov	r2, r4
 80074b4:	4649      	mov	r1, r9
 80074b6:	4638      	mov	r0, r7
 80074b8:	47c0      	blx	r8
 80074ba:	3001      	adds	r0, #1
 80074bc:	d0e6      	beq.n	800748c <_printf_common+0xa4>
 80074be:	3601      	adds	r6, #1
 80074c0:	e7d9      	b.n	8007476 <_printf_common+0x8e>
	...

080074c4 <_printf_i>:
 80074c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	7e0f      	ldrb	r7, [r1, #24]
 80074ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074cc:	2f78      	cmp	r7, #120	; 0x78
 80074ce:	4691      	mov	r9, r2
 80074d0:	4680      	mov	r8, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	469a      	mov	sl, r3
 80074d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074da:	d807      	bhi.n	80074ec <_printf_i+0x28>
 80074dc:	2f62      	cmp	r7, #98	; 0x62
 80074de:	d80a      	bhi.n	80074f6 <_printf_i+0x32>
 80074e0:	2f00      	cmp	r7, #0
 80074e2:	f000 80d4 	beq.w	800768e <_printf_i+0x1ca>
 80074e6:	2f58      	cmp	r7, #88	; 0x58
 80074e8:	f000 80c0 	beq.w	800766c <_printf_i+0x1a8>
 80074ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074f4:	e03a      	b.n	800756c <_printf_i+0xa8>
 80074f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074fa:	2b15      	cmp	r3, #21
 80074fc:	d8f6      	bhi.n	80074ec <_printf_i+0x28>
 80074fe:	a101      	add	r1, pc, #4	; (adr r1, 8007504 <_printf_i+0x40>)
 8007500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007504:	0800755d 	.word	0x0800755d
 8007508:	08007571 	.word	0x08007571
 800750c:	080074ed 	.word	0x080074ed
 8007510:	080074ed 	.word	0x080074ed
 8007514:	080074ed 	.word	0x080074ed
 8007518:	080074ed 	.word	0x080074ed
 800751c:	08007571 	.word	0x08007571
 8007520:	080074ed 	.word	0x080074ed
 8007524:	080074ed 	.word	0x080074ed
 8007528:	080074ed 	.word	0x080074ed
 800752c:	080074ed 	.word	0x080074ed
 8007530:	08007675 	.word	0x08007675
 8007534:	0800759d 	.word	0x0800759d
 8007538:	0800762f 	.word	0x0800762f
 800753c:	080074ed 	.word	0x080074ed
 8007540:	080074ed 	.word	0x080074ed
 8007544:	08007697 	.word	0x08007697
 8007548:	080074ed 	.word	0x080074ed
 800754c:	0800759d 	.word	0x0800759d
 8007550:	080074ed 	.word	0x080074ed
 8007554:	080074ed 	.word	0x080074ed
 8007558:	08007637 	.word	0x08007637
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	1d1a      	adds	r2, r3, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	602a      	str	r2, [r5, #0]
 8007564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800756c:	2301      	movs	r3, #1
 800756e:	e09f      	b.n	80076b0 <_printf_i+0x1ec>
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	682b      	ldr	r3, [r5, #0]
 8007574:	0607      	lsls	r7, r0, #24
 8007576:	f103 0104 	add.w	r1, r3, #4
 800757a:	6029      	str	r1, [r5, #0]
 800757c:	d501      	bpl.n	8007582 <_printf_i+0xbe>
 800757e:	681e      	ldr	r6, [r3, #0]
 8007580:	e003      	b.n	800758a <_printf_i+0xc6>
 8007582:	0646      	lsls	r6, r0, #25
 8007584:	d5fb      	bpl.n	800757e <_printf_i+0xba>
 8007586:	f9b3 6000 	ldrsh.w	r6, [r3]
 800758a:	2e00      	cmp	r6, #0
 800758c:	da03      	bge.n	8007596 <_printf_i+0xd2>
 800758e:	232d      	movs	r3, #45	; 0x2d
 8007590:	4276      	negs	r6, r6
 8007592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007596:	485a      	ldr	r0, [pc, #360]	; (8007700 <_printf_i+0x23c>)
 8007598:	230a      	movs	r3, #10
 800759a:	e012      	b.n	80075c2 <_printf_i+0xfe>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	6820      	ldr	r0, [r4, #0]
 80075a0:	1d19      	adds	r1, r3, #4
 80075a2:	6029      	str	r1, [r5, #0]
 80075a4:	0605      	lsls	r5, r0, #24
 80075a6:	d501      	bpl.n	80075ac <_printf_i+0xe8>
 80075a8:	681e      	ldr	r6, [r3, #0]
 80075aa:	e002      	b.n	80075b2 <_printf_i+0xee>
 80075ac:	0641      	lsls	r1, r0, #25
 80075ae:	d5fb      	bpl.n	80075a8 <_printf_i+0xe4>
 80075b0:	881e      	ldrh	r6, [r3, #0]
 80075b2:	4853      	ldr	r0, [pc, #332]	; (8007700 <_printf_i+0x23c>)
 80075b4:	2f6f      	cmp	r7, #111	; 0x6f
 80075b6:	bf0c      	ite	eq
 80075b8:	2308      	moveq	r3, #8
 80075ba:	230a      	movne	r3, #10
 80075bc:	2100      	movs	r1, #0
 80075be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075c2:	6865      	ldr	r5, [r4, #4]
 80075c4:	60a5      	str	r5, [r4, #8]
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	bfa2      	ittt	ge
 80075ca:	6821      	ldrge	r1, [r4, #0]
 80075cc:	f021 0104 	bicge.w	r1, r1, #4
 80075d0:	6021      	strge	r1, [r4, #0]
 80075d2:	b90e      	cbnz	r6, 80075d8 <_printf_i+0x114>
 80075d4:	2d00      	cmp	r5, #0
 80075d6:	d04b      	beq.n	8007670 <_printf_i+0x1ac>
 80075d8:	4615      	mov	r5, r2
 80075da:	fbb6 f1f3 	udiv	r1, r6, r3
 80075de:	fb03 6711 	mls	r7, r3, r1, r6
 80075e2:	5dc7      	ldrb	r7, [r0, r7]
 80075e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075e8:	4637      	mov	r7, r6
 80075ea:	42bb      	cmp	r3, r7
 80075ec:	460e      	mov	r6, r1
 80075ee:	d9f4      	bls.n	80075da <_printf_i+0x116>
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d10b      	bne.n	800760c <_printf_i+0x148>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	07de      	lsls	r6, r3, #31
 80075f8:	d508      	bpl.n	800760c <_printf_i+0x148>
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	6861      	ldr	r1, [r4, #4]
 80075fe:	4299      	cmp	r1, r3
 8007600:	bfde      	ittt	le
 8007602:	2330      	movle	r3, #48	; 0x30
 8007604:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007608:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800760c:	1b52      	subs	r2, r2, r5
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	f8cd a000 	str.w	sl, [sp]
 8007614:	464b      	mov	r3, r9
 8007616:	aa03      	add	r2, sp, #12
 8007618:	4621      	mov	r1, r4
 800761a:	4640      	mov	r0, r8
 800761c:	f7ff fee4 	bl	80073e8 <_printf_common>
 8007620:	3001      	adds	r0, #1
 8007622:	d14a      	bne.n	80076ba <_printf_i+0x1f6>
 8007624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	f043 0320 	orr.w	r3, r3, #32
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	4833      	ldr	r0, [pc, #204]	; (8007704 <_printf_i+0x240>)
 8007638:	2778      	movs	r7, #120	; 0x78
 800763a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	6829      	ldr	r1, [r5, #0]
 8007642:	061f      	lsls	r7, r3, #24
 8007644:	f851 6b04 	ldr.w	r6, [r1], #4
 8007648:	d402      	bmi.n	8007650 <_printf_i+0x18c>
 800764a:	065f      	lsls	r7, r3, #25
 800764c:	bf48      	it	mi
 800764e:	b2b6      	uxthmi	r6, r6
 8007650:	07df      	lsls	r7, r3, #31
 8007652:	bf48      	it	mi
 8007654:	f043 0320 	orrmi.w	r3, r3, #32
 8007658:	6029      	str	r1, [r5, #0]
 800765a:	bf48      	it	mi
 800765c:	6023      	strmi	r3, [r4, #0]
 800765e:	b91e      	cbnz	r6, 8007668 <_printf_i+0x1a4>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	f023 0320 	bic.w	r3, r3, #32
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	2310      	movs	r3, #16
 800766a:	e7a7      	b.n	80075bc <_printf_i+0xf8>
 800766c:	4824      	ldr	r0, [pc, #144]	; (8007700 <_printf_i+0x23c>)
 800766e:	e7e4      	b.n	800763a <_printf_i+0x176>
 8007670:	4615      	mov	r5, r2
 8007672:	e7bd      	b.n	80075f0 <_printf_i+0x12c>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	6826      	ldr	r6, [r4, #0]
 8007678:	6961      	ldr	r1, [r4, #20]
 800767a:	1d18      	adds	r0, r3, #4
 800767c:	6028      	str	r0, [r5, #0]
 800767e:	0635      	lsls	r5, r6, #24
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	d501      	bpl.n	8007688 <_printf_i+0x1c4>
 8007684:	6019      	str	r1, [r3, #0]
 8007686:	e002      	b.n	800768e <_printf_i+0x1ca>
 8007688:	0670      	lsls	r0, r6, #25
 800768a:	d5fb      	bpl.n	8007684 <_printf_i+0x1c0>
 800768c:	8019      	strh	r1, [r3, #0]
 800768e:	2300      	movs	r3, #0
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	4615      	mov	r5, r2
 8007694:	e7bc      	b.n	8007610 <_printf_i+0x14c>
 8007696:	682b      	ldr	r3, [r5, #0]
 8007698:	1d1a      	adds	r2, r3, #4
 800769a:	602a      	str	r2, [r5, #0]
 800769c:	681d      	ldr	r5, [r3, #0]
 800769e:	6862      	ldr	r2, [r4, #4]
 80076a0:	2100      	movs	r1, #0
 80076a2:	4628      	mov	r0, r5
 80076a4:	f7f8 fd9c 	bl	80001e0 <memchr>
 80076a8:	b108      	cbz	r0, 80076ae <_printf_i+0x1ea>
 80076aa:	1b40      	subs	r0, r0, r5
 80076ac:	6060      	str	r0, [r4, #4]
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	2300      	movs	r3, #0
 80076b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b8:	e7aa      	b.n	8007610 <_printf_i+0x14c>
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	462a      	mov	r2, r5
 80076be:	4649      	mov	r1, r9
 80076c0:	4640      	mov	r0, r8
 80076c2:	47d0      	blx	sl
 80076c4:	3001      	adds	r0, #1
 80076c6:	d0ad      	beq.n	8007624 <_printf_i+0x160>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	079b      	lsls	r3, r3, #30
 80076cc:	d413      	bmi.n	80076f6 <_printf_i+0x232>
 80076ce:	68e0      	ldr	r0, [r4, #12]
 80076d0:	9b03      	ldr	r3, [sp, #12]
 80076d2:	4298      	cmp	r0, r3
 80076d4:	bfb8      	it	lt
 80076d6:	4618      	movlt	r0, r3
 80076d8:	e7a6      	b.n	8007628 <_printf_i+0x164>
 80076da:	2301      	movs	r3, #1
 80076dc:	4632      	mov	r2, r6
 80076de:	4649      	mov	r1, r9
 80076e0:	4640      	mov	r0, r8
 80076e2:	47d0      	blx	sl
 80076e4:	3001      	adds	r0, #1
 80076e6:	d09d      	beq.n	8007624 <_printf_i+0x160>
 80076e8:	3501      	adds	r5, #1
 80076ea:	68e3      	ldr	r3, [r4, #12]
 80076ec:	9903      	ldr	r1, [sp, #12]
 80076ee:	1a5b      	subs	r3, r3, r1
 80076f0:	42ab      	cmp	r3, r5
 80076f2:	dcf2      	bgt.n	80076da <_printf_i+0x216>
 80076f4:	e7eb      	b.n	80076ce <_printf_i+0x20a>
 80076f6:	2500      	movs	r5, #0
 80076f8:	f104 0619 	add.w	r6, r4, #25
 80076fc:	e7f5      	b.n	80076ea <_printf_i+0x226>
 80076fe:	bf00      	nop
 8007700:	0800abd8 	.word	0x0800abd8
 8007704:	0800abe9 	.word	0x0800abe9

08007708 <std>:
 8007708:	2300      	movs	r3, #0
 800770a:	b510      	push	{r4, lr}
 800770c:	4604      	mov	r4, r0
 800770e:	e9c0 3300 	strd	r3, r3, [r0]
 8007712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007716:	6083      	str	r3, [r0, #8]
 8007718:	8181      	strh	r1, [r0, #12]
 800771a:	6643      	str	r3, [r0, #100]	; 0x64
 800771c:	81c2      	strh	r2, [r0, #14]
 800771e:	6183      	str	r3, [r0, #24]
 8007720:	4619      	mov	r1, r3
 8007722:	2208      	movs	r2, #8
 8007724:	305c      	adds	r0, #92	; 0x5c
 8007726:	f000 f995 	bl	8007a54 <memset>
 800772a:	4b0d      	ldr	r3, [pc, #52]	; (8007760 <std+0x58>)
 800772c:	6263      	str	r3, [r4, #36]	; 0x24
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <std+0x5c>)
 8007730:	62a3      	str	r3, [r4, #40]	; 0x28
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <std+0x60>)
 8007734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007736:	4b0d      	ldr	r3, [pc, #52]	; (800776c <std+0x64>)
 8007738:	6323      	str	r3, [r4, #48]	; 0x30
 800773a:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <std+0x68>)
 800773c:	6224      	str	r4, [r4, #32]
 800773e:	429c      	cmp	r4, r3
 8007740:	d006      	beq.n	8007750 <std+0x48>
 8007742:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007746:	4294      	cmp	r4, r2
 8007748:	d002      	beq.n	8007750 <std+0x48>
 800774a:	33d0      	adds	r3, #208	; 0xd0
 800774c:	429c      	cmp	r4, r3
 800774e:	d105      	bne.n	800775c <std+0x54>
 8007750:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007758:	f000 ba2a 	b.w	8007bb0 <__retarget_lock_init_recursive>
 800775c:	bd10      	pop	{r4, pc}
 800775e:	bf00      	nop
 8007760:	08007925 	.word	0x08007925
 8007764:	0800794b 	.word	0x0800794b
 8007768:	08007983 	.word	0x08007983
 800776c:	080079a7 	.word	0x080079a7
 8007770:	200025f4 	.word	0x200025f4

08007774 <stdio_exit_handler>:
 8007774:	4a02      	ldr	r2, [pc, #8]	; (8007780 <stdio_exit_handler+0xc>)
 8007776:	4903      	ldr	r1, [pc, #12]	; (8007784 <stdio_exit_handler+0x10>)
 8007778:	4803      	ldr	r0, [pc, #12]	; (8007788 <stdio_exit_handler+0x14>)
 800777a:	f000 b869 	b.w	8007850 <_fwalk_sglue>
 800777e:	bf00      	nop
 8007780:	200000f8 	.word	0x200000f8
 8007784:	08009bc1 	.word	0x08009bc1
 8007788:	20000104 	.word	0x20000104

0800778c <cleanup_stdio>:
 800778c:	6841      	ldr	r1, [r0, #4]
 800778e:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <cleanup_stdio+0x34>)
 8007790:	4299      	cmp	r1, r3
 8007792:	b510      	push	{r4, lr}
 8007794:	4604      	mov	r4, r0
 8007796:	d001      	beq.n	800779c <cleanup_stdio+0x10>
 8007798:	f002 fa12 	bl	8009bc0 <_fflush_r>
 800779c:	68a1      	ldr	r1, [r4, #8]
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <cleanup_stdio+0x38>)
 80077a0:	4299      	cmp	r1, r3
 80077a2:	d002      	beq.n	80077aa <cleanup_stdio+0x1e>
 80077a4:	4620      	mov	r0, r4
 80077a6:	f002 fa0b 	bl	8009bc0 <_fflush_r>
 80077aa:	68e1      	ldr	r1, [r4, #12]
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <cleanup_stdio+0x3c>)
 80077ae:	4299      	cmp	r1, r3
 80077b0:	d004      	beq.n	80077bc <cleanup_stdio+0x30>
 80077b2:	4620      	mov	r0, r4
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f002 ba02 	b.w	8009bc0 <_fflush_r>
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	200025f4 	.word	0x200025f4
 80077c4:	2000265c 	.word	0x2000265c
 80077c8:	200026c4 	.word	0x200026c4

080077cc <global_stdio_init.part.0>:
 80077cc:	b510      	push	{r4, lr}
 80077ce:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <global_stdio_init.part.0+0x30>)
 80077d0:	4c0b      	ldr	r4, [pc, #44]	; (8007800 <global_stdio_init.part.0+0x34>)
 80077d2:	4a0c      	ldr	r2, [pc, #48]	; (8007804 <global_stdio_init.part.0+0x38>)
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	4620      	mov	r0, r4
 80077d8:	2200      	movs	r2, #0
 80077da:	2104      	movs	r1, #4
 80077dc:	f7ff ff94 	bl	8007708 <std>
 80077e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077e4:	2201      	movs	r2, #1
 80077e6:	2109      	movs	r1, #9
 80077e8:	f7ff ff8e 	bl	8007708 <std>
 80077ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077f0:	2202      	movs	r2, #2
 80077f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f6:	2112      	movs	r1, #18
 80077f8:	f7ff bf86 	b.w	8007708 <std>
 80077fc:	2000272c 	.word	0x2000272c
 8007800:	200025f4 	.word	0x200025f4
 8007804:	08007775 	.word	0x08007775

08007808 <__sfp_lock_acquire>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__sfp_lock_acquire+0x8>)
 800780a:	f000 b9d2 	b.w	8007bb2 <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	20002735 	.word	0x20002735

08007814 <__sfp_lock_release>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__sfp_lock_release+0x8>)
 8007816:	f000 b9cd 	b.w	8007bb4 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	20002735 	.word	0x20002735

08007820 <__sinit>:
 8007820:	b510      	push	{r4, lr}
 8007822:	4604      	mov	r4, r0
 8007824:	f7ff fff0 	bl	8007808 <__sfp_lock_acquire>
 8007828:	6a23      	ldr	r3, [r4, #32]
 800782a:	b11b      	cbz	r3, 8007834 <__sinit+0x14>
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007830:	f7ff bff0 	b.w	8007814 <__sfp_lock_release>
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <__sinit+0x28>)
 8007836:	6223      	str	r3, [r4, #32]
 8007838:	4b04      	ldr	r3, [pc, #16]	; (800784c <__sinit+0x2c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f5      	bne.n	800782c <__sinit+0xc>
 8007840:	f7ff ffc4 	bl	80077cc <global_stdio_init.part.0>
 8007844:	e7f2      	b.n	800782c <__sinit+0xc>
 8007846:	bf00      	nop
 8007848:	0800778d 	.word	0x0800778d
 800784c:	2000272c 	.word	0x2000272c

08007850 <_fwalk_sglue>:
 8007850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007854:	4607      	mov	r7, r0
 8007856:	4688      	mov	r8, r1
 8007858:	4614      	mov	r4, r2
 800785a:	2600      	movs	r6, #0
 800785c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007860:	f1b9 0901 	subs.w	r9, r9, #1
 8007864:	d505      	bpl.n	8007872 <_fwalk_sglue+0x22>
 8007866:	6824      	ldr	r4, [r4, #0]
 8007868:	2c00      	cmp	r4, #0
 800786a:	d1f7      	bne.n	800785c <_fwalk_sglue+0xc>
 800786c:	4630      	mov	r0, r6
 800786e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d907      	bls.n	8007888 <_fwalk_sglue+0x38>
 8007878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800787c:	3301      	adds	r3, #1
 800787e:	d003      	beq.n	8007888 <_fwalk_sglue+0x38>
 8007880:	4629      	mov	r1, r5
 8007882:	4638      	mov	r0, r7
 8007884:	47c0      	blx	r8
 8007886:	4306      	orrs	r6, r0
 8007888:	3568      	adds	r5, #104	; 0x68
 800788a:	e7e9      	b.n	8007860 <_fwalk_sglue+0x10>

0800788c <siprintf>:
 800788c:	b40e      	push	{r1, r2, r3}
 800788e:	b500      	push	{lr}
 8007890:	b09c      	sub	sp, #112	; 0x70
 8007892:	ab1d      	add	r3, sp, #116	; 0x74
 8007894:	9002      	str	r0, [sp, #8]
 8007896:	9006      	str	r0, [sp, #24]
 8007898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800789c:	4809      	ldr	r0, [pc, #36]	; (80078c4 <siprintf+0x38>)
 800789e:	9107      	str	r1, [sp, #28]
 80078a0:	9104      	str	r1, [sp, #16]
 80078a2:	4909      	ldr	r1, [pc, #36]	; (80078c8 <siprintf+0x3c>)
 80078a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a8:	9105      	str	r1, [sp, #20]
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	a902      	add	r1, sp, #8
 80078b0:	f001 fce2 	bl	8009278 <_svfiprintf_r>
 80078b4:	9b02      	ldr	r3, [sp, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	b01c      	add	sp, #112	; 0x70
 80078bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c0:	b003      	add	sp, #12
 80078c2:	4770      	bx	lr
 80078c4:	20000150 	.word	0x20000150
 80078c8:	ffff0208 	.word	0xffff0208

080078cc <siscanf>:
 80078cc:	b40e      	push	{r1, r2, r3}
 80078ce:	b510      	push	{r4, lr}
 80078d0:	b09f      	sub	sp, #124	; 0x7c
 80078d2:	ac21      	add	r4, sp, #132	; 0x84
 80078d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80078d8:	f854 2b04 	ldr.w	r2, [r4], #4
 80078dc:	9201      	str	r2, [sp, #4]
 80078de:	f8ad 101c 	strh.w	r1, [sp, #28]
 80078e2:	9004      	str	r0, [sp, #16]
 80078e4:	9008      	str	r0, [sp, #32]
 80078e6:	f7f8 fccb 	bl	8000280 <strlen>
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <siscanf+0x50>)
 80078ec:	9005      	str	r0, [sp, #20]
 80078ee:	9009      	str	r0, [sp, #36]	; 0x24
 80078f0:	930d      	str	r3, [sp, #52]	; 0x34
 80078f2:	480b      	ldr	r0, [pc, #44]	; (8007920 <siscanf+0x54>)
 80078f4:	9a01      	ldr	r2, [sp, #4]
 80078f6:	6800      	ldr	r0, [r0, #0]
 80078f8:	9403      	str	r4, [sp, #12]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9311      	str	r3, [sp, #68]	; 0x44
 80078fe:	9316      	str	r3, [sp, #88]	; 0x58
 8007900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007904:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007908:	a904      	add	r1, sp, #16
 800790a:	4623      	mov	r3, r4
 800790c:	f001 fe0c 	bl	8009528 <__ssvfiscanf_r>
 8007910:	b01f      	add	sp, #124	; 0x7c
 8007912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007916:	b003      	add	sp, #12
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	08007947 	.word	0x08007947
 8007920:	20000150 	.word	0x20000150

08007924 <__sread>:
 8007924:	b510      	push	{r4, lr}
 8007926:	460c      	mov	r4, r1
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	f000 f8f2 	bl	8007b14 <_read_r>
 8007930:	2800      	cmp	r0, #0
 8007932:	bfab      	itete	ge
 8007934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007936:	89a3      	ldrhlt	r3, [r4, #12]
 8007938:	181b      	addge	r3, r3, r0
 800793a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800793e:	bfac      	ite	ge
 8007940:	6563      	strge	r3, [r4, #84]	; 0x54
 8007942:	81a3      	strhlt	r3, [r4, #12]
 8007944:	bd10      	pop	{r4, pc}

08007946 <__seofread>:
 8007946:	2000      	movs	r0, #0
 8007948:	4770      	bx	lr

0800794a <__swrite>:
 800794a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794e:	461f      	mov	r7, r3
 8007950:	898b      	ldrh	r3, [r1, #12]
 8007952:	05db      	lsls	r3, r3, #23
 8007954:	4605      	mov	r5, r0
 8007956:	460c      	mov	r4, r1
 8007958:	4616      	mov	r6, r2
 800795a:	d505      	bpl.n	8007968 <__swrite+0x1e>
 800795c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007960:	2302      	movs	r3, #2
 8007962:	2200      	movs	r2, #0
 8007964:	f000 f8c4 	bl	8007af0 <_lseek_r>
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800796e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	4628      	mov	r0, r5
 800797a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800797e:	f000 b8db 	b.w	8007b38 <_write_r>

08007982 <__sseek>:
 8007982:	b510      	push	{r4, lr}
 8007984:	460c      	mov	r4, r1
 8007986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798a:	f000 f8b1 	bl	8007af0 <_lseek_r>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	bf15      	itete	ne
 8007994:	6560      	strne	r0, [r4, #84]	; 0x54
 8007996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800799a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800799e:	81a3      	strheq	r3, [r4, #12]
 80079a0:	bf18      	it	ne
 80079a2:	81a3      	strhne	r3, [r4, #12]
 80079a4:	bd10      	pop	{r4, pc}

080079a6 <__sclose>:
 80079a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079aa:	f000 b891 	b.w	8007ad0 <_close_r>

080079ae <_vsniprintf_r>:
 80079ae:	b530      	push	{r4, r5, lr}
 80079b0:	4614      	mov	r4, r2
 80079b2:	2c00      	cmp	r4, #0
 80079b4:	b09b      	sub	sp, #108	; 0x6c
 80079b6:	4605      	mov	r5, r0
 80079b8:	461a      	mov	r2, r3
 80079ba:	da05      	bge.n	80079c8 <_vsniprintf_r+0x1a>
 80079bc:	238b      	movs	r3, #139	; 0x8b
 80079be:	6003      	str	r3, [r0, #0]
 80079c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079c4:	b01b      	add	sp, #108	; 0x6c
 80079c6:	bd30      	pop	{r4, r5, pc}
 80079c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80079d0:	bf14      	ite	ne
 80079d2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80079d6:	4623      	moveq	r3, r4
 80079d8:	9302      	str	r3, [sp, #8]
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079e0:	9100      	str	r1, [sp, #0]
 80079e2:	9104      	str	r1, [sp, #16]
 80079e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80079e8:	4669      	mov	r1, sp
 80079ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80079ec:	f001 fc44 	bl	8009278 <_svfiprintf_r>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	bfbc      	itt	lt
 80079f4:	238b      	movlt	r3, #139	; 0x8b
 80079f6:	602b      	strlt	r3, [r5, #0]
 80079f8:	2c00      	cmp	r4, #0
 80079fa:	d0e3      	beq.n	80079c4 <_vsniprintf_r+0x16>
 80079fc:	9b00      	ldr	r3, [sp, #0]
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e7df      	b.n	80079c4 <_vsniprintf_r+0x16>

08007a04 <vsniprintf>:
 8007a04:	b507      	push	{r0, r1, r2, lr}
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	460a      	mov	r2, r1
 8007a0c:	4601      	mov	r1, r0
 8007a0e:	4803      	ldr	r0, [pc, #12]	; (8007a1c <vsniprintf+0x18>)
 8007a10:	6800      	ldr	r0, [r0, #0]
 8007a12:	f7ff ffcc 	bl	80079ae <_vsniprintf_r>
 8007a16:	b003      	add	sp, #12
 8007a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a1c:	20000150 	.word	0x20000150

08007a20 <memmove>:
 8007a20:	4288      	cmp	r0, r1
 8007a22:	b510      	push	{r4, lr}
 8007a24:	eb01 0402 	add.w	r4, r1, r2
 8007a28:	d902      	bls.n	8007a30 <memmove+0x10>
 8007a2a:	4284      	cmp	r4, r0
 8007a2c:	4623      	mov	r3, r4
 8007a2e:	d807      	bhi.n	8007a40 <memmove+0x20>
 8007a30:	1e43      	subs	r3, r0, #1
 8007a32:	42a1      	cmp	r1, r4
 8007a34:	d008      	beq.n	8007a48 <memmove+0x28>
 8007a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a3e:	e7f8      	b.n	8007a32 <memmove+0x12>
 8007a40:	4402      	add	r2, r0
 8007a42:	4601      	mov	r1, r0
 8007a44:	428a      	cmp	r2, r1
 8007a46:	d100      	bne.n	8007a4a <memmove+0x2a>
 8007a48:	bd10      	pop	{r4, pc}
 8007a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a52:	e7f7      	b.n	8007a44 <memmove+0x24>

08007a54 <memset>:
 8007a54:	4402      	add	r2, r0
 8007a56:	4603      	mov	r3, r0
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d100      	bne.n	8007a5e <memset+0xa>
 8007a5c:	4770      	bx	lr
 8007a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a62:	e7f9      	b.n	8007a58 <memset+0x4>

08007a64 <strncmp>:
 8007a64:	b510      	push	{r4, lr}
 8007a66:	b16a      	cbz	r2, 8007a84 <strncmp+0x20>
 8007a68:	3901      	subs	r1, #1
 8007a6a:	1884      	adds	r4, r0, r2
 8007a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d103      	bne.n	8007a80 <strncmp+0x1c>
 8007a78:	42a0      	cmp	r0, r4
 8007a7a:	d001      	beq.n	8007a80 <strncmp+0x1c>
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	d1f5      	bne.n	8007a6c <strncmp+0x8>
 8007a80:	1ad0      	subs	r0, r2, r3
 8007a82:	bd10      	pop	{r4, pc}
 8007a84:	4610      	mov	r0, r2
 8007a86:	e7fc      	b.n	8007a82 <strncmp+0x1e>

08007a88 <strstr>:
 8007a88:	780a      	ldrb	r2, [r1, #0]
 8007a8a:	b570      	push	{r4, r5, r6, lr}
 8007a8c:	b96a      	cbnz	r2, 8007aaa <strstr+0x22>
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d109      	bne.n	8007aa8 <strstr+0x20>
 8007a94:	460c      	mov	r4, r1
 8007a96:	4605      	mov	r5, r0
 8007a98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0f6      	beq.n	8007a8e <strstr+0x6>
 8007aa0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007aa4:	429e      	cmp	r6, r3
 8007aa6:	d0f7      	beq.n	8007a98 <strstr+0x10>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	7803      	ldrb	r3, [r0, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1ef      	bne.n	8007a90 <strstr+0x8>
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	e7ec      	b.n	8007a8e <strstr+0x6>

08007ab4 <stpcpy>:
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aba:	4618      	mov	r0, r3
 8007abc:	f803 2b01 	strb.w	r2, [r3], #1
 8007ac0:	2a00      	cmp	r2, #0
 8007ac2:	d1f8      	bne.n	8007ab6 <stpcpy+0x2>
 8007ac4:	4770      	bx	lr
	...

08007ac8 <_localeconv_r>:
 8007ac8:	4800      	ldr	r0, [pc, #0]	; (8007acc <_localeconv_r+0x4>)
 8007aca:	4770      	bx	lr
 8007acc:	20000244 	.word	0x20000244

08007ad0 <_close_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d06      	ldr	r5, [pc, #24]	; (8007aec <_close_r+0x1c>)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	f7f9 fc72 	bl	80013c4 <_close>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_close_r+0x1a>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_close_r+0x1a>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	20002730 	.word	0x20002730

08007af0 <_lseek_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d07      	ldr	r5, [pc, #28]	; (8007b10 <_lseek_r+0x20>)
 8007af4:	4604      	mov	r4, r0
 8007af6:	4608      	mov	r0, r1
 8007af8:	4611      	mov	r1, r2
 8007afa:	2200      	movs	r2, #0
 8007afc:	602a      	str	r2, [r5, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	f7f9 fc6c 	bl	80013dc <_lseek>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_lseek_r+0x1e>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_lseek_r+0x1e>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	20002730 	.word	0x20002730

08007b14 <_read_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4d07      	ldr	r5, [pc, #28]	; (8007b34 <_read_r+0x20>)
 8007b18:	4604      	mov	r4, r0
 8007b1a:	4608      	mov	r0, r1
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	2200      	movs	r2, #0
 8007b20:	602a      	str	r2, [r5, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f7f9 fc32 	bl	800138c <_read>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_read_r+0x1e>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_read_r+0x1e>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	20002730 	.word	0x20002730

08007b38 <_write_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4d07      	ldr	r5, [pc, #28]	; (8007b58 <_write_r+0x20>)
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	4608      	mov	r0, r1
 8007b40:	4611      	mov	r1, r2
 8007b42:	2200      	movs	r2, #0
 8007b44:	602a      	str	r2, [r5, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f7f9 fc2e 	bl	80013a8 <_write>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_write_r+0x1e>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_write_r+0x1e>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	20002730 	.word	0x20002730

08007b5c <__errno>:
 8007b5c:	4b01      	ldr	r3, [pc, #4]	; (8007b64 <__errno+0x8>)
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20000150 	.word	0x20000150

08007b68 <__libc_init_array>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	4d0d      	ldr	r5, [pc, #52]	; (8007ba0 <__libc_init_array+0x38>)
 8007b6c:	4c0d      	ldr	r4, [pc, #52]	; (8007ba4 <__libc_init_array+0x3c>)
 8007b6e:	1b64      	subs	r4, r4, r5
 8007b70:	10a4      	asrs	r4, r4, #2
 8007b72:	2600      	movs	r6, #0
 8007b74:	42a6      	cmp	r6, r4
 8007b76:	d109      	bne.n	8007b8c <__libc_init_array+0x24>
 8007b78:	4d0b      	ldr	r5, [pc, #44]	; (8007ba8 <__libc_init_array+0x40>)
 8007b7a:	4c0c      	ldr	r4, [pc, #48]	; (8007bac <__libc_init_array+0x44>)
 8007b7c:	f002 fd0a 	bl	800a594 <_init>
 8007b80:	1b64      	subs	r4, r4, r5
 8007b82:	10a4      	asrs	r4, r4, #2
 8007b84:	2600      	movs	r6, #0
 8007b86:	42a6      	cmp	r6, r4
 8007b88:	d105      	bne.n	8007b96 <__libc_init_array+0x2e>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b90:	4798      	blx	r3
 8007b92:	3601      	adds	r6, #1
 8007b94:	e7ee      	b.n	8007b74 <__libc_init_array+0xc>
 8007b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b9a:	4798      	blx	r3
 8007b9c:	3601      	adds	r6, #1
 8007b9e:	e7f2      	b.n	8007b86 <__libc_init_array+0x1e>
 8007ba0:	0800af58 	.word	0x0800af58
 8007ba4:	0800af58 	.word	0x0800af58
 8007ba8:	0800af58 	.word	0x0800af58
 8007bac:	0800af5c 	.word	0x0800af5c

08007bb0 <__retarget_lock_init_recursive>:
 8007bb0:	4770      	bx	lr

08007bb2 <__retarget_lock_acquire_recursive>:
 8007bb2:	4770      	bx	lr

08007bb4 <__retarget_lock_release_recursive>:
 8007bb4:	4770      	bx	lr

08007bb6 <memcpy>:
 8007bb6:	440a      	add	r2, r1
 8007bb8:	4291      	cmp	r1, r2
 8007bba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007bbe:	d100      	bne.n	8007bc2 <memcpy+0xc>
 8007bc0:	4770      	bx	lr
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bcc:	4291      	cmp	r1, r2
 8007bce:	d1f9      	bne.n	8007bc4 <memcpy+0xe>
 8007bd0:	bd10      	pop	{r4, pc}

08007bd2 <quorem>:
 8007bd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd6:	6903      	ldr	r3, [r0, #16]
 8007bd8:	690c      	ldr	r4, [r1, #16]
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	4607      	mov	r7, r0
 8007bde:	db7e      	blt.n	8007cde <quorem+0x10c>
 8007be0:	3c01      	subs	r4, #1
 8007be2:	f101 0814 	add.w	r8, r1, #20
 8007be6:	f100 0514 	add.w	r5, r0, #20
 8007bea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c04:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c08:	d331      	bcc.n	8007c6e <quorem+0x9c>
 8007c0a:	f04f 0e00 	mov.w	lr, #0
 8007c0e:	4640      	mov	r0, r8
 8007c10:	46ac      	mov	ip, r5
 8007c12:	46f2      	mov	sl, lr
 8007c14:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c18:	b293      	uxth	r3, r2
 8007c1a:	fb06 e303 	mla	r3, r6, r3, lr
 8007c1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c22:	0c1a      	lsrs	r2, r3, #16
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	ebaa 0303 	sub.w	r3, sl, r3
 8007c2a:	f8dc a000 	ldr.w	sl, [ip]
 8007c2e:	fa13 f38a 	uxtah	r3, r3, sl
 8007c32:	fb06 220e 	mla	r2, r6, lr, r2
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	9b00      	ldr	r3, [sp, #0]
 8007c3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c3e:	b292      	uxth	r2, r2
 8007c40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c48:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c4c:	4581      	cmp	r9, r0
 8007c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c52:	f84c 3b04 	str.w	r3, [ip], #4
 8007c56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c5a:	d2db      	bcs.n	8007c14 <quorem+0x42>
 8007c5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c60:	b92b      	cbnz	r3, 8007c6e <quorem+0x9c>
 8007c62:	9b01      	ldr	r3, [sp, #4]
 8007c64:	3b04      	subs	r3, #4
 8007c66:	429d      	cmp	r5, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	d32c      	bcc.n	8007cc6 <quorem+0xf4>
 8007c6c:	613c      	str	r4, [r7, #16]
 8007c6e:	4638      	mov	r0, r7
 8007c70:	f001 f9a8 	bl	8008fc4 <__mcmp>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	db22      	blt.n	8007cbe <quorem+0xec>
 8007c78:	3601      	adds	r6, #1
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c82:	f8d1 c000 	ldr.w	ip, [r1]
 8007c86:	b293      	uxth	r3, r2
 8007c88:	1ac3      	subs	r3, r0, r3
 8007c8a:	0c12      	lsrs	r2, r2, #16
 8007c8c:	fa13 f38c 	uxtah	r3, r3, ip
 8007c90:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c9e:	45c1      	cmp	r9, r8
 8007ca0:	f841 3b04 	str.w	r3, [r1], #4
 8007ca4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ca8:	d2e9      	bcs.n	8007c7e <quorem+0xac>
 8007caa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cb2:	b922      	cbnz	r2, 8007cbe <quorem+0xec>
 8007cb4:	3b04      	subs	r3, #4
 8007cb6:	429d      	cmp	r5, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	d30a      	bcc.n	8007cd2 <quorem+0x100>
 8007cbc:	613c      	str	r4, [r7, #16]
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	b003      	add	sp, #12
 8007cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc6:	6812      	ldr	r2, [r2, #0]
 8007cc8:	3b04      	subs	r3, #4
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	d1ce      	bne.n	8007c6c <quorem+0x9a>
 8007cce:	3c01      	subs	r4, #1
 8007cd0:	e7c9      	b.n	8007c66 <quorem+0x94>
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	3b04      	subs	r3, #4
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	d1f0      	bne.n	8007cbc <quorem+0xea>
 8007cda:	3c01      	subs	r4, #1
 8007cdc:	e7eb      	b.n	8007cb6 <quorem+0xe4>
 8007cde:	2000      	movs	r0, #0
 8007ce0:	e7ee      	b.n	8007cc0 <quorem+0xee>
 8007ce2:	0000      	movs	r0, r0
 8007ce4:	0000      	movs	r0, r0
	...

08007ce8 <_dtoa_r>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	ed2d 8b04 	vpush	{d8-d9}
 8007cf0:	69c5      	ldr	r5, [r0, #28]
 8007cf2:	b093      	sub	sp, #76	; 0x4c
 8007cf4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007cf8:	ec57 6b10 	vmov	r6, r7, d0
 8007cfc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d00:	9107      	str	r1, [sp, #28]
 8007d02:	4604      	mov	r4, r0
 8007d04:	920a      	str	r2, [sp, #40]	; 0x28
 8007d06:	930d      	str	r3, [sp, #52]	; 0x34
 8007d08:	b975      	cbnz	r5, 8007d28 <_dtoa_r+0x40>
 8007d0a:	2010      	movs	r0, #16
 8007d0c:	f000 fe2a 	bl	8008964 <malloc>
 8007d10:	4602      	mov	r2, r0
 8007d12:	61e0      	str	r0, [r4, #28]
 8007d14:	b920      	cbnz	r0, 8007d20 <_dtoa_r+0x38>
 8007d16:	4bae      	ldr	r3, [pc, #696]	; (8007fd0 <_dtoa_r+0x2e8>)
 8007d18:	21ef      	movs	r1, #239	; 0xef
 8007d1a:	48ae      	ldr	r0, [pc, #696]	; (8007fd4 <_dtoa_r+0x2ec>)
 8007d1c:	f001 fffc 	bl	8009d18 <__assert_func>
 8007d20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d24:	6005      	str	r5, [r0, #0]
 8007d26:	60c5      	str	r5, [r0, #12]
 8007d28:	69e3      	ldr	r3, [r4, #28]
 8007d2a:	6819      	ldr	r1, [r3, #0]
 8007d2c:	b151      	cbz	r1, 8007d44 <_dtoa_r+0x5c>
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	604a      	str	r2, [r1, #4]
 8007d32:	2301      	movs	r3, #1
 8007d34:	4093      	lsls	r3, r2
 8007d36:	608b      	str	r3, [r1, #8]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 ff07 	bl	8008b4c <_Bfree>
 8007d3e:	69e3      	ldr	r3, [r4, #28]
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	1e3b      	subs	r3, r7, #0
 8007d46:	bfbb      	ittet	lt
 8007d48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d4c:	9303      	strlt	r3, [sp, #12]
 8007d4e:	2300      	movge	r3, #0
 8007d50:	2201      	movlt	r2, #1
 8007d52:	bfac      	ite	ge
 8007d54:	f8c8 3000 	strge.w	r3, [r8]
 8007d58:	f8c8 2000 	strlt.w	r2, [r8]
 8007d5c:	4b9e      	ldr	r3, [pc, #632]	; (8007fd8 <_dtoa_r+0x2f0>)
 8007d5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d62:	ea33 0308 	bics.w	r3, r3, r8
 8007d66:	d11b      	bne.n	8007da0 <_dtoa_r+0xb8>
 8007d68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d74:	4333      	orrs	r3, r6
 8007d76:	f000 8593 	beq.w	80088a0 <_dtoa_r+0xbb8>
 8007d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d7c:	b963      	cbnz	r3, 8007d98 <_dtoa_r+0xb0>
 8007d7e:	4b97      	ldr	r3, [pc, #604]	; (8007fdc <_dtoa_r+0x2f4>)
 8007d80:	e027      	b.n	8007dd2 <_dtoa_r+0xea>
 8007d82:	4b97      	ldr	r3, [pc, #604]	; (8007fe0 <_dtoa_r+0x2f8>)
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	3308      	adds	r3, #8
 8007d88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	9800      	ldr	r0, [sp, #0]
 8007d8e:	b013      	add	sp, #76	; 0x4c
 8007d90:	ecbd 8b04 	vpop	{d8-d9}
 8007d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d98:	4b90      	ldr	r3, [pc, #576]	; (8007fdc <_dtoa_r+0x2f4>)
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	3303      	adds	r3, #3
 8007d9e:	e7f3      	b.n	8007d88 <_dtoa_r+0xa0>
 8007da0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007da4:	2200      	movs	r2, #0
 8007da6:	ec51 0b17 	vmov	r0, r1, d7
 8007daa:	eeb0 8a47 	vmov.f32	s16, s14
 8007dae:	eef0 8a67 	vmov.f32	s17, s15
 8007db2:	2300      	movs	r3, #0
 8007db4:	f7f8 fe90 	bl	8000ad8 <__aeabi_dcmpeq>
 8007db8:	4681      	mov	r9, r0
 8007dba:	b160      	cbz	r0, 8007dd6 <_dtoa_r+0xee>
 8007dbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 8568 	beq.w	800889a <_dtoa_r+0xbb2>
 8007dca:	4b86      	ldr	r3, [pc, #536]	; (8007fe4 <_dtoa_r+0x2fc>)
 8007dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	e7da      	b.n	8007d8c <_dtoa_r+0xa4>
 8007dd6:	aa10      	add	r2, sp, #64	; 0x40
 8007dd8:	a911      	add	r1, sp, #68	; 0x44
 8007dda:	4620      	mov	r0, r4
 8007ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8007de0:	eef0 0a68 	vmov.f32	s1, s17
 8007de4:	f001 f994 	bl	8009110 <__d2b>
 8007de8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007dec:	4682      	mov	sl, r0
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	d07f      	beq.n	8007ef2 <_dtoa_r+0x20a>
 8007df2:	ee18 3a90 	vmov	r3, s17
 8007df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dfa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007dfe:	ec51 0b18 	vmov	r0, r1, d8
 8007e02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007e0e:	4619      	mov	r1, r3
 8007e10:	2200      	movs	r2, #0
 8007e12:	4b75      	ldr	r3, [pc, #468]	; (8007fe8 <_dtoa_r+0x300>)
 8007e14:	f7f8 fa40 	bl	8000298 <__aeabi_dsub>
 8007e18:	a367      	add	r3, pc, #412	; (adr r3, 8007fb8 <_dtoa_r+0x2d0>)
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f7f8 fbf3 	bl	8000608 <__aeabi_dmul>
 8007e22:	a367      	add	r3, pc, #412	; (adr r3, 8007fc0 <_dtoa_r+0x2d8>)
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f7f8 fa38 	bl	800029c <__adddf3>
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	4628      	mov	r0, r5
 8007e30:	460f      	mov	r7, r1
 8007e32:	f7f8 fb7f 	bl	8000534 <__aeabi_i2d>
 8007e36:	a364      	add	r3, pc, #400	; (adr r3, 8007fc8 <_dtoa_r+0x2e0>)
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f7f8 fbe4 	bl	8000608 <__aeabi_dmul>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4630      	mov	r0, r6
 8007e46:	4639      	mov	r1, r7
 8007e48:	f7f8 fa28 	bl	800029c <__adddf3>
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	460f      	mov	r7, r1
 8007e50:	f7f8 fe8a 	bl	8000b68 <__aeabi_d2iz>
 8007e54:	2200      	movs	r2, #0
 8007e56:	4683      	mov	fp, r0
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	f7f8 fe45 	bl	8000aec <__aeabi_dcmplt>
 8007e62:	b148      	cbz	r0, 8007e78 <_dtoa_r+0x190>
 8007e64:	4658      	mov	r0, fp
 8007e66:	f7f8 fb65 	bl	8000534 <__aeabi_i2d>
 8007e6a:	4632      	mov	r2, r6
 8007e6c:	463b      	mov	r3, r7
 8007e6e:	f7f8 fe33 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e72:	b908      	cbnz	r0, 8007e78 <_dtoa_r+0x190>
 8007e74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007e78:	f1bb 0f16 	cmp.w	fp, #22
 8007e7c:	d857      	bhi.n	8007f2e <_dtoa_r+0x246>
 8007e7e:	4b5b      	ldr	r3, [pc, #364]	; (8007fec <_dtoa_r+0x304>)
 8007e80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	ec51 0b18 	vmov	r0, r1, d8
 8007e8c:	f7f8 fe2e 	bl	8000aec <__aeabi_dcmplt>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d04e      	beq.n	8007f32 <_dtoa_r+0x24a>
 8007e94:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007e98:	2300      	movs	r3, #0
 8007e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e9e:	1b5b      	subs	r3, r3, r5
 8007ea0:	1e5a      	subs	r2, r3, #1
 8007ea2:	bf45      	ittet	mi
 8007ea4:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ea8:	9305      	strmi	r3, [sp, #20]
 8007eaa:	2300      	movpl	r3, #0
 8007eac:	2300      	movmi	r3, #0
 8007eae:	9206      	str	r2, [sp, #24]
 8007eb0:	bf54      	ite	pl
 8007eb2:	9305      	strpl	r3, [sp, #20]
 8007eb4:	9306      	strmi	r3, [sp, #24]
 8007eb6:	f1bb 0f00 	cmp.w	fp, #0
 8007eba:	db3c      	blt.n	8007f36 <_dtoa_r+0x24e>
 8007ebc:	9b06      	ldr	r3, [sp, #24]
 8007ebe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007ec2:	445b      	add	r3, fp
 8007ec4:	9306      	str	r3, [sp, #24]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	9308      	str	r3, [sp, #32]
 8007eca:	9b07      	ldr	r3, [sp, #28]
 8007ecc:	2b09      	cmp	r3, #9
 8007ece:	d868      	bhi.n	8007fa2 <_dtoa_r+0x2ba>
 8007ed0:	2b05      	cmp	r3, #5
 8007ed2:	bfc4      	itt	gt
 8007ed4:	3b04      	subgt	r3, #4
 8007ed6:	9307      	strgt	r3, [sp, #28]
 8007ed8:	9b07      	ldr	r3, [sp, #28]
 8007eda:	f1a3 0302 	sub.w	r3, r3, #2
 8007ede:	bfcc      	ite	gt
 8007ee0:	2500      	movgt	r5, #0
 8007ee2:	2501      	movle	r5, #1
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	f200 8085 	bhi.w	8007ff4 <_dtoa_r+0x30c>
 8007eea:	e8df f003 	tbb	[pc, r3]
 8007eee:	3b2e      	.short	0x3b2e
 8007ef0:	5839      	.short	0x5839
 8007ef2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ef6:	441d      	add	r5, r3
 8007ef8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	bfc1      	itttt	gt
 8007f00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f04:	fa08 f803 	lslgt.w	r8, r8, r3
 8007f08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007f0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007f10:	bfd6      	itet	le
 8007f12:	f1c3 0320 	rsble	r3, r3, #32
 8007f16:	ea48 0003 	orrgt.w	r0, r8, r3
 8007f1a:	fa06 f003 	lslle.w	r0, r6, r3
 8007f1e:	f7f8 faf9 	bl	8000514 <__aeabi_ui2d>
 8007f22:	2201      	movs	r2, #1
 8007f24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007f28:	3d01      	subs	r5, #1
 8007f2a:	920e      	str	r2, [sp, #56]	; 0x38
 8007f2c:	e76f      	b.n	8007e0e <_dtoa_r+0x126>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e7b3      	b.n	8007e9a <_dtoa_r+0x1b2>
 8007f32:	900c      	str	r0, [sp, #48]	; 0x30
 8007f34:	e7b2      	b.n	8007e9c <_dtoa_r+0x1b4>
 8007f36:	9b05      	ldr	r3, [sp, #20]
 8007f38:	eba3 030b 	sub.w	r3, r3, fp
 8007f3c:	9305      	str	r3, [sp, #20]
 8007f3e:	f1cb 0300 	rsb	r3, fp, #0
 8007f42:	9308      	str	r3, [sp, #32]
 8007f44:	2300      	movs	r3, #0
 8007f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f48:	e7bf      	b.n	8007eca <_dtoa_r+0x1e2>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	dc52      	bgt.n	8007ffa <_dtoa_r+0x312>
 8007f54:	2301      	movs	r3, #1
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	9304      	str	r3, [sp, #16]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	920a      	str	r2, [sp, #40]	; 0x28
 8007f5e:	e00b      	b.n	8007f78 <_dtoa_r+0x290>
 8007f60:	2301      	movs	r3, #1
 8007f62:	e7f3      	b.n	8007f4c <_dtoa_r+0x264>
 8007f64:	2300      	movs	r3, #0
 8007f66:	9309      	str	r3, [sp, #36]	; 0x24
 8007f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f6a:	445b      	add	r3, fp
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	9304      	str	r3, [sp, #16]
 8007f74:	bfb8      	it	lt
 8007f76:	2301      	movlt	r3, #1
 8007f78:	69e0      	ldr	r0, [r4, #28]
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	f102 0614 	add.w	r6, r2, #20
 8007f82:	429e      	cmp	r6, r3
 8007f84:	d93d      	bls.n	8008002 <_dtoa_r+0x31a>
 8007f86:	6041      	str	r1, [r0, #4]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 fd9f 	bl	8008acc <_Balloc>
 8007f8e:	9000      	str	r0, [sp, #0]
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d139      	bne.n	8008008 <_dtoa_r+0x320>
 8007f94:	4b16      	ldr	r3, [pc, #88]	; (8007ff0 <_dtoa_r+0x308>)
 8007f96:	4602      	mov	r2, r0
 8007f98:	f240 11af 	movw	r1, #431	; 0x1af
 8007f9c:	e6bd      	b.n	8007d1a <_dtoa_r+0x32>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e7e1      	b.n	8007f66 <_dtoa_r+0x27e>
 8007fa2:	2501      	movs	r5, #1
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9307      	str	r3, [sp, #28]
 8007fa8:	9509      	str	r5, [sp, #36]	; 0x24
 8007faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	9304      	str	r3, [sp, #16]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2312      	movs	r3, #18
 8007fb6:	e7d1      	b.n	8007f5c <_dtoa_r+0x274>
 8007fb8:	636f4361 	.word	0x636f4361
 8007fbc:	3fd287a7 	.word	0x3fd287a7
 8007fc0:	8b60c8b3 	.word	0x8b60c8b3
 8007fc4:	3fc68a28 	.word	0x3fc68a28
 8007fc8:	509f79fb 	.word	0x509f79fb
 8007fcc:	3fd34413 	.word	0x3fd34413
 8007fd0:	0800ac07 	.word	0x0800ac07
 8007fd4:	0800ac1e 	.word	0x0800ac1e
 8007fd8:	7ff00000 	.word	0x7ff00000
 8007fdc:	0800ac03 	.word	0x0800ac03
 8007fe0:	0800abfa 	.word	0x0800abfa
 8007fe4:	0800ae04 	.word	0x0800ae04
 8007fe8:	3ff80000 	.word	0x3ff80000
 8007fec:	0800ad08 	.word	0x0800ad08
 8007ff0:	0800ac76 	.word	0x0800ac76
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff8:	e7d7      	b.n	8007faa <_dtoa_r+0x2c2>
 8007ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	e7ba      	b.n	8007f78 <_dtoa_r+0x290>
 8008002:	3101      	adds	r1, #1
 8008004:	0052      	lsls	r2, r2, #1
 8008006:	e7ba      	b.n	8007f7e <_dtoa_r+0x296>
 8008008:	69e3      	ldr	r3, [r4, #28]
 800800a:	9a00      	ldr	r2, [sp, #0]
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	9b04      	ldr	r3, [sp, #16]
 8008010:	2b0e      	cmp	r3, #14
 8008012:	f200 80a8 	bhi.w	8008166 <_dtoa_r+0x47e>
 8008016:	2d00      	cmp	r5, #0
 8008018:	f000 80a5 	beq.w	8008166 <_dtoa_r+0x47e>
 800801c:	f1bb 0f00 	cmp.w	fp, #0
 8008020:	dd38      	ble.n	8008094 <_dtoa_r+0x3ac>
 8008022:	4bc0      	ldr	r3, [pc, #768]	; (8008324 <_dtoa_r+0x63c>)
 8008024:	f00b 020f 	and.w	r2, fp, #15
 8008028:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800802c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008030:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008034:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008038:	d019      	beq.n	800806e <_dtoa_r+0x386>
 800803a:	4bbb      	ldr	r3, [pc, #748]	; (8008328 <_dtoa_r+0x640>)
 800803c:	ec51 0b18 	vmov	r0, r1, d8
 8008040:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008044:	f7f8 fc0a 	bl	800085c <__aeabi_ddiv>
 8008048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800804c:	f008 080f 	and.w	r8, r8, #15
 8008050:	2503      	movs	r5, #3
 8008052:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008328 <_dtoa_r+0x640>
 8008056:	f1b8 0f00 	cmp.w	r8, #0
 800805a:	d10a      	bne.n	8008072 <_dtoa_r+0x38a>
 800805c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008060:	4632      	mov	r2, r6
 8008062:	463b      	mov	r3, r7
 8008064:	f7f8 fbfa 	bl	800085c <__aeabi_ddiv>
 8008068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800806c:	e02b      	b.n	80080c6 <_dtoa_r+0x3de>
 800806e:	2502      	movs	r5, #2
 8008070:	e7ef      	b.n	8008052 <_dtoa_r+0x36a>
 8008072:	f018 0f01 	tst.w	r8, #1
 8008076:	d008      	beq.n	800808a <_dtoa_r+0x3a2>
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008080:	f7f8 fac2 	bl	8000608 <__aeabi_dmul>
 8008084:	3501      	adds	r5, #1
 8008086:	4606      	mov	r6, r0
 8008088:	460f      	mov	r7, r1
 800808a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800808e:	f109 0908 	add.w	r9, r9, #8
 8008092:	e7e0      	b.n	8008056 <_dtoa_r+0x36e>
 8008094:	f000 809f 	beq.w	80081d6 <_dtoa_r+0x4ee>
 8008098:	f1cb 0600 	rsb	r6, fp, #0
 800809c:	4ba1      	ldr	r3, [pc, #644]	; (8008324 <_dtoa_r+0x63c>)
 800809e:	4fa2      	ldr	r7, [pc, #648]	; (8008328 <_dtoa_r+0x640>)
 80080a0:	f006 020f 	and.w	r2, r6, #15
 80080a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	ec51 0b18 	vmov	r0, r1, d8
 80080b0:	f7f8 faaa 	bl	8000608 <__aeabi_dmul>
 80080b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080b8:	1136      	asrs	r6, r6, #4
 80080ba:	2300      	movs	r3, #0
 80080bc:	2502      	movs	r5, #2
 80080be:	2e00      	cmp	r6, #0
 80080c0:	d17e      	bne.n	80081c0 <_dtoa_r+0x4d8>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1d0      	bne.n	8008068 <_dtoa_r+0x380>
 80080c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8084 	beq.w	80081da <_dtoa_r+0x4f2>
 80080d2:	4b96      	ldr	r3, [pc, #600]	; (800832c <_dtoa_r+0x644>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	4640      	mov	r0, r8
 80080d8:	4649      	mov	r1, r9
 80080da:	f7f8 fd07 	bl	8000aec <__aeabi_dcmplt>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d07b      	beq.n	80081da <_dtoa_r+0x4f2>
 80080e2:	9b04      	ldr	r3, [sp, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d078      	beq.n	80081da <_dtoa_r+0x4f2>
 80080e8:	9b01      	ldr	r3, [sp, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dd39      	ble.n	8008162 <_dtoa_r+0x47a>
 80080ee:	4b90      	ldr	r3, [pc, #576]	; (8008330 <_dtoa_r+0x648>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	4640      	mov	r0, r8
 80080f4:	4649      	mov	r1, r9
 80080f6:	f7f8 fa87 	bl	8000608 <__aeabi_dmul>
 80080fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080fe:	9e01      	ldr	r6, [sp, #4]
 8008100:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008104:	3501      	adds	r5, #1
 8008106:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800810a:	4628      	mov	r0, r5
 800810c:	f7f8 fa12 	bl	8000534 <__aeabi_i2d>
 8008110:	4642      	mov	r2, r8
 8008112:	464b      	mov	r3, r9
 8008114:	f7f8 fa78 	bl	8000608 <__aeabi_dmul>
 8008118:	4b86      	ldr	r3, [pc, #536]	; (8008334 <_dtoa_r+0x64c>)
 800811a:	2200      	movs	r2, #0
 800811c:	f7f8 f8be 	bl	800029c <__adddf3>
 8008120:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008128:	9303      	str	r3, [sp, #12]
 800812a:	2e00      	cmp	r6, #0
 800812c:	d158      	bne.n	80081e0 <_dtoa_r+0x4f8>
 800812e:	4b82      	ldr	r3, [pc, #520]	; (8008338 <_dtoa_r+0x650>)
 8008130:	2200      	movs	r2, #0
 8008132:	4640      	mov	r0, r8
 8008134:	4649      	mov	r1, r9
 8008136:	f7f8 f8af 	bl	8000298 <__aeabi_dsub>
 800813a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800813e:	4680      	mov	r8, r0
 8008140:	4689      	mov	r9, r1
 8008142:	f7f8 fcf1 	bl	8000b28 <__aeabi_dcmpgt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f040 8296 	bne.w	8008678 <_dtoa_r+0x990>
 800814c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008150:	4640      	mov	r0, r8
 8008152:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008156:	4649      	mov	r1, r9
 8008158:	f7f8 fcc8 	bl	8000aec <__aeabi_dcmplt>
 800815c:	2800      	cmp	r0, #0
 800815e:	f040 8289 	bne.w	8008674 <_dtoa_r+0x98c>
 8008162:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008168:	2b00      	cmp	r3, #0
 800816a:	f2c0 814e 	blt.w	800840a <_dtoa_r+0x722>
 800816e:	f1bb 0f0e 	cmp.w	fp, #14
 8008172:	f300 814a 	bgt.w	800840a <_dtoa_r+0x722>
 8008176:	4b6b      	ldr	r3, [pc, #428]	; (8008324 <_dtoa_r+0x63c>)
 8008178:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800817c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008182:	2b00      	cmp	r3, #0
 8008184:	f280 80dc 	bge.w	8008340 <_dtoa_r+0x658>
 8008188:	9b04      	ldr	r3, [sp, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f300 80d8 	bgt.w	8008340 <_dtoa_r+0x658>
 8008190:	f040 826f 	bne.w	8008672 <_dtoa_r+0x98a>
 8008194:	4b68      	ldr	r3, [pc, #416]	; (8008338 <_dtoa_r+0x650>)
 8008196:	2200      	movs	r2, #0
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	f7f8 fa34 	bl	8000608 <__aeabi_dmul>
 80081a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081a4:	f7f8 fcb6 	bl	8000b14 <__aeabi_dcmpge>
 80081a8:	9e04      	ldr	r6, [sp, #16]
 80081aa:	4637      	mov	r7, r6
 80081ac:	2800      	cmp	r0, #0
 80081ae:	f040 8245 	bne.w	800863c <_dtoa_r+0x954>
 80081b2:	9d00      	ldr	r5, [sp, #0]
 80081b4:	2331      	movs	r3, #49	; 0x31
 80081b6:	f805 3b01 	strb.w	r3, [r5], #1
 80081ba:	f10b 0b01 	add.w	fp, fp, #1
 80081be:	e241      	b.n	8008644 <_dtoa_r+0x95c>
 80081c0:	07f2      	lsls	r2, r6, #31
 80081c2:	d505      	bpl.n	80081d0 <_dtoa_r+0x4e8>
 80081c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c8:	f7f8 fa1e 	bl	8000608 <__aeabi_dmul>
 80081cc:	3501      	adds	r5, #1
 80081ce:	2301      	movs	r3, #1
 80081d0:	1076      	asrs	r6, r6, #1
 80081d2:	3708      	adds	r7, #8
 80081d4:	e773      	b.n	80080be <_dtoa_r+0x3d6>
 80081d6:	2502      	movs	r5, #2
 80081d8:	e775      	b.n	80080c6 <_dtoa_r+0x3de>
 80081da:	9e04      	ldr	r6, [sp, #16]
 80081dc:	465f      	mov	r7, fp
 80081de:	e792      	b.n	8008106 <_dtoa_r+0x41e>
 80081e0:	9900      	ldr	r1, [sp, #0]
 80081e2:	4b50      	ldr	r3, [pc, #320]	; (8008324 <_dtoa_r+0x63c>)
 80081e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081e8:	4431      	add	r1, r6
 80081ea:	9102      	str	r1, [sp, #8]
 80081ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ee:	eeb0 9a47 	vmov.f32	s18, s14
 80081f2:	eef0 9a67 	vmov.f32	s19, s15
 80081f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081fe:	2900      	cmp	r1, #0
 8008200:	d044      	beq.n	800828c <_dtoa_r+0x5a4>
 8008202:	494e      	ldr	r1, [pc, #312]	; (800833c <_dtoa_r+0x654>)
 8008204:	2000      	movs	r0, #0
 8008206:	f7f8 fb29 	bl	800085c <__aeabi_ddiv>
 800820a:	ec53 2b19 	vmov	r2, r3, d9
 800820e:	f7f8 f843 	bl	8000298 <__aeabi_dsub>
 8008212:	9d00      	ldr	r5, [sp, #0]
 8008214:	ec41 0b19 	vmov	d9, r0, r1
 8008218:	4649      	mov	r1, r9
 800821a:	4640      	mov	r0, r8
 800821c:	f7f8 fca4 	bl	8000b68 <__aeabi_d2iz>
 8008220:	4606      	mov	r6, r0
 8008222:	f7f8 f987 	bl	8000534 <__aeabi_i2d>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4640      	mov	r0, r8
 800822c:	4649      	mov	r1, r9
 800822e:	f7f8 f833 	bl	8000298 <__aeabi_dsub>
 8008232:	3630      	adds	r6, #48	; 0x30
 8008234:	f805 6b01 	strb.w	r6, [r5], #1
 8008238:	ec53 2b19 	vmov	r2, r3, d9
 800823c:	4680      	mov	r8, r0
 800823e:	4689      	mov	r9, r1
 8008240:	f7f8 fc54 	bl	8000aec <__aeabi_dcmplt>
 8008244:	2800      	cmp	r0, #0
 8008246:	d164      	bne.n	8008312 <_dtoa_r+0x62a>
 8008248:	4642      	mov	r2, r8
 800824a:	464b      	mov	r3, r9
 800824c:	4937      	ldr	r1, [pc, #220]	; (800832c <_dtoa_r+0x644>)
 800824e:	2000      	movs	r0, #0
 8008250:	f7f8 f822 	bl	8000298 <__aeabi_dsub>
 8008254:	ec53 2b19 	vmov	r2, r3, d9
 8008258:	f7f8 fc48 	bl	8000aec <__aeabi_dcmplt>
 800825c:	2800      	cmp	r0, #0
 800825e:	f040 80b6 	bne.w	80083ce <_dtoa_r+0x6e6>
 8008262:	9b02      	ldr	r3, [sp, #8]
 8008264:	429d      	cmp	r5, r3
 8008266:	f43f af7c 	beq.w	8008162 <_dtoa_r+0x47a>
 800826a:	4b31      	ldr	r3, [pc, #196]	; (8008330 <_dtoa_r+0x648>)
 800826c:	ec51 0b19 	vmov	r0, r1, d9
 8008270:	2200      	movs	r2, #0
 8008272:	f7f8 f9c9 	bl	8000608 <__aeabi_dmul>
 8008276:	4b2e      	ldr	r3, [pc, #184]	; (8008330 <_dtoa_r+0x648>)
 8008278:	ec41 0b19 	vmov	d9, r0, r1
 800827c:	2200      	movs	r2, #0
 800827e:	4640      	mov	r0, r8
 8008280:	4649      	mov	r1, r9
 8008282:	f7f8 f9c1 	bl	8000608 <__aeabi_dmul>
 8008286:	4680      	mov	r8, r0
 8008288:	4689      	mov	r9, r1
 800828a:	e7c5      	b.n	8008218 <_dtoa_r+0x530>
 800828c:	ec51 0b17 	vmov	r0, r1, d7
 8008290:	f7f8 f9ba 	bl	8000608 <__aeabi_dmul>
 8008294:	9b02      	ldr	r3, [sp, #8]
 8008296:	9d00      	ldr	r5, [sp, #0]
 8008298:	930f      	str	r3, [sp, #60]	; 0x3c
 800829a:	ec41 0b19 	vmov	d9, r0, r1
 800829e:	4649      	mov	r1, r9
 80082a0:	4640      	mov	r0, r8
 80082a2:	f7f8 fc61 	bl	8000b68 <__aeabi_d2iz>
 80082a6:	4606      	mov	r6, r0
 80082a8:	f7f8 f944 	bl	8000534 <__aeabi_i2d>
 80082ac:	3630      	adds	r6, #48	; 0x30
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f7 ffef 	bl	8000298 <__aeabi_dsub>
 80082ba:	f805 6b01 	strb.w	r6, [r5], #1
 80082be:	9b02      	ldr	r3, [sp, #8]
 80082c0:	429d      	cmp	r5, r3
 80082c2:	4680      	mov	r8, r0
 80082c4:	4689      	mov	r9, r1
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	d124      	bne.n	8008316 <_dtoa_r+0x62e>
 80082cc:	4b1b      	ldr	r3, [pc, #108]	; (800833c <_dtoa_r+0x654>)
 80082ce:	ec51 0b19 	vmov	r0, r1, d9
 80082d2:	f7f7 ffe3 	bl	800029c <__adddf3>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4640      	mov	r0, r8
 80082dc:	4649      	mov	r1, r9
 80082de:	f7f8 fc23 	bl	8000b28 <__aeabi_dcmpgt>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d173      	bne.n	80083ce <_dtoa_r+0x6e6>
 80082e6:	ec53 2b19 	vmov	r2, r3, d9
 80082ea:	4914      	ldr	r1, [pc, #80]	; (800833c <_dtoa_r+0x654>)
 80082ec:	2000      	movs	r0, #0
 80082ee:	f7f7 ffd3 	bl	8000298 <__aeabi_dsub>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4640      	mov	r0, r8
 80082f8:	4649      	mov	r1, r9
 80082fa:	f7f8 fbf7 	bl	8000aec <__aeabi_dcmplt>
 80082fe:	2800      	cmp	r0, #0
 8008300:	f43f af2f 	beq.w	8008162 <_dtoa_r+0x47a>
 8008304:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008306:	1e6b      	subs	r3, r5, #1
 8008308:	930f      	str	r3, [sp, #60]	; 0x3c
 800830a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800830e:	2b30      	cmp	r3, #48	; 0x30
 8008310:	d0f8      	beq.n	8008304 <_dtoa_r+0x61c>
 8008312:	46bb      	mov	fp, r7
 8008314:	e04a      	b.n	80083ac <_dtoa_r+0x6c4>
 8008316:	4b06      	ldr	r3, [pc, #24]	; (8008330 <_dtoa_r+0x648>)
 8008318:	f7f8 f976 	bl	8000608 <__aeabi_dmul>
 800831c:	4680      	mov	r8, r0
 800831e:	4689      	mov	r9, r1
 8008320:	e7bd      	b.n	800829e <_dtoa_r+0x5b6>
 8008322:	bf00      	nop
 8008324:	0800ad08 	.word	0x0800ad08
 8008328:	0800ace0 	.word	0x0800ace0
 800832c:	3ff00000 	.word	0x3ff00000
 8008330:	40240000 	.word	0x40240000
 8008334:	401c0000 	.word	0x401c0000
 8008338:	40140000 	.word	0x40140000
 800833c:	3fe00000 	.word	0x3fe00000
 8008340:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008344:	9d00      	ldr	r5, [sp, #0]
 8008346:	4642      	mov	r2, r8
 8008348:	464b      	mov	r3, r9
 800834a:	4630      	mov	r0, r6
 800834c:	4639      	mov	r1, r7
 800834e:	f7f8 fa85 	bl	800085c <__aeabi_ddiv>
 8008352:	f7f8 fc09 	bl	8000b68 <__aeabi_d2iz>
 8008356:	9001      	str	r0, [sp, #4]
 8008358:	f7f8 f8ec 	bl	8000534 <__aeabi_i2d>
 800835c:	4642      	mov	r2, r8
 800835e:	464b      	mov	r3, r9
 8008360:	f7f8 f952 	bl	8000608 <__aeabi_dmul>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f7 ff94 	bl	8000298 <__aeabi_dsub>
 8008370:	9e01      	ldr	r6, [sp, #4]
 8008372:	9f04      	ldr	r7, [sp, #16]
 8008374:	3630      	adds	r6, #48	; 0x30
 8008376:	f805 6b01 	strb.w	r6, [r5], #1
 800837a:	9e00      	ldr	r6, [sp, #0]
 800837c:	1bae      	subs	r6, r5, r6
 800837e:	42b7      	cmp	r7, r6
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	d134      	bne.n	80083f0 <_dtoa_r+0x708>
 8008386:	f7f7 ff89 	bl	800029c <__adddf3>
 800838a:	4642      	mov	r2, r8
 800838c:	464b      	mov	r3, r9
 800838e:	4606      	mov	r6, r0
 8008390:	460f      	mov	r7, r1
 8008392:	f7f8 fbc9 	bl	8000b28 <__aeabi_dcmpgt>
 8008396:	b9c8      	cbnz	r0, 80083cc <_dtoa_r+0x6e4>
 8008398:	4642      	mov	r2, r8
 800839a:	464b      	mov	r3, r9
 800839c:	4630      	mov	r0, r6
 800839e:	4639      	mov	r1, r7
 80083a0:	f7f8 fb9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80083a4:	b110      	cbz	r0, 80083ac <_dtoa_r+0x6c4>
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	07db      	lsls	r3, r3, #31
 80083aa:	d40f      	bmi.n	80083cc <_dtoa_r+0x6e4>
 80083ac:	4651      	mov	r1, sl
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 fbcc 	bl	8008b4c <_Bfree>
 80083b4:	2300      	movs	r3, #0
 80083b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083b8:	702b      	strb	r3, [r5, #0]
 80083ba:	f10b 0301 	add.w	r3, fp, #1
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f43f ace2 	beq.w	8007d8c <_dtoa_r+0xa4>
 80083c8:	601d      	str	r5, [r3, #0]
 80083ca:	e4df      	b.n	8007d8c <_dtoa_r+0xa4>
 80083cc:	465f      	mov	r7, fp
 80083ce:	462b      	mov	r3, r5
 80083d0:	461d      	mov	r5, r3
 80083d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083d6:	2a39      	cmp	r2, #57	; 0x39
 80083d8:	d106      	bne.n	80083e8 <_dtoa_r+0x700>
 80083da:	9a00      	ldr	r2, [sp, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d1f7      	bne.n	80083d0 <_dtoa_r+0x6e8>
 80083e0:	9900      	ldr	r1, [sp, #0]
 80083e2:	2230      	movs	r2, #48	; 0x30
 80083e4:	3701      	adds	r7, #1
 80083e6:	700a      	strb	r2, [r1, #0]
 80083e8:	781a      	ldrb	r2, [r3, #0]
 80083ea:	3201      	adds	r2, #1
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e790      	b.n	8008312 <_dtoa_r+0x62a>
 80083f0:	4ba3      	ldr	r3, [pc, #652]	; (8008680 <_dtoa_r+0x998>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	f7f8 f908 	bl	8000608 <__aeabi_dmul>
 80083f8:	2200      	movs	r2, #0
 80083fa:	2300      	movs	r3, #0
 80083fc:	4606      	mov	r6, r0
 80083fe:	460f      	mov	r7, r1
 8008400:	f7f8 fb6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008404:	2800      	cmp	r0, #0
 8008406:	d09e      	beq.n	8008346 <_dtoa_r+0x65e>
 8008408:	e7d0      	b.n	80083ac <_dtoa_r+0x6c4>
 800840a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800840c:	2a00      	cmp	r2, #0
 800840e:	f000 80ca 	beq.w	80085a6 <_dtoa_r+0x8be>
 8008412:	9a07      	ldr	r2, [sp, #28]
 8008414:	2a01      	cmp	r2, #1
 8008416:	f300 80ad 	bgt.w	8008574 <_dtoa_r+0x88c>
 800841a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800841c:	2a00      	cmp	r2, #0
 800841e:	f000 80a5 	beq.w	800856c <_dtoa_r+0x884>
 8008422:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008426:	9e08      	ldr	r6, [sp, #32]
 8008428:	9d05      	ldr	r5, [sp, #20]
 800842a:	9a05      	ldr	r2, [sp, #20]
 800842c:	441a      	add	r2, r3
 800842e:	9205      	str	r2, [sp, #20]
 8008430:	9a06      	ldr	r2, [sp, #24]
 8008432:	2101      	movs	r1, #1
 8008434:	441a      	add	r2, r3
 8008436:	4620      	mov	r0, r4
 8008438:	9206      	str	r2, [sp, #24]
 800843a:	f000 fc3d 	bl	8008cb8 <__i2b>
 800843e:	4607      	mov	r7, r0
 8008440:	b165      	cbz	r5, 800845c <_dtoa_r+0x774>
 8008442:	9b06      	ldr	r3, [sp, #24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	dd09      	ble.n	800845c <_dtoa_r+0x774>
 8008448:	42ab      	cmp	r3, r5
 800844a:	9a05      	ldr	r2, [sp, #20]
 800844c:	bfa8      	it	ge
 800844e:	462b      	movge	r3, r5
 8008450:	1ad2      	subs	r2, r2, r3
 8008452:	9205      	str	r2, [sp, #20]
 8008454:	9a06      	ldr	r2, [sp, #24]
 8008456:	1aed      	subs	r5, r5, r3
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	9306      	str	r3, [sp, #24]
 800845c:	9b08      	ldr	r3, [sp, #32]
 800845e:	b1f3      	cbz	r3, 800849e <_dtoa_r+0x7b6>
 8008460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80a3 	beq.w	80085ae <_dtoa_r+0x8c6>
 8008468:	2e00      	cmp	r6, #0
 800846a:	dd10      	ble.n	800848e <_dtoa_r+0x7a6>
 800846c:	4639      	mov	r1, r7
 800846e:	4632      	mov	r2, r6
 8008470:	4620      	mov	r0, r4
 8008472:	f000 fce1 	bl	8008e38 <__pow5mult>
 8008476:	4652      	mov	r2, sl
 8008478:	4601      	mov	r1, r0
 800847a:	4607      	mov	r7, r0
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fc31 	bl	8008ce4 <__multiply>
 8008482:	4651      	mov	r1, sl
 8008484:	4680      	mov	r8, r0
 8008486:	4620      	mov	r0, r4
 8008488:	f000 fb60 	bl	8008b4c <_Bfree>
 800848c:	46c2      	mov	sl, r8
 800848e:	9b08      	ldr	r3, [sp, #32]
 8008490:	1b9a      	subs	r2, r3, r6
 8008492:	d004      	beq.n	800849e <_dtoa_r+0x7b6>
 8008494:	4651      	mov	r1, sl
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fcce 	bl	8008e38 <__pow5mult>
 800849c:	4682      	mov	sl, r0
 800849e:	2101      	movs	r1, #1
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fc09 	bl	8008cb8 <__i2b>
 80084a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	4606      	mov	r6, r0
 80084ac:	f340 8081 	ble.w	80085b2 <_dtoa_r+0x8ca>
 80084b0:	461a      	mov	r2, r3
 80084b2:	4601      	mov	r1, r0
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 fcbf 	bl	8008e38 <__pow5mult>
 80084ba:	9b07      	ldr	r3, [sp, #28]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	4606      	mov	r6, r0
 80084c0:	dd7a      	ble.n	80085b8 <_dtoa_r+0x8d0>
 80084c2:	f04f 0800 	mov.w	r8, #0
 80084c6:	6933      	ldr	r3, [r6, #16]
 80084c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084cc:	6918      	ldr	r0, [r3, #16]
 80084ce:	f000 fba5 	bl	8008c1c <__hi0bits>
 80084d2:	f1c0 0020 	rsb	r0, r0, #32
 80084d6:	9b06      	ldr	r3, [sp, #24]
 80084d8:	4418      	add	r0, r3
 80084da:	f010 001f 	ands.w	r0, r0, #31
 80084de:	f000 8094 	beq.w	800860a <_dtoa_r+0x922>
 80084e2:	f1c0 0320 	rsb	r3, r0, #32
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	f340 8085 	ble.w	80085f6 <_dtoa_r+0x90e>
 80084ec:	9b05      	ldr	r3, [sp, #20]
 80084ee:	f1c0 001c 	rsb	r0, r0, #28
 80084f2:	4403      	add	r3, r0
 80084f4:	9305      	str	r3, [sp, #20]
 80084f6:	9b06      	ldr	r3, [sp, #24]
 80084f8:	4403      	add	r3, r0
 80084fa:	4405      	add	r5, r0
 80084fc:	9306      	str	r3, [sp, #24]
 80084fe:	9b05      	ldr	r3, [sp, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	dd05      	ble.n	8008510 <_dtoa_r+0x828>
 8008504:	4651      	mov	r1, sl
 8008506:	461a      	mov	r2, r3
 8008508:	4620      	mov	r0, r4
 800850a:	f000 fcef 	bl	8008eec <__lshift>
 800850e:	4682      	mov	sl, r0
 8008510:	9b06      	ldr	r3, [sp, #24]
 8008512:	2b00      	cmp	r3, #0
 8008514:	dd05      	ble.n	8008522 <_dtoa_r+0x83a>
 8008516:	4631      	mov	r1, r6
 8008518:	461a      	mov	r2, r3
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fce6 	bl	8008eec <__lshift>
 8008520:	4606      	mov	r6, r0
 8008522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008524:	2b00      	cmp	r3, #0
 8008526:	d072      	beq.n	800860e <_dtoa_r+0x926>
 8008528:	4631      	mov	r1, r6
 800852a:	4650      	mov	r0, sl
 800852c:	f000 fd4a 	bl	8008fc4 <__mcmp>
 8008530:	2800      	cmp	r0, #0
 8008532:	da6c      	bge.n	800860e <_dtoa_r+0x926>
 8008534:	2300      	movs	r3, #0
 8008536:	4651      	mov	r1, sl
 8008538:	220a      	movs	r2, #10
 800853a:	4620      	mov	r0, r4
 800853c:	f000 fb28 	bl	8008b90 <__multadd>
 8008540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008542:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008546:	4682      	mov	sl, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 81b0 	beq.w	80088ae <_dtoa_r+0xbc6>
 800854e:	2300      	movs	r3, #0
 8008550:	4639      	mov	r1, r7
 8008552:	220a      	movs	r2, #10
 8008554:	4620      	mov	r0, r4
 8008556:	f000 fb1b 	bl	8008b90 <__multadd>
 800855a:	9b01      	ldr	r3, [sp, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	4607      	mov	r7, r0
 8008560:	f300 8096 	bgt.w	8008690 <_dtoa_r+0x9a8>
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	2b02      	cmp	r3, #2
 8008568:	dc59      	bgt.n	800861e <_dtoa_r+0x936>
 800856a:	e091      	b.n	8008690 <_dtoa_r+0x9a8>
 800856c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800856e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008572:	e758      	b.n	8008426 <_dtoa_r+0x73e>
 8008574:	9b04      	ldr	r3, [sp, #16]
 8008576:	1e5e      	subs	r6, r3, #1
 8008578:	9b08      	ldr	r3, [sp, #32]
 800857a:	42b3      	cmp	r3, r6
 800857c:	bfbf      	itttt	lt
 800857e:	9b08      	ldrlt	r3, [sp, #32]
 8008580:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008582:	9608      	strlt	r6, [sp, #32]
 8008584:	1af3      	sublt	r3, r6, r3
 8008586:	bfb4      	ite	lt
 8008588:	18d2      	addlt	r2, r2, r3
 800858a:	1b9e      	subge	r6, r3, r6
 800858c:	9b04      	ldr	r3, [sp, #16]
 800858e:	bfbc      	itt	lt
 8008590:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008592:	2600      	movlt	r6, #0
 8008594:	2b00      	cmp	r3, #0
 8008596:	bfb7      	itett	lt
 8008598:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800859c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80085a0:	1a9d      	sublt	r5, r3, r2
 80085a2:	2300      	movlt	r3, #0
 80085a4:	e741      	b.n	800842a <_dtoa_r+0x742>
 80085a6:	9e08      	ldr	r6, [sp, #32]
 80085a8:	9d05      	ldr	r5, [sp, #20]
 80085aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80085ac:	e748      	b.n	8008440 <_dtoa_r+0x758>
 80085ae:	9a08      	ldr	r2, [sp, #32]
 80085b0:	e770      	b.n	8008494 <_dtoa_r+0x7ac>
 80085b2:	9b07      	ldr	r3, [sp, #28]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	dc19      	bgt.n	80085ec <_dtoa_r+0x904>
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	b9bb      	cbnz	r3, 80085ec <_dtoa_r+0x904>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085c2:	b99b      	cbnz	r3, 80085ec <_dtoa_r+0x904>
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085ca:	0d1b      	lsrs	r3, r3, #20
 80085cc:	051b      	lsls	r3, r3, #20
 80085ce:	b183      	cbz	r3, 80085f2 <_dtoa_r+0x90a>
 80085d0:	9b05      	ldr	r3, [sp, #20]
 80085d2:	3301      	adds	r3, #1
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	9b06      	ldr	r3, [sp, #24]
 80085d8:	3301      	adds	r3, #1
 80085da:	9306      	str	r3, [sp, #24]
 80085dc:	f04f 0801 	mov.w	r8, #1
 80085e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f47f af6f 	bne.w	80084c6 <_dtoa_r+0x7de>
 80085e8:	2001      	movs	r0, #1
 80085ea:	e774      	b.n	80084d6 <_dtoa_r+0x7ee>
 80085ec:	f04f 0800 	mov.w	r8, #0
 80085f0:	e7f6      	b.n	80085e0 <_dtoa_r+0x8f8>
 80085f2:	4698      	mov	r8, r3
 80085f4:	e7f4      	b.n	80085e0 <_dtoa_r+0x8f8>
 80085f6:	d082      	beq.n	80084fe <_dtoa_r+0x816>
 80085f8:	9a05      	ldr	r2, [sp, #20]
 80085fa:	331c      	adds	r3, #28
 80085fc:	441a      	add	r2, r3
 80085fe:	9205      	str	r2, [sp, #20]
 8008600:	9a06      	ldr	r2, [sp, #24]
 8008602:	441a      	add	r2, r3
 8008604:	441d      	add	r5, r3
 8008606:	9206      	str	r2, [sp, #24]
 8008608:	e779      	b.n	80084fe <_dtoa_r+0x816>
 800860a:	4603      	mov	r3, r0
 800860c:	e7f4      	b.n	80085f8 <_dtoa_r+0x910>
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	dc37      	bgt.n	8008684 <_dtoa_r+0x99c>
 8008614:	9b07      	ldr	r3, [sp, #28]
 8008616:	2b02      	cmp	r3, #2
 8008618:	dd34      	ble.n	8008684 <_dtoa_r+0x99c>
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	9b01      	ldr	r3, [sp, #4]
 8008620:	b963      	cbnz	r3, 800863c <_dtoa_r+0x954>
 8008622:	4631      	mov	r1, r6
 8008624:	2205      	movs	r2, #5
 8008626:	4620      	mov	r0, r4
 8008628:	f000 fab2 	bl	8008b90 <__multadd>
 800862c:	4601      	mov	r1, r0
 800862e:	4606      	mov	r6, r0
 8008630:	4650      	mov	r0, sl
 8008632:	f000 fcc7 	bl	8008fc4 <__mcmp>
 8008636:	2800      	cmp	r0, #0
 8008638:	f73f adbb 	bgt.w	80081b2 <_dtoa_r+0x4ca>
 800863c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800863e:	9d00      	ldr	r5, [sp, #0]
 8008640:	ea6f 0b03 	mvn.w	fp, r3
 8008644:	f04f 0800 	mov.w	r8, #0
 8008648:	4631      	mov	r1, r6
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fa7e 	bl	8008b4c <_Bfree>
 8008650:	2f00      	cmp	r7, #0
 8008652:	f43f aeab 	beq.w	80083ac <_dtoa_r+0x6c4>
 8008656:	f1b8 0f00 	cmp.w	r8, #0
 800865a:	d005      	beq.n	8008668 <_dtoa_r+0x980>
 800865c:	45b8      	cmp	r8, r7
 800865e:	d003      	beq.n	8008668 <_dtoa_r+0x980>
 8008660:	4641      	mov	r1, r8
 8008662:	4620      	mov	r0, r4
 8008664:	f000 fa72 	bl	8008b4c <_Bfree>
 8008668:	4639      	mov	r1, r7
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fa6e 	bl	8008b4c <_Bfree>
 8008670:	e69c      	b.n	80083ac <_dtoa_r+0x6c4>
 8008672:	2600      	movs	r6, #0
 8008674:	4637      	mov	r7, r6
 8008676:	e7e1      	b.n	800863c <_dtoa_r+0x954>
 8008678:	46bb      	mov	fp, r7
 800867a:	4637      	mov	r7, r6
 800867c:	e599      	b.n	80081b2 <_dtoa_r+0x4ca>
 800867e:	bf00      	nop
 8008680:	40240000 	.word	0x40240000
 8008684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80c8 	beq.w	800881c <_dtoa_r+0xb34>
 800868c:	9b04      	ldr	r3, [sp, #16]
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	2d00      	cmp	r5, #0
 8008692:	dd05      	ble.n	80086a0 <_dtoa_r+0x9b8>
 8008694:	4639      	mov	r1, r7
 8008696:	462a      	mov	r2, r5
 8008698:	4620      	mov	r0, r4
 800869a:	f000 fc27 	bl	8008eec <__lshift>
 800869e:	4607      	mov	r7, r0
 80086a0:	f1b8 0f00 	cmp.w	r8, #0
 80086a4:	d05b      	beq.n	800875e <_dtoa_r+0xa76>
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fa0f 	bl	8008acc <_Balloc>
 80086ae:	4605      	mov	r5, r0
 80086b0:	b928      	cbnz	r0, 80086be <_dtoa_r+0x9d6>
 80086b2:	4b83      	ldr	r3, [pc, #524]	; (80088c0 <_dtoa_r+0xbd8>)
 80086b4:	4602      	mov	r2, r0
 80086b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80086ba:	f7ff bb2e 	b.w	8007d1a <_dtoa_r+0x32>
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	3202      	adds	r2, #2
 80086c2:	0092      	lsls	r2, r2, #2
 80086c4:	f107 010c 	add.w	r1, r7, #12
 80086c8:	300c      	adds	r0, #12
 80086ca:	f7ff fa74 	bl	8007bb6 <memcpy>
 80086ce:	2201      	movs	r2, #1
 80086d0:	4629      	mov	r1, r5
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 fc0a 	bl	8008eec <__lshift>
 80086d8:	9b00      	ldr	r3, [sp, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	9304      	str	r3, [sp, #16]
 80086de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086e2:	4413      	add	r3, r2
 80086e4:	9308      	str	r3, [sp, #32]
 80086e6:	9b02      	ldr	r3, [sp, #8]
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	46b8      	mov	r8, r7
 80086ee:	9306      	str	r3, [sp, #24]
 80086f0:	4607      	mov	r7, r0
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	4631      	mov	r1, r6
 80086f6:	3b01      	subs	r3, #1
 80086f8:	4650      	mov	r0, sl
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	f7ff fa69 	bl	8007bd2 <quorem>
 8008700:	4641      	mov	r1, r8
 8008702:	9002      	str	r0, [sp, #8]
 8008704:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008708:	4650      	mov	r0, sl
 800870a:	f000 fc5b 	bl	8008fc4 <__mcmp>
 800870e:	463a      	mov	r2, r7
 8008710:	9005      	str	r0, [sp, #20]
 8008712:	4631      	mov	r1, r6
 8008714:	4620      	mov	r0, r4
 8008716:	f000 fc71 	bl	8008ffc <__mdiff>
 800871a:	68c2      	ldr	r2, [r0, #12]
 800871c:	4605      	mov	r5, r0
 800871e:	bb02      	cbnz	r2, 8008762 <_dtoa_r+0xa7a>
 8008720:	4601      	mov	r1, r0
 8008722:	4650      	mov	r0, sl
 8008724:	f000 fc4e 	bl	8008fc4 <__mcmp>
 8008728:	4602      	mov	r2, r0
 800872a:	4629      	mov	r1, r5
 800872c:	4620      	mov	r0, r4
 800872e:	9209      	str	r2, [sp, #36]	; 0x24
 8008730:	f000 fa0c 	bl	8008b4c <_Bfree>
 8008734:	9b07      	ldr	r3, [sp, #28]
 8008736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008738:	9d04      	ldr	r5, [sp, #16]
 800873a:	ea43 0102 	orr.w	r1, r3, r2
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	4319      	orrs	r1, r3
 8008742:	d110      	bne.n	8008766 <_dtoa_r+0xa7e>
 8008744:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008748:	d029      	beq.n	800879e <_dtoa_r+0xab6>
 800874a:	9b05      	ldr	r3, [sp, #20]
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd02      	ble.n	8008756 <_dtoa_r+0xa6e>
 8008750:	9b02      	ldr	r3, [sp, #8]
 8008752:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008756:	9b01      	ldr	r3, [sp, #4]
 8008758:	f883 9000 	strb.w	r9, [r3]
 800875c:	e774      	b.n	8008648 <_dtoa_r+0x960>
 800875e:	4638      	mov	r0, r7
 8008760:	e7ba      	b.n	80086d8 <_dtoa_r+0x9f0>
 8008762:	2201      	movs	r2, #1
 8008764:	e7e1      	b.n	800872a <_dtoa_r+0xa42>
 8008766:	9b05      	ldr	r3, [sp, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	db04      	blt.n	8008776 <_dtoa_r+0xa8e>
 800876c:	9907      	ldr	r1, [sp, #28]
 800876e:	430b      	orrs	r3, r1
 8008770:	9906      	ldr	r1, [sp, #24]
 8008772:	430b      	orrs	r3, r1
 8008774:	d120      	bne.n	80087b8 <_dtoa_r+0xad0>
 8008776:	2a00      	cmp	r2, #0
 8008778:	dded      	ble.n	8008756 <_dtoa_r+0xa6e>
 800877a:	4651      	mov	r1, sl
 800877c:	2201      	movs	r2, #1
 800877e:	4620      	mov	r0, r4
 8008780:	f000 fbb4 	bl	8008eec <__lshift>
 8008784:	4631      	mov	r1, r6
 8008786:	4682      	mov	sl, r0
 8008788:	f000 fc1c 	bl	8008fc4 <__mcmp>
 800878c:	2800      	cmp	r0, #0
 800878e:	dc03      	bgt.n	8008798 <_dtoa_r+0xab0>
 8008790:	d1e1      	bne.n	8008756 <_dtoa_r+0xa6e>
 8008792:	f019 0f01 	tst.w	r9, #1
 8008796:	d0de      	beq.n	8008756 <_dtoa_r+0xa6e>
 8008798:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800879c:	d1d8      	bne.n	8008750 <_dtoa_r+0xa68>
 800879e:	9a01      	ldr	r2, [sp, #4]
 80087a0:	2339      	movs	r3, #57	; 0x39
 80087a2:	7013      	strb	r3, [r2, #0]
 80087a4:	462b      	mov	r3, r5
 80087a6:	461d      	mov	r5, r3
 80087a8:	3b01      	subs	r3, #1
 80087aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087ae:	2a39      	cmp	r2, #57	; 0x39
 80087b0:	d06c      	beq.n	800888c <_dtoa_r+0xba4>
 80087b2:	3201      	adds	r2, #1
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	e747      	b.n	8008648 <_dtoa_r+0x960>
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	dd07      	ble.n	80087cc <_dtoa_r+0xae4>
 80087bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80087c0:	d0ed      	beq.n	800879e <_dtoa_r+0xab6>
 80087c2:	9a01      	ldr	r2, [sp, #4]
 80087c4:	f109 0301 	add.w	r3, r9, #1
 80087c8:	7013      	strb	r3, [r2, #0]
 80087ca:	e73d      	b.n	8008648 <_dtoa_r+0x960>
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	9a08      	ldr	r2, [sp, #32]
 80087d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d043      	beq.n	8008860 <_dtoa_r+0xb78>
 80087d8:	4651      	mov	r1, sl
 80087da:	2300      	movs	r3, #0
 80087dc:	220a      	movs	r2, #10
 80087de:	4620      	mov	r0, r4
 80087e0:	f000 f9d6 	bl	8008b90 <__multadd>
 80087e4:	45b8      	cmp	r8, r7
 80087e6:	4682      	mov	sl, r0
 80087e8:	f04f 0300 	mov.w	r3, #0
 80087ec:	f04f 020a 	mov.w	r2, #10
 80087f0:	4641      	mov	r1, r8
 80087f2:	4620      	mov	r0, r4
 80087f4:	d107      	bne.n	8008806 <_dtoa_r+0xb1e>
 80087f6:	f000 f9cb 	bl	8008b90 <__multadd>
 80087fa:	4680      	mov	r8, r0
 80087fc:	4607      	mov	r7, r0
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	3301      	adds	r3, #1
 8008802:	9304      	str	r3, [sp, #16]
 8008804:	e775      	b.n	80086f2 <_dtoa_r+0xa0a>
 8008806:	f000 f9c3 	bl	8008b90 <__multadd>
 800880a:	4639      	mov	r1, r7
 800880c:	4680      	mov	r8, r0
 800880e:	2300      	movs	r3, #0
 8008810:	220a      	movs	r2, #10
 8008812:	4620      	mov	r0, r4
 8008814:	f000 f9bc 	bl	8008b90 <__multadd>
 8008818:	4607      	mov	r7, r0
 800881a:	e7f0      	b.n	80087fe <_dtoa_r+0xb16>
 800881c:	9b04      	ldr	r3, [sp, #16]
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	9d00      	ldr	r5, [sp, #0]
 8008822:	4631      	mov	r1, r6
 8008824:	4650      	mov	r0, sl
 8008826:	f7ff f9d4 	bl	8007bd2 <quorem>
 800882a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	f805 9b01 	strb.w	r9, [r5], #1
 8008834:	1aea      	subs	r2, r5, r3
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	4293      	cmp	r3, r2
 800883a:	dd07      	ble.n	800884c <_dtoa_r+0xb64>
 800883c:	4651      	mov	r1, sl
 800883e:	2300      	movs	r3, #0
 8008840:	220a      	movs	r2, #10
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f9a4 	bl	8008b90 <__multadd>
 8008848:	4682      	mov	sl, r0
 800884a:	e7ea      	b.n	8008822 <_dtoa_r+0xb3a>
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	bfc8      	it	gt
 8008852:	461d      	movgt	r5, r3
 8008854:	9b00      	ldr	r3, [sp, #0]
 8008856:	bfd8      	it	le
 8008858:	2501      	movle	r5, #1
 800885a:	441d      	add	r5, r3
 800885c:	f04f 0800 	mov.w	r8, #0
 8008860:	4651      	mov	r1, sl
 8008862:	2201      	movs	r2, #1
 8008864:	4620      	mov	r0, r4
 8008866:	f000 fb41 	bl	8008eec <__lshift>
 800886a:	4631      	mov	r1, r6
 800886c:	4682      	mov	sl, r0
 800886e:	f000 fba9 	bl	8008fc4 <__mcmp>
 8008872:	2800      	cmp	r0, #0
 8008874:	dc96      	bgt.n	80087a4 <_dtoa_r+0xabc>
 8008876:	d102      	bne.n	800887e <_dtoa_r+0xb96>
 8008878:	f019 0f01 	tst.w	r9, #1
 800887c:	d192      	bne.n	80087a4 <_dtoa_r+0xabc>
 800887e:	462b      	mov	r3, r5
 8008880:	461d      	mov	r5, r3
 8008882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008886:	2a30      	cmp	r2, #48	; 0x30
 8008888:	d0fa      	beq.n	8008880 <_dtoa_r+0xb98>
 800888a:	e6dd      	b.n	8008648 <_dtoa_r+0x960>
 800888c:	9a00      	ldr	r2, [sp, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d189      	bne.n	80087a6 <_dtoa_r+0xabe>
 8008892:	f10b 0b01 	add.w	fp, fp, #1
 8008896:	2331      	movs	r3, #49	; 0x31
 8008898:	e796      	b.n	80087c8 <_dtoa_r+0xae0>
 800889a:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <_dtoa_r+0xbdc>)
 800889c:	f7ff ba99 	b.w	8007dd2 <_dtoa_r+0xea>
 80088a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f47f aa6d 	bne.w	8007d82 <_dtoa_r+0x9a>
 80088a8:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <_dtoa_r+0xbe0>)
 80088aa:	f7ff ba92 	b.w	8007dd2 <_dtoa_r+0xea>
 80088ae:	9b01      	ldr	r3, [sp, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dcb5      	bgt.n	8008820 <_dtoa_r+0xb38>
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	f73f aeb1 	bgt.w	800861e <_dtoa_r+0x936>
 80088bc:	e7b0      	b.n	8008820 <_dtoa_r+0xb38>
 80088be:	bf00      	nop
 80088c0:	0800ac76 	.word	0x0800ac76
 80088c4:	0800ae03 	.word	0x0800ae03
 80088c8:	0800abfa 	.word	0x0800abfa

080088cc <_free_r>:
 80088cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ce:	2900      	cmp	r1, #0
 80088d0:	d044      	beq.n	800895c <_free_r+0x90>
 80088d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088d6:	9001      	str	r0, [sp, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f1a1 0404 	sub.w	r4, r1, #4
 80088de:	bfb8      	it	lt
 80088e0:	18e4      	addlt	r4, r4, r3
 80088e2:	f000 f8e7 	bl	8008ab4 <__malloc_lock>
 80088e6:	4a1e      	ldr	r2, [pc, #120]	; (8008960 <_free_r+0x94>)
 80088e8:	9801      	ldr	r0, [sp, #4]
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	b933      	cbnz	r3, 80088fc <_free_r+0x30>
 80088ee:	6063      	str	r3, [r4, #4]
 80088f0:	6014      	str	r4, [r2, #0]
 80088f2:	b003      	add	sp, #12
 80088f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088f8:	f000 b8e2 	b.w	8008ac0 <__malloc_unlock>
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d908      	bls.n	8008912 <_free_r+0x46>
 8008900:	6825      	ldr	r5, [r4, #0]
 8008902:	1961      	adds	r1, r4, r5
 8008904:	428b      	cmp	r3, r1
 8008906:	bf01      	itttt	eq
 8008908:	6819      	ldreq	r1, [r3, #0]
 800890a:	685b      	ldreq	r3, [r3, #4]
 800890c:	1949      	addeq	r1, r1, r5
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	e7ed      	b.n	80088ee <_free_r+0x22>
 8008912:	461a      	mov	r2, r3
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	b10b      	cbz	r3, 800891c <_free_r+0x50>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d9fa      	bls.n	8008912 <_free_r+0x46>
 800891c:	6811      	ldr	r1, [r2, #0]
 800891e:	1855      	adds	r5, r2, r1
 8008920:	42a5      	cmp	r5, r4
 8008922:	d10b      	bne.n	800893c <_free_r+0x70>
 8008924:	6824      	ldr	r4, [r4, #0]
 8008926:	4421      	add	r1, r4
 8008928:	1854      	adds	r4, r2, r1
 800892a:	42a3      	cmp	r3, r4
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	d1e0      	bne.n	80088f2 <_free_r+0x26>
 8008930:	681c      	ldr	r4, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	6053      	str	r3, [r2, #4]
 8008936:	440c      	add	r4, r1
 8008938:	6014      	str	r4, [r2, #0]
 800893a:	e7da      	b.n	80088f2 <_free_r+0x26>
 800893c:	d902      	bls.n	8008944 <_free_r+0x78>
 800893e:	230c      	movs	r3, #12
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	e7d6      	b.n	80088f2 <_free_r+0x26>
 8008944:	6825      	ldr	r5, [r4, #0]
 8008946:	1961      	adds	r1, r4, r5
 8008948:	428b      	cmp	r3, r1
 800894a:	bf04      	itt	eq
 800894c:	6819      	ldreq	r1, [r3, #0]
 800894e:	685b      	ldreq	r3, [r3, #4]
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	bf04      	itt	eq
 8008954:	1949      	addeq	r1, r1, r5
 8008956:	6021      	streq	r1, [r4, #0]
 8008958:	6054      	str	r4, [r2, #4]
 800895a:	e7ca      	b.n	80088f2 <_free_r+0x26>
 800895c:	b003      	add	sp, #12
 800895e:	bd30      	pop	{r4, r5, pc}
 8008960:	20002738 	.word	0x20002738

08008964 <malloc>:
 8008964:	4b02      	ldr	r3, [pc, #8]	; (8008970 <malloc+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f000 b823 	b.w	80089b4 <_malloc_r>
 800896e:	bf00      	nop
 8008970:	20000150 	.word	0x20000150

08008974 <sbrk_aligned>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4e0e      	ldr	r6, [pc, #56]	; (80089b0 <sbrk_aligned+0x3c>)
 8008978:	460c      	mov	r4, r1
 800897a:	6831      	ldr	r1, [r6, #0]
 800897c:	4605      	mov	r5, r0
 800897e:	b911      	cbnz	r1, 8008986 <sbrk_aligned+0x12>
 8008980:	f001 f9ba 	bl	8009cf8 <_sbrk_r>
 8008984:	6030      	str	r0, [r6, #0]
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f001 f9b5 	bl	8009cf8 <_sbrk_r>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	d00a      	beq.n	80089a8 <sbrk_aligned+0x34>
 8008992:	1cc4      	adds	r4, r0, #3
 8008994:	f024 0403 	bic.w	r4, r4, #3
 8008998:	42a0      	cmp	r0, r4
 800899a:	d007      	beq.n	80089ac <sbrk_aligned+0x38>
 800899c:	1a21      	subs	r1, r4, r0
 800899e:	4628      	mov	r0, r5
 80089a0:	f001 f9aa 	bl	8009cf8 <_sbrk_r>
 80089a4:	3001      	adds	r0, #1
 80089a6:	d101      	bne.n	80089ac <sbrk_aligned+0x38>
 80089a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089ac:	4620      	mov	r0, r4
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	2000273c 	.word	0x2000273c

080089b4 <_malloc_r>:
 80089b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b8:	1ccd      	adds	r5, r1, #3
 80089ba:	f025 0503 	bic.w	r5, r5, #3
 80089be:	3508      	adds	r5, #8
 80089c0:	2d0c      	cmp	r5, #12
 80089c2:	bf38      	it	cc
 80089c4:	250c      	movcc	r5, #12
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	4607      	mov	r7, r0
 80089ca:	db01      	blt.n	80089d0 <_malloc_r+0x1c>
 80089cc:	42a9      	cmp	r1, r5
 80089ce:	d905      	bls.n	80089dc <_malloc_r+0x28>
 80089d0:	230c      	movs	r3, #12
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	2600      	movs	r6, #0
 80089d6:	4630      	mov	r0, r6
 80089d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ab0 <_malloc_r+0xfc>
 80089e0:	f000 f868 	bl	8008ab4 <__malloc_lock>
 80089e4:	f8d8 3000 	ldr.w	r3, [r8]
 80089e8:	461c      	mov	r4, r3
 80089ea:	bb5c      	cbnz	r4, 8008a44 <_malloc_r+0x90>
 80089ec:	4629      	mov	r1, r5
 80089ee:	4638      	mov	r0, r7
 80089f0:	f7ff ffc0 	bl	8008974 <sbrk_aligned>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	4604      	mov	r4, r0
 80089f8:	d155      	bne.n	8008aa6 <_malloc_r+0xf2>
 80089fa:	f8d8 4000 	ldr.w	r4, [r8]
 80089fe:	4626      	mov	r6, r4
 8008a00:	2e00      	cmp	r6, #0
 8008a02:	d145      	bne.n	8008a90 <_malloc_r+0xdc>
 8008a04:	2c00      	cmp	r4, #0
 8008a06:	d048      	beq.n	8008a9a <_malloc_r+0xe6>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	eb04 0903 	add.w	r9, r4, r3
 8008a12:	f001 f971 	bl	8009cf8 <_sbrk_r>
 8008a16:	4581      	cmp	r9, r0
 8008a18:	d13f      	bne.n	8008a9a <_malloc_r+0xe6>
 8008a1a:	6821      	ldr	r1, [r4, #0]
 8008a1c:	1a6d      	subs	r5, r5, r1
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7ff ffa7 	bl	8008974 <sbrk_aligned>
 8008a26:	3001      	adds	r0, #1
 8008a28:	d037      	beq.n	8008a9a <_malloc_r+0xe6>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	442b      	add	r3, r5
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	f8d8 3000 	ldr.w	r3, [r8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d038      	beq.n	8008aaa <_malloc_r+0xf6>
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	42a2      	cmp	r2, r4
 8008a3c:	d12b      	bne.n	8008a96 <_malloc_r+0xe2>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	605a      	str	r2, [r3, #4]
 8008a42:	e00f      	b.n	8008a64 <_malloc_r+0xb0>
 8008a44:	6822      	ldr	r2, [r4, #0]
 8008a46:	1b52      	subs	r2, r2, r5
 8008a48:	d41f      	bmi.n	8008a8a <_malloc_r+0xd6>
 8008a4a:	2a0b      	cmp	r2, #11
 8008a4c:	d917      	bls.n	8008a7e <_malloc_r+0xca>
 8008a4e:	1961      	adds	r1, r4, r5
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	6025      	str	r5, [r4, #0]
 8008a54:	bf18      	it	ne
 8008a56:	6059      	strne	r1, [r3, #4]
 8008a58:	6863      	ldr	r3, [r4, #4]
 8008a5a:	bf08      	it	eq
 8008a5c:	f8c8 1000 	streq.w	r1, [r8]
 8008a60:	5162      	str	r2, [r4, r5]
 8008a62:	604b      	str	r3, [r1, #4]
 8008a64:	4638      	mov	r0, r7
 8008a66:	f104 060b 	add.w	r6, r4, #11
 8008a6a:	f000 f829 	bl	8008ac0 <__malloc_unlock>
 8008a6e:	f026 0607 	bic.w	r6, r6, #7
 8008a72:	1d23      	adds	r3, r4, #4
 8008a74:	1af2      	subs	r2, r6, r3
 8008a76:	d0ae      	beq.n	80089d6 <_malloc_r+0x22>
 8008a78:	1b9b      	subs	r3, r3, r6
 8008a7a:	50a3      	str	r3, [r4, r2]
 8008a7c:	e7ab      	b.n	80089d6 <_malloc_r+0x22>
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	6862      	ldr	r2, [r4, #4]
 8008a82:	d1dd      	bne.n	8008a40 <_malloc_r+0x8c>
 8008a84:	f8c8 2000 	str.w	r2, [r8]
 8008a88:	e7ec      	b.n	8008a64 <_malloc_r+0xb0>
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	6864      	ldr	r4, [r4, #4]
 8008a8e:	e7ac      	b.n	80089ea <_malloc_r+0x36>
 8008a90:	4634      	mov	r4, r6
 8008a92:	6876      	ldr	r6, [r6, #4]
 8008a94:	e7b4      	b.n	8008a00 <_malloc_r+0x4c>
 8008a96:	4613      	mov	r3, r2
 8008a98:	e7cc      	b.n	8008a34 <_malloc_r+0x80>
 8008a9a:	230c      	movs	r3, #12
 8008a9c:	603b      	str	r3, [r7, #0]
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f000 f80e 	bl	8008ac0 <__malloc_unlock>
 8008aa4:	e797      	b.n	80089d6 <_malloc_r+0x22>
 8008aa6:	6025      	str	r5, [r4, #0]
 8008aa8:	e7dc      	b.n	8008a64 <_malloc_r+0xb0>
 8008aaa:	605b      	str	r3, [r3, #4]
 8008aac:	deff      	udf	#255	; 0xff
 8008aae:	bf00      	nop
 8008ab0:	20002738 	.word	0x20002738

08008ab4 <__malloc_lock>:
 8008ab4:	4801      	ldr	r0, [pc, #4]	; (8008abc <__malloc_lock+0x8>)
 8008ab6:	f7ff b87c 	b.w	8007bb2 <__retarget_lock_acquire_recursive>
 8008aba:	bf00      	nop
 8008abc:	20002734 	.word	0x20002734

08008ac0 <__malloc_unlock>:
 8008ac0:	4801      	ldr	r0, [pc, #4]	; (8008ac8 <__malloc_unlock+0x8>)
 8008ac2:	f7ff b877 	b.w	8007bb4 <__retarget_lock_release_recursive>
 8008ac6:	bf00      	nop
 8008ac8:	20002734 	.word	0x20002734

08008acc <_Balloc>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	69c6      	ldr	r6, [r0, #28]
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	b976      	cbnz	r6, 8008af4 <_Balloc+0x28>
 8008ad6:	2010      	movs	r0, #16
 8008ad8:	f7ff ff44 	bl	8008964 <malloc>
 8008adc:	4602      	mov	r2, r0
 8008ade:	61e0      	str	r0, [r4, #28]
 8008ae0:	b920      	cbnz	r0, 8008aec <_Balloc+0x20>
 8008ae2:	4b18      	ldr	r3, [pc, #96]	; (8008b44 <_Balloc+0x78>)
 8008ae4:	4818      	ldr	r0, [pc, #96]	; (8008b48 <_Balloc+0x7c>)
 8008ae6:	216b      	movs	r1, #107	; 0x6b
 8008ae8:	f001 f916 	bl	8009d18 <__assert_func>
 8008aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008af0:	6006      	str	r6, [r0, #0]
 8008af2:	60c6      	str	r6, [r0, #12]
 8008af4:	69e6      	ldr	r6, [r4, #28]
 8008af6:	68f3      	ldr	r3, [r6, #12]
 8008af8:	b183      	cbz	r3, 8008b1c <_Balloc+0x50>
 8008afa:	69e3      	ldr	r3, [r4, #28]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b02:	b9b8      	cbnz	r0, 8008b34 <_Balloc+0x68>
 8008b04:	2101      	movs	r1, #1
 8008b06:	fa01 f605 	lsl.w	r6, r1, r5
 8008b0a:	1d72      	adds	r2, r6, #5
 8008b0c:	0092      	lsls	r2, r2, #2
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f001 f920 	bl	8009d54 <_calloc_r>
 8008b14:	b160      	cbz	r0, 8008b30 <_Balloc+0x64>
 8008b16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b1a:	e00e      	b.n	8008b3a <_Balloc+0x6e>
 8008b1c:	2221      	movs	r2, #33	; 0x21
 8008b1e:	2104      	movs	r1, #4
 8008b20:	4620      	mov	r0, r4
 8008b22:	f001 f917 	bl	8009d54 <_calloc_r>
 8008b26:	69e3      	ldr	r3, [r4, #28]
 8008b28:	60f0      	str	r0, [r6, #12]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e4      	bne.n	8008afa <_Balloc+0x2e>
 8008b30:	2000      	movs	r0, #0
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	6802      	ldr	r2, [r0, #0]
 8008b36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b40:	e7f7      	b.n	8008b32 <_Balloc+0x66>
 8008b42:	bf00      	nop
 8008b44:	0800ac07 	.word	0x0800ac07
 8008b48:	0800ac87 	.word	0x0800ac87

08008b4c <_Bfree>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	69c6      	ldr	r6, [r0, #28]
 8008b50:	4605      	mov	r5, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	b976      	cbnz	r6, 8008b74 <_Bfree+0x28>
 8008b56:	2010      	movs	r0, #16
 8008b58:	f7ff ff04 	bl	8008964 <malloc>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	61e8      	str	r0, [r5, #28]
 8008b60:	b920      	cbnz	r0, 8008b6c <_Bfree+0x20>
 8008b62:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <_Bfree+0x3c>)
 8008b64:	4809      	ldr	r0, [pc, #36]	; (8008b8c <_Bfree+0x40>)
 8008b66:	218f      	movs	r1, #143	; 0x8f
 8008b68:	f001 f8d6 	bl	8009d18 <__assert_func>
 8008b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b70:	6006      	str	r6, [r0, #0]
 8008b72:	60c6      	str	r6, [r0, #12]
 8008b74:	b13c      	cbz	r4, 8008b86 <_Bfree+0x3a>
 8008b76:	69eb      	ldr	r3, [r5, #28]
 8008b78:	6862      	ldr	r2, [r4, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b80:	6021      	str	r1, [r4, #0]
 8008b82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	0800ac07 	.word	0x0800ac07
 8008b8c:	0800ac87 	.word	0x0800ac87

08008b90 <__multadd>:
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	690d      	ldr	r5, [r1, #16]
 8008b96:	4607      	mov	r7, r0
 8008b98:	460c      	mov	r4, r1
 8008b9a:	461e      	mov	r6, r3
 8008b9c:	f101 0c14 	add.w	ip, r1, #20
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ba6:	b299      	uxth	r1, r3
 8008ba8:	fb02 6101 	mla	r1, r2, r1, r6
 8008bac:	0c1e      	lsrs	r6, r3, #16
 8008bae:	0c0b      	lsrs	r3, r1, #16
 8008bb0:	fb02 3306 	mla	r3, r2, r6, r3
 8008bb4:	b289      	uxth	r1, r1
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bbc:	4285      	cmp	r5, r0
 8008bbe:	f84c 1b04 	str.w	r1, [ip], #4
 8008bc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bc6:	dcec      	bgt.n	8008ba2 <__multadd+0x12>
 8008bc8:	b30e      	cbz	r6, 8008c0e <__multadd+0x7e>
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	42ab      	cmp	r3, r5
 8008bce:	dc19      	bgt.n	8008c04 <__multadd+0x74>
 8008bd0:	6861      	ldr	r1, [r4, #4]
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	3101      	adds	r1, #1
 8008bd6:	f7ff ff79 	bl	8008acc <_Balloc>
 8008bda:	4680      	mov	r8, r0
 8008bdc:	b928      	cbnz	r0, 8008bea <__multadd+0x5a>
 8008bde:	4602      	mov	r2, r0
 8008be0:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <__multadd+0x84>)
 8008be2:	480d      	ldr	r0, [pc, #52]	; (8008c18 <__multadd+0x88>)
 8008be4:	21ba      	movs	r1, #186	; 0xba
 8008be6:	f001 f897 	bl	8009d18 <__assert_func>
 8008bea:	6922      	ldr	r2, [r4, #16]
 8008bec:	3202      	adds	r2, #2
 8008bee:	f104 010c 	add.w	r1, r4, #12
 8008bf2:	0092      	lsls	r2, r2, #2
 8008bf4:	300c      	adds	r0, #12
 8008bf6:	f7fe ffde 	bl	8007bb6 <memcpy>
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f7ff ffa5 	bl	8008b4c <_Bfree>
 8008c02:	4644      	mov	r4, r8
 8008c04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c08:	3501      	adds	r5, #1
 8008c0a:	615e      	str	r6, [r3, #20]
 8008c0c:	6125      	str	r5, [r4, #16]
 8008c0e:	4620      	mov	r0, r4
 8008c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c14:	0800ac76 	.word	0x0800ac76
 8008c18:	0800ac87 	.word	0x0800ac87

08008c1c <__hi0bits>:
 8008c1c:	0c03      	lsrs	r3, r0, #16
 8008c1e:	041b      	lsls	r3, r3, #16
 8008c20:	b9d3      	cbnz	r3, 8008c58 <__hi0bits+0x3c>
 8008c22:	0400      	lsls	r0, r0, #16
 8008c24:	2310      	movs	r3, #16
 8008c26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c2a:	bf04      	itt	eq
 8008c2c:	0200      	lsleq	r0, r0, #8
 8008c2e:	3308      	addeq	r3, #8
 8008c30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c34:	bf04      	itt	eq
 8008c36:	0100      	lsleq	r0, r0, #4
 8008c38:	3304      	addeq	r3, #4
 8008c3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c3e:	bf04      	itt	eq
 8008c40:	0080      	lsleq	r0, r0, #2
 8008c42:	3302      	addeq	r3, #2
 8008c44:	2800      	cmp	r0, #0
 8008c46:	db05      	blt.n	8008c54 <__hi0bits+0x38>
 8008c48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c4c:	f103 0301 	add.w	r3, r3, #1
 8008c50:	bf08      	it	eq
 8008c52:	2320      	moveq	r3, #32
 8008c54:	4618      	mov	r0, r3
 8008c56:	4770      	bx	lr
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e7e4      	b.n	8008c26 <__hi0bits+0xa>

08008c5c <__lo0bits>:
 8008c5c:	6803      	ldr	r3, [r0, #0]
 8008c5e:	f013 0207 	ands.w	r2, r3, #7
 8008c62:	d00c      	beq.n	8008c7e <__lo0bits+0x22>
 8008c64:	07d9      	lsls	r1, r3, #31
 8008c66:	d422      	bmi.n	8008cae <__lo0bits+0x52>
 8008c68:	079a      	lsls	r2, r3, #30
 8008c6a:	bf49      	itett	mi
 8008c6c:	085b      	lsrmi	r3, r3, #1
 8008c6e:	089b      	lsrpl	r3, r3, #2
 8008c70:	6003      	strmi	r3, [r0, #0]
 8008c72:	2201      	movmi	r2, #1
 8008c74:	bf5c      	itt	pl
 8008c76:	6003      	strpl	r3, [r0, #0]
 8008c78:	2202      	movpl	r2, #2
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4770      	bx	lr
 8008c7e:	b299      	uxth	r1, r3
 8008c80:	b909      	cbnz	r1, 8008c86 <__lo0bits+0x2a>
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	2210      	movs	r2, #16
 8008c86:	b2d9      	uxtb	r1, r3
 8008c88:	b909      	cbnz	r1, 8008c8e <__lo0bits+0x32>
 8008c8a:	3208      	adds	r2, #8
 8008c8c:	0a1b      	lsrs	r3, r3, #8
 8008c8e:	0719      	lsls	r1, r3, #28
 8008c90:	bf04      	itt	eq
 8008c92:	091b      	lsreq	r3, r3, #4
 8008c94:	3204      	addeq	r2, #4
 8008c96:	0799      	lsls	r1, r3, #30
 8008c98:	bf04      	itt	eq
 8008c9a:	089b      	lsreq	r3, r3, #2
 8008c9c:	3202      	addeq	r2, #2
 8008c9e:	07d9      	lsls	r1, r3, #31
 8008ca0:	d403      	bmi.n	8008caa <__lo0bits+0x4e>
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	f102 0201 	add.w	r2, r2, #1
 8008ca8:	d003      	beq.n	8008cb2 <__lo0bits+0x56>
 8008caa:	6003      	str	r3, [r0, #0]
 8008cac:	e7e5      	b.n	8008c7a <__lo0bits+0x1e>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	e7e3      	b.n	8008c7a <__lo0bits+0x1e>
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	e7e1      	b.n	8008c7a <__lo0bits+0x1e>
	...

08008cb8 <__i2b>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	460c      	mov	r4, r1
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	f7ff ff05 	bl	8008acc <_Balloc>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	b928      	cbnz	r0, 8008cd2 <__i2b+0x1a>
 8008cc6:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <__i2b+0x24>)
 8008cc8:	4805      	ldr	r0, [pc, #20]	; (8008ce0 <__i2b+0x28>)
 8008cca:	f240 1145 	movw	r1, #325	; 0x145
 8008cce:	f001 f823 	bl	8009d18 <__assert_func>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6144      	str	r4, [r0, #20]
 8008cd6:	6103      	str	r3, [r0, #16]
 8008cd8:	bd10      	pop	{r4, pc}
 8008cda:	bf00      	nop
 8008cdc:	0800ac76 	.word	0x0800ac76
 8008ce0:	0800ac87 	.word	0x0800ac87

08008ce4 <__multiply>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4691      	mov	r9, r2
 8008cea:	690a      	ldr	r2, [r1, #16]
 8008cec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	bfb8      	it	lt
 8008cf4:	460b      	movlt	r3, r1
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	bfbc      	itt	lt
 8008cfa:	464c      	movlt	r4, r9
 8008cfc:	4699      	movlt	r9, r3
 8008cfe:	6927      	ldr	r7, [r4, #16]
 8008d00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d04:	68a3      	ldr	r3, [r4, #8]
 8008d06:	6861      	ldr	r1, [r4, #4]
 8008d08:	eb07 060a 	add.w	r6, r7, sl
 8008d0c:	42b3      	cmp	r3, r6
 8008d0e:	b085      	sub	sp, #20
 8008d10:	bfb8      	it	lt
 8008d12:	3101      	addlt	r1, #1
 8008d14:	f7ff feda 	bl	8008acc <_Balloc>
 8008d18:	b930      	cbnz	r0, 8008d28 <__multiply+0x44>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	4b44      	ldr	r3, [pc, #272]	; (8008e30 <__multiply+0x14c>)
 8008d1e:	4845      	ldr	r0, [pc, #276]	; (8008e34 <__multiply+0x150>)
 8008d20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008d24:	f000 fff8 	bl	8009d18 <__assert_func>
 8008d28:	f100 0514 	add.w	r5, r0, #20
 8008d2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d30:	462b      	mov	r3, r5
 8008d32:	2200      	movs	r2, #0
 8008d34:	4543      	cmp	r3, r8
 8008d36:	d321      	bcc.n	8008d7c <__multiply+0x98>
 8008d38:	f104 0314 	add.w	r3, r4, #20
 8008d3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d40:	f109 0314 	add.w	r3, r9, #20
 8008d44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d48:	9202      	str	r2, [sp, #8]
 8008d4a:	1b3a      	subs	r2, r7, r4
 8008d4c:	3a15      	subs	r2, #21
 8008d4e:	f022 0203 	bic.w	r2, r2, #3
 8008d52:	3204      	adds	r2, #4
 8008d54:	f104 0115 	add.w	r1, r4, #21
 8008d58:	428f      	cmp	r7, r1
 8008d5a:	bf38      	it	cc
 8008d5c:	2204      	movcc	r2, #4
 8008d5e:	9201      	str	r2, [sp, #4]
 8008d60:	9a02      	ldr	r2, [sp, #8]
 8008d62:	9303      	str	r3, [sp, #12]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d80c      	bhi.n	8008d82 <__multiply+0x9e>
 8008d68:	2e00      	cmp	r6, #0
 8008d6a:	dd03      	ble.n	8008d74 <__multiply+0x90>
 8008d6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d05b      	beq.n	8008e2c <__multiply+0x148>
 8008d74:	6106      	str	r6, [r0, #16]
 8008d76:	b005      	add	sp, #20
 8008d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7c:	f843 2b04 	str.w	r2, [r3], #4
 8008d80:	e7d8      	b.n	8008d34 <__multiply+0x50>
 8008d82:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d86:	f1ba 0f00 	cmp.w	sl, #0
 8008d8a:	d024      	beq.n	8008dd6 <__multiply+0xf2>
 8008d8c:	f104 0e14 	add.w	lr, r4, #20
 8008d90:	46a9      	mov	r9, r5
 8008d92:	f04f 0c00 	mov.w	ip, #0
 8008d96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d9a:	f8d9 1000 	ldr.w	r1, [r9]
 8008d9e:	fa1f fb82 	uxth.w	fp, r2
 8008da2:	b289      	uxth	r1, r1
 8008da4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008da8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008dac:	f8d9 2000 	ldr.w	r2, [r9]
 8008db0:	4461      	add	r1, ip
 8008db2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008db6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008dba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008dbe:	b289      	uxth	r1, r1
 8008dc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dc4:	4577      	cmp	r7, lr
 8008dc6:	f849 1b04 	str.w	r1, [r9], #4
 8008dca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dce:	d8e2      	bhi.n	8008d96 <__multiply+0xb2>
 8008dd0:	9a01      	ldr	r2, [sp, #4]
 8008dd2:	f845 c002 	str.w	ip, [r5, r2]
 8008dd6:	9a03      	ldr	r2, [sp, #12]
 8008dd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	f1b9 0f00 	cmp.w	r9, #0
 8008de2:	d021      	beq.n	8008e28 <__multiply+0x144>
 8008de4:	6829      	ldr	r1, [r5, #0]
 8008de6:	f104 0c14 	add.w	ip, r4, #20
 8008dea:	46ae      	mov	lr, r5
 8008dec:	f04f 0a00 	mov.w	sl, #0
 8008df0:	f8bc b000 	ldrh.w	fp, [ip]
 8008df4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008df8:	fb09 220b 	mla	r2, r9, fp, r2
 8008dfc:	4452      	add	r2, sl
 8008dfe:	b289      	uxth	r1, r1
 8008e00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e04:	f84e 1b04 	str.w	r1, [lr], #4
 8008e08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008e0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e10:	f8be 1000 	ldrh.w	r1, [lr]
 8008e14:	fb09 110a 	mla	r1, r9, sl, r1
 8008e18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008e1c:	4567      	cmp	r7, ip
 8008e1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e22:	d8e5      	bhi.n	8008df0 <__multiply+0x10c>
 8008e24:	9a01      	ldr	r2, [sp, #4]
 8008e26:	50a9      	str	r1, [r5, r2]
 8008e28:	3504      	adds	r5, #4
 8008e2a:	e799      	b.n	8008d60 <__multiply+0x7c>
 8008e2c:	3e01      	subs	r6, #1
 8008e2e:	e79b      	b.n	8008d68 <__multiply+0x84>
 8008e30:	0800ac76 	.word	0x0800ac76
 8008e34:	0800ac87 	.word	0x0800ac87

08008e38 <__pow5mult>:
 8008e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e3c:	4615      	mov	r5, r2
 8008e3e:	f012 0203 	ands.w	r2, r2, #3
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	d007      	beq.n	8008e58 <__pow5mult+0x20>
 8008e48:	4c25      	ldr	r4, [pc, #148]	; (8008ee0 <__pow5mult+0xa8>)
 8008e4a:	3a01      	subs	r2, #1
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e52:	f7ff fe9d 	bl	8008b90 <__multadd>
 8008e56:	4607      	mov	r7, r0
 8008e58:	10ad      	asrs	r5, r5, #2
 8008e5a:	d03d      	beq.n	8008ed8 <__pow5mult+0xa0>
 8008e5c:	69f4      	ldr	r4, [r6, #28]
 8008e5e:	b97c      	cbnz	r4, 8008e80 <__pow5mult+0x48>
 8008e60:	2010      	movs	r0, #16
 8008e62:	f7ff fd7f 	bl	8008964 <malloc>
 8008e66:	4602      	mov	r2, r0
 8008e68:	61f0      	str	r0, [r6, #28]
 8008e6a:	b928      	cbnz	r0, 8008e78 <__pow5mult+0x40>
 8008e6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ee4 <__pow5mult+0xac>)
 8008e6e:	481e      	ldr	r0, [pc, #120]	; (8008ee8 <__pow5mult+0xb0>)
 8008e70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008e74:	f000 ff50 	bl	8009d18 <__assert_func>
 8008e78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e7c:	6004      	str	r4, [r0, #0]
 8008e7e:	60c4      	str	r4, [r0, #12]
 8008e80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008e84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e88:	b94c      	cbnz	r4, 8008e9e <__pow5mult+0x66>
 8008e8a:	f240 2171 	movw	r1, #625	; 0x271
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7ff ff12 	bl	8008cb8 <__i2b>
 8008e94:	2300      	movs	r3, #0
 8008e96:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	6003      	str	r3, [r0, #0]
 8008e9e:	f04f 0900 	mov.w	r9, #0
 8008ea2:	07eb      	lsls	r3, r5, #31
 8008ea4:	d50a      	bpl.n	8008ebc <__pow5mult+0x84>
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7ff ff1a 	bl	8008ce4 <__multiply>
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff fe49 	bl	8008b4c <_Bfree>
 8008eba:	4647      	mov	r7, r8
 8008ebc:	106d      	asrs	r5, r5, #1
 8008ebe:	d00b      	beq.n	8008ed8 <__pow5mult+0xa0>
 8008ec0:	6820      	ldr	r0, [r4, #0]
 8008ec2:	b938      	cbnz	r0, 8008ed4 <__pow5mult+0x9c>
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff ff0b 	bl	8008ce4 <__multiply>
 8008ece:	6020      	str	r0, [r4, #0]
 8008ed0:	f8c0 9000 	str.w	r9, [r0]
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	e7e4      	b.n	8008ea2 <__pow5mult+0x6a>
 8008ed8:	4638      	mov	r0, r7
 8008eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ede:	bf00      	nop
 8008ee0:	0800add0 	.word	0x0800add0
 8008ee4:	0800ac07 	.word	0x0800ac07
 8008ee8:	0800ac87 	.word	0x0800ac87

08008eec <__lshift>:
 8008eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	6849      	ldr	r1, [r1, #4]
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008efa:	68a3      	ldr	r3, [r4, #8]
 8008efc:	4607      	mov	r7, r0
 8008efe:	4691      	mov	r9, r2
 8008f00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f04:	f108 0601 	add.w	r6, r8, #1
 8008f08:	42b3      	cmp	r3, r6
 8008f0a:	db0b      	blt.n	8008f24 <__lshift+0x38>
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	f7ff fddd 	bl	8008acc <_Balloc>
 8008f12:	4605      	mov	r5, r0
 8008f14:	b948      	cbnz	r0, 8008f2a <__lshift+0x3e>
 8008f16:	4602      	mov	r2, r0
 8008f18:	4b28      	ldr	r3, [pc, #160]	; (8008fbc <__lshift+0xd0>)
 8008f1a:	4829      	ldr	r0, [pc, #164]	; (8008fc0 <__lshift+0xd4>)
 8008f1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008f20:	f000 fefa 	bl	8009d18 <__assert_func>
 8008f24:	3101      	adds	r1, #1
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	e7ee      	b.n	8008f08 <__lshift+0x1c>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f100 0114 	add.w	r1, r0, #20
 8008f30:	f100 0210 	add.w	r2, r0, #16
 8008f34:	4618      	mov	r0, r3
 8008f36:	4553      	cmp	r3, sl
 8008f38:	db33      	blt.n	8008fa2 <__lshift+0xb6>
 8008f3a:	6920      	ldr	r0, [r4, #16]
 8008f3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f40:	f104 0314 	add.w	r3, r4, #20
 8008f44:	f019 091f 	ands.w	r9, r9, #31
 8008f48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f50:	d02b      	beq.n	8008faa <__lshift+0xbe>
 8008f52:	f1c9 0e20 	rsb	lr, r9, #32
 8008f56:	468a      	mov	sl, r1
 8008f58:	2200      	movs	r2, #0
 8008f5a:	6818      	ldr	r0, [r3, #0]
 8008f5c:	fa00 f009 	lsl.w	r0, r0, r9
 8008f60:	4310      	orrs	r0, r2
 8008f62:	f84a 0b04 	str.w	r0, [sl], #4
 8008f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f6a:	459c      	cmp	ip, r3
 8008f6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f70:	d8f3      	bhi.n	8008f5a <__lshift+0x6e>
 8008f72:	ebac 0304 	sub.w	r3, ip, r4
 8008f76:	3b15      	subs	r3, #21
 8008f78:	f023 0303 	bic.w	r3, r3, #3
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	f104 0015 	add.w	r0, r4, #21
 8008f82:	4584      	cmp	ip, r0
 8008f84:	bf38      	it	cc
 8008f86:	2304      	movcc	r3, #4
 8008f88:	50ca      	str	r2, [r1, r3]
 8008f8a:	b10a      	cbz	r2, 8008f90 <__lshift+0xa4>
 8008f8c:	f108 0602 	add.w	r6, r8, #2
 8008f90:	3e01      	subs	r6, #1
 8008f92:	4638      	mov	r0, r7
 8008f94:	612e      	str	r6, [r5, #16]
 8008f96:	4621      	mov	r1, r4
 8008f98:	f7ff fdd8 	bl	8008b4c <_Bfree>
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	e7c5      	b.n	8008f36 <__lshift+0x4a>
 8008faa:	3904      	subs	r1, #4
 8008fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fb4:	459c      	cmp	ip, r3
 8008fb6:	d8f9      	bhi.n	8008fac <__lshift+0xc0>
 8008fb8:	e7ea      	b.n	8008f90 <__lshift+0xa4>
 8008fba:	bf00      	nop
 8008fbc:	0800ac76 	.word	0x0800ac76
 8008fc0:	0800ac87 	.word	0x0800ac87

08008fc4 <__mcmp>:
 8008fc4:	b530      	push	{r4, r5, lr}
 8008fc6:	6902      	ldr	r2, [r0, #16]
 8008fc8:	690c      	ldr	r4, [r1, #16]
 8008fca:	1b12      	subs	r2, r2, r4
 8008fcc:	d10e      	bne.n	8008fec <__mcmp+0x28>
 8008fce:	f100 0314 	add.w	r3, r0, #20
 8008fd2:	3114      	adds	r1, #20
 8008fd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008fd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008fdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008fe0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008fe4:	42a5      	cmp	r5, r4
 8008fe6:	d003      	beq.n	8008ff0 <__mcmp+0x2c>
 8008fe8:	d305      	bcc.n	8008ff6 <__mcmp+0x32>
 8008fea:	2201      	movs	r2, #1
 8008fec:	4610      	mov	r0, r2
 8008fee:	bd30      	pop	{r4, r5, pc}
 8008ff0:	4283      	cmp	r3, r0
 8008ff2:	d3f3      	bcc.n	8008fdc <__mcmp+0x18>
 8008ff4:	e7fa      	b.n	8008fec <__mcmp+0x28>
 8008ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ffa:	e7f7      	b.n	8008fec <__mcmp+0x28>

08008ffc <__mdiff>:
 8008ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	460c      	mov	r4, r1
 8009002:	4606      	mov	r6, r0
 8009004:	4611      	mov	r1, r2
 8009006:	4620      	mov	r0, r4
 8009008:	4690      	mov	r8, r2
 800900a:	f7ff ffdb 	bl	8008fc4 <__mcmp>
 800900e:	1e05      	subs	r5, r0, #0
 8009010:	d110      	bne.n	8009034 <__mdiff+0x38>
 8009012:	4629      	mov	r1, r5
 8009014:	4630      	mov	r0, r6
 8009016:	f7ff fd59 	bl	8008acc <_Balloc>
 800901a:	b930      	cbnz	r0, 800902a <__mdiff+0x2e>
 800901c:	4b3a      	ldr	r3, [pc, #232]	; (8009108 <__mdiff+0x10c>)
 800901e:	4602      	mov	r2, r0
 8009020:	f240 2137 	movw	r1, #567	; 0x237
 8009024:	4839      	ldr	r0, [pc, #228]	; (800910c <__mdiff+0x110>)
 8009026:	f000 fe77 	bl	8009d18 <__assert_func>
 800902a:	2301      	movs	r3, #1
 800902c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	bfa4      	itt	ge
 8009036:	4643      	movge	r3, r8
 8009038:	46a0      	movge	r8, r4
 800903a:	4630      	mov	r0, r6
 800903c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009040:	bfa6      	itte	ge
 8009042:	461c      	movge	r4, r3
 8009044:	2500      	movge	r5, #0
 8009046:	2501      	movlt	r5, #1
 8009048:	f7ff fd40 	bl	8008acc <_Balloc>
 800904c:	b920      	cbnz	r0, 8009058 <__mdiff+0x5c>
 800904e:	4b2e      	ldr	r3, [pc, #184]	; (8009108 <__mdiff+0x10c>)
 8009050:	4602      	mov	r2, r0
 8009052:	f240 2145 	movw	r1, #581	; 0x245
 8009056:	e7e5      	b.n	8009024 <__mdiff+0x28>
 8009058:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800905c:	6926      	ldr	r6, [r4, #16]
 800905e:	60c5      	str	r5, [r0, #12]
 8009060:	f104 0914 	add.w	r9, r4, #20
 8009064:	f108 0514 	add.w	r5, r8, #20
 8009068:	f100 0e14 	add.w	lr, r0, #20
 800906c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009070:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009074:	f108 0210 	add.w	r2, r8, #16
 8009078:	46f2      	mov	sl, lr
 800907a:	2100      	movs	r1, #0
 800907c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009080:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009084:	fa11 f88b 	uxtah	r8, r1, fp
 8009088:	b299      	uxth	r1, r3
 800908a:	0c1b      	lsrs	r3, r3, #16
 800908c:	eba8 0801 	sub.w	r8, r8, r1
 8009090:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009094:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009098:	fa1f f888 	uxth.w	r8, r8
 800909c:	1419      	asrs	r1, r3, #16
 800909e:	454e      	cmp	r6, r9
 80090a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090a4:	f84a 3b04 	str.w	r3, [sl], #4
 80090a8:	d8e8      	bhi.n	800907c <__mdiff+0x80>
 80090aa:	1b33      	subs	r3, r6, r4
 80090ac:	3b15      	subs	r3, #21
 80090ae:	f023 0303 	bic.w	r3, r3, #3
 80090b2:	3304      	adds	r3, #4
 80090b4:	3415      	adds	r4, #21
 80090b6:	42a6      	cmp	r6, r4
 80090b8:	bf38      	it	cc
 80090ba:	2304      	movcc	r3, #4
 80090bc:	441d      	add	r5, r3
 80090be:	4473      	add	r3, lr
 80090c0:	469e      	mov	lr, r3
 80090c2:	462e      	mov	r6, r5
 80090c4:	4566      	cmp	r6, ip
 80090c6:	d30e      	bcc.n	80090e6 <__mdiff+0xea>
 80090c8:	f10c 0203 	add.w	r2, ip, #3
 80090cc:	1b52      	subs	r2, r2, r5
 80090ce:	f022 0203 	bic.w	r2, r2, #3
 80090d2:	3d03      	subs	r5, #3
 80090d4:	45ac      	cmp	ip, r5
 80090d6:	bf38      	it	cc
 80090d8:	2200      	movcc	r2, #0
 80090da:	4413      	add	r3, r2
 80090dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80090e0:	b17a      	cbz	r2, 8009102 <__mdiff+0x106>
 80090e2:	6107      	str	r7, [r0, #16]
 80090e4:	e7a4      	b.n	8009030 <__mdiff+0x34>
 80090e6:	f856 8b04 	ldr.w	r8, [r6], #4
 80090ea:	fa11 f288 	uxtah	r2, r1, r8
 80090ee:	1414      	asrs	r4, r2, #16
 80090f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090f4:	b292      	uxth	r2, r2
 80090f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80090fa:	f84e 2b04 	str.w	r2, [lr], #4
 80090fe:	1421      	asrs	r1, r4, #16
 8009100:	e7e0      	b.n	80090c4 <__mdiff+0xc8>
 8009102:	3f01      	subs	r7, #1
 8009104:	e7ea      	b.n	80090dc <__mdiff+0xe0>
 8009106:	bf00      	nop
 8009108:	0800ac76 	.word	0x0800ac76
 800910c:	0800ac87 	.word	0x0800ac87

08009110 <__d2b>:
 8009110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009114:	460f      	mov	r7, r1
 8009116:	2101      	movs	r1, #1
 8009118:	ec59 8b10 	vmov	r8, r9, d0
 800911c:	4616      	mov	r6, r2
 800911e:	f7ff fcd5 	bl	8008acc <_Balloc>
 8009122:	4604      	mov	r4, r0
 8009124:	b930      	cbnz	r0, 8009134 <__d2b+0x24>
 8009126:	4602      	mov	r2, r0
 8009128:	4b24      	ldr	r3, [pc, #144]	; (80091bc <__d2b+0xac>)
 800912a:	4825      	ldr	r0, [pc, #148]	; (80091c0 <__d2b+0xb0>)
 800912c:	f240 310f 	movw	r1, #783	; 0x30f
 8009130:	f000 fdf2 	bl	8009d18 <__assert_func>
 8009134:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800913c:	bb2d      	cbnz	r5, 800918a <__d2b+0x7a>
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	f1b8 0300 	subs.w	r3, r8, #0
 8009144:	d026      	beq.n	8009194 <__d2b+0x84>
 8009146:	4668      	mov	r0, sp
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	f7ff fd87 	bl	8008c5c <__lo0bits>
 800914e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009152:	b1e8      	cbz	r0, 8009190 <__d2b+0x80>
 8009154:	f1c0 0320 	rsb	r3, r0, #32
 8009158:	fa02 f303 	lsl.w	r3, r2, r3
 800915c:	430b      	orrs	r3, r1
 800915e:	40c2      	lsrs	r2, r0
 8009160:	6163      	str	r3, [r4, #20]
 8009162:	9201      	str	r2, [sp, #4]
 8009164:	9b01      	ldr	r3, [sp, #4]
 8009166:	61a3      	str	r3, [r4, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	bf14      	ite	ne
 800916c:	2202      	movne	r2, #2
 800916e:	2201      	moveq	r2, #1
 8009170:	6122      	str	r2, [r4, #16]
 8009172:	b1bd      	cbz	r5, 80091a4 <__d2b+0x94>
 8009174:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009178:	4405      	add	r5, r0
 800917a:	603d      	str	r5, [r7, #0]
 800917c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009180:	6030      	str	r0, [r6, #0]
 8009182:	4620      	mov	r0, r4
 8009184:	b003      	add	sp, #12
 8009186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800918a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800918e:	e7d6      	b.n	800913e <__d2b+0x2e>
 8009190:	6161      	str	r1, [r4, #20]
 8009192:	e7e7      	b.n	8009164 <__d2b+0x54>
 8009194:	a801      	add	r0, sp, #4
 8009196:	f7ff fd61 	bl	8008c5c <__lo0bits>
 800919a:	9b01      	ldr	r3, [sp, #4]
 800919c:	6163      	str	r3, [r4, #20]
 800919e:	3020      	adds	r0, #32
 80091a0:	2201      	movs	r2, #1
 80091a2:	e7e5      	b.n	8009170 <__d2b+0x60>
 80091a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091ac:	6038      	str	r0, [r7, #0]
 80091ae:	6918      	ldr	r0, [r3, #16]
 80091b0:	f7ff fd34 	bl	8008c1c <__hi0bits>
 80091b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091b8:	e7e2      	b.n	8009180 <__d2b+0x70>
 80091ba:	bf00      	nop
 80091bc:	0800ac76 	.word	0x0800ac76
 80091c0:	0800ac87 	.word	0x0800ac87

080091c4 <__ssputs_r>:
 80091c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c8:	688e      	ldr	r6, [r1, #8]
 80091ca:	461f      	mov	r7, r3
 80091cc:	42be      	cmp	r6, r7
 80091ce:	680b      	ldr	r3, [r1, #0]
 80091d0:	4682      	mov	sl, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	4690      	mov	r8, r2
 80091d6:	d82c      	bhi.n	8009232 <__ssputs_r+0x6e>
 80091d8:	898a      	ldrh	r2, [r1, #12]
 80091da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091de:	d026      	beq.n	800922e <__ssputs_r+0x6a>
 80091e0:	6965      	ldr	r5, [r4, #20]
 80091e2:	6909      	ldr	r1, [r1, #16]
 80091e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091e8:	eba3 0901 	sub.w	r9, r3, r1
 80091ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091f0:	1c7b      	adds	r3, r7, #1
 80091f2:	444b      	add	r3, r9
 80091f4:	106d      	asrs	r5, r5, #1
 80091f6:	429d      	cmp	r5, r3
 80091f8:	bf38      	it	cc
 80091fa:	461d      	movcc	r5, r3
 80091fc:	0553      	lsls	r3, r2, #21
 80091fe:	d527      	bpl.n	8009250 <__ssputs_r+0x8c>
 8009200:	4629      	mov	r1, r5
 8009202:	f7ff fbd7 	bl	80089b4 <_malloc_r>
 8009206:	4606      	mov	r6, r0
 8009208:	b360      	cbz	r0, 8009264 <__ssputs_r+0xa0>
 800920a:	6921      	ldr	r1, [r4, #16]
 800920c:	464a      	mov	r2, r9
 800920e:	f7fe fcd2 	bl	8007bb6 <memcpy>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	6126      	str	r6, [r4, #16]
 8009220:	6165      	str	r5, [r4, #20]
 8009222:	444e      	add	r6, r9
 8009224:	eba5 0509 	sub.w	r5, r5, r9
 8009228:	6026      	str	r6, [r4, #0]
 800922a:	60a5      	str	r5, [r4, #8]
 800922c:	463e      	mov	r6, r7
 800922e:	42be      	cmp	r6, r7
 8009230:	d900      	bls.n	8009234 <__ssputs_r+0x70>
 8009232:	463e      	mov	r6, r7
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	4632      	mov	r2, r6
 8009238:	4641      	mov	r1, r8
 800923a:	f7fe fbf1 	bl	8007a20 <memmove>
 800923e:	68a3      	ldr	r3, [r4, #8]
 8009240:	1b9b      	subs	r3, r3, r6
 8009242:	60a3      	str	r3, [r4, #8]
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	4433      	add	r3, r6
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	2000      	movs	r0, #0
 800924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009250:	462a      	mov	r2, r5
 8009252:	f000 fda7 	bl	8009da4 <_realloc_r>
 8009256:	4606      	mov	r6, r0
 8009258:	2800      	cmp	r0, #0
 800925a:	d1e0      	bne.n	800921e <__ssputs_r+0x5a>
 800925c:	6921      	ldr	r1, [r4, #16]
 800925e:	4650      	mov	r0, sl
 8009260:	f7ff fb34 	bl	80088cc <_free_r>
 8009264:	230c      	movs	r3, #12
 8009266:	f8ca 3000 	str.w	r3, [sl]
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009270:	81a3      	strh	r3, [r4, #12]
 8009272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009276:	e7e9      	b.n	800924c <__ssputs_r+0x88>

08009278 <_svfiprintf_r>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	4698      	mov	r8, r3
 800927e:	898b      	ldrh	r3, [r1, #12]
 8009280:	061b      	lsls	r3, r3, #24
 8009282:	b09d      	sub	sp, #116	; 0x74
 8009284:	4607      	mov	r7, r0
 8009286:	460d      	mov	r5, r1
 8009288:	4614      	mov	r4, r2
 800928a:	d50e      	bpl.n	80092aa <_svfiprintf_r+0x32>
 800928c:	690b      	ldr	r3, [r1, #16]
 800928e:	b963      	cbnz	r3, 80092aa <_svfiprintf_r+0x32>
 8009290:	2140      	movs	r1, #64	; 0x40
 8009292:	f7ff fb8f 	bl	80089b4 <_malloc_r>
 8009296:	6028      	str	r0, [r5, #0]
 8009298:	6128      	str	r0, [r5, #16]
 800929a:	b920      	cbnz	r0, 80092a6 <_svfiprintf_r+0x2e>
 800929c:	230c      	movs	r3, #12
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092a4:	e0d0      	b.n	8009448 <_svfiprintf_r+0x1d0>
 80092a6:	2340      	movs	r3, #64	; 0x40
 80092a8:	616b      	str	r3, [r5, #20]
 80092aa:	2300      	movs	r3, #0
 80092ac:	9309      	str	r3, [sp, #36]	; 0x24
 80092ae:	2320      	movs	r3, #32
 80092b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80092b8:	2330      	movs	r3, #48	; 0x30
 80092ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009460 <_svfiprintf_r+0x1e8>
 80092be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092c2:	f04f 0901 	mov.w	r9, #1
 80092c6:	4623      	mov	r3, r4
 80092c8:	469a      	mov	sl, r3
 80092ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ce:	b10a      	cbz	r2, 80092d4 <_svfiprintf_r+0x5c>
 80092d0:	2a25      	cmp	r2, #37	; 0x25
 80092d2:	d1f9      	bne.n	80092c8 <_svfiprintf_r+0x50>
 80092d4:	ebba 0b04 	subs.w	fp, sl, r4
 80092d8:	d00b      	beq.n	80092f2 <_svfiprintf_r+0x7a>
 80092da:	465b      	mov	r3, fp
 80092dc:	4622      	mov	r2, r4
 80092de:	4629      	mov	r1, r5
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7ff ff6f 	bl	80091c4 <__ssputs_r>
 80092e6:	3001      	adds	r0, #1
 80092e8:	f000 80a9 	beq.w	800943e <_svfiprintf_r+0x1c6>
 80092ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ee:	445a      	add	r2, fp
 80092f0:	9209      	str	r2, [sp, #36]	; 0x24
 80092f2:	f89a 3000 	ldrb.w	r3, [sl]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 80a1 	beq.w	800943e <_svfiprintf_r+0x1c6>
 80092fc:	2300      	movs	r3, #0
 80092fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009306:	f10a 0a01 	add.w	sl, sl, #1
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	9307      	str	r3, [sp, #28]
 800930e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009312:	931a      	str	r3, [sp, #104]	; 0x68
 8009314:	4654      	mov	r4, sl
 8009316:	2205      	movs	r2, #5
 8009318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800931c:	4850      	ldr	r0, [pc, #320]	; (8009460 <_svfiprintf_r+0x1e8>)
 800931e:	f7f6 ff5f 	bl	80001e0 <memchr>
 8009322:	9a04      	ldr	r2, [sp, #16]
 8009324:	b9d8      	cbnz	r0, 800935e <_svfiprintf_r+0xe6>
 8009326:	06d0      	lsls	r0, r2, #27
 8009328:	bf44      	itt	mi
 800932a:	2320      	movmi	r3, #32
 800932c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009330:	0711      	lsls	r1, r2, #28
 8009332:	bf44      	itt	mi
 8009334:	232b      	movmi	r3, #43	; 0x2b
 8009336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800933a:	f89a 3000 	ldrb.w	r3, [sl]
 800933e:	2b2a      	cmp	r3, #42	; 0x2a
 8009340:	d015      	beq.n	800936e <_svfiprintf_r+0xf6>
 8009342:	9a07      	ldr	r2, [sp, #28]
 8009344:	4654      	mov	r4, sl
 8009346:	2000      	movs	r0, #0
 8009348:	f04f 0c0a 	mov.w	ip, #10
 800934c:	4621      	mov	r1, r4
 800934e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009352:	3b30      	subs	r3, #48	; 0x30
 8009354:	2b09      	cmp	r3, #9
 8009356:	d94d      	bls.n	80093f4 <_svfiprintf_r+0x17c>
 8009358:	b1b0      	cbz	r0, 8009388 <_svfiprintf_r+0x110>
 800935a:	9207      	str	r2, [sp, #28]
 800935c:	e014      	b.n	8009388 <_svfiprintf_r+0x110>
 800935e:	eba0 0308 	sub.w	r3, r0, r8
 8009362:	fa09 f303 	lsl.w	r3, r9, r3
 8009366:	4313      	orrs	r3, r2
 8009368:	9304      	str	r3, [sp, #16]
 800936a:	46a2      	mov	sl, r4
 800936c:	e7d2      	b.n	8009314 <_svfiprintf_r+0x9c>
 800936e:	9b03      	ldr	r3, [sp, #12]
 8009370:	1d19      	adds	r1, r3, #4
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	9103      	str	r1, [sp, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	bfbb      	ittet	lt
 800937a:	425b      	neglt	r3, r3
 800937c:	f042 0202 	orrlt.w	r2, r2, #2
 8009380:	9307      	strge	r3, [sp, #28]
 8009382:	9307      	strlt	r3, [sp, #28]
 8009384:	bfb8      	it	lt
 8009386:	9204      	strlt	r2, [sp, #16]
 8009388:	7823      	ldrb	r3, [r4, #0]
 800938a:	2b2e      	cmp	r3, #46	; 0x2e
 800938c:	d10c      	bne.n	80093a8 <_svfiprintf_r+0x130>
 800938e:	7863      	ldrb	r3, [r4, #1]
 8009390:	2b2a      	cmp	r3, #42	; 0x2a
 8009392:	d134      	bne.n	80093fe <_svfiprintf_r+0x186>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	1d1a      	adds	r2, r3, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	9203      	str	r2, [sp, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	bfb8      	it	lt
 80093a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093a4:	3402      	adds	r4, #2
 80093a6:	9305      	str	r3, [sp, #20]
 80093a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009470 <_svfiprintf_r+0x1f8>
 80093ac:	7821      	ldrb	r1, [r4, #0]
 80093ae:	2203      	movs	r2, #3
 80093b0:	4650      	mov	r0, sl
 80093b2:	f7f6 ff15 	bl	80001e0 <memchr>
 80093b6:	b138      	cbz	r0, 80093c8 <_svfiprintf_r+0x150>
 80093b8:	9b04      	ldr	r3, [sp, #16]
 80093ba:	eba0 000a 	sub.w	r0, r0, sl
 80093be:	2240      	movs	r2, #64	; 0x40
 80093c0:	4082      	lsls	r2, r0
 80093c2:	4313      	orrs	r3, r2
 80093c4:	3401      	adds	r4, #1
 80093c6:	9304      	str	r3, [sp, #16]
 80093c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093cc:	4825      	ldr	r0, [pc, #148]	; (8009464 <_svfiprintf_r+0x1ec>)
 80093ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093d2:	2206      	movs	r2, #6
 80093d4:	f7f6 ff04 	bl	80001e0 <memchr>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d038      	beq.n	800944e <_svfiprintf_r+0x1d6>
 80093dc:	4b22      	ldr	r3, [pc, #136]	; (8009468 <_svfiprintf_r+0x1f0>)
 80093de:	bb1b      	cbnz	r3, 8009428 <_svfiprintf_r+0x1b0>
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	3307      	adds	r3, #7
 80093e4:	f023 0307 	bic.w	r3, r3, #7
 80093e8:	3308      	adds	r3, #8
 80093ea:	9303      	str	r3, [sp, #12]
 80093ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ee:	4433      	add	r3, r6
 80093f0:	9309      	str	r3, [sp, #36]	; 0x24
 80093f2:	e768      	b.n	80092c6 <_svfiprintf_r+0x4e>
 80093f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093f8:	460c      	mov	r4, r1
 80093fa:	2001      	movs	r0, #1
 80093fc:	e7a6      	b.n	800934c <_svfiprintf_r+0xd4>
 80093fe:	2300      	movs	r3, #0
 8009400:	3401      	adds	r4, #1
 8009402:	9305      	str	r3, [sp, #20]
 8009404:	4619      	mov	r1, r3
 8009406:	f04f 0c0a 	mov.w	ip, #10
 800940a:	4620      	mov	r0, r4
 800940c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009410:	3a30      	subs	r2, #48	; 0x30
 8009412:	2a09      	cmp	r2, #9
 8009414:	d903      	bls.n	800941e <_svfiprintf_r+0x1a6>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0c6      	beq.n	80093a8 <_svfiprintf_r+0x130>
 800941a:	9105      	str	r1, [sp, #20]
 800941c:	e7c4      	b.n	80093a8 <_svfiprintf_r+0x130>
 800941e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009422:	4604      	mov	r4, r0
 8009424:	2301      	movs	r3, #1
 8009426:	e7f0      	b.n	800940a <_svfiprintf_r+0x192>
 8009428:	ab03      	add	r3, sp, #12
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	462a      	mov	r2, r5
 800942e:	4b0f      	ldr	r3, [pc, #60]	; (800946c <_svfiprintf_r+0x1f4>)
 8009430:	a904      	add	r1, sp, #16
 8009432:	4638      	mov	r0, r7
 8009434:	f7fd fda2 	bl	8006f7c <_printf_float>
 8009438:	1c42      	adds	r2, r0, #1
 800943a:	4606      	mov	r6, r0
 800943c:	d1d6      	bne.n	80093ec <_svfiprintf_r+0x174>
 800943e:	89ab      	ldrh	r3, [r5, #12]
 8009440:	065b      	lsls	r3, r3, #25
 8009442:	f53f af2d 	bmi.w	80092a0 <_svfiprintf_r+0x28>
 8009446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009448:	b01d      	add	sp, #116	; 0x74
 800944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944e:	ab03      	add	r3, sp, #12
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	462a      	mov	r2, r5
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <_svfiprintf_r+0x1f4>)
 8009456:	a904      	add	r1, sp, #16
 8009458:	4638      	mov	r0, r7
 800945a:	f7fe f833 	bl	80074c4 <_printf_i>
 800945e:	e7eb      	b.n	8009438 <_svfiprintf_r+0x1c0>
 8009460:	0800addc 	.word	0x0800addc
 8009464:	0800ade6 	.word	0x0800ade6
 8009468:	08006f7d 	.word	0x08006f7d
 800946c:	080091c5 	.word	0x080091c5
 8009470:	0800ade2 	.word	0x0800ade2

08009474 <_sungetc_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	1c4b      	adds	r3, r1, #1
 8009478:	4614      	mov	r4, r2
 800947a:	d103      	bne.n	8009484 <_sungetc_r+0x10>
 800947c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009480:	4628      	mov	r0, r5
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	8993      	ldrh	r3, [r2, #12]
 8009486:	f023 0320 	bic.w	r3, r3, #32
 800948a:	8193      	strh	r3, [r2, #12]
 800948c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800948e:	6852      	ldr	r2, [r2, #4]
 8009490:	b2cd      	uxtb	r5, r1
 8009492:	b18b      	cbz	r3, 80094b8 <_sungetc_r+0x44>
 8009494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009496:	4293      	cmp	r3, r2
 8009498:	dd08      	ble.n	80094ac <_sungetc_r+0x38>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	1e5a      	subs	r2, r3, #1
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	3301      	adds	r3, #1
 80094a8:	6063      	str	r3, [r4, #4]
 80094aa:	e7e9      	b.n	8009480 <_sungetc_r+0xc>
 80094ac:	4621      	mov	r1, r4
 80094ae:	f000 fbe8 	bl	8009c82 <__submore>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d0f1      	beq.n	800949a <_sungetc_r+0x26>
 80094b6:	e7e1      	b.n	800947c <_sungetc_r+0x8>
 80094b8:	6921      	ldr	r1, [r4, #16]
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	b151      	cbz	r1, 80094d4 <_sungetc_r+0x60>
 80094be:	4299      	cmp	r1, r3
 80094c0:	d208      	bcs.n	80094d4 <_sungetc_r+0x60>
 80094c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80094c6:	42a9      	cmp	r1, r5
 80094c8:	d104      	bne.n	80094d4 <_sungetc_r+0x60>
 80094ca:	3b01      	subs	r3, #1
 80094cc:	3201      	adds	r2, #1
 80094ce:	6023      	str	r3, [r4, #0]
 80094d0:	6062      	str	r2, [r4, #4]
 80094d2:	e7d5      	b.n	8009480 <_sungetc_r+0xc>
 80094d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80094d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094dc:	6363      	str	r3, [r4, #52]	; 0x34
 80094de:	2303      	movs	r3, #3
 80094e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80094e2:	4623      	mov	r3, r4
 80094e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	2301      	movs	r3, #1
 80094ec:	e7dc      	b.n	80094a8 <_sungetc_r+0x34>

080094ee <__ssrefill_r>:
 80094ee:	b510      	push	{r4, lr}
 80094f0:	460c      	mov	r4, r1
 80094f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80094f4:	b169      	cbz	r1, 8009512 <__ssrefill_r+0x24>
 80094f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094fa:	4299      	cmp	r1, r3
 80094fc:	d001      	beq.n	8009502 <__ssrefill_r+0x14>
 80094fe:	f7ff f9e5 	bl	80088cc <_free_r>
 8009502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	2000      	movs	r0, #0
 8009508:	6360      	str	r0, [r4, #52]	; 0x34
 800950a:	b113      	cbz	r3, 8009512 <__ssrefill_r+0x24>
 800950c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	bd10      	pop	{r4, pc}
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	2300      	movs	r3, #0
 8009518:	6063      	str	r3, [r4, #4]
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	f043 0320 	orr.w	r3, r3, #32
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009526:	e7f3      	b.n	8009510 <__ssrefill_r+0x22>

08009528 <__ssvfiscanf_r>:
 8009528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800952c:	460c      	mov	r4, r1
 800952e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009532:	2100      	movs	r1, #0
 8009534:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009538:	49a6      	ldr	r1, [pc, #664]	; (80097d4 <__ssvfiscanf_r+0x2ac>)
 800953a:	91a0      	str	r1, [sp, #640]	; 0x280
 800953c:	f10d 0804 	add.w	r8, sp, #4
 8009540:	49a5      	ldr	r1, [pc, #660]	; (80097d8 <__ssvfiscanf_r+0x2b0>)
 8009542:	4fa6      	ldr	r7, [pc, #664]	; (80097dc <__ssvfiscanf_r+0x2b4>)
 8009544:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80097e0 <__ssvfiscanf_r+0x2b8>
 8009548:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800954c:	4606      	mov	r6, r0
 800954e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	7813      	ldrb	r3, [r2, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 815a 	beq.w	800980e <__ssvfiscanf_r+0x2e6>
 800955a:	5cf9      	ldrb	r1, [r7, r3]
 800955c:	f011 0108 	ands.w	r1, r1, #8
 8009560:	f102 0501 	add.w	r5, r2, #1
 8009564:	d019      	beq.n	800959a <__ssvfiscanf_r+0x72>
 8009566:	6863      	ldr	r3, [r4, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	dd0f      	ble.n	800958c <__ssvfiscanf_r+0x64>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	781a      	ldrb	r2, [r3, #0]
 8009570:	5cba      	ldrb	r2, [r7, r2]
 8009572:	0712      	lsls	r2, r2, #28
 8009574:	d401      	bmi.n	800957a <__ssvfiscanf_r+0x52>
 8009576:	462a      	mov	r2, r5
 8009578:	e7eb      	b.n	8009552 <__ssvfiscanf_r+0x2a>
 800957a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800957c:	3201      	adds	r2, #1
 800957e:	9245      	str	r2, [sp, #276]	; 0x114
 8009580:	6862      	ldr	r2, [r4, #4]
 8009582:	3301      	adds	r3, #1
 8009584:	3a01      	subs	r2, #1
 8009586:	6062      	str	r2, [r4, #4]
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	e7ec      	b.n	8009566 <__ssvfiscanf_r+0x3e>
 800958c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800958e:	4621      	mov	r1, r4
 8009590:	4630      	mov	r0, r6
 8009592:	4798      	blx	r3
 8009594:	2800      	cmp	r0, #0
 8009596:	d0e9      	beq.n	800956c <__ssvfiscanf_r+0x44>
 8009598:	e7ed      	b.n	8009576 <__ssvfiscanf_r+0x4e>
 800959a:	2b25      	cmp	r3, #37	; 0x25
 800959c:	d012      	beq.n	80095c4 <__ssvfiscanf_r+0x9c>
 800959e:	469a      	mov	sl, r3
 80095a0:	6863      	ldr	r3, [r4, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f340 8091 	ble.w	80096ca <__ssvfiscanf_r+0x1a2>
 80095a8:	6822      	ldr	r2, [r4, #0]
 80095aa:	7813      	ldrb	r3, [r2, #0]
 80095ac:	4553      	cmp	r3, sl
 80095ae:	f040 812e 	bne.w	800980e <__ssvfiscanf_r+0x2e6>
 80095b2:	6863      	ldr	r3, [r4, #4]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	6063      	str	r3, [r4, #4]
 80095b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80095ba:	3201      	adds	r2, #1
 80095bc:	3301      	adds	r3, #1
 80095be:	6022      	str	r2, [r4, #0]
 80095c0:	9345      	str	r3, [sp, #276]	; 0x114
 80095c2:	e7d8      	b.n	8009576 <__ssvfiscanf_r+0x4e>
 80095c4:	9141      	str	r1, [sp, #260]	; 0x104
 80095c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80095c8:	7853      	ldrb	r3, [r2, #1]
 80095ca:	2b2a      	cmp	r3, #42	; 0x2a
 80095cc:	bf02      	ittt	eq
 80095ce:	2310      	moveq	r3, #16
 80095d0:	1c95      	addeq	r5, r2, #2
 80095d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80095d4:	220a      	movs	r2, #10
 80095d6:	46aa      	mov	sl, r5
 80095d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80095dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80095e0:	2b09      	cmp	r3, #9
 80095e2:	d91c      	bls.n	800961e <__ssvfiscanf_r+0xf6>
 80095e4:	487e      	ldr	r0, [pc, #504]	; (80097e0 <__ssvfiscanf_r+0x2b8>)
 80095e6:	2203      	movs	r2, #3
 80095e8:	f7f6 fdfa 	bl	80001e0 <memchr>
 80095ec:	b138      	cbz	r0, 80095fe <__ssvfiscanf_r+0xd6>
 80095ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80095f0:	eba0 0009 	sub.w	r0, r0, r9
 80095f4:	2301      	movs	r3, #1
 80095f6:	4083      	lsls	r3, r0
 80095f8:	4313      	orrs	r3, r2
 80095fa:	9341      	str	r3, [sp, #260]	; 0x104
 80095fc:	4655      	mov	r5, sl
 80095fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009602:	2b78      	cmp	r3, #120	; 0x78
 8009604:	d806      	bhi.n	8009614 <__ssvfiscanf_r+0xec>
 8009606:	2b57      	cmp	r3, #87	; 0x57
 8009608:	d810      	bhi.n	800962c <__ssvfiscanf_r+0x104>
 800960a:	2b25      	cmp	r3, #37	; 0x25
 800960c:	d0c7      	beq.n	800959e <__ssvfiscanf_r+0x76>
 800960e:	d857      	bhi.n	80096c0 <__ssvfiscanf_r+0x198>
 8009610:	2b00      	cmp	r3, #0
 8009612:	d065      	beq.n	80096e0 <__ssvfiscanf_r+0x1b8>
 8009614:	2303      	movs	r3, #3
 8009616:	9347      	str	r3, [sp, #284]	; 0x11c
 8009618:	230a      	movs	r3, #10
 800961a:	9342      	str	r3, [sp, #264]	; 0x108
 800961c:	e076      	b.n	800970c <__ssvfiscanf_r+0x1e4>
 800961e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009620:	fb02 1103 	mla	r1, r2, r3, r1
 8009624:	3930      	subs	r1, #48	; 0x30
 8009626:	9143      	str	r1, [sp, #268]	; 0x10c
 8009628:	4655      	mov	r5, sl
 800962a:	e7d4      	b.n	80095d6 <__ssvfiscanf_r+0xae>
 800962c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009630:	2a20      	cmp	r2, #32
 8009632:	d8ef      	bhi.n	8009614 <__ssvfiscanf_r+0xec>
 8009634:	a101      	add	r1, pc, #4	; (adr r1, 800963c <__ssvfiscanf_r+0x114>)
 8009636:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800963a:	bf00      	nop
 800963c:	080096ef 	.word	0x080096ef
 8009640:	08009615 	.word	0x08009615
 8009644:	08009615 	.word	0x08009615
 8009648:	0800974d 	.word	0x0800974d
 800964c:	08009615 	.word	0x08009615
 8009650:	08009615 	.word	0x08009615
 8009654:	08009615 	.word	0x08009615
 8009658:	08009615 	.word	0x08009615
 800965c:	08009615 	.word	0x08009615
 8009660:	08009615 	.word	0x08009615
 8009664:	08009615 	.word	0x08009615
 8009668:	08009763 	.word	0x08009763
 800966c:	08009749 	.word	0x08009749
 8009670:	080096c7 	.word	0x080096c7
 8009674:	080096c7 	.word	0x080096c7
 8009678:	080096c7 	.word	0x080096c7
 800967c:	08009615 	.word	0x08009615
 8009680:	08009705 	.word	0x08009705
 8009684:	08009615 	.word	0x08009615
 8009688:	08009615 	.word	0x08009615
 800968c:	08009615 	.word	0x08009615
 8009690:	08009615 	.word	0x08009615
 8009694:	08009773 	.word	0x08009773
 8009698:	08009741 	.word	0x08009741
 800969c:	080096e7 	.word	0x080096e7
 80096a0:	08009615 	.word	0x08009615
 80096a4:	08009615 	.word	0x08009615
 80096a8:	0800976f 	.word	0x0800976f
 80096ac:	08009615 	.word	0x08009615
 80096b0:	08009749 	.word	0x08009749
 80096b4:	08009615 	.word	0x08009615
 80096b8:	08009615 	.word	0x08009615
 80096bc:	080096ef 	.word	0x080096ef
 80096c0:	3b45      	subs	r3, #69	; 0x45
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d8a6      	bhi.n	8009614 <__ssvfiscanf_r+0xec>
 80096c6:	2305      	movs	r3, #5
 80096c8:	e01f      	b.n	800970a <__ssvfiscanf_r+0x1e2>
 80096ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80096cc:	4621      	mov	r1, r4
 80096ce:	4630      	mov	r0, r6
 80096d0:	4798      	blx	r3
 80096d2:	2800      	cmp	r0, #0
 80096d4:	f43f af68 	beq.w	80095a8 <__ssvfiscanf_r+0x80>
 80096d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80096da:	2800      	cmp	r0, #0
 80096dc:	f040 808d 	bne.w	80097fa <__ssvfiscanf_r+0x2d2>
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096e4:	e08f      	b.n	8009806 <__ssvfiscanf_r+0x2de>
 80096e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80096e8:	f042 0220 	orr.w	r2, r2, #32
 80096ec:	9241      	str	r2, [sp, #260]	; 0x104
 80096ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80096f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096f4:	9241      	str	r2, [sp, #260]	; 0x104
 80096f6:	2210      	movs	r2, #16
 80096f8:	2b6f      	cmp	r3, #111	; 0x6f
 80096fa:	9242      	str	r2, [sp, #264]	; 0x108
 80096fc:	bf34      	ite	cc
 80096fe:	2303      	movcc	r3, #3
 8009700:	2304      	movcs	r3, #4
 8009702:	e002      	b.n	800970a <__ssvfiscanf_r+0x1e2>
 8009704:	2300      	movs	r3, #0
 8009706:	9342      	str	r3, [sp, #264]	; 0x108
 8009708:	2303      	movs	r3, #3
 800970a:	9347      	str	r3, [sp, #284]	; 0x11c
 800970c:	6863      	ldr	r3, [r4, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	dd3d      	ble.n	800978e <__ssvfiscanf_r+0x266>
 8009712:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009714:	0659      	lsls	r1, r3, #25
 8009716:	d404      	bmi.n	8009722 <__ssvfiscanf_r+0x1fa>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	781a      	ldrb	r2, [r3, #0]
 800971c:	5cba      	ldrb	r2, [r7, r2]
 800971e:	0712      	lsls	r2, r2, #28
 8009720:	d43c      	bmi.n	800979c <__ssvfiscanf_r+0x274>
 8009722:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009724:	2b02      	cmp	r3, #2
 8009726:	dc4b      	bgt.n	80097c0 <__ssvfiscanf_r+0x298>
 8009728:	466b      	mov	r3, sp
 800972a:	4622      	mov	r2, r4
 800972c:	a941      	add	r1, sp, #260	; 0x104
 800972e:	4630      	mov	r0, r6
 8009730:	f000 f872 	bl	8009818 <_scanf_chars>
 8009734:	2801      	cmp	r0, #1
 8009736:	d06a      	beq.n	800980e <__ssvfiscanf_r+0x2e6>
 8009738:	2802      	cmp	r0, #2
 800973a:	f47f af1c 	bne.w	8009576 <__ssvfiscanf_r+0x4e>
 800973e:	e7cb      	b.n	80096d8 <__ssvfiscanf_r+0x1b0>
 8009740:	2308      	movs	r3, #8
 8009742:	9342      	str	r3, [sp, #264]	; 0x108
 8009744:	2304      	movs	r3, #4
 8009746:	e7e0      	b.n	800970a <__ssvfiscanf_r+0x1e2>
 8009748:	220a      	movs	r2, #10
 800974a:	e7d5      	b.n	80096f8 <__ssvfiscanf_r+0x1d0>
 800974c:	4629      	mov	r1, r5
 800974e:	4640      	mov	r0, r8
 8009750:	f000 fa5e 	bl	8009c10 <__sccl>
 8009754:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975a:	9341      	str	r3, [sp, #260]	; 0x104
 800975c:	4605      	mov	r5, r0
 800975e:	2301      	movs	r3, #1
 8009760:	e7d3      	b.n	800970a <__ssvfiscanf_r+0x1e2>
 8009762:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009768:	9341      	str	r3, [sp, #260]	; 0x104
 800976a:	2300      	movs	r3, #0
 800976c:	e7cd      	b.n	800970a <__ssvfiscanf_r+0x1e2>
 800976e:	2302      	movs	r3, #2
 8009770:	e7cb      	b.n	800970a <__ssvfiscanf_r+0x1e2>
 8009772:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009774:	06c3      	lsls	r3, r0, #27
 8009776:	f53f aefe 	bmi.w	8009576 <__ssvfiscanf_r+0x4e>
 800977a:	9b00      	ldr	r3, [sp, #0]
 800977c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800977e:	1d19      	adds	r1, r3, #4
 8009780:	9100      	str	r1, [sp, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	07c0      	lsls	r0, r0, #31
 8009786:	bf4c      	ite	mi
 8009788:	801a      	strhmi	r2, [r3, #0]
 800978a:	601a      	strpl	r2, [r3, #0]
 800978c:	e6f3      	b.n	8009576 <__ssvfiscanf_r+0x4e>
 800978e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009790:	4621      	mov	r1, r4
 8009792:	4630      	mov	r0, r6
 8009794:	4798      	blx	r3
 8009796:	2800      	cmp	r0, #0
 8009798:	d0bb      	beq.n	8009712 <__ssvfiscanf_r+0x1ea>
 800979a:	e79d      	b.n	80096d8 <__ssvfiscanf_r+0x1b0>
 800979c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800979e:	3201      	adds	r2, #1
 80097a0:	9245      	str	r2, [sp, #276]	; 0x114
 80097a2:	6862      	ldr	r2, [r4, #4]
 80097a4:	3a01      	subs	r2, #1
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	6062      	str	r2, [r4, #4]
 80097aa:	dd02      	ble.n	80097b2 <__ssvfiscanf_r+0x28a>
 80097ac:	3301      	adds	r3, #1
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	e7b2      	b.n	8009718 <__ssvfiscanf_r+0x1f0>
 80097b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097b4:	4621      	mov	r1, r4
 80097b6:	4630      	mov	r0, r6
 80097b8:	4798      	blx	r3
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d0ac      	beq.n	8009718 <__ssvfiscanf_r+0x1f0>
 80097be:	e78b      	b.n	80096d8 <__ssvfiscanf_r+0x1b0>
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	dc0f      	bgt.n	80097e4 <__ssvfiscanf_r+0x2bc>
 80097c4:	466b      	mov	r3, sp
 80097c6:	4622      	mov	r2, r4
 80097c8:	a941      	add	r1, sp, #260	; 0x104
 80097ca:	4630      	mov	r0, r6
 80097cc:	f000 f87e 	bl	80098cc <_scanf_i>
 80097d0:	e7b0      	b.n	8009734 <__ssvfiscanf_r+0x20c>
 80097d2:	bf00      	nop
 80097d4:	08009475 	.word	0x08009475
 80097d8:	080094ef 	.word	0x080094ef
 80097dc:	0800ae4f 	.word	0x0800ae4f
 80097e0:	0800ade2 	.word	0x0800ade2
 80097e4:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <__ssvfiscanf_r+0x2ec>)
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f43f aec5 	beq.w	8009576 <__ssvfiscanf_r+0x4e>
 80097ec:	466b      	mov	r3, sp
 80097ee:	4622      	mov	r2, r4
 80097f0:	a941      	add	r1, sp, #260	; 0x104
 80097f2:	4630      	mov	r0, r6
 80097f4:	f3af 8000 	nop.w
 80097f8:	e79c      	b.n	8009734 <__ssvfiscanf_r+0x20c>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009800:	bf18      	it	ne
 8009802:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009806:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800980a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009810:	e7f9      	b.n	8009806 <__ssvfiscanf_r+0x2de>
 8009812:	bf00      	nop
 8009814:	00000000 	.word	0x00000000

08009818 <_scanf_chars>:
 8009818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800981c:	4615      	mov	r5, r2
 800981e:	688a      	ldr	r2, [r1, #8]
 8009820:	4680      	mov	r8, r0
 8009822:	460c      	mov	r4, r1
 8009824:	b932      	cbnz	r2, 8009834 <_scanf_chars+0x1c>
 8009826:	698a      	ldr	r2, [r1, #24]
 8009828:	2a00      	cmp	r2, #0
 800982a:	bf0c      	ite	eq
 800982c:	2201      	moveq	r2, #1
 800982e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009832:	608a      	str	r2, [r1, #8]
 8009834:	6822      	ldr	r2, [r4, #0]
 8009836:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80098c8 <_scanf_chars+0xb0>
 800983a:	06d1      	lsls	r1, r2, #27
 800983c:	bf5f      	itttt	pl
 800983e:	681a      	ldrpl	r2, [r3, #0]
 8009840:	1d11      	addpl	r1, r2, #4
 8009842:	6019      	strpl	r1, [r3, #0]
 8009844:	6816      	ldrpl	r6, [r2, #0]
 8009846:	2700      	movs	r7, #0
 8009848:	69a0      	ldr	r0, [r4, #24]
 800984a:	b188      	cbz	r0, 8009870 <_scanf_chars+0x58>
 800984c:	2801      	cmp	r0, #1
 800984e:	d107      	bne.n	8009860 <_scanf_chars+0x48>
 8009850:	682a      	ldr	r2, [r5, #0]
 8009852:	7811      	ldrb	r1, [r2, #0]
 8009854:	6962      	ldr	r2, [r4, #20]
 8009856:	5c52      	ldrb	r2, [r2, r1]
 8009858:	b952      	cbnz	r2, 8009870 <_scanf_chars+0x58>
 800985a:	2f00      	cmp	r7, #0
 800985c:	d031      	beq.n	80098c2 <_scanf_chars+0xaa>
 800985e:	e022      	b.n	80098a6 <_scanf_chars+0x8e>
 8009860:	2802      	cmp	r0, #2
 8009862:	d120      	bne.n	80098a6 <_scanf_chars+0x8e>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	f819 3003 	ldrb.w	r3, [r9, r3]
 800986c:	071b      	lsls	r3, r3, #28
 800986e:	d41a      	bmi.n	80098a6 <_scanf_chars+0x8e>
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	06da      	lsls	r2, r3, #27
 8009874:	bf5e      	ittt	pl
 8009876:	682b      	ldrpl	r3, [r5, #0]
 8009878:	781b      	ldrbpl	r3, [r3, #0]
 800987a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800987e:	682a      	ldr	r2, [r5, #0]
 8009880:	686b      	ldr	r3, [r5, #4]
 8009882:	3201      	adds	r2, #1
 8009884:	602a      	str	r2, [r5, #0]
 8009886:	68a2      	ldr	r2, [r4, #8]
 8009888:	3b01      	subs	r3, #1
 800988a:	3a01      	subs	r2, #1
 800988c:	606b      	str	r3, [r5, #4]
 800988e:	3701      	adds	r7, #1
 8009890:	60a2      	str	r2, [r4, #8]
 8009892:	b142      	cbz	r2, 80098a6 <_scanf_chars+0x8e>
 8009894:	2b00      	cmp	r3, #0
 8009896:	dcd7      	bgt.n	8009848 <_scanf_chars+0x30>
 8009898:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800989c:	4629      	mov	r1, r5
 800989e:	4640      	mov	r0, r8
 80098a0:	4798      	blx	r3
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0d0      	beq.n	8009848 <_scanf_chars+0x30>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f013 0310 	ands.w	r3, r3, #16
 80098ac:	d105      	bne.n	80098ba <_scanf_chars+0xa2>
 80098ae:	68e2      	ldr	r2, [r4, #12]
 80098b0:	3201      	adds	r2, #1
 80098b2:	60e2      	str	r2, [r4, #12]
 80098b4:	69a2      	ldr	r2, [r4, #24]
 80098b6:	b102      	cbz	r2, 80098ba <_scanf_chars+0xa2>
 80098b8:	7033      	strb	r3, [r6, #0]
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	443b      	add	r3, r7
 80098be:	6123      	str	r3, [r4, #16]
 80098c0:	2000      	movs	r0, #0
 80098c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c6:	bf00      	nop
 80098c8:	0800ae4f 	.word	0x0800ae4f

080098cc <_scanf_i>:
 80098cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	4698      	mov	r8, r3
 80098d2:	4b74      	ldr	r3, [pc, #464]	; (8009aa4 <_scanf_i+0x1d8>)
 80098d4:	460c      	mov	r4, r1
 80098d6:	4682      	mov	sl, r0
 80098d8:	4616      	mov	r6, r2
 80098da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098de:	b087      	sub	sp, #28
 80098e0:	ab03      	add	r3, sp, #12
 80098e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80098e6:	4b70      	ldr	r3, [pc, #448]	; (8009aa8 <_scanf_i+0x1dc>)
 80098e8:	69a1      	ldr	r1, [r4, #24]
 80098ea:	4a70      	ldr	r2, [pc, #448]	; (8009aac <_scanf_i+0x1e0>)
 80098ec:	2903      	cmp	r1, #3
 80098ee:	bf18      	it	ne
 80098f0:	461a      	movne	r2, r3
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	9201      	str	r2, [sp, #4]
 80098f6:	1e5a      	subs	r2, r3, #1
 80098f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80098fc:	bf88      	it	hi
 80098fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009902:	4627      	mov	r7, r4
 8009904:	bf82      	ittt	hi
 8009906:	eb03 0905 	addhi.w	r9, r3, r5
 800990a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800990e:	60a3      	strhi	r3, [r4, #8]
 8009910:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009914:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009918:	bf98      	it	ls
 800991a:	f04f 0900 	movls.w	r9, #0
 800991e:	6023      	str	r3, [r4, #0]
 8009920:	463d      	mov	r5, r7
 8009922:	f04f 0b00 	mov.w	fp, #0
 8009926:	6831      	ldr	r1, [r6, #0]
 8009928:	ab03      	add	r3, sp, #12
 800992a:	7809      	ldrb	r1, [r1, #0]
 800992c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009930:	2202      	movs	r2, #2
 8009932:	f7f6 fc55 	bl	80001e0 <memchr>
 8009936:	b328      	cbz	r0, 8009984 <_scanf_i+0xb8>
 8009938:	f1bb 0f01 	cmp.w	fp, #1
 800993c:	d159      	bne.n	80099f2 <_scanf_i+0x126>
 800993e:	6862      	ldr	r2, [r4, #4]
 8009940:	b92a      	cbnz	r2, 800994e <_scanf_i+0x82>
 8009942:	6822      	ldr	r2, [r4, #0]
 8009944:	2308      	movs	r3, #8
 8009946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800994a:	6063      	str	r3, [r4, #4]
 800994c:	6022      	str	r2, [r4, #0]
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009954:	6022      	str	r2, [r4, #0]
 8009956:	68a2      	ldr	r2, [r4, #8]
 8009958:	1e51      	subs	r1, r2, #1
 800995a:	60a1      	str	r1, [r4, #8]
 800995c:	b192      	cbz	r2, 8009984 <_scanf_i+0xb8>
 800995e:	6832      	ldr	r2, [r6, #0]
 8009960:	1c51      	adds	r1, r2, #1
 8009962:	6031      	str	r1, [r6, #0]
 8009964:	7812      	ldrb	r2, [r2, #0]
 8009966:	f805 2b01 	strb.w	r2, [r5], #1
 800996a:	6872      	ldr	r2, [r6, #4]
 800996c:	3a01      	subs	r2, #1
 800996e:	2a00      	cmp	r2, #0
 8009970:	6072      	str	r2, [r6, #4]
 8009972:	dc07      	bgt.n	8009984 <_scanf_i+0xb8>
 8009974:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009978:	4631      	mov	r1, r6
 800997a:	4650      	mov	r0, sl
 800997c:	4790      	blx	r2
 800997e:	2800      	cmp	r0, #0
 8009980:	f040 8085 	bne.w	8009a8e <_scanf_i+0x1c2>
 8009984:	f10b 0b01 	add.w	fp, fp, #1
 8009988:	f1bb 0f03 	cmp.w	fp, #3
 800998c:	d1cb      	bne.n	8009926 <_scanf_i+0x5a>
 800998e:	6863      	ldr	r3, [r4, #4]
 8009990:	b90b      	cbnz	r3, 8009996 <_scanf_i+0xca>
 8009992:	230a      	movs	r3, #10
 8009994:	6063      	str	r3, [r4, #4]
 8009996:	6863      	ldr	r3, [r4, #4]
 8009998:	4945      	ldr	r1, [pc, #276]	; (8009ab0 <_scanf_i+0x1e4>)
 800999a:	6960      	ldr	r0, [r4, #20]
 800999c:	1ac9      	subs	r1, r1, r3
 800999e:	f000 f937 	bl	8009c10 <__sccl>
 80099a2:	f04f 0b00 	mov.w	fp, #0
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	6822      	ldr	r2, [r4, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d03d      	beq.n	8009a2a <_scanf_i+0x15e>
 80099ae:	6831      	ldr	r1, [r6, #0]
 80099b0:	6960      	ldr	r0, [r4, #20]
 80099b2:	f891 c000 	ldrb.w	ip, [r1]
 80099b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d035      	beq.n	8009a2a <_scanf_i+0x15e>
 80099be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80099c2:	d124      	bne.n	8009a0e <_scanf_i+0x142>
 80099c4:	0510      	lsls	r0, r2, #20
 80099c6:	d522      	bpl.n	8009a0e <_scanf_i+0x142>
 80099c8:	f10b 0b01 	add.w	fp, fp, #1
 80099cc:	f1b9 0f00 	cmp.w	r9, #0
 80099d0:	d003      	beq.n	80099da <_scanf_i+0x10e>
 80099d2:	3301      	adds	r3, #1
 80099d4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80099d8:	60a3      	str	r3, [r4, #8]
 80099da:	6873      	ldr	r3, [r6, #4]
 80099dc:	3b01      	subs	r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	6073      	str	r3, [r6, #4]
 80099e2:	dd1b      	ble.n	8009a1c <_scanf_i+0x150>
 80099e4:	6833      	ldr	r3, [r6, #0]
 80099e6:	3301      	adds	r3, #1
 80099e8:	6033      	str	r3, [r6, #0]
 80099ea:	68a3      	ldr	r3, [r4, #8]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	60a3      	str	r3, [r4, #8]
 80099f0:	e7d9      	b.n	80099a6 <_scanf_i+0xda>
 80099f2:	f1bb 0f02 	cmp.w	fp, #2
 80099f6:	d1ae      	bne.n	8009956 <_scanf_i+0x8a>
 80099f8:	6822      	ldr	r2, [r4, #0]
 80099fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80099fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a02:	d1bf      	bne.n	8009984 <_scanf_i+0xb8>
 8009a04:	2310      	movs	r3, #16
 8009a06:	6063      	str	r3, [r4, #4]
 8009a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a0c:	e7a2      	b.n	8009954 <_scanf_i+0x88>
 8009a0e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009a12:	6022      	str	r2, [r4, #0]
 8009a14:	780b      	ldrb	r3, [r1, #0]
 8009a16:	f805 3b01 	strb.w	r3, [r5], #1
 8009a1a:	e7de      	b.n	80099da <_scanf_i+0x10e>
 8009a1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a20:	4631      	mov	r1, r6
 8009a22:	4650      	mov	r0, sl
 8009a24:	4798      	blx	r3
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d0df      	beq.n	80099ea <_scanf_i+0x11e>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	05d9      	lsls	r1, r3, #23
 8009a2e:	d50d      	bpl.n	8009a4c <_scanf_i+0x180>
 8009a30:	42bd      	cmp	r5, r7
 8009a32:	d909      	bls.n	8009a48 <_scanf_i+0x17c>
 8009a34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009a38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	4650      	mov	r0, sl
 8009a40:	4798      	blx	r3
 8009a42:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009a46:	464d      	mov	r5, r9
 8009a48:	42bd      	cmp	r5, r7
 8009a4a:	d028      	beq.n	8009a9e <_scanf_i+0x1d2>
 8009a4c:	6822      	ldr	r2, [r4, #0]
 8009a4e:	f012 0210 	ands.w	r2, r2, #16
 8009a52:	d113      	bne.n	8009a7c <_scanf_i+0x1b0>
 8009a54:	702a      	strb	r2, [r5, #0]
 8009a56:	6863      	ldr	r3, [r4, #4]
 8009a58:	9e01      	ldr	r6, [sp, #4]
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4650      	mov	r0, sl
 8009a5e:	47b0      	blx	r6
 8009a60:	f8d8 3000 	ldr.w	r3, [r8]
 8009a64:	6821      	ldr	r1, [r4, #0]
 8009a66:	1d1a      	adds	r2, r3, #4
 8009a68:	f8c8 2000 	str.w	r2, [r8]
 8009a6c:	f011 0f20 	tst.w	r1, #32
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	d00f      	beq.n	8009a94 <_scanf_i+0x1c8>
 8009a74:	6018      	str	r0, [r3, #0]
 8009a76:	68e3      	ldr	r3, [r4, #12]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	60e3      	str	r3, [r4, #12]
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	1bed      	subs	r5, r5, r7
 8009a80:	445d      	add	r5, fp
 8009a82:	442b      	add	r3, r5
 8009a84:	6123      	str	r3, [r4, #16]
 8009a86:	2000      	movs	r0, #0
 8009a88:	b007      	add	sp, #28
 8009a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8e:	f04f 0b00 	mov.w	fp, #0
 8009a92:	e7ca      	b.n	8009a2a <_scanf_i+0x15e>
 8009a94:	07ca      	lsls	r2, r1, #31
 8009a96:	bf4c      	ite	mi
 8009a98:	8018      	strhmi	r0, [r3, #0]
 8009a9a:	6018      	strpl	r0, [r3, #0]
 8009a9c:	e7eb      	b.n	8009a76 <_scanf_i+0x1aa>
 8009a9e:	2001      	movs	r0, #1
 8009aa0:	e7f2      	b.n	8009a88 <_scanf_i+0x1bc>
 8009aa2:	bf00      	nop
 8009aa4:	0800a5b0 	.word	0x0800a5b0
 8009aa8:	08009ff1 	.word	0x08009ff1
 8009aac:	08009f09 	.word	0x08009f09
 8009ab0:	0800adfd 	.word	0x0800adfd

08009ab4 <__sflush_r>:
 8009ab4:	898a      	ldrh	r2, [r1, #12]
 8009ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aba:	4605      	mov	r5, r0
 8009abc:	0710      	lsls	r0, r2, #28
 8009abe:	460c      	mov	r4, r1
 8009ac0:	d458      	bmi.n	8009b74 <__sflush_r+0xc0>
 8009ac2:	684b      	ldr	r3, [r1, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	dc05      	bgt.n	8009ad4 <__sflush_r+0x20>
 8009ac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	dc02      	bgt.n	8009ad4 <__sflush_r+0x20>
 8009ace:	2000      	movs	r0, #0
 8009ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ad6:	2e00      	cmp	r6, #0
 8009ad8:	d0f9      	beq.n	8009ace <__sflush_r+0x1a>
 8009ada:	2300      	movs	r3, #0
 8009adc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ae0:	682f      	ldr	r7, [r5, #0]
 8009ae2:	6a21      	ldr	r1, [r4, #32]
 8009ae4:	602b      	str	r3, [r5, #0]
 8009ae6:	d032      	beq.n	8009b4e <__sflush_r+0x9a>
 8009ae8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	075a      	lsls	r2, r3, #29
 8009aee:	d505      	bpl.n	8009afc <__sflush_r+0x48>
 8009af0:	6863      	ldr	r3, [r4, #4]
 8009af2:	1ac0      	subs	r0, r0, r3
 8009af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009af6:	b10b      	cbz	r3, 8009afc <__sflush_r+0x48>
 8009af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009afa:	1ac0      	subs	r0, r0, r3
 8009afc:	2300      	movs	r3, #0
 8009afe:	4602      	mov	r2, r0
 8009b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b02:	6a21      	ldr	r1, [r4, #32]
 8009b04:	4628      	mov	r0, r5
 8009b06:	47b0      	blx	r6
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	d106      	bne.n	8009b1c <__sflush_r+0x68>
 8009b0e:	6829      	ldr	r1, [r5, #0]
 8009b10:	291d      	cmp	r1, #29
 8009b12:	d82b      	bhi.n	8009b6c <__sflush_r+0xb8>
 8009b14:	4a29      	ldr	r2, [pc, #164]	; (8009bbc <__sflush_r+0x108>)
 8009b16:	410a      	asrs	r2, r1
 8009b18:	07d6      	lsls	r6, r2, #31
 8009b1a:	d427      	bmi.n	8009b6c <__sflush_r+0xb8>
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	6062      	str	r2, [r4, #4]
 8009b20:	04d9      	lsls	r1, r3, #19
 8009b22:	6922      	ldr	r2, [r4, #16]
 8009b24:	6022      	str	r2, [r4, #0]
 8009b26:	d504      	bpl.n	8009b32 <__sflush_r+0x7e>
 8009b28:	1c42      	adds	r2, r0, #1
 8009b2a:	d101      	bne.n	8009b30 <__sflush_r+0x7c>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b903      	cbnz	r3, 8009b32 <__sflush_r+0x7e>
 8009b30:	6560      	str	r0, [r4, #84]	; 0x54
 8009b32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b34:	602f      	str	r7, [r5, #0]
 8009b36:	2900      	cmp	r1, #0
 8009b38:	d0c9      	beq.n	8009ace <__sflush_r+0x1a>
 8009b3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b3e:	4299      	cmp	r1, r3
 8009b40:	d002      	beq.n	8009b48 <__sflush_r+0x94>
 8009b42:	4628      	mov	r0, r5
 8009b44:	f7fe fec2 	bl	80088cc <_free_r>
 8009b48:	2000      	movs	r0, #0
 8009b4a:	6360      	str	r0, [r4, #52]	; 0x34
 8009b4c:	e7c0      	b.n	8009ad0 <__sflush_r+0x1c>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	4628      	mov	r0, r5
 8009b52:	47b0      	blx	r6
 8009b54:	1c41      	adds	r1, r0, #1
 8009b56:	d1c8      	bne.n	8009aea <__sflush_r+0x36>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0c5      	beq.n	8009aea <__sflush_r+0x36>
 8009b5e:	2b1d      	cmp	r3, #29
 8009b60:	d001      	beq.n	8009b66 <__sflush_r+0xb2>
 8009b62:	2b16      	cmp	r3, #22
 8009b64:	d101      	bne.n	8009b6a <__sflush_r+0xb6>
 8009b66:	602f      	str	r7, [r5, #0]
 8009b68:	e7b1      	b.n	8009ace <__sflush_r+0x1a>
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	e7ad      	b.n	8009ad0 <__sflush_r+0x1c>
 8009b74:	690f      	ldr	r7, [r1, #16]
 8009b76:	2f00      	cmp	r7, #0
 8009b78:	d0a9      	beq.n	8009ace <__sflush_r+0x1a>
 8009b7a:	0793      	lsls	r3, r2, #30
 8009b7c:	680e      	ldr	r6, [r1, #0]
 8009b7e:	bf08      	it	eq
 8009b80:	694b      	ldreq	r3, [r1, #20]
 8009b82:	600f      	str	r7, [r1, #0]
 8009b84:	bf18      	it	ne
 8009b86:	2300      	movne	r3, #0
 8009b88:	eba6 0807 	sub.w	r8, r6, r7
 8009b8c:	608b      	str	r3, [r1, #8]
 8009b8e:	f1b8 0f00 	cmp.w	r8, #0
 8009b92:	dd9c      	ble.n	8009ace <__sflush_r+0x1a>
 8009b94:	6a21      	ldr	r1, [r4, #32]
 8009b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b98:	4643      	mov	r3, r8
 8009b9a:	463a      	mov	r2, r7
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b0      	blx	r6
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	dc06      	bgt.n	8009bb2 <__sflush_r+0xfe>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009baa:	81a3      	strh	r3, [r4, #12]
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bb0:	e78e      	b.n	8009ad0 <__sflush_r+0x1c>
 8009bb2:	4407      	add	r7, r0
 8009bb4:	eba8 0800 	sub.w	r8, r8, r0
 8009bb8:	e7e9      	b.n	8009b8e <__sflush_r+0xda>
 8009bba:	bf00      	nop
 8009bbc:	dfbffffe 	.word	0xdfbffffe

08009bc0 <_fflush_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	690b      	ldr	r3, [r1, #16]
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	b913      	cbnz	r3, 8009bd0 <_fflush_r+0x10>
 8009bca:	2500      	movs	r5, #0
 8009bcc:	4628      	mov	r0, r5
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	b118      	cbz	r0, 8009bda <_fflush_r+0x1a>
 8009bd2:	6a03      	ldr	r3, [r0, #32]
 8009bd4:	b90b      	cbnz	r3, 8009bda <_fflush_r+0x1a>
 8009bd6:	f7fd fe23 	bl	8007820 <__sinit>
 8009bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f3      	beq.n	8009bca <_fflush_r+0xa>
 8009be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009be4:	07d0      	lsls	r0, r2, #31
 8009be6:	d404      	bmi.n	8009bf2 <_fflush_r+0x32>
 8009be8:	0599      	lsls	r1, r3, #22
 8009bea:	d402      	bmi.n	8009bf2 <_fflush_r+0x32>
 8009bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bee:	f7fd ffe0 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f7ff ff5d 	bl	8009ab4 <__sflush_r>
 8009bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bfc:	07da      	lsls	r2, r3, #31
 8009bfe:	4605      	mov	r5, r0
 8009c00:	d4e4      	bmi.n	8009bcc <_fflush_r+0xc>
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	059b      	lsls	r3, r3, #22
 8009c06:	d4e1      	bmi.n	8009bcc <_fflush_r+0xc>
 8009c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0a:	f7fd ffd3 	bl	8007bb4 <__retarget_lock_release_recursive>
 8009c0e:	e7dd      	b.n	8009bcc <_fflush_r+0xc>

08009c10 <__sccl>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	780b      	ldrb	r3, [r1, #0]
 8009c14:	4604      	mov	r4, r0
 8009c16:	2b5e      	cmp	r3, #94	; 0x5e
 8009c18:	bf0b      	itete	eq
 8009c1a:	784b      	ldrbeq	r3, [r1, #1]
 8009c1c:	1c4a      	addne	r2, r1, #1
 8009c1e:	1c8a      	addeq	r2, r1, #2
 8009c20:	2100      	movne	r1, #0
 8009c22:	bf08      	it	eq
 8009c24:	2101      	moveq	r1, #1
 8009c26:	3801      	subs	r0, #1
 8009c28:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009c2c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009c30:	42a8      	cmp	r0, r5
 8009c32:	d1fb      	bne.n	8009c2c <__sccl+0x1c>
 8009c34:	b90b      	cbnz	r3, 8009c3a <__sccl+0x2a>
 8009c36:	1e50      	subs	r0, r2, #1
 8009c38:	bd70      	pop	{r4, r5, r6, pc}
 8009c3a:	f081 0101 	eor.w	r1, r1, #1
 8009c3e:	54e1      	strb	r1, [r4, r3]
 8009c40:	4610      	mov	r0, r2
 8009c42:	4602      	mov	r2, r0
 8009c44:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c48:	2d2d      	cmp	r5, #45	; 0x2d
 8009c4a:	d005      	beq.n	8009c58 <__sccl+0x48>
 8009c4c:	2d5d      	cmp	r5, #93	; 0x5d
 8009c4e:	d016      	beq.n	8009c7e <__sccl+0x6e>
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	d0f1      	beq.n	8009c38 <__sccl+0x28>
 8009c54:	462b      	mov	r3, r5
 8009c56:	e7f2      	b.n	8009c3e <__sccl+0x2e>
 8009c58:	7846      	ldrb	r6, [r0, #1]
 8009c5a:	2e5d      	cmp	r6, #93	; 0x5d
 8009c5c:	d0fa      	beq.n	8009c54 <__sccl+0x44>
 8009c5e:	42b3      	cmp	r3, r6
 8009c60:	dcf8      	bgt.n	8009c54 <__sccl+0x44>
 8009c62:	3002      	adds	r0, #2
 8009c64:	461a      	mov	r2, r3
 8009c66:	3201      	adds	r2, #1
 8009c68:	4296      	cmp	r6, r2
 8009c6a:	54a1      	strb	r1, [r4, r2]
 8009c6c:	dcfb      	bgt.n	8009c66 <__sccl+0x56>
 8009c6e:	1af2      	subs	r2, r6, r3
 8009c70:	3a01      	subs	r2, #1
 8009c72:	1c5d      	adds	r5, r3, #1
 8009c74:	42b3      	cmp	r3, r6
 8009c76:	bfa8      	it	ge
 8009c78:	2200      	movge	r2, #0
 8009c7a:	18ab      	adds	r3, r5, r2
 8009c7c:	e7e1      	b.n	8009c42 <__sccl+0x32>
 8009c7e:	4610      	mov	r0, r2
 8009c80:	e7da      	b.n	8009c38 <__sccl+0x28>

08009c82 <__submore>:
 8009c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	460c      	mov	r4, r1
 8009c88:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	d11d      	bne.n	8009cce <__submore+0x4c>
 8009c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c96:	f7fe fe8d 	bl	80089b4 <_malloc_r>
 8009c9a:	b918      	cbnz	r0, 8009ca4 <__submore+0x22>
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca8:	63a3      	str	r3, [r4, #56]	; 0x38
 8009caa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009cae:	6360      	str	r0, [r4, #52]	; 0x34
 8009cb0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009cb4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009cb8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009cbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009cc0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009cc4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009cc8:	6020      	str	r0, [r4, #0]
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e7e8      	b.n	8009ca0 <__submore+0x1e>
 8009cce:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009cd0:	0077      	lsls	r7, r6, #1
 8009cd2:	463a      	mov	r2, r7
 8009cd4:	f000 f866 	bl	8009da4 <_realloc_r>
 8009cd8:	4605      	mov	r5, r0
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d0de      	beq.n	8009c9c <__submore+0x1a>
 8009cde:	eb00 0806 	add.w	r8, r0, r6
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	f7fd ff65 	bl	8007bb6 <memcpy>
 8009cec:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009cf0:	f8c4 8000 	str.w	r8, [r4]
 8009cf4:	e7e9      	b.n	8009cca <__submore+0x48>
	...

08009cf8 <_sbrk_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d06      	ldr	r5, [pc, #24]	; (8009d14 <_sbrk_r+0x1c>)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f7f7 fb6c 	bl	80013e0 <_sbrk>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_sbrk_r+0x1a>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_sbrk_r+0x1a>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20002730 	.word	0x20002730

08009d18 <__assert_func>:
 8009d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d1a:	4614      	mov	r4, r2
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <__assert_func+0x2c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4605      	mov	r5, r0
 8009d24:	68d8      	ldr	r0, [r3, #12]
 8009d26:	b14c      	cbz	r4, 8009d3c <__assert_func+0x24>
 8009d28:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <__assert_func+0x30>)
 8009d2a:	9100      	str	r1, [sp, #0]
 8009d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d30:	4906      	ldr	r1, [pc, #24]	; (8009d4c <__assert_func+0x34>)
 8009d32:	462b      	mov	r3, r5
 8009d34:	f000 f96c 	bl	800a010 <fiprintf>
 8009d38:	f000 f97c 	bl	800a034 <abort>
 8009d3c:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <__assert_func+0x38>)
 8009d3e:	461c      	mov	r4, r3
 8009d40:	e7f3      	b.n	8009d2a <__assert_func+0x12>
 8009d42:	bf00      	nop
 8009d44:	20000150 	.word	0x20000150
 8009d48:	0800ae12 	.word	0x0800ae12
 8009d4c:	0800ae1f 	.word	0x0800ae1f
 8009d50:	0800ae4d 	.word	0x0800ae4d

08009d54 <_calloc_r>:
 8009d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d56:	fba1 2402 	umull	r2, r4, r1, r2
 8009d5a:	b94c      	cbnz	r4, 8009d70 <_calloc_r+0x1c>
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	9201      	str	r2, [sp, #4]
 8009d60:	f7fe fe28 	bl	80089b4 <_malloc_r>
 8009d64:	9a01      	ldr	r2, [sp, #4]
 8009d66:	4605      	mov	r5, r0
 8009d68:	b930      	cbnz	r0, 8009d78 <_calloc_r+0x24>
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	b003      	add	sp, #12
 8009d6e:	bd30      	pop	{r4, r5, pc}
 8009d70:	220c      	movs	r2, #12
 8009d72:	6002      	str	r2, [r0, #0]
 8009d74:	2500      	movs	r5, #0
 8009d76:	e7f8      	b.n	8009d6a <_calloc_r+0x16>
 8009d78:	4621      	mov	r1, r4
 8009d7a:	f7fd fe6b 	bl	8007a54 <memset>
 8009d7e:	e7f4      	b.n	8009d6a <_calloc_r+0x16>

08009d80 <__ascii_mbtowc>:
 8009d80:	b082      	sub	sp, #8
 8009d82:	b901      	cbnz	r1, 8009d86 <__ascii_mbtowc+0x6>
 8009d84:	a901      	add	r1, sp, #4
 8009d86:	b142      	cbz	r2, 8009d9a <__ascii_mbtowc+0x1a>
 8009d88:	b14b      	cbz	r3, 8009d9e <__ascii_mbtowc+0x1e>
 8009d8a:	7813      	ldrb	r3, [r2, #0]
 8009d8c:	600b      	str	r3, [r1, #0]
 8009d8e:	7812      	ldrb	r2, [r2, #0]
 8009d90:	1e10      	subs	r0, r2, #0
 8009d92:	bf18      	it	ne
 8009d94:	2001      	movne	r0, #1
 8009d96:	b002      	add	sp, #8
 8009d98:	4770      	bx	lr
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	e7fb      	b.n	8009d96 <__ascii_mbtowc+0x16>
 8009d9e:	f06f 0001 	mvn.w	r0, #1
 8009da2:	e7f8      	b.n	8009d96 <__ascii_mbtowc+0x16>

08009da4 <_realloc_r>:
 8009da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da8:	4680      	mov	r8, r0
 8009daa:	4614      	mov	r4, r2
 8009dac:	460e      	mov	r6, r1
 8009dae:	b921      	cbnz	r1, 8009dba <_realloc_r+0x16>
 8009db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009db4:	4611      	mov	r1, r2
 8009db6:	f7fe bdfd 	b.w	80089b4 <_malloc_r>
 8009dba:	b92a      	cbnz	r2, 8009dc8 <_realloc_r+0x24>
 8009dbc:	f7fe fd86 	bl	80088cc <_free_r>
 8009dc0:	4625      	mov	r5, r4
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	f000 f93b 	bl	800a042 <_malloc_usable_size_r>
 8009dcc:	4284      	cmp	r4, r0
 8009dce:	4607      	mov	r7, r0
 8009dd0:	d802      	bhi.n	8009dd8 <_realloc_r+0x34>
 8009dd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dd6:	d812      	bhi.n	8009dfe <_realloc_r+0x5a>
 8009dd8:	4621      	mov	r1, r4
 8009dda:	4640      	mov	r0, r8
 8009ddc:	f7fe fdea 	bl	80089b4 <_malloc_r>
 8009de0:	4605      	mov	r5, r0
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d0ed      	beq.n	8009dc2 <_realloc_r+0x1e>
 8009de6:	42bc      	cmp	r4, r7
 8009de8:	4622      	mov	r2, r4
 8009dea:	4631      	mov	r1, r6
 8009dec:	bf28      	it	cs
 8009dee:	463a      	movcs	r2, r7
 8009df0:	f7fd fee1 	bl	8007bb6 <memcpy>
 8009df4:	4631      	mov	r1, r6
 8009df6:	4640      	mov	r0, r8
 8009df8:	f7fe fd68 	bl	80088cc <_free_r>
 8009dfc:	e7e1      	b.n	8009dc2 <_realloc_r+0x1e>
 8009dfe:	4635      	mov	r5, r6
 8009e00:	e7df      	b.n	8009dc2 <_realloc_r+0x1e>
	...

08009e04 <_strtol_l.constprop.0>:
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e0a:	d001      	beq.n	8009e10 <_strtol_l.constprop.0+0xc>
 8009e0c:	2b24      	cmp	r3, #36	; 0x24
 8009e0e:	d906      	bls.n	8009e1e <_strtol_l.constprop.0+0x1a>
 8009e10:	f7fd fea4 	bl	8007b5c <__errno>
 8009e14:	2316      	movs	r3, #22
 8009e16:	6003      	str	r3, [r0, #0]
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f04 <_strtol_l.constprop.0+0x100>
 8009e22:	460d      	mov	r5, r1
 8009e24:	462e      	mov	r6, r5
 8009e26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e2a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009e2e:	f017 0708 	ands.w	r7, r7, #8
 8009e32:	d1f7      	bne.n	8009e24 <_strtol_l.constprop.0+0x20>
 8009e34:	2c2d      	cmp	r4, #45	; 0x2d
 8009e36:	d132      	bne.n	8009e9e <_strtol_l.constprop.0+0x9a>
 8009e38:	782c      	ldrb	r4, [r5, #0]
 8009e3a:	2701      	movs	r7, #1
 8009e3c:	1cb5      	adds	r5, r6, #2
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d05b      	beq.n	8009efa <_strtol_l.constprop.0+0xf6>
 8009e42:	2b10      	cmp	r3, #16
 8009e44:	d109      	bne.n	8009e5a <_strtol_l.constprop.0+0x56>
 8009e46:	2c30      	cmp	r4, #48	; 0x30
 8009e48:	d107      	bne.n	8009e5a <_strtol_l.constprop.0+0x56>
 8009e4a:	782c      	ldrb	r4, [r5, #0]
 8009e4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e50:	2c58      	cmp	r4, #88	; 0x58
 8009e52:	d14d      	bne.n	8009ef0 <_strtol_l.constprop.0+0xec>
 8009e54:	786c      	ldrb	r4, [r5, #1]
 8009e56:	2310      	movs	r3, #16
 8009e58:	3502      	adds	r5, #2
 8009e5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009e62:	f04f 0e00 	mov.w	lr, #0
 8009e66:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e6a:	4676      	mov	r6, lr
 8009e6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009e70:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009e74:	f1bc 0f09 	cmp.w	ip, #9
 8009e78:	d816      	bhi.n	8009ea8 <_strtol_l.constprop.0+0xa4>
 8009e7a:	4664      	mov	r4, ip
 8009e7c:	42a3      	cmp	r3, r4
 8009e7e:	dd24      	ble.n	8009eca <_strtol_l.constprop.0+0xc6>
 8009e80:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009e84:	d008      	beq.n	8009e98 <_strtol_l.constprop.0+0x94>
 8009e86:	45b1      	cmp	r9, r6
 8009e88:	d31c      	bcc.n	8009ec4 <_strtol_l.constprop.0+0xc0>
 8009e8a:	d101      	bne.n	8009e90 <_strtol_l.constprop.0+0x8c>
 8009e8c:	45a2      	cmp	sl, r4
 8009e8e:	db19      	blt.n	8009ec4 <_strtol_l.constprop.0+0xc0>
 8009e90:	fb06 4603 	mla	r6, r6, r3, r4
 8009e94:	f04f 0e01 	mov.w	lr, #1
 8009e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e9c:	e7e8      	b.n	8009e70 <_strtol_l.constprop.0+0x6c>
 8009e9e:	2c2b      	cmp	r4, #43	; 0x2b
 8009ea0:	bf04      	itt	eq
 8009ea2:	782c      	ldrbeq	r4, [r5, #0]
 8009ea4:	1cb5      	addeq	r5, r6, #2
 8009ea6:	e7ca      	b.n	8009e3e <_strtol_l.constprop.0+0x3a>
 8009ea8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009eac:	f1bc 0f19 	cmp.w	ip, #25
 8009eb0:	d801      	bhi.n	8009eb6 <_strtol_l.constprop.0+0xb2>
 8009eb2:	3c37      	subs	r4, #55	; 0x37
 8009eb4:	e7e2      	b.n	8009e7c <_strtol_l.constprop.0+0x78>
 8009eb6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009eba:	f1bc 0f19 	cmp.w	ip, #25
 8009ebe:	d804      	bhi.n	8009eca <_strtol_l.constprop.0+0xc6>
 8009ec0:	3c57      	subs	r4, #87	; 0x57
 8009ec2:	e7db      	b.n	8009e7c <_strtol_l.constprop.0+0x78>
 8009ec4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8009ec8:	e7e6      	b.n	8009e98 <_strtol_l.constprop.0+0x94>
 8009eca:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009ece:	d105      	bne.n	8009edc <_strtol_l.constprop.0+0xd8>
 8009ed0:	2322      	movs	r3, #34	; 0x22
 8009ed2:	6003      	str	r3, [r0, #0]
 8009ed4:	4646      	mov	r6, r8
 8009ed6:	b942      	cbnz	r2, 8009eea <_strtol_l.constprop.0+0xe6>
 8009ed8:	4630      	mov	r0, r6
 8009eda:	e79e      	b.n	8009e1a <_strtol_l.constprop.0+0x16>
 8009edc:	b107      	cbz	r7, 8009ee0 <_strtol_l.constprop.0+0xdc>
 8009ede:	4276      	negs	r6, r6
 8009ee0:	2a00      	cmp	r2, #0
 8009ee2:	d0f9      	beq.n	8009ed8 <_strtol_l.constprop.0+0xd4>
 8009ee4:	f1be 0f00 	cmp.w	lr, #0
 8009ee8:	d000      	beq.n	8009eec <_strtol_l.constprop.0+0xe8>
 8009eea:	1e69      	subs	r1, r5, #1
 8009eec:	6011      	str	r1, [r2, #0]
 8009eee:	e7f3      	b.n	8009ed8 <_strtol_l.constprop.0+0xd4>
 8009ef0:	2430      	movs	r4, #48	; 0x30
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1b1      	bne.n	8009e5a <_strtol_l.constprop.0+0x56>
 8009ef6:	2308      	movs	r3, #8
 8009ef8:	e7af      	b.n	8009e5a <_strtol_l.constprop.0+0x56>
 8009efa:	2c30      	cmp	r4, #48	; 0x30
 8009efc:	d0a5      	beq.n	8009e4a <_strtol_l.constprop.0+0x46>
 8009efe:	230a      	movs	r3, #10
 8009f00:	e7ab      	b.n	8009e5a <_strtol_l.constprop.0+0x56>
 8009f02:	bf00      	nop
 8009f04:	0800ae4f 	.word	0x0800ae4f

08009f08 <_strtol_r>:
 8009f08:	f7ff bf7c 	b.w	8009e04 <_strtol_l.constprop.0>

08009f0c <_strtoul_l.constprop.0>:
 8009f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f10:	4f36      	ldr	r7, [pc, #216]	; (8009fec <_strtoul_l.constprop.0+0xe0>)
 8009f12:	4686      	mov	lr, r0
 8009f14:	460d      	mov	r5, r1
 8009f16:	4628      	mov	r0, r5
 8009f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f1c:	5d3e      	ldrb	r6, [r7, r4]
 8009f1e:	f016 0608 	ands.w	r6, r6, #8
 8009f22:	d1f8      	bne.n	8009f16 <_strtoul_l.constprop.0+0xa>
 8009f24:	2c2d      	cmp	r4, #45	; 0x2d
 8009f26:	d130      	bne.n	8009f8a <_strtoul_l.constprop.0+0x7e>
 8009f28:	782c      	ldrb	r4, [r5, #0]
 8009f2a:	2601      	movs	r6, #1
 8009f2c:	1c85      	adds	r5, r0, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d057      	beq.n	8009fe2 <_strtoul_l.constprop.0+0xd6>
 8009f32:	2b10      	cmp	r3, #16
 8009f34:	d109      	bne.n	8009f4a <_strtoul_l.constprop.0+0x3e>
 8009f36:	2c30      	cmp	r4, #48	; 0x30
 8009f38:	d107      	bne.n	8009f4a <_strtoul_l.constprop.0+0x3e>
 8009f3a:	7828      	ldrb	r0, [r5, #0]
 8009f3c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009f40:	2858      	cmp	r0, #88	; 0x58
 8009f42:	d149      	bne.n	8009fd8 <_strtoul_l.constprop.0+0xcc>
 8009f44:	786c      	ldrb	r4, [r5, #1]
 8009f46:	2310      	movs	r3, #16
 8009f48:	3502      	adds	r5, #2
 8009f4a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009f4e:	2700      	movs	r7, #0
 8009f50:	fbb8 f8f3 	udiv	r8, r8, r3
 8009f54:	fb03 f908 	mul.w	r9, r3, r8
 8009f58:	ea6f 0909 	mvn.w	r9, r9
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009f62:	f1bc 0f09 	cmp.w	ip, #9
 8009f66:	d815      	bhi.n	8009f94 <_strtoul_l.constprop.0+0x88>
 8009f68:	4664      	mov	r4, ip
 8009f6a:	42a3      	cmp	r3, r4
 8009f6c:	dd23      	ble.n	8009fb6 <_strtoul_l.constprop.0+0xaa>
 8009f6e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8009f72:	d007      	beq.n	8009f84 <_strtoul_l.constprop.0+0x78>
 8009f74:	4580      	cmp	r8, r0
 8009f76:	d31b      	bcc.n	8009fb0 <_strtoul_l.constprop.0+0xa4>
 8009f78:	d101      	bne.n	8009f7e <_strtoul_l.constprop.0+0x72>
 8009f7a:	45a1      	cmp	r9, r4
 8009f7c:	db18      	blt.n	8009fb0 <_strtoul_l.constprop.0+0xa4>
 8009f7e:	fb00 4003 	mla	r0, r0, r3, r4
 8009f82:	2701      	movs	r7, #1
 8009f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f88:	e7e9      	b.n	8009f5e <_strtoul_l.constprop.0+0x52>
 8009f8a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f8c:	bf04      	itt	eq
 8009f8e:	782c      	ldrbeq	r4, [r5, #0]
 8009f90:	1c85      	addeq	r5, r0, #2
 8009f92:	e7cc      	b.n	8009f2e <_strtoul_l.constprop.0+0x22>
 8009f94:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009f98:	f1bc 0f19 	cmp.w	ip, #25
 8009f9c:	d801      	bhi.n	8009fa2 <_strtoul_l.constprop.0+0x96>
 8009f9e:	3c37      	subs	r4, #55	; 0x37
 8009fa0:	e7e3      	b.n	8009f6a <_strtoul_l.constprop.0+0x5e>
 8009fa2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009fa6:	f1bc 0f19 	cmp.w	ip, #25
 8009faa:	d804      	bhi.n	8009fb6 <_strtoul_l.constprop.0+0xaa>
 8009fac:	3c57      	subs	r4, #87	; 0x57
 8009fae:	e7dc      	b.n	8009f6a <_strtoul_l.constprop.0+0x5e>
 8009fb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009fb4:	e7e6      	b.n	8009f84 <_strtoul_l.constprop.0+0x78>
 8009fb6:	1c7b      	adds	r3, r7, #1
 8009fb8:	d106      	bne.n	8009fc8 <_strtoul_l.constprop.0+0xbc>
 8009fba:	2322      	movs	r3, #34	; 0x22
 8009fbc:	f8ce 3000 	str.w	r3, [lr]
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	b932      	cbnz	r2, 8009fd2 <_strtoul_l.constprop.0+0xc6>
 8009fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fc8:	b106      	cbz	r6, 8009fcc <_strtoul_l.constprop.0+0xc0>
 8009fca:	4240      	negs	r0, r0
 8009fcc:	2a00      	cmp	r2, #0
 8009fce:	d0f9      	beq.n	8009fc4 <_strtoul_l.constprop.0+0xb8>
 8009fd0:	b107      	cbz	r7, 8009fd4 <_strtoul_l.constprop.0+0xc8>
 8009fd2:	1e69      	subs	r1, r5, #1
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	e7f5      	b.n	8009fc4 <_strtoul_l.constprop.0+0xb8>
 8009fd8:	2430      	movs	r4, #48	; 0x30
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1b5      	bne.n	8009f4a <_strtoul_l.constprop.0+0x3e>
 8009fde:	2308      	movs	r3, #8
 8009fe0:	e7b3      	b.n	8009f4a <_strtoul_l.constprop.0+0x3e>
 8009fe2:	2c30      	cmp	r4, #48	; 0x30
 8009fe4:	d0a9      	beq.n	8009f3a <_strtoul_l.constprop.0+0x2e>
 8009fe6:	230a      	movs	r3, #10
 8009fe8:	e7af      	b.n	8009f4a <_strtoul_l.constprop.0+0x3e>
 8009fea:	bf00      	nop
 8009fec:	0800ae4f 	.word	0x0800ae4f

08009ff0 <_strtoul_r>:
 8009ff0:	f7ff bf8c 	b.w	8009f0c <_strtoul_l.constprop.0>

08009ff4 <__ascii_wctomb>:
 8009ff4:	b149      	cbz	r1, 800a00a <__ascii_wctomb+0x16>
 8009ff6:	2aff      	cmp	r2, #255	; 0xff
 8009ff8:	bf85      	ittet	hi
 8009ffa:	238a      	movhi	r3, #138	; 0x8a
 8009ffc:	6003      	strhi	r3, [r0, #0]
 8009ffe:	700a      	strbls	r2, [r1, #0]
 800a000:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a004:	bf98      	it	ls
 800a006:	2001      	movls	r0, #1
 800a008:	4770      	bx	lr
 800a00a:	4608      	mov	r0, r1
 800a00c:	4770      	bx	lr
	...

0800a010 <fiprintf>:
 800a010:	b40e      	push	{r1, r2, r3}
 800a012:	b503      	push	{r0, r1, lr}
 800a014:	4601      	mov	r1, r0
 800a016:	ab03      	add	r3, sp, #12
 800a018:	4805      	ldr	r0, [pc, #20]	; (800a030 <fiprintf+0x20>)
 800a01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01e:	6800      	ldr	r0, [r0, #0]
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f000 f83f 	bl	800a0a4 <_vfiprintf_r>
 800a026:	b002      	add	sp, #8
 800a028:	f85d eb04 	ldr.w	lr, [sp], #4
 800a02c:	b003      	add	sp, #12
 800a02e:	4770      	bx	lr
 800a030:	20000150 	.word	0x20000150

0800a034 <abort>:
 800a034:	b508      	push	{r3, lr}
 800a036:	2006      	movs	r0, #6
 800a038:	f000 fa0c 	bl	800a454 <raise>
 800a03c:	2001      	movs	r0, #1
 800a03e:	f7f7 f99f 	bl	8001380 <_exit>

0800a042 <_malloc_usable_size_r>:
 800a042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a046:	1f18      	subs	r0, r3, #4
 800a048:	2b00      	cmp	r3, #0
 800a04a:	bfbc      	itt	lt
 800a04c:	580b      	ldrlt	r3, [r1, r0]
 800a04e:	18c0      	addlt	r0, r0, r3
 800a050:	4770      	bx	lr

0800a052 <__sfputc_r>:
 800a052:	6893      	ldr	r3, [r2, #8]
 800a054:	3b01      	subs	r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	b410      	push	{r4}
 800a05a:	6093      	str	r3, [r2, #8]
 800a05c:	da08      	bge.n	800a070 <__sfputc_r+0x1e>
 800a05e:	6994      	ldr	r4, [r2, #24]
 800a060:	42a3      	cmp	r3, r4
 800a062:	db01      	blt.n	800a068 <__sfputc_r+0x16>
 800a064:	290a      	cmp	r1, #10
 800a066:	d103      	bne.n	800a070 <__sfputc_r+0x1e>
 800a068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a06c:	f000 b934 	b.w	800a2d8 <__swbuf_r>
 800a070:	6813      	ldr	r3, [r2, #0]
 800a072:	1c58      	adds	r0, r3, #1
 800a074:	6010      	str	r0, [r2, #0]
 800a076:	7019      	strb	r1, [r3, #0]
 800a078:	4608      	mov	r0, r1
 800a07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <__sfputs_r>:
 800a080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	4614      	mov	r4, r2
 800a088:	18d5      	adds	r5, r2, r3
 800a08a:	42ac      	cmp	r4, r5
 800a08c:	d101      	bne.n	800a092 <__sfputs_r+0x12>
 800a08e:	2000      	movs	r0, #0
 800a090:	e007      	b.n	800a0a2 <__sfputs_r+0x22>
 800a092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a096:	463a      	mov	r2, r7
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ffda 	bl	800a052 <__sfputc_r>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	d1f3      	bne.n	800a08a <__sfputs_r+0xa>
 800a0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0a4 <_vfiprintf_r>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	b09d      	sub	sp, #116	; 0x74
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	4698      	mov	r8, r3
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	b118      	cbz	r0, 800a0bc <_vfiprintf_r+0x18>
 800a0b4:	6a03      	ldr	r3, [r0, #32]
 800a0b6:	b90b      	cbnz	r3, 800a0bc <_vfiprintf_r+0x18>
 800a0b8:	f7fd fbb2 	bl	8007820 <__sinit>
 800a0bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0be:	07d9      	lsls	r1, r3, #31
 800a0c0:	d405      	bmi.n	800a0ce <_vfiprintf_r+0x2a>
 800a0c2:	89ab      	ldrh	r3, [r5, #12]
 800a0c4:	059a      	lsls	r2, r3, #22
 800a0c6:	d402      	bmi.n	800a0ce <_vfiprintf_r+0x2a>
 800a0c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ca:	f7fd fd72 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	071b      	lsls	r3, r3, #28
 800a0d2:	d501      	bpl.n	800a0d8 <_vfiprintf_r+0x34>
 800a0d4:	692b      	ldr	r3, [r5, #16]
 800a0d6:	b99b      	cbnz	r3, 800a100 <_vfiprintf_r+0x5c>
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 f93a 	bl	800a354 <__swsetup_r>
 800a0e0:	b170      	cbz	r0, 800a100 <_vfiprintf_r+0x5c>
 800a0e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0e4:	07dc      	lsls	r4, r3, #31
 800a0e6:	d504      	bpl.n	800a0f2 <_vfiprintf_r+0x4e>
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0ec:	b01d      	add	sp, #116	; 0x74
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	0598      	lsls	r0, r3, #22
 800a0f6:	d4f7      	bmi.n	800a0e8 <_vfiprintf_r+0x44>
 800a0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0fa:	f7fd fd5b 	bl	8007bb4 <__retarget_lock_release_recursive>
 800a0fe:	e7f3      	b.n	800a0e8 <_vfiprintf_r+0x44>
 800a100:	2300      	movs	r3, #0
 800a102:	9309      	str	r3, [sp, #36]	; 0x24
 800a104:	2320      	movs	r3, #32
 800a106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a10a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a10e:	2330      	movs	r3, #48	; 0x30
 800a110:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a2c4 <_vfiprintf_r+0x220>
 800a114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a118:	f04f 0901 	mov.w	r9, #1
 800a11c:	4623      	mov	r3, r4
 800a11e:	469a      	mov	sl, r3
 800a120:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a124:	b10a      	cbz	r2, 800a12a <_vfiprintf_r+0x86>
 800a126:	2a25      	cmp	r2, #37	; 0x25
 800a128:	d1f9      	bne.n	800a11e <_vfiprintf_r+0x7a>
 800a12a:	ebba 0b04 	subs.w	fp, sl, r4
 800a12e:	d00b      	beq.n	800a148 <_vfiprintf_r+0xa4>
 800a130:	465b      	mov	r3, fp
 800a132:	4622      	mov	r2, r4
 800a134:	4629      	mov	r1, r5
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ffa2 	bl	800a080 <__sfputs_r>
 800a13c:	3001      	adds	r0, #1
 800a13e:	f000 80a9 	beq.w	800a294 <_vfiprintf_r+0x1f0>
 800a142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a144:	445a      	add	r2, fp
 800a146:	9209      	str	r2, [sp, #36]	; 0x24
 800a148:	f89a 3000 	ldrb.w	r3, [sl]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 80a1 	beq.w	800a294 <_vfiprintf_r+0x1f0>
 800a152:	2300      	movs	r3, #0
 800a154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a15c:	f10a 0a01 	add.w	sl, sl, #1
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	9307      	str	r3, [sp, #28]
 800a164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a168:	931a      	str	r3, [sp, #104]	; 0x68
 800a16a:	4654      	mov	r4, sl
 800a16c:	2205      	movs	r2, #5
 800a16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a172:	4854      	ldr	r0, [pc, #336]	; (800a2c4 <_vfiprintf_r+0x220>)
 800a174:	f7f6 f834 	bl	80001e0 <memchr>
 800a178:	9a04      	ldr	r2, [sp, #16]
 800a17a:	b9d8      	cbnz	r0, 800a1b4 <_vfiprintf_r+0x110>
 800a17c:	06d1      	lsls	r1, r2, #27
 800a17e:	bf44      	itt	mi
 800a180:	2320      	movmi	r3, #32
 800a182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a186:	0713      	lsls	r3, r2, #28
 800a188:	bf44      	itt	mi
 800a18a:	232b      	movmi	r3, #43	; 0x2b
 800a18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a190:	f89a 3000 	ldrb.w	r3, [sl]
 800a194:	2b2a      	cmp	r3, #42	; 0x2a
 800a196:	d015      	beq.n	800a1c4 <_vfiprintf_r+0x120>
 800a198:	9a07      	ldr	r2, [sp, #28]
 800a19a:	4654      	mov	r4, sl
 800a19c:	2000      	movs	r0, #0
 800a19e:	f04f 0c0a 	mov.w	ip, #10
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1a8:	3b30      	subs	r3, #48	; 0x30
 800a1aa:	2b09      	cmp	r3, #9
 800a1ac:	d94d      	bls.n	800a24a <_vfiprintf_r+0x1a6>
 800a1ae:	b1b0      	cbz	r0, 800a1de <_vfiprintf_r+0x13a>
 800a1b0:	9207      	str	r2, [sp, #28]
 800a1b2:	e014      	b.n	800a1de <_vfiprintf_r+0x13a>
 800a1b4:	eba0 0308 	sub.w	r3, r0, r8
 800a1b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	9304      	str	r3, [sp, #16]
 800a1c0:	46a2      	mov	sl, r4
 800a1c2:	e7d2      	b.n	800a16a <_vfiprintf_r+0xc6>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	1d19      	adds	r1, r3, #4
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	9103      	str	r1, [sp, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bfbb      	ittet	lt
 800a1d0:	425b      	neglt	r3, r3
 800a1d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1d6:	9307      	strge	r3, [sp, #28]
 800a1d8:	9307      	strlt	r3, [sp, #28]
 800a1da:	bfb8      	it	lt
 800a1dc:	9204      	strlt	r2, [sp, #16]
 800a1de:	7823      	ldrb	r3, [r4, #0]
 800a1e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a1e2:	d10c      	bne.n	800a1fe <_vfiprintf_r+0x15a>
 800a1e4:	7863      	ldrb	r3, [r4, #1]
 800a1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e8:	d134      	bne.n	800a254 <_vfiprintf_r+0x1b0>
 800a1ea:	9b03      	ldr	r3, [sp, #12]
 800a1ec:	1d1a      	adds	r2, r3, #4
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	9203      	str	r2, [sp, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	bfb8      	it	lt
 800a1f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1fa:	3402      	adds	r4, #2
 800a1fc:	9305      	str	r3, [sp, #20]
 800a1fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a2d4 <_vfiprintf_r+0x230>
 800a202:	7821      	ldrb	r1, [r4, #0]
 800a204:	2203      	movs	r2, #3
 800a206:	4650      	mov	r0, sl
 800a208:	f7f5 ffea 	bl	80001e0 <memchr>
 800a20c:	b138      	cbz	r0, 800a21e <_vfiprintf_r+0x17a>
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	eba0 000a 	sub.w	r0, r0, sl
 800a214:	2240      	movs	r2, #64	; 0x40
 800a216:	4082      	lsls	r2, r0
 800a218:	4313      	orrs	r3, r2
 800a21a:	3401      	adds	r4, #1
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a222:	4829      	ldr	r0, [pc, #164]	; (800a2c8 <_vfiprintf_r+0x224>)
 800a224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a228:	2206      	movs	r2, #6
 800a22a:	f7f5 ffd9 	bl	80001e0 <memchr>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d03f      	beq.n	800a2b2 <_vfiprintf_r+0x20e>
 800a232:	4b26      	ldr	r3, [pc, #152]	; (800a2cc <_vfiprintf_r+0x228>)
 800a234:	bb1b      	cbnz	r3, 800a27e <_vfiprintf_r+0x1da>
 800a236:	9b03      	ldr	r3, [sp, #12]
 800a238:	3307      	adds	r3, #7
 800a23a:	f023 0307 	bic.w	r3, r3, #7
 800a23e:	3308      	adds	r3, #8
 800a240:	9303      	str	r3, [sp, #12]
 800a242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a244:	443b      	add	r3, r7
 800a246:	9309      	str	r3, [sp, #36]	; 0x24
 800a248:	e768      	b.n	800a11c <_vfiprintf_r+0x78>
 800a24a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a24e:	460c      	mov	r4, r1
 800a250:	2001      	movs	r0, #1
 800a252:	e7a6      	b.n	800a1a2 <_vfiprintf_r+0xfe>
 800a254:	2300      	movs	r3, #0
 800a256:	3401      	adds	r4, #1
 800a258:	9305      	str	r3, [sp, #20]
 800a25a:	4619      	mov	r1, r3
 800a25c:	f04f 0c0a 	mov.w	ip, #10
 800a260:	4620      	mov	r0, r4
 800a262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a266:	3a30      	subs	r2, #48	; 0x30
 800a268:	2a09      	cmp	r2, #9
 800a26a:	d903      	bls.n	800a274 <_vfiprintf_r+0x1d0>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0c6      	beq.n	800a1fe <_vfiprintf_r+0x15a>
 800a270:	9105      	str	r1, [sp, #20]
 800a272:	e7c4      	b.n	800a1fe <_vfiprintf_r+0x15a>
 800a274:	fb0c 2101 	mla	r1, ip, r1, r2
 800a278:	4604      	mov	r4, r0
 800a27a:	2301      	movs	r3, #1
 800a27c:	e7f0      	b.n	800a260 <_vfiprintf_r+0x1bc>
 800a27e:	ab03      	add	r3, sp, #12
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	462a      	mov	r2, r5
 800a284:	4b12      	ldr	r3, [pc, #72]	; (800a2d0 <_vfiprintf_r+0x22c>)
 800a286:	a904      	add	r1, sp, #16
 800a288:	4630      	mov	r0, r6
 800a28a:	f7fc fe77 	bl	8006f7c <_printf_float>
 800a28e:	4607      	mov	r7, r0
 800a290:	1c78      	adds	r0, r7, #1
 800a292:	d1d6      	bne.n	800a242 <_vfiprintf_r+0x19e>
 800a294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a296:	07d9      	lsls	r1, r3, #31
 800a298:	d405      	bmi.n	800a2a6 <_vfiprintf_r+0x202>
 800a29a:	89ab      	ldrh	r3, [r5, #12]
 800a29c:	059a      	lsls	r2, r3, #22
 800a29e:	d402      	bmi.n	800a2a6 <_vfiprintf_r+0x202>
 800a2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2a2:	f7fd fc87 	bl	8007bb4 <__retarget_lock_release_recursive>
 800a2a6:	89ab      	ldrh	r3, [r5, #12]
 800a2a8:	065b      	lsls	r3, r3, #25
 800a2aa:	f53f af1d 	bmi.w	800a0e8 <_vfiprintf_r+0x44>
 800a2ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2b0:	e71c      	b.n	800a0ec <_vfiprintf_r+0x48>
 800a2b2:	ab03      	add	r3, sp, #12
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <_vfiprintf_r+0x22c>)
 800a2ba:	a904      	add	r1, sp, #16
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7fd f901 	bl	80074c4 <_printf_i>
 800a2c2:	e7e4      	b.n	800a28e <_vfiprintf_r+0x1ea>
 800a2c4:	0800addc 	.word	0x0800addc
 800a2c8:	0800ade6 	.word	0x0800ade6
 800a2cc:	08006f7d 	.word	0x08006f7d
 800a2d0:	0800a081 	.word	0x0800a081
 800a2d4:	0800ade2 	.word	0x0800ade2

0800a2d8 <__swbuf_r>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	460e      	mov	r6, r1
 800a2dc:	4614      	mov	r4, r2
 800a2de:	4605      	mov	r5, r0
 800a2e0:	b118      	cbz	r0, 800a2ea <__swbuf_r+0x12>
 800a2e2:	6a03      	ldr	r3, [r0, #32]
 800a2e4:	b90b      	cbnz	r3, 800a2ea <__swbuf_r+0x12>
 800a2e6:	f7fd fa9b 	bl	8007820 <__sinit>
 800a2ea:	69a3      	ldr	r3, [r4, #24]
 800a2ec:	60a3      	str	r3, [r4, #8]
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	071a      	lsls	r2, r3, #28
 800a2f2:	d525      	bpl.n	800a340 <__swbuf_r+0x68>
 800a2f4:	6923      	ldr	r3, [r4, #16]
 800a2f6:	b31b      	cbz	r3, 800a340 <__swbuf_r+0x68>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	6922      	ldr	r2, [r4, #16]
 800a2fc:	1a98      	subs	r0, r3, r2
 800a2fe:	6963      	ldr	r3, [r4, #20]
 800a300:	b2f6      	uxtb	r6, r6
 800a302:	4283      	cmp	r3, r0
 800a304:	4637      	mov	r7, r6
 800a306:	dc04      	bgt.n	800a312 <__swbuf_r+0x3a>
 800a308:	4621      	mov	r1, r4
 800a30a:	4628      	mov	r0, r5
 800a30c:	f7ff fc58 	bl	8009bc0 <_fflush_r>
 800a310:	b9e0      	cbnz	r0, 800a34c <__swbuf_r+0x74>
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	3b01      	subs	r3, #1
 800a316:	60a3      	str	r3, [r4, #8]
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	6022      	str	r2, [r4, #0]
 800a31e:	701e      	strb	r6, [r3, #0]
 800a320:	6962      	ldr	r2, [r4, #20]
 800a322:	1c43      	adds	r3, r0, #1
 800a324:	429a      	cmp	r2, r3
 800a326:	d004      	beq.n	800a332 <__swbuf_r+0x5a>
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	07db      	lsls	r3, r3, #31
 800a32c:	d506      	bpl.n	800a33c <__swbuf_r+0x64>
 800a32e:	2e0a      	cmp	r6, #10
 800a330:	d104      	bne.n	800a33c <__swbuf_r+0x64>
 800a332:	4621      	mov	r1, r4
 800a334:	4628      	mov	r0, r5
 800a336:	f7ff fc43 	bl	8009bc0 <_fflush_r>
 800a33a:	b938      	cbnz	r0, 800a34c <__swbuf_r+0x74>
 800a33c:	4638      	mov	r0, r7
 800a33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a340:	4621      	mov	r1, r4
 800a342:	4628      	mov	r0, r5
 800a344:	f000 f806 	bl	800a354 <__swsetup_r>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d0d5      	beq.n	800a2f8 <__swbuf_r+0x20>
 800a34c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a350:	e7f4      	b.n	800a33c <__swbuf_r+0x64>
	...

0800a354 <__swsetup_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4b2a      	ldr	r3, [pc, #168]	; (800a400 <__swsetup_r+0xac>)
 800a358:	4605      	mov	r5, r0
 800a35a:	6818      	ldr	r0, [r3, #0]
 800a35c:	460c      	mov	r4, r1
 800a35e:	b118      	cbz	r0, 800a368 <__swsetup_r+0x14>
 800a360:	6a03      	ldr	r3, [r0, #32]
 800a362:	b90b      	cbnz	r3, 800a368 <__swsetup_r+0x14>
 800a364:	f7fd fa5c 	bl	8007820 <__sinit>
 800a368:	89a3      	ldrh	r3, [r4, #12]
 800a36a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a36e:	0718      	lsls	r0, r3, #28
 800a370:	d422      	bmi.n	800a3b8 <__swsetup_r+0x64>
 800a372:	06d9      	lsls	r1, r3, #27
 800a374:	d407      	bmi.n	800a386 <__swsetup_r+0x32>
 800a376:	2309      	movs	r3, #9
 800a378:	602b      	str	r3, [r5, #0]
 800a37a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a37e:	81a3      	strh	r3, [r4, #12]
 800a380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a384:	e034      	b.n	800a3f0 <__swsetup_r+0x9c>
 800a386:	0758      	lsls	r0, r3, #29
 800a388:	d512      	bpl.n	800a3b0 <__swsetup_r+0x5c>
 800a38a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a38c:	b141      	cbz	r1, 800a3a0 <__swsetup_r+0x4c>
 800a38e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a392:	4299      	cmp	r1, r3
 800a394:	d002      	beq.n	800a39c <__swsetup_r+0x48>
 800a396:	4628      	mov	r0, r5
 800a398:	f7fe fa98 	bl	80088cc <_free_r>
 800a39c:	2300      	movs	r3, #0
 800a39e:	6363      	str	r3, [r4, #52]	; 0x34
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3a6:	81a3      	strh	r3, [r4, #12]
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	6063      	str	r3, [r4, #4]
 800a3ac:	6923      	ldr	r3, [r4, #16]
 800a3ae:	6023      	str	r3, [r4, #0]
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	f043 0308 	orr.w	r3, r3, #8
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	6923      	ldr	r3, [r4, #16]
 800a3ba:	b94b      	cbnz	r3, 800a3d0 <__swsetup_r+0x7c>
 800a3bc:	89a3      	ldrh	r3, [r4, #12]
 800a3be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c6:	d003      	beq.n	800a3d0 <__swsetup_r+0x7c>
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 f884 	bl	800a4d8 <__smakebuf_r>
 800a3d0:	89a0      	ldrh	r0, [r4, #12]
 800a3d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3d6:	f010 0301 	ands.w	r3, r0, #1
 800a3da:	d00a      	beq.n	800a3f2 <__swsetup_r+0x9e>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60a3      	str	r3, [r4, #8]
 800a3e0:	6963      	ldr	r3, [r4, #20]
 800a3e2:	425b      	negs	r3, r3
 800a3e4:	61a3      	str	r3, [r4, #24]
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	b943      	cbnz	r3, 800a3fc <__swsetup_r+0xa8>
 800a3ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3ee:	d1c4      	bne.n	800a37a <__swsetup_r+0x26>
 800a3f0:	bd38      	pop	{r3, r4, r5, pc}
 800a3f2:	0781      	lsls	r1, r0, #30
 800a3f4:	bf58      	it	pl
 800a3f6:	6963      	ldrpl	r3, [r4, #20]
 800a3f8:	60a3      	str	r3, [r4, #8]
 800a3fa:	e7f4      	b.n	800a3e6 <__swsetup_r+0x92>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e7f7      	b.n	800a3f0 <__swsetup_r+0x9c>
 800a400:	20000150 	.word	0x20000150

0800a404 <_raise_r>:
 800a404:	291f      	cmp	r1, #31
 800a406:	b538      	push	{r3, r4, r5, lr}
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	d904      	bls.n	800a418 <_raise_r+0x14>
 800a40e:	2316      	movs	r3, #22
 800a410:	6003      	str	r3, [r0, #0]
 800a412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a41a:	b112      	cbz	r2, 800a422 <_raise_r+0x1e>
 800a41c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a420:	b94b      	cbnz	r3, 800a436 <_raise_r+0x32>
 800a422:	4620      	mov	r0, r4
 800a424:	f000 f830 	bl	800a488 <_getpid_r>
 800a428:	462a      	mov	r2, r5
 800a42a:	4601      	mov	r1, r0
 800a42c:	4620      	mov	r0, r4
 800a42e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a432:	f000 b817 	b.w	800a464 <_kill_r>
 800a436:	2b01      	cmp	r3, #1
 800a438:	d00a      	beq.n	800a450 <_raise_r+0x4c>
 800a43a:	1c59      	adds	r1, r3, #1
 800a43c:	d103      	bne.n	800a446 <_raise_r+0x42>
 800a43e:	2316      	movs	r3, #22
 800a440:	6003      	str	r3, [r0, #0]
 800a442:	2001      	movs	r0, #1
 800a444:	e7e7      	b.n	800a416 <_raise_r+0x12>
 800a446:	2400      	movs	r4, #0
 800a448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a44c:	4628      	mov	r0, r5
 800a44e:	4798      	blx	r3
 800a450:	2000      	movs	r0, #0
 800a452:	e7e0      	b.n	800a416 <_raise_r+0x12>

0800a454 <raise>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <raise+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f7ff bfd3 	b.w	800a404 <_raise_r>
 800a45e:	bf00      	nop
 800a460:	20000150 	.word	0x20000150

0800a464 <_kill_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4d07      	ldr	r5, [pc, #28]	; (800a484 <_kill_r+0x20>)
 800a468:	2300      	movs	r3, #0
 800a46a:	4604      	mov	r4, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	4611      	mov	r1, r2
 800a470:	602b      	str	r3, [r5, #0]
 800a472:	f7f6 ff7d 	bl	8001370 <_kill>
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	d102      	bne.n	800a480 <_kill_r+0x1c>
 800a47a:	682b      	ldr	r3, [r5, #0]
 800a47c:	b103      	cbz	r3, 800a480 <_kill_r+0x1c>
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	bd38      	pop	{r3, r4, r5, pc}
 800a482:	bf00      	nop
 800a484:	20002730 	.word	0x20002730

0800a488 <_getpid_r>:
 800a488:	f7f6 bf70 	b.w	800136c <_getpid>

0800a48c <__swhatbuf_r>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	460c      	mov	r4, r1
 800a490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a494:	2900      	cmp	r1, #0
 800a496:	b096      	sub	sp, #88	; 0x58
 800a498:	4615      	mov	r5, r2
 800a49a:	461e      	mov	r6, r3
 800a49c:	da0d      	bge.n	800a4ba <__swhatbuf_r+0x2e>
 800a49e:	89a3      	ldrh	r3, [r4, #12]
 800a4a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a4a4:	f04f 0100 	mov.w	r1, #0
 800a4a8:	bf0c      	ite	eq
 800a4aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a4ae:	2340      	movne	r3, #64	; 0x40
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	6031      	str	r1, [r6, #0]
 800a4b4:	602b      	str	r3, [r5, #0]
 800a4b6:	b016      	add	sp, #88	; 0x58
 800a4b8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ba:	466a      	mov	r2, sp
 800a4bc:	f000 f848 	bl	800a550 <_fstat_r>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	dbec      	blt.n	800a49e <__swhatbuf_r+0x12>
 800a4c4:	9901      	ldr	r1, [sp, #4]
 800a4c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a4ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a4ce:	4259      	negs	r1, r3
 800a4d0:	4159      	adcs	r1, r3
 800a4d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4d6:	e7eb      	b.n	800a4b0 <__swhatbuf_r+0x24>

0800a4d8 <__smakebuf_r>:
 800a4d8:	898b      	ldrh	r3, [r1, #12]
 800a4da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4dc:	079d      	lsls	r5, r3, #30
 800a4de:	4606      	mov	r6, r0
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	d507      	bpl.n	800a4f4 <__smakebuf_r+0x1c>
 800a4e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	6163      	str	r3, [r4, #20]
 800a4f0:	b002      	add	sp, #8
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}
 800a4f4:	ab01      	add	r3, sp, #4
 800a4f6:	466a      	mov	r2, sp
 800a4f8:	f7ff ffc8 	bl	800a48c <__swhatbuf_r>
 800a4fc:	9900      	ldr	r1, [sp, #0]
 800a4fe:	4605      	mov	r5, r0
 800a500:	4630      	mov	r0, r6
 800a502:	f7fe fa57 	bl	80089b4 <_malloc_r>
 800a506:	b948      	cbnz	r0, 800a51c <__smakebuf_r+0x44>
 800a508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a50c:	059a      	lsls	r2, r3, #22
 800a50e:	d4ef      	bmi.n	800a4f0 <__smakebuf_r+0x18>
 800a510:	f023 0303 	bic.w	r3, r3, #3
 800a514:	f043 0302 	orr.w	r3, r3, #2
 800a518:	81a3      	strh	r3, [r4, #12]
 800a51a:	e7e3      	b.n	800a4e4 <__smakebuf_r+0xc>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	6020      	str	r0, [r4, #0]
 800a520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a524:	81a3      	strh	r3, [r4, #12]
 800a526:	9b00      	ldr	r3, [sp, #0]
 800a528:	6163      	str	r3, [r4, #20]
 800a52a:	9b01      	ldr	r3, [sp, #4]
 800a52c:	6120      	str	r0, [r4, #16]
 800a52e:	b15b      	cbz	r3, 800a548 <__smakebuf_r+0x70>
 800a530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a534:	4630      	mov	r0, r6
 800a536:	f000 f81d 	bl	800a574 <_isatty_r>
 800a53a:	b128      	cbz	r0, 800a548 <__smakebuf_r+0x70>
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	f023 0303 	bic.w	r3, r3, #3
 800a542:	f043 0301 	orr.w	r3, r3, #1
 800a546:	81a3      	strh	r3, [r4, #12]
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	431d      	orrs	r5, r3
 800a54c:	81a5      	strh	r5, [r4, #12]
 800a54e:	e7cf      	b.n	800a4f0 <__smakebuf_r+0x18>

0800a550 <_fstat_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d07      	ldr	r5, [pc, #28]	; (800a570 <_fstat_r+0x20>)
 800a554:	2300      	movs	r3, #0
 800a556:	4604      	mov	r4, r0
 800a558:	4608      	mov	r0, r1
 800a55a:	4611      	mov	r1, r2
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	f7f6 ff35 	bl	80013cc <_fstat>
 800a562:	1c43      	adds	r3, r0, #1
 800a564:	d102      	bne.n	800a56c <_fstat_r+0x1c>
 800a566:	682b      	ldr	r3, [r5, #0]
 800a568:	b103      	cbz	r3, 800a56c <_fstat_r+0x1c>
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	bf00      	nop
 800a570:	20002730 	.word	0x20002730

0800a574 <_isatty_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d06      	ldr	r5, [pc, #24]	; (800a590 <_isatty_r+0x1c>)
 800a578:	2300      	movs	r3, #0
 800a57a:	4604      	mov	r4, r0
 800a57c:	4608      	mov	r0, r1
 800a57e:	602b      	str	r3, [r5, #0]
 800a580:	f7f6 ff2a 	bl	80013d8 <_isatty>
 800a584:	1c43      	adds	r3, r0, #1
 800a586:	d102      	bne.n	800a58e <_isatty_r+0x1a>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	b103      	cbz	r3, 800a58e <_isatty_r+0x1a>
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	20002730 	.word	0x20002730

0800a594 <_init>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	bf00      	nop
 800a598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59a:	bc08      	pop	{r3}
 800a59c:	469e      	mov	lr, r3
 800a59e:	4770      	bx	lr

0800a5a0 <_fini>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	bf00      	nop
 800a5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a6:	bc08      	pop	{r3}
 800a5a8:	469e      	mov	lr, r3
 800a5aa:	4770      	bx	lr
